define(function() {
    //
    if (window.fixFlash == null) {
        window.fixFlash = function() {
            var d = window.__flash__removeCallback;
            if (d != null && d.il == null) {
                window.__flash__removeCallback = function(g, h) {
                    try {
                        if (g) {
                            g[h] = null;
                        }
                    } catch (j) {}
                };
                window.__flash__removeCallback.il = true;
                d = null;
            }
        };
        window.fixFlash();
        window.setInterval(window.fixFlash, 10);
    }

    function __unloadFlash() {
        var l = document.getElementsByTagName("object");
        if (l && l.length) {
            var g = window.__flash__removeCallback;
            if (g == null) {
                window.__flash__removeCallback = function(m, n) {
                    try {
                        if (m) {
                            m[n] = null;
                        }
                    } catch (o) {}
                };
            }
            for (var d = 0; d < l.length; d++) {
                var j = l[d];
                if (j) {
                    var h = j.getElementsByTagName("object");
                    if (h && h.length) {
                        j = null;
                        j = h[0];
                    }
                    h = null;
                }
                if (j && j.parentElement) {
                    if (j.parentElement.tagName != "OBJECT") {
                        j.parentElement.removeChild(j);
                    } else {
                        if (j.parentElement.parentElement) {
                            j.parentElement.parentElement.removeChild(j.parentElement);
                        }
                    }
                }
                j = null;
            }
            l = null;
        }
    }
    if (window.attachEvent) {
        window.attachEvent("unload", __unloadFlash);
    } else {
        window.addEventListener("unload", __unloadFlash);
    }
    var LEAPBrowser = {};
    LEAPBrowser.name = navigator.userAgent.toLowerCase();
    LEAPBrowser.isIE = ((LEAPBrowser.name.indexOf("msie") != -1) || LEAPBrowser.name.indexOf("rv:") != -1) && (LEAPBrowser.name.indexOf("opera") == -1) && (LEAPBrowser.name.indexOf("webtv") == -1);
    LEAPBrowser.isGecko = (LEAPBrowser.name.indexOf("gecko") != -1);
    LEAPBrowser.isKonqueror = (LEAPBrowser.name.indexOf("konqueror") != -1);
    LEAPBrowser.isChrome = (LEAPBrowser.name.indexOf("chrome") != -1);
    LEAPBrowser.isSafari = (!LEAPBrowser.isChrome && LEAPBrowser.name.indexOf("safari") != -1);
    LEAPBrowser.isWebKit = (!LEAPBrowser.isIE && LEAPBrowser.name.toLowerCase().indexOf("applewebkit") != -1);
    LEAPBrowser.isAndroid = (!LEAPBrowser.isIE && LEAPBrowser.name.toLowerCase().indexOf("android") != -1);
    LEAPBrowser.IEVersion = null;
    if (LEAPBrowser.isIE) {
        var _r = navigator.appVersion.match(/MSIE (\d+\.\d+)/, "");
        if (_r) {
            try {
                LEAPBrowser.IEVersion = Number(_r[1]);
            } catch (E) {}
        } else {
            if (LEAPBrowser.name.indexOf("rv:") > -1) {
                var _r2 = navigator.appVersion.match(/rv:(\d+\.\d+)/, "");
                if (_r2) {
                    try {
                        LEAPBrowser.IEVersion = Number(_r2[1]);
                    } catch (E) {}
                }
            }
        }
    }
    LEAPBrowser.notSupportBindEvent = LEAPBrowser.isWebKit || (LEAPBrowser.IEVersion && LEAPBrowser.IEVersion >= 11);
    LEAPBrowser.cssmode = null;
    var browserStr = "OTHER";
    if (LEAPBrowser.isIE) {
        browserStr = "IE " + LEAPBrowser.IEVersion;
    }
    if (LEAPBrowser.isChrome) {
        browserStr = "CHROME";
    }
    if (LEAPBrowser.isSafari) {
        browserStr = "SAFAIR";
    }
    if (document && document.documentElement) {
        if (LEAPBrowser.IEVersion) {
            document.documentElement.setAttribute("lb-ieversion", LEAPBrowser.IEVersion);
        }
        document.documentElement.setAttribute("lb-agent", browserStr);
        if (LEAPBrowser.isIE) {
            if (LEAPBrowser.IEVersion >= 10) {
                document.documentElement.setAttribute("lb-ie-gt9", "1");
            } else {
                document.documentElement.setAttribute("lb-ie-lt10", "1");
            }
            document.documentElement.setAttribute("lb-kernel", "IE");
        }
        if (LEAPBrowser.isWebKit) {
            document.documentElement.setAttribute("lb-kernel", "WEBKIT");
        }
        if (document.compatMode) {
            document.documentElement.setAttribute("lb-compat", document.compatMode);
            LEAPBrowser.cssmode = 0;
            if (document.compatMode == "CSS1Compat") {
                LEAPBrowser.cssmode = 1;
            }
            document.documentElement.setAttribute("lb-cssmode", LEAPBrowser.cssmode);
        }
        if (document.documentMode) {
            document.documentElement.setAttribute("lb-documentMode", document.documentMode);
            LEAPBrowser.documentMode = document.documentMode;
        }
        if (LEAPBrowser.isIE && LEAPBrowser.IEVersion == 6) {
            document.documentElement.setAttribute("lb-documentMode", 6);
            LEAPBrowser.documentMode = 6;
        }
    }
    LEAPBrowser.style_old = LEAPBrowser.isIE && LEAPBrowser.IEVersion < 10;
    var LEAPLG = {};
    LEAPLG.minH = 15;
    LEAPLG.to_sh = 30;
    LEAPLG._ghoh = function(d) {
        if (LEAPBrowser.IEVersion) {
            return LEAPLG._ghoh2(d.currentStyle.borderTopWidth) + LEAPLG._ghoh2(d.currentStyle.borderBottomWidth) + LEAPLG._ghoh2(d.currentStyle.paddingBottom) + LEAPLG._ghoh2(d.currentStyle.paddingTop);
        }
        return 0;
    };
    LEAPLG._ghoh2 = function(d) {
        if (d && d.indexOf("px") > -1) {
            return Number(d.substring(0, d.indexOf("px")));
        }
        return 0;
    };
    LEAPLG._gh = function(d) {
        try {
            if (!d) {
                return 0;
            } else {
                if (LEAPBrowser.IEVersion && LEAPBrowser.IEVersion < 10) {
                    return d.scrollHeight > d.offsetHeight ? d.scrollHeight : d.offsetHeight;
                } else {
                    return d.offsetHeight;
                }
            }
        } finally {
            d = null;
        }
    };
    LEAPLG._sh = function(j) {
        if (!j) {
            return false;
        }
        try {
            if ((LEAPBrowser.IEVersion && LEAPBrowser.IEVersion >= 10) || LEAPBrowser.isWebKit) {
                var d = j.getAttribute("_sh_");
                if (d) {
                    if (j.offsetHeight == 0) {
                        j.style.height = d;
                        return true;
                    } else {
                        if (d.indexOf("px") > -1) {
                            d = d.substring(0, d.length - 2);
                            if (d > j.offsetHeight) {
                                j.style.height = d + "px";
                                return true;
                            }
                        }
                    }
                    return false;
                }
                var g = j.style.height.toLowerCase();
                if (g.indexOf("px") > -1 || g.indexOf("%") >= 1) {
                    j.setAttribute("_sh_", g);
                    j.style.height = "auto";
                    return true;
                }
            }
        } finally {
            j = null;
        }
        return false;
    };
    LEAPLG.table_scrl = function(d, n) {
        try {
            if (!d) {
                if (!event) {
                    return;
                }
                d = event.srcElement;
            }
            if (!d) {
                return;
            }
            var r = d.scrollTop;
            if (n) {
                r = 0;
            }
            var q = d.children[0];
            if (q && q.tagName == "TABLE") {
                var m = q.getAttribute("table_scrtarget");
                if (m) {
                    if (m == "1") {
                        q.style.top = r + "px";
                    } else {
                        if (m == "2") {}
                    }
                } else {
                    var v = q.tHead.rows;
                    if (v && v.length > 0) {
                        var h = v.length;
                        var g = r;
                        for (var j = 0; j < h; j++) {
                            var u = v[j];
                            u.style.top = g + "px";
                            u = null;
                        }
                    }
                    v = null;
                }
            }
            q = d = null;
        } catch (o) {}
    };
    LEAPLG.bt = function(l, d, o) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (!d.parentElement) {
            return;
        }
        if (l != null) {
            var p = function() {
                LEAPLG.bt(null, d);
                d = null;
            };
            setTimeout(p, l);
            return;
        }
        if (LEAPLG._sh(d.children.item(1))) {
            var p = function() {
                LEAPLG.bt(null, d);
                d = null;
            };
            setTimeout(p, LEAPLG.to_sh);
            return;
        }
        var u = d.parentElement.className;
        if (u && u.indexOf("lg_p2_") == -1 && !d.parentElement.style.height) {
            d.parentElement.style.height = "100%";
            setTimeout(function() {
                LEAPLG.bt(null, d);
                d = null;
            }, 100);
            return;
        }
        var m = LEAPLG._gh(d.children.item(1));
        var g = d.children.item(0);
        if (g) {
            if (LEAPBrowser.isIE && LEAPBrowser.IEVersion <= 10) {
                if (d.clientHeight == 0) {
                    if (o == null) {
                        o = 1;
                    } else {
                        o++;
                    }
                    if (o < 10) {
                        setTimeout(function() {
                            LEAPLG.bt(null, d, o);
                            d = null;
                        }, 10);
                        return;
                    }
                }
                if (d.clientHeight == 0 && LEAPBrowser.isIE && LEAPBrowser.IEVersion == 9) {
                    if (o == null) {
                        o = 1;
                    } else {
                        o++;
                    }
                    var j = 0;
                    var q = d;
                    while (j < 90) {
                        q = q.parentElement;
                        if (q.tagName == "BODY") {
                            break;
                        }
                        if (q.style.display == "none") {
                            setTimeout(function() {
                                LEAPLG.bt(null, d, o);
                                d = null;
                            }, 2000);
                            return;
                        }
                    }
                }
                var r = d.clientHeight - m;
                if (r < LEAPLG.minH) {
                    r = LEAPLG.minH;
                }
                g.style.height = (r - LEAPLG._ghoh(g)) + "px";
                if (LEAPBrowser.IEVersion == 10) {
                    g.style.bottom = m + "px";
                }
            }
            if (!LEAPBrowser.isIE || (LEAPBrowser.IEVersion && LEAPBrowser.IEVersion > 10)) {
                g.style.height = "auto";
                g.style.position = "absolute";
                g.style.bottom = m + "px";
            }
        }
        g = d = null;
    };
    LEAPLG.bt_layout = function(g, h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        if (!h) {
            return;
        }
        if (LEAPBrowser.isIE && g != null) {
            var d = function() {
                LEAPLG.bt_layout(null, h);
                h = null;
            };
            setTimeout(d, g);
            return;
        }
        LEAPLG.bt(null, h.parentElement);
        h = null;
    };
    LEAPLG.bt_img = function(g, h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        if (!h) {
            return;
        }
        if (LEAPBrowser.isIE && g != null) {
            var d = function() {
                LEAPLG.bt_img(null, h);
                h = null;
            };
            setTimeout(d, g);
            return;
        }
        LEAPLG.bt(null, h.parentElement);
        if (h.parentElement) {
            LEAPLGRS.setup(h.parentElement, "bt_img");
            h.parentElement.removeChild(h);
        }
        h = null;
    };
    LEAPLG.tb = function(m, d, p) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (!d.parentElement) {
            return;
        }
        if (m != null) {
            var q = function() {
                LEAPLG.tb(null, d);
                d = null;
            };
            setTimeout(q, m);
            return;
        }
        if (LEAPLG._sh(d.children.item(0))) {
            var q = function() {
                LEAPLG.tb(null, d);
                d = null;
            };
            setTimeout(q, LEAPLG.to_sh);
            return;
        }
        var v = d.parentElement.className;
        if (v && v.indexOf("lg_p2_") == -1 && !d.parentElement.style.height) {
            d.parentElement.style.height = "100%";
            setTimeout(function() {
                LEAPLG.tb(null, d);
                d = null;
            }, 100);
            return;
        }
        var g = d.children.item(1);
        var o = LEAPLG._gh(d.children.item(0));
        if (g) {
            var l = g.getAttribute("layoutpath");
            if (l) {
                l *= 1;
            } else {
                l = "";
            }
            if (LEAPBrowser.isIE && LEAPBrowser.IEVersion <= 10) {
                if (d.clientHeight == 0) {
                    if (p == null) {
                        p = 1;
                    } else {
                        p++;
                    }
                    if (p < 10) {
                        setTimeout(function() {
                            LEAPLG.tb(null, d, p);
                            d = null;
                        }, 10);
                        return;
                    }
                }
                if (d.clientHeight == 0 && LEAPBrowser.isIE && LEAPBrowser.IEVersion == 9) {
                    if (p == null) {
                        p = 1;
                    } else {
                        p++;
                    }
                    var j = 0;
                    var r = d;
                    while (j < 90) {
                        r = r.parentElement;
                        if (r.tagName == "BODY") {
                            break;
                        }
                        if (r.style.display == "none") {
                            setTimeout(function() {
                                LEAPLG.tb(null, d, p);
                                d = null;
                            }, 2000);
                            return;
                        }
                    }
                }
                var u = d.clientHeight - o;
                if (u < LEAPLG.minH) {
                    u = LEAPLG.minH;
                }
                if (LEAPBrowser.IEVersion == 10) {
                    g.style.top = (o + l) + "px";
                } else {
                    if (LEAPBrowser.IEVersion == 7) {
                        g.style.marginTop = l;
                        g.style.height = (u - LEAPLG._ghoh(g) - l) + "px";
                    } else {
                        g.style.top = "auto";
                        g.style.height = (u - LEAPLG._ghoh(g)) + "px";
                    }
                }
            } else {
                g.style.height = "auto";
                g.style.top = (o + l) + "px";
            }
        }
        g = d = null;
    };
    LEAPLG.tb_layout = function(g, h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        if (!h) {
            return;
        }
        if (LEAPBrowser.isIE && g != null) {
            var d = function() {
                LEAPLG.tb_layout(null, h);
                h = null;
            };
            setTimeout(d, g);
            return;
        }
        LEAPLG.tb(null, h.parentElement);
        h = null;
    };
    LEAPLG.tb_img = function(g, h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        if (!h) {
            return;
        }
        if (LEAPBrowser.isIE && g != null) {
            var d = function() {
                LEAPLG.tb_img(null, h);
                h = null;
            };
            setTimeout(d, g);
            return;
        }
        LEAPLG.tb(null, h.parentElement);
        if (h.parentElement) {
            LEAPLGRS.setup(h.parentElement, "tb_img");
            h.parentElement.removeChild(h);
        }
        h = null;
    };
    LEAPLG.bct = function(l, d, m) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (!d.parentElement) {
            return;
        }
        if (LEAPBrowser.isIE && l != null) {
            var p = function() {
                LEAPLG.bct(null, d);
                d = null;
            };
            setTimeout(p, l);
            return;
        }
        var u = d.parentElement.className;
        if (u && u.indexOf("lg_p2_") == -1 && !d.parentElement.style.height) {
            d.parentElement.style.height = "100%";
            setTimeout(function() {
                LEAPLG.bct(null, d);
                d = null;
            }, 100);
            return;
        }
        if (LEAPLG._sh(d.children.item(0)) || LEAPLG._sh(d.children.item(2))) {
            var p = function() {
                LEAPLG.bct(null, d);
                d = null;
            };
            setTimeout(p, LEAPLG.to_sh);
            return;
        }
        var o = LEAPLG._gh(d.children.item(0));
        var g = LEAPLG._gh(d.children.item(2));
        var h = d.children.item(1);
        if (d.clientHeight == 0) {
            if (m == null) {
                m = 1;
            } else {
                m++;
            }
            if (m < 10) {
                setTimeout(function() {
                    LEAPLG.bct(null, d, m);
                    d = null;
                }, 10);
                return;
            }
        }
        if (d.clientHeight == 0 && LEAPBrowser.isIE && LEAPBrowser.IEVersion == 9) {
            if (m == null) {
                m = 1;
            } else {
                m++;
            }
            var j = 0;
            var q = d;
            while (j < 90) {
                q = q.parentElement;
                if (q.tagName == "BODY") {
                    break;
                }
                if (q.style.display == "none") {
                    setTimeout(function() {
                        LEAPLG.bct(null, d, m);
                        d = null;
                    }, 2000);
                    return;
                }
            }
        }
        var r = d.clientHeight - o - g;
        if (h) {
            if (LEAPBrowser.isIE && LEAPBrowser.IEVersion <= 10) {
                if (r < LEAPLG.minH) {
                    r = LEAPLG.minH;
                }
                h.style.height = r - LEAPLG._ghoh(h) + "px";
                if (LEAPBrowser.IEVersion == 10) {
                    h.style.top = o + "px";
                    h.style.bottom = g + "px";
                }
            } else {
                h.style.height = "auto";
                h.style.top = o + "px";
                h.style.bottom = g + "px";
            }
        }
        h = d = null;
    };
    LEAPLG.bct_layout = function(g, h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        if (!h) {
            return;
        }
        if (LEAPBrowser.isIE && g != null) {
            var d = function() {
                LEAPLG.bct_layout(null, h);
                h = null;
            };
            setTimeout(d, g);
            return;
        }
        LEAPLG.bct(null, h.parentElement);
        h = null;
    };
    LEAPLG.bct_img = function(g, h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        if (!h) {
            return;
        }
        if (LEAPBrowser.isIE && g != null) {
            var d = function() {
                LEAPLG.bct_img(null, h);
                h = null;
            };
            setTimeout(d, g);
            return;
        }
        LEAPLG.bct(null, h.parentElement);
        if (h.parentElement) {
            LEAPLGRS.setup(h.parentElement, "bct_img");
            h.parentElement.removeChild(h);
        }
        h = null;
    };
    LEAPLG.setHeight = function(d, o) {
        if (!d || o == null) {
            return;
        }
        d.style.height = o;
        if (!LEAP.isIE) {
            return;
        }
        try {
            var p = d.className;
            if (p) {
                var q = p.split(" ");
                var h = q.length;
                var g = null;
                for (var j = 0; j < h; j++) {
                    var m = q[j];
                    if (!m) {
                        continue;
                    }
                    if (m.indexOf("lg_p2_") == 0) {
                        g = m;
                    }
                }
                if (g == "lg_p2_tb_top") {
                    LEAPLG.tb_layout(null, d);
                } else {
                    if (g == "lg_p2_tb") {
                        LEAPLG.tb(null, d);
                    } else {
                        if (g == "lg_p2_bt_bottom") {
                            LEAPLG.bt_layout(null, d);
                        } else {
                            if (g == "lg_p2_bt") {
                                LEAPLG.bt(null, d);
                            } else {
                                if (g == "lg_p2_bct_top" || g == "lg_p2_bct_bottom") {
                                    LEAPLG.bct_layout(null, d);
                                } else {
                                    if (g == "lg_p2_bct_top") {
                                        LEAPLG.bct(null, d);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (n) {}
        finaly;
        d = null;
    };
    var __s__1 = "\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e";
    var __s__2 = "\u0075\u0072\u006c";
    var __s__3 = window[__s__1];
    var __s__5 = "\u0068\u0072\u0065\u0066";
    var _safeprop = {
        s_e: eval,
        s_wd: "\u0077\u0069\u006e\u0064\u006f\u0077",
        s_l: "\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e",
        s_h: "\u0068\u0072\u0065\u0066",
        s_d: "\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074",
        s_dih: "\u0069\u006e\u006e\u0065\u0072\u0048\u0054\u004d\u004c",
        s_dit: "\u0069\u006e\u006e\u0065\u0072\u0054\u0065\u0078\u0074",
        s_w: "\u0077\u0072\u0069\u0074\u0065",
        getWin: function() {
            return this.s_e("(" + this.s_wd + ")");
        },
        getDoc: function() {
            return this.getWin()[this.s_d];
        },
        write: function(d) {
            this.getDoc()[this.s_w](d);
        },
        getHref: function() {
            return this.getWin()[this.s_l][this.s_h];
        },
        setHref: function(d) {
            this.getWin()[this.s_l][this.s_h] = d;
        },
        setHtml: function(d, g) {
            try {
                d[this.s_dih] = g;
            } finally {
                d = null;
            }
        },
        setText: function(d, g) {
            try {
                d[this.s_dit] = g;
            } finally {
                d = null;
            }
        },
        random: function() {
            return this.s_e("(\u004d\u0061\u0074\u0068['\u0072\u0061\u006e\u0064\u006f\u006d']())");
        }
    };

    function _web_gu(d, j) {
        if (j == null) {
            return d;
        }
        var n = "\u0070\u0061\u0067\u0065";
        var h = d.lastIndexOf("?") > -1 ? d.substring(d.lastIndexOf("?")) : "";
        var m = h.indexOf(n + "=");
        if (h == "") {
            d += "?" + n + "=" + j;
        } else {
            if (m == -1) {
                d += "&" + n + "=" + j;
            } else {
                var l = h.substring(1).split("&");
                for (var g = 0; g < l.length; g++) {
                    if (l[g].indexOf(n + "=") == 0) {
                        l[g] = n + "=" + j;
                        break;
                    }
                }
                d = d.substring(0, d.lastIndexOf("?")) + "?" + l.join("&");
            }
        }
        return d;
    }

    function _webela_o(d) {
        window.open(_web_gu(__s__3[__s__5], d));
    }

    function _webela_g(d) {
        __s__3[__s__5] = _web_gu(__s__3[__s__5], d);
    }

    function _utf8to16(m) {
        var g, j, d, n;
        var l, h;
        g = "";
        d = m.length;
        j = 0;
        while (j < d) {
            n = m.charCodeAt(j++);
            switch (n >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    g += m.charAt(j - 1);
                    break;
                case 12:
                case 13:
                    l = m.charCodeAt(j++);
                    g += String.fromCharCode(((n & 31) << 6) | (l & 63));
                    break;
                case 14:
                    l = m.charCodeAt(j++);
                    h = m.charCodeAt(j++);
                    g += String.fromCharCode(((n & 15) << 12) | ((l & 63) << 6) | ((h & 63) << 0));
                    break;
            }
        }
        return g;
    }

    function base64_2() {
        function l() {
            var n = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
            return n;
        }
        var j = l();
        this.decode = function(x) {
            var u;
            var r;
            var p;
            var n;
            var v = 0;
            var w = x.length;
            var o = d(x);
            var q = 0;
            while (v < w) {
                u = j[(o[v++])];
                if (u == -1) {
                    break;
                }
                r = j[(o[v++])];
                if (r == -1) {
                    break;
                }
                o[(q++)] = (u << 2) | ((r & 48) >> 4);
                p = o[(v++)];
                if (p == 61) {
                    o.length = q;
                    return m(o);
                }
                p = j[(p)];
                if (p == -1) {
                    break;
                }
                o[(q++)] = ((r & 15) << 4) | ((p & 60) >> 2);
                n = o[(v++)];
                if (n == 61) {
                    o.length = q;
                    return m(o);
                }
                n = j[(n)];
                if (n == -1) {
                    break;
                }
                o[(q++)] = ((p & 3) << 6) | n;
            }
            o.length = q;
            return m(o);
        };
        var h = g();

        function g() {
            var o = new Array();
            var p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            for (var n = 0; n < 64; n++) {
                o[n] = p.charCodeAt(n);
            }
            return o;
        }

        function d(r) {
            var q, n, p = [];
            for (var o = 0; o < r.length; o++) {
                q = r.charCodeAt(o);
                n = [];
                do {
                    n.push(q & 255);
                    q = q >> 8;
                } while (q);
                p = p.concat(n.reverse());
            }
            return p;
        }

        function m(p) {
            var n = "";
            for (var o = 0; o < p.length; o++) {
                n += String.fromCharCode(parseInt(p[o]));
            }
            return n;
        }
        this.encode = function(u) {
            u = d(u);
            var o = new Array();
            o.length = (2 + u.length - ((u.length + 2) % 3)) * 4 / 3;
            var p = 0;
            var q = u.length % 3;
            var n = u.length - q;
            var w;
            var v = 0;
            while (p < n) {
                w = u[(p++)] << 16 | u[(p++)] << 8 | u[(p++)];
                o[(v++)] = h[(w >>> 18)];
                o[(v++)] = h[(w >>> 12 & 63)];
                o[(v++)] = h[(w >>> 6 & 63)];
                o[(v++)] = h[(w & 63)];
            }
            if (q == 1) {
                w = u[(p)];
                o[(v++)] = h[(w >>> 2)];
                o[(v++)] = h[((w & 3) << 4)];
                o[(v++)] = 61;
                o[(v++)] = 61;
            } else {
                if (q == 2) {
                    w = u[(p++)] << 8 | u[(p)];
                    o[(v++)] = h[(w >>> 10)];
                    o[(v++)] = h[(w >>> 4 & 63)];
                    o[(v++)] = h[((w & 15) << 2)];
                    o[(v++)] = 61;
                }
            }
            return m(o);
        };
    }
    var ___b64_2 = new base64_2();

    function base64encode(d) {
        return ___b64_2.encode(d);
    }

    function base64decode(d) {
        return ___b64_2.decode(d);
    }
    var _docstr = "document";
    var _ckstr = "cookie";

    function gcook() {
        var g = window[_docstr];
        var d = g[_ckstr];
        return d;
    }

    function scook(d) {
        var g = window[_docstr];
        g[_ckstr] = d;
    }
    String.prototype.replaceall = function(j, d) {
        if (j == null) {
            return this;
        }
        if (d == null) {
            d = "";
        }
        if (j.length == 1 && j == "\\") {
            j = "\\\\";
        }
        try {
            return this.replace(new RegExp(j, "gm"), d);
        } catch (h) {
            if (j == null) {
                return this;
            }
            if (d == null) {
                d = "";
            }
            var g = this;
            str = "";
            while (g.indexOf(j) != -1) {
                k = g.indexOf(j);
                g = g.replace(j, d);
                str += g.substr(0, k + d.length);
                g = g.substr(k + d.length);
            }
            str += g;
            return str;
        }
    };
    var UUID = {
        S4: function() {
            return (((1 + _safeprop.random()) * 65536) | 0).toString(16).substring(1);
        },
        randomUUID: function() {
            return (UUID.S4() + UUID.S4() + "-" + UUID.S4() + "-" + UUID.S4() + "-" + UUID.S4() + "-" + UUID.S4() + UUID.S4() + UUID.S4());
        },
        d: new Date().getTime() + "_" + _safeprop.random().toString().replace(".", "_") + "_",
        c: 0,
        cID: function() {
            ++UUID.c;
            return "cid_" + UUID.d + UUID.c;
        }
    };
    var array = function() {
        this.k = UUID.cID();
        this.keys = {};
    };
    array.prototype.length = 0;
    array.prototype.n = "number";
    array.prototype.b = "boolean";
    array.prototype.s = "string";
    array.prototype.nn = "n_";
    array.prototype.add = function(j) {
        if (j == null) {
            return;
        }
        var g = typeof(j);
        var h = g == this.n || g == this.b || g == this.s;
        var d;
        if (h) {
            d = this.k + this.nn + j;
            if (this.keys[d] != null) {
                return;
            }
        } else {
            d = this.k + this.length;
            if (j[this.k] > -1) {
                return;
            } else {
                j[this.k] = this.length;
            }
        }
        this.keys[d] = j;
        ++this.length;
    };
    array.prototype.getindex = function(d) {
        return this.getValue(this.keys[d]);
    };
    array.prototype.getkey = function(l) {
        if (l == null) {
            return;
        }
        var h = typeof(l);
        var j = h == this.n || h == this.b || h == this.s;
        if (j) {
            var d = this.k + this.nn + l;
            if (this.keys[d] != null) {
                return d;
            }
        } else {
            var g = l[this.k];
            if (g > -1) {
                return this.k + g;
            }
        }
    };
    array.prototype.contains = function(d) {
        return this.getkey(d) != null;
    };
    array.prototype.getvalue = function(d) {
        return this.keys[d];
    };
    array.prototype.remove = function(g) {
        var d = this.getkey(g);
        if (d == null) {
            return;
        }
        delete this.keys[d];
        --this.length;
    };
    array.prototype.clear = function() {
        this.keys = null;
        this.keys = {};
        this.length = 0;
    };
    if (!window.leapdefaultcallservice) {
        window.leapdefaultcallservice = "leap";
    }
    var leapconfig = {
        server: null,
        _rpcurl: null,
        loginHTML: null,
        port: 80,
        host: null,
        portal: "http",
        context: "",
        rpcurl: function() {
            return this._rpcurl;
        },
        resurl: function() {
            return this.server;
        },
        rpcservice: window.leapdefaultcallservice,
        defaultCallService: window.leapdefaultcallservice,
        ReturnJSON: true
    };
    var PublishServerConfig = {
        RPCURL: null
    };
    PublishServerConfig.getURL = function(d) {
        if (d.indexOf("http://") == 0 || d.indexOf("https://") == 0) {
            return d;
        }
        if (this.RPCURL.charAt(this.RPCURL.length - 1) == "/") {
            if (d.charAt(0) == "/") {
                return this.RPCURL + d.substring(1, d.length);
            } else {
                return this.RPCURL + d;
            }
        } else {
            if (d.charAt(0) == "/") {
                return this.RPCURL + d.substring(1, d.length);
            } else {
                return this.RPCURL + "/" + d;
            }
        }
    };
    var leapscripttype = {
        js: 0,
        css: 1,
        template: 2
    };
    var ___logout = function() {
        if (window.event != null && LEAP != null) {
            LEAP.stopEvent(window.event);
        }
        window.history.back();
    };
    var leaprpcclientasyncactivelist = new array();
    var asyncount = 0;
    var leaprpcclient = function() {
        this.URL = leapconfig.rpcurl();
        this.Service = leapconfig.rpcservice;
        this.CallService = leapconfig.defaultCallService;
        this.IsReturnJSON = leapconfig.ReturnJSON;
        var h;
        var d;
        this.isSuccess = null;
        this.lastError = null;
        this.lastErrorCode = null;
        this.lastWarring = null;
        this.extendResult = null;
        this.version = null;
        this.initVersion = null;
        this.ID = "";
        this.sid = null;
        this.setvalidatecoode = function(l) {
            if (!l) {
                return;
            }
            var n = String.fromCharCode(Math.round(Math.round(_safeprop.random() * 100) / (99 / 25)) + 65);
            n += String.fromCharCode(Math.round(Math.round(_safeprop.random() * 100) / (99 / 25)) + 65);
            n += String.fromCharCode(Math.round(Math.round(_safeprop.random() * 100) / (99 / 25)) + 65);
            n += String.fromCharCode(Math.round(Math.round(_safeprop.random() * 100) / (99 / 25)) + 65);
            var m = UUID.randomUUID();
            while (m.indexOf("-") > -1) {
                m = m.replace("-", "");
            }
            m = m.substring(0, 3) + n.charAt(0) + m.substring(4, 32);
            m = m.substring(0, 7) + n.charAt(1) + m.substring(8, 32);
            m = m.substring(0, 11) + n.charAt(2) + m.substring(12, 32);
            m = m.substring(0, 15) + n.charAt(3) + m.substring(16, 32);
            m = m.toLowerCase();
            l.src = leapconfig.server + "logic/va/_" + m + ".jpg";
            l = null;
            return n.toLowerCase();
        };
        this.getVersion = function() {
            if (this.initVersion == null) {
                this.version = window.leapversion;
            }
            return this.version;
        };
        this.getVersionStr = function() {
            var l = this.getVersion();
            if (l == null) {
                l = "";
            } else {
                l = "?gv=" + this.getVersion();
            }
            return l;
        };
        this.getLastWarring = function() {
            return this.lastWarring;
        };
        this.getLastExtendResult = function() {
            return this.extendResult;
        };
        this.setLastExtendResult = function(l) {
            this.extendResult = l;
        };
        this.getLastError = function() {
            var n = this.lastError;
            var l = this.lastErrorCode;
            var o = this.isSuccess;
            this.isSuccess = 1;
            this.lastError = null;
            this.lastErrorCode = null;
            if (n == null && l == null && o == 1) {
                return;
            }
            var m = {
                error: n,
                code: l,
                success: o
            };
            return m;
        };
        this.___buildResult = function(r, q) {
            this.isSuccess = 1;
            this.lastError = null;
            this.lastErrorCode = null;
            if (r == null || r == "" || r == "null") {
                this.isSuccess = 0;
                this.lastError = "request result is null";
                this.lastErrorCode = "-9999";
                return null;
            }
            if (q == null) {
                q = true;
            } else {
                var l = null;
                try {
                    l = JSON.parse(r);
                    if (l != null && l.javaClass) {
                        this.isSuccess = l.isSuccess;
                        this.lastError = l.lastError;
                        this.lastErrorCode = l.lastErrorCode;
                        this.lastWarring = l.lastWarring;
                        this.extendResult = l.extendResult;
                        if (this.isSuccess == 0) {
                            if (this.lastErrorCode == "88888" || this.lastErrorCode == "-1") {
                                setTimeout(___logout, 1000);
                            }
                            return null;
                        }
                        var m = l.result;
                        if (m == null || m == "" || m == "null") {
                            return null;
                        }
                        if (l.dataType != null && l.dataType == 12) {
                            q = false;
                        }
                        if (q) {
                            var p = null;
                            try {
                                p = JSON.parse(m);
                            } catch (n) {}
                            if (p != null) {
                                return p;
                            }
                            return m;
                        } else {
                            return m;
                        }
                    }
                } catch (o) {
                    this.isSuccess = 0;
                    this.lastError = "deserialize server return result error";
                    this.lastErrorCode = "-9998";
                }
            }
        };
        this.getsid = function() {
            if (this.sid == null) {
                var m = new Date().getTime();
                var l = XmlHttpHelper.GetTextByPost(leapconfig.rpcurl(), "type=997&_z=" + UUID.S4());
                if (l != null) {
                    var o = new Date().getTime();
                    this._tickDiff = (o - m) / 2;
                    this._endPointTicket = o;
                    var n = l.split(":");
                    l = n[0];
                    this._serverTime = Number(n[1]);
                }
                this.sid = l;
                return this.sid;
            } else {
                return this.sid;
            }
        };
        this.setFrameSRC = function(m, l) {
            this.getsid();
            if (m && m.setAttribute) {
                if (l.indexOf("http:") == 0 || l.indexOf("https:") == 0) {
                    m.setAttribute("src", l);
                } else {
                    m.setAttribute("src", leapconfig.server + l);
                }
            }
        };
        this.setsrc = this.setFrameSRC;
        this.setframesrc = this.setFrameSRC;
        this.initsafe = false;
        this.safe = null;
        this.request2 = function(l) {
            if (l.requestGroup != null) {
                l.requestGroup.add(l);
                return;
            } else {
                return this.request(l.name, l.par, this.extendPar, l.callback, l.service, l.callService, l.requestType, l.isreturnjson, l.useGet, l.domain, l.arg);
            }
        };
        this.request = function(I, z, M, q, A, o, l, y, D, x, G) {
            var K = null;
            var m = null;
            if (A == null) {
                K = this.Service;
            } else {
                K = A;
            }
            if (o == null) {
                m = this.CallService;
            } else {
                m = o;
            }
            var C = this.IsReturnJSON;
            if (y != null && y != C) {
                C = y;
            }
            var u = [];
            if (m != "leap") {
                u.push("callService=" + m);
            }
            if (C != true) {
                u.push("returnJSON=0");
            }
            u.push("method=" + I);
            u.push("sid=" + this.getsid());
            u = u.join("&");
            if (window.leapwebsitename) {
                u += "&_website_=" + window.leapwebsitename;
            }
            if (M != null) {
                u += "&extend=" + encodeURIComponent(encodeURIComponent(escape(M)));
            }
            if (!this.initsafe) {
                this.safe = document.getElementById("safecontrol");
                this.initsafe = true;
            }
            if (this.safe != null) {
                var H = (Math.round(_safeprop.random() * 10000)) + "";
                while (H.length < 4) {
                    H += "0";
                }
                u += "&zz=" + (H);
                try {
                    u += this.safe.a(H);
                } catch (J) {}
            }
            if (l != null && l != 1) {
                u += "&type=" + l;
            }
            var n = null;
            var r = 0;
            if (z != null && typeof(z) == "object" && z != "") {
                try {
                    var w = [];
                    for (var N in z) {
                        if (typeof(z[N]) != "function") {
                            var B = z[N];
                            if (B == null) {
                                w[r] = null;
                            } else {
                                if (typeof(z[N]) != "string") {
                                    w[r] = JSON.stringify(B);
                                } else {
                                    w[r] = B;
                                }
                            }
                            r++;
                        }
                    }
                    n = JSON.stringify(w);
                } catch (p) {
                    parexp = null;
                }
            }
            u += "&parlen=" + r;
            try {
                if (q == null) {
                    var F = null;
                    if (D == true) {
                        F = XmlHttpHelper.GetTextByGet(I);
                    } else {
                        F = XmlHttpHelper.GetTextByPost(leapconfig.rpcurl(), u, n);
                    }
                    if (C) {
                        return this.___buildResult(F, true);
                    } else {
                        return F;
                    }
                } else {
                    ++asyncount;
                    var L = asyncount;
                    if (D == true) {
                        XmlHttpHelper.GetTextByGet(I, null, null, this.callbackfunction, this, {
                            callback: q,
                            domain: x,
                            args: G,
                            instance: L
                        });
                    } else {
                        XmlHttpHelper.GetTextByPost(leapconfig.rpcurl(), u, n, this.callbackfunction, this, {
                            callback: q,
                            domain: x,
                            args: G,
                            instance: L
                        });
                    }
                    leaprpcclientasyncactivelist.add(L);
                    return L;
                }
            } catch (p) {
                if (q != null) {
                    return null;
                }
            }
        };
        this.asynrequest = function(n, o, p, m, l) {
            return this.request(n, o, p, m, null, null, null, null, null, l);
        };
        this.callbackfunction = function(p, m) {
            try {
                var l = this.___buildResult(p, true);
                if (m.callback != null) {
                    var o = function() {
                        try {
                            var r = m.domain;
                            if (r == null) {
                                r = this;
                            }
                            if (!r.moduleDisposed) {
                                m.callback.call(r, l, m.args);
                            }
                            r = null;
                        } catch (q) {
                            throw q;
                        } finally {
                            r = m = null;
                        }
                    };
                    setTimeout(o, 1);
                }
            } catch (n) {}
        };
        this.load = function(m) {
            var l = m.charAt(0);
            if (l == "/" || l == "\\") {
                m = m.substring(1);
            }
            if (m.indexOf("?") == -1 && this.getVersion() != null) {
                m += "?gv=" + this.getVersion();
            }
            return this.request(leapconfig.resurl() + m, null, null, null, null, null, 2, false, true);
        };
        this.loadjs = function(n, l, m) {
            return this.loadscript(n, leapscripttype.js, l, m);
        };
        this.loadcss = function(m, l) {
            return this.loadscript(m, leapscripttype.css, l);
        };
        this.loadtl = function(m, l) {
            return this.loadscript(m, leapscripttype.template, l);
        };
        this._s = null;
        this._c = null;
        this.loadscript = function(r, z, x, m) {
            var q = r.charAt(0);
            if (q == "/" || q == "\\") {
                r = r.substring(1);
            }
            if (r.indexOf("?") == -1 && this.getVersion() != null) {
                r += "?gv=" + this.getVersion();
            }
            if (x == null) {
                x = document;
            }
            var A = r;
            if (r.indexOf("?") != -1) {
                A = r.substring(0, r.indexOf("?"));
            }
            if (this._s == null) {
                this._s = [];
                var B = x.getElementsByTagName("SCRIPT");
                if (B != null) {
                    for (var u = 0; u < B.length; u++) {
                        var n = B[u].getAttribute("path");
                        if (n != null) {
                            if (n.indexOf("?") != -1) {
                                n = n.substring(0, n.indexOf("?"));
                            }
                            this._s.push(n.toLowerCase());
                        }
                        n = null;
                    }
                }
            }
            if (this._c == null) {
                this._c = [];
                var w = x.getElementsByTagName("LINK");
                if (w != null) {
                    for (var u = 0; u < w.length; u++) {
                        var n = w[u].getAttribute("path");
                        if (n != null) {
                            if (n.indexOf("?") != -1) {
                                n = n.substring(0, n.indexOf("?"));
                            }
                            this._c.push(n.toLowerCase());
                        }
                        n = null;
                    }
                }
            }
            if (z == null) {
                z = leapscripttype.js;
            }
            if (z == leapscripttype.js) {
                var o = this._s.length;
                var v = A.toLowerCase();
                for (var u = 0; u < o; u++) {
                    if (v == this._s[u]) {
                        return;
                    }
                }
                this._s.push(v);
            } else {
                if (z == leapscripttype.css) {
                    var o = this._c.length;
                    var v = A.toLowerCase();
                    for (var u = 0; u < o; u++) {
                        if (v == this._c[u]) {
                            return;
                        }
                    }
                    this._c.push(v);
                }
            }
            var y = this.load(r);
            if (y == null) {
                return;
            }
            if (z == leapscripttype.js || z == leapscripttype.css) {
                g(y, x, z, m, r);
            } else {
                try {
                    return y;
                } finally {
                    y = null;
                }
            }
        };
        var g = function(q, n, l, u, r) {
            try {
                if (q != null) {
                    var p = n.getElementsByTagName("HEAD").item(0);
                    var o;
                    if (l == leapscripttype.js) {
                        o = n.createElement("script");
                        o.language = "javascript";
                        o.type = "text/javascript";
                        o.charset = "UTF-8";
                        o.defer = "defer";
                        o.text = q;
                        o.path = r;
                    } else {
                        if (l == leapscripttype.css) {
                            var o = n.createElement("link");
                            o.setAttribute("rel", "stylesheet");
                            o.setAttribute("type", "text/css");
                            o.setAttribute("href", leapconfig.server + r);
                            o.text = q;
                            o.path = r;
                        }
                    }
                    p.appendChild(o);
                    q = n = l = u = p = o = null;
                    return true;
                }
            } catch (m) {}
        };
        this.___geti1 = function(l) {
            try {
                if (l == null) {
                    return;
                }
                var p = __s__3[j];
                var m = false;
                for (var n = 0; n < l.length; n++) {
                    if (l[n].tagName == "SCRIPT" && l[n].src != null && (l[n].src.indexOf("Base.js") > -1 || l[n].src.indexOf("Net.js") > -1)) {
                        var o = l[n].src;
                        if (o.charAt(0) == "/") {
                            while (p.indexOf("//") > -1) {
                                p = p.replace("//", "_");
                            }
                            p = p.replace("http:_", "http://").replace("https:_", "https://");
                            while (p.lastIndexOf("/") > -1 && p.charAt(p.lastIndexOf("/") - 1) != "/") {
                                p = p.substring(0, p.lastIndexOf("/"));
                            }
                            if (l[n].src.indexOf("Base.js") > -1) {
                                p += o.replace("LEAP/Resource/JavaScript/Base.js", "");
                            } else {
                                p += o.replace("LEAP/Resource/JavaScript/Base/Net.js", "");
                            }
                        } else {
                            if (o.indexOf("http://") > -1 || o.indexOf("https://") > -1) {
                                if (l[n].src.indexOf("Base.js") > -1) {
                                    p = o.replace("LEAP/Resource/JavaScript/Base.js", "");
                                } else {
                                    p = o.replace("LEAP/Resource/JavaScript/Base/Net.js", "");
                                }
                            } else {
                                var q = 0;
                                while (o.indexOf("../") > -1) {
                                    q += 1;
                                    o = o.replace("../", "");
                                }
                                while (o.indexOf("./") > -1) {
                                    o = o.replace("./", "");
                                }
                                while (p.indexOf("//") > -1) {
                                    p = p.replace("//", "@");
                                }
                                p = p.replace("http:@", "http://").replace("https:@", "https://").substring(0, p.lastIndexOf("/") + 1);
                                if (q > 0) {
                                    while (q > 0) {
                                        q--;
                                        p = p.substring(0, p.lastIndexOf("/"));
                                    }
                                }
                                p = p + "/" + o;
                                if (l[n].src.indexOf("Base.js") > -1) {
                                    if (p.indexOf("LEAP/Resource/JavaScript/Base.js") > -1) {
                                        p = p.replace("LEAP/Resource/JavaScript/Base.js", "");
                                    } else {
                                        if (p.indexOf("Resource/JavaScript/Base.js") > -1) {
                                            p = p.replace("Resource/JavaScript/Base.js", "");
                                        }
                                    }
                                } else {
                                    p = p.replace("LEAP/Resource/JavaScript/Base/Net.js", "");
                                }
                            }
                        }
                        return p;
                    }
                }
            } finally {
                l = null;
            }
        };
        var j = "href";
        this.init = function() {
            if (__s__3[j].toLowerCase().indexOf("/webhelp/") > -1) {
                return;
            }
            var r = __s__3[j];
            var o = this.___geti1(document.getElementsByTagName("HEAD").item(0).childNodes);
            console.log(o)
            if (!o) {
                o = this.___geti1(document.getElementsByTagName("SCRIPT"));
            }
            r = o;
            if (r.charAt(r.length - 1) != "/") {
                r += "/";
            }
            var l = r;
            var w = r.indexOf("://");
            var u = r.indexOf("/", w + 3);
            var m = "";
            var q = r.substring(w + 3, u);
            var v = 80;
            var n = r.substring(0, w);
            if (q.indexOf(":") > -1) {
                var p = q.indexOf(":");
                v = Number(q.substring(p + 1));
                q = q.substring(0, p);
            }
            if (r.length > u + 1) {
                m = r.substring(u + 1);
                m = m.substring(0, m.length - 1);
            }
            leapconfig.port = v;
            leapconfig.host = q;
            leapconfig.portal = n;
            leapconfig.context = m;
            leapconfig.server = l;
            leapconfig._rpcurl = l + "LEAP/Service/RPC/RPC.DO";
            PublishServerConfig.RPCURL = l;
            this.getsid();
        };
    };
    var leapclient = new leaprpcclient();

    function XmlHttpHelper() {}
    var arr_t = new Array("MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP.2.6", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP", "MSXML.XMLHTTP");
    var arr_t_indx = -1;
    XmlHttpHelper._getXmlHttpObj = function() {
        var j = null;
        if (window.ActiveXObject) {
            if (arr_t_indx == -1) {
                for (var g = 0; g < arr_t.length; g++) {
                    try {
                        j = new ActiveXObject(arr_t[g]);
                        arr_t_indx = g;
                    } catch (h) {}
                    if (j != null) {
                        break;
                    }
                }
            } else {
                j = new ActiveXObject(arr_t[arr_t_indx]);
            }
        }
        if (j == null) {
            if (window.XMLHttpRequest) {
                try {
                    j = new XMLHttpRequest();
                    if (j.overrideMimeType) {
                        j.overrideMimeType("text/xml");
                    }
                } catch (d) {}
            }
        }
        if (j == null) {
            alert("con not create XMLHTTP object");
            throw (new Error(-1, "con not create XMLHTTP object"));
        }
        return j;
    };
    XmlHttpHelper.GetTextByPost = function(j, m, h, l, g, d) {
        return XmlHttpHelper.transmit(j, "POST", m, h, "text", l != null, l, g, d);
    };
    XmlHttpHelper.GetTextByGet = function(j, m, h, l, g, d) {
        return XmlHttpHelper.transmit(j, "GET", m, h, "text", l != null, l, g, d);
    };
    XmlHttpHelper.processLID = function(d) {
        if (d) {
            try {
                var h = d.getResponseHeader("LID");
                if (h != null && h != "") {
                    window.LEAP_LID = h;
                }
            } catch (g) {}
        }
        d = null;
    };
    window.geturl = function(g) {
        if (g != null) {
            if ((!window.LEAP_LID || ((g.indexOf("http://") == 0 || g.indexOf("https://") == 0) && (g.indexOf(leapconfig.server) == -1 || g.toLowerCase().indexOf("login.html") > -1)))) {} else {
                if (g.indexOf(".html") > -1 || g.indexOf(".htm") > -1 || g.endsWith("/")) {
                    if (g.indexOf("&lid=") == -1 && g.indexOf("?lid=") == -1) {
                        var d = g.indexOf("?");
                        if (d > -1) {
                            g = g.substring(0, d + 1) + "lid=" + window.LEAP_LID + "&" + g.substring(d + 1);
                        } else {
                            g += "?lid=" + window.LEAP_LID;
                        }
                    }
                }
            }
        }
        return g;
    };
    window._open = window["\u006f\u0070\u0065\u006e"];
    window.open = function(h, g, d, l) {
        if (g == undefined) {
            g = null;
        }
        if (d == undefined) {
            d = null;
        }
        if (l == undefined) {
            l = null;
        }
        h = arguments[0] = window.geturl(h);
        try {
            if (window._open.apply) {
                return window._open.apply(window, arguments);
            }
            if (g == d && d == l && l == null) {
                return window._open(h);
            } else {
                if (g != null && d == l && l == null) {
                    return window._open(h, g);
                } else {
                    if (g != null && d != null && l == null) {
                        return window._open(h, g, d);
                    } else {
                        if (g != null && d != null && l != null) {
                            return window._open(h, g, d, l);
                        } else {
                            if (g == null && d != null) {
                                if (l == null) {
                                    return window._open(h, g, d);
                                } else {
                                    return window._open(h, g, d, l);
                                }
                            } else {
                                return window._open(h);
                            }
                        }
                    }
                }
            }
        } catch (j) {
            return window._open(h);
        }
    };
    window._navigate = window["\u006e\u0061\u0076\u0069\u0067\u0061\u0074\u0065"];
    window["\u006e\u0061\u0076\u0069\u0067\u0061\u0074\u0065"] = function(d) {
        d = arguments[0] = window.geturl(d);
        if (window._navigate.apply) {
            return window._navigate.apply(window, arguments);
        } else {
            return window._navigate(url);
        }
    };
    window.leap_lid_loadurl = false;
    XmlHttpHelper._ua = navigator.userAgent.toLowerCase();
    XmlHttpHelper.isChrome = (XmlHttpHelper._ua.indexOf("chrome") != -1);
    XmlHttpHelper.isIE = ((XmlHttpHelper._ua.indexOf("msie") != -1) || XmlHttpHelper._ua.indexOf("rv:") != -1) && (XmlHttpHelper._ua.indexOf("opera") == -1) && (XmlHttpHelper._ua.indexOf("webtv") == -1);
    XmlHttpHelper.IEVersion = -1;
    if (XmlHttpHelper.isIE) {
        var _r = navigator.appVersion.match(/MSIE (\d+\.\d+)/, "");
        if (_r) {
            try {
                XmlHttpHelper.IEVersion = Number(_r[1]);
            } catch (E) {}
        } else {
            if (navigator.appVersion.indexOf("rv:") > -1) {
                var _r2 = navigator.appVersion.match(/rv:(\d+\.\d+)/, "");
                if (_r2) {
                    try {
                        XmlHttpHelper.IEVersion = Number(_r2[1]);
                    } catch (E) {}
                }
            } else {
                if (XmlHttpHelper.name && XmlHttpHelper.name.indexOf("rv:") > -1) {
                    var _r2 = XmlHttpHelper.name.match(/rv:(\d+\.\d+)/, "");
                    if (_r2) {
                        try {
                            XmlHttpHelper.IEVersion = Number(_r2[1]);
                        } catch (E) {}
                    }
                }
            }
        }
    }
    XmlHttpHelper.transmit = function(l, x, h, g, d, n, m, u, z) {
        var F = null;
        var K = this._getXmlHttpObj();
        try {
            var o = l;
            if (h != null) {
                o += "?" + h;
            }
            K.open(x, o, n);
            if (!XmlHttpHelper.isChrome) {
                K.setRequestHeader("connection", "keep-alive");
            }
            if (!window.leap_lid_loadurl) {
                window.leap_lid_loadurl = true;
                var l = __s__3.search != null ? __s__3.search : __s__3.href;
                if (l) {
                    var w = l.indexOf("?");
                    if (w > -1) {
                        var q = l.substring(w + 1);
                        var G = q.split("&");
                        for (var A = 0; A < G.length; A++) {
                            var C = G[A].split("=");
                            if (C && C.length && C.length > 1) {
                                var J = C[0];
                                var y = C[1];
                                if (J == "lid") {
                                    window.LEAP_LID = y;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            if (window.LEAP_LID) {
                K.setRequestHeader("LID", window.LEAP_LID);
            }
            var j = false;
            if (x.toLowerCase() == "post") {
                var v = 0;
                if (g == null || g == "") {
                    g = " ";
                }
                if (g != null) {
                    try {
                        var D = false;
                        if (leapflash.fp != null && leapflash.fp.compress != null && g.length > 1000) {
                            if (!(XmlHttpHelper.isIE && XmlHttpHelper.IEVersion == 8)) {
                                D = true;
                                g = "a=" + leapflash.fp.compress(g);
                                K.setRequestHeader("Data-Type", "2");
                            }
                        }
                        if (!D && g.length > 0) {
                            if (!(XmlHttpHelper.isIE && XmlHttpHelper.IEVersion == 8)) {
                                g = "a=" + base64encode(encodeURIComponent(escape(g)));
                                K.setRequestHeader("Data-Type", "4");
                            } else {
                                g = "a=" + encodeURIComponent(escape(g));
                                K.setRequestHeader("Data-Type", "5");
                            }
                        }
                    } catch (B) {}
                    K.setRequestHeader("Post-Type", "1");
                    v = g.length;
                }
                if (!XmlHttpHelper.isChrome) {
                    K.setRequestHeader("Content-Length", '"' + v + '"');
                }
                K.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            } else {
                if (g != null) {
                    if (h != null) {
                        o += "&requestData=" + g;
                    } else {
                        o = "?requestData=" + g;
                    }
                }
            }
            if (window._leap_systemarea) {
                K.setRequestHeader("LSYS-AREA", window._leap_systemarea);
            }
            if (window._leap_systemname) {
                K.setRequestHeader("LSYS-NAME", window._leap_systemname);
            }
            if (window._leap_systemcode) {
                K.setRequestHeader("LSYS-CODE", window._leap_systemcode);
            }
            if (n) {
                if (z != null && z.instance != null) {
                    F = z.instance;
                }
                K.onreadystatechange = function() {
                    XmlHttpHelper.processLID(K);
                    if (K.readyState == 4) {
                        try {
                            if (d != null) {
                                if (d.toLowerCase() == "text") {
                                    if (m != null) {
                                        if (u != null) {
                                            if (F == null || (F != null && leaprpcclientasyncactivelist.contains(F))) {
                                                var L = K.responseText;
                                                if (K.getResponseHeader("LENC")) {
                                                    if (j) {
                                                        if (L) {
                                                            L = leapflash.fp.d(L);
                                                            if (L) {
                                                                L = decodeURIComponent(L);
                                                            }
                                                        }
                                                    }
                                                }
                                                m.call(u, L, z);
                                            } else {
                                                m = z = null;
                                            }
                                            if (F != null) {
                                                leaprpcclientasyncactivelist.remove(F);
                                            }
                                        } else {
                                            var L = K.responseText;
                                            if (K.getResponseHeader("LENC")) {
                                                if (j) {
                                                    if (L) {
                                                        L = leapflash.fp.d(L);
                                                        if (L) {
                                                            L = decodeURIComponent(L);
                                                        }
                                                    }
                                                }
                                            }
                                            m.call(L);
                                        }
                                    }
                                } else {
                                    if (d.toLowerCase() == "xml") {
                                        if (u != null) {
                                            if (F == null || (F != null && leaprpcclientasyncactivelist.contains(F))) {
                                                m.call(u, K.responseXML, z);
                                            } else {
                                                m = z = null;
                                            }
                                            if (F != null) {
                                                leaprpcclientasyncactivelist.remove(F);
                                            }
                                        } else {
                                            m.call(K.responseXML);
                                        }
                                    }
                                }
                            } else {
                                if (u != null) {
                                    if (z != null) {
                                        m.call(u, null, z);
                                    } else {
                                        m.call(u);
                                    }
                                } else {
                                    m.call();
                                }
                            }
                        } finally {}
                    }
                };
                if (g == null) {
                    g = "";
                }
                K.send(g);
            } else {
                if (g == null) {
                    g = "";
                }
                K.send(g);
                XmlHttpHelper.processLID(K);
                if (K.status == 200) {
                    if (d != null) {
                        if (d.toLowerCase() == "text") {
                            if (K.getResponseHeader("LENC")) {
                                if (j) {
                                    var I = K.responseText;
                                    if (I) {
                                        I = leapflash.fp.d(I);
                                        if (I) {
                                            I = decodeURIComponent(I);
                                        }
                                    }
                                    return I;
                                }
                            }
                            var r = K.getResponseHeader("ServerTime997");
                            if (r != null && r.length > 0) {
                                return K.responseText + ":" + r;
                            } else {
                                return K.responseText;
                            }
                        } else {
                            if (d.toLowerCase() == "xml") {
                                return K.responseXML;
                            }
                        }
                    } else {
                        return null;
                    }
                }
                return null;
            }
        } catch (H) {
            if (F != null) {
                leaprpcclientasyncactivelist.remove(F);
            }
        } finally {
            if (K != null) {
                try {} catch (p) {}
            }
        }
    };
    RegExp.prototype.toJSON = function() {
        return this.toString();
    };
    if (!this.JSON) {
        this.JSON = {};
    }
    (function() {
        function f(n) {
            return n < 10 ? "0" + n : n;
        }
        if (typeof Date.prototype.toJSON !== "function") {
            Date.prototype.toJSON = function(key) {
                return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
            };
            String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
                return this.valueOf();
            };
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap, indent, meta = {
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\f": "\\f",
                "\r": "\\r",
                '"': '\\"',
                "\\": "\\\\"
            },
            rep;

        function quote(string) {
            escapable.lastIndex = 0;
            return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
                var c = meta[a];
                return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"' : '"' + string + '"';
        }

        function str(key, holder) {
            var i, k, v, length, mind = gap,
                partial, value = holder[key];
            if (value && typeof value === "object" && typeof value.toJSON === "function") {
                value = value.toJSON(key);
            }
            if (typeof rep === "function") {
                value = rep.call(holder, key, value);
            }
            switch (typeof value) {
                case "string":
                    return quote(value);
                case "number":
                    return isFinite(value) ? String(value) : "null";
                case "boolean":
                case "null":
                    return String(value);
                case "object":
                    if (!value) {
                        return "null";
                    }
                    gap += indent;
                    partial = [];
                    if (Object.prototype.toString.apply(value) === "[object Array]") {
                        length = value.length;
                        for (i = 0; i < length; i += 1) {
                            partial[i] = str(i, value) || "null";
                        }
                        v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                        gap = mind;
                        return v;
                    }
                    if (rep && typeof rep === "object") {
                        length = rep.length;
                        for (i = 0; i < length; i += 1) {
                            k = rep[i];
                            if (typeof k === "string") {
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                                }
                            }
                        }
                    } else {
                        for (k in value) {
                            if (Object.hasOwnProperty.call(value, k)) {
                                v = str(k, value);
                                if (v) {
                                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                                }
                            }
                        }
                    }
                    v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                    gap = mind;
                    return v;
            }
        }
        var ___i8 = false;
        try {
            ___i8 = (((LEAPBrowser.name.indexOf("msie") != -1) || LEAPBrowser.name.indexOf("rv:") != -1) && (LEAPBrowser.name.indexOf("opera") == -1) && (LEAPBrowser.name.indexOf("webtv") == -1) && navigator.appVersion.match(/MSIE (\d+\.\d+)/, "")[1] == 8);
        } catch (E) {}
        if (typeof JSON.stringify !== "function" || ___i8) {
            JSON.stringify = function(value, replacer, space) {
                var i;
                gap = "";
                indent = "";
                if (typeof space === "number") {
                    for (i = 0; i < space; i += 1) {
                        indent += " ";
                    }
                } else {
                    if (typeof space === "string") {
                        indent = space;
                    }
                }
                rep = replacer;
                if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                    throw new Error("JSON.stringify");
                }
                return str("", {
                    "": value
                });
            };
        }
        if (typeof JSON.parse !== "function" || ___i8) {
            JSON.parse = function(text, reviver) {
                if (text == null || text == "") {
                    return null;
                }
                var j;

                function walk(holder, key) {
                    var k, v, value = holder[key];
                    if (value && typeof value === "object") {
                        for (k in value) {
                            if (Object.hasOwnProperty.call(value, k)) {
                                v = walk(value, k);
                                if (v !== undefined) {
                                    value[k] = v;
                                } else {
                                    delete value[k];
                                }
                            }
                        }
                    }
                    return reviver.call(holder, key, value);
                }
                cx.lastIndex = 0;
                if (cx.test(text)) {
                    text = text.replace(cx, function(a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                    });
                }
                if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                    j = eval("(" + text + ")");
                    return typeof reviver === "function" ? walk({
                        "": j
                    }, "") : j;
                }
                throw new SyntaxError("JSON.parse");
            };
        }
    }());
    var json_parse = (function() {
        var j, g, d = {
                '"': '"',
                "\\": "\\",
                "/": "/",
                b: "\b",
                f: "\f",
                n: "\n",
                r: "\r",
                t: "\t"
            },
            v, r = function(w) {
                var x = {
                    name: "SyntaxError",
                    message: w,
                    at: j,
                    text: v
                };
                throw x;
            },
            n = function(w) {
                if (w && w !== g) {
                    r("Expected '" + w + "' instead of '" + g + "'");
                }
                g = v.charAt(j);
                j += 1;
                return g;
            },
            m = function() {
                var x, w = "";
                if (g === "-") {
                    w = "-";
                    n("-");
                }
                while (g >= "0" && g <= "9") {
                    w += g;
                    n();
                }
                if (g === ".") {
                    w += ".";
                    while (n() && g >= "0" && g <= "9") {
                        w += g;
                    }
                }
                if (g === "e" || g === "E") {
                    w += g;
                    n();
                    if (g === "-" || g === "+") {
                        w += g;
                        n();
                    }
                    while (g >= "0" && g <= "9") {
                        w += g;
                        n();
                    }
                }
                x = +w;
                if (isNaN(x)) {
                    r("Bad number");
                } else {
                    return x;
                }
            },
            o = function() {
                var z, y, x = "",
                    w;
                if (g === '"') {
                    while (n()) {
                        if (g === '"') {
                            n();
                            return x;
                        } else {
                            if (g === "\\") {
                                n();
                                if (g === "u") {
                                    w = 0;
                                    for (y = 0; y < 4; y += 1) {
                                        z = parseInt(n(), 16);
                                        if (!isFinite(z)) {
                                            break;
                                        }
                                        w = w * 16 + z;
                                    }
                                    x += String.fromCharCode(w);
                                } else {
                                    if (typeof d[g] === "string") {
                                        x += d[g];
                                    } else {
                                        break;
                                    }
                                }
                            } else {
                                x += g;
                            }
                        }
                    }
                }
                r("Bad string");
            },
            q = function() {
                while (g && g <= " ") {
                    n();
                }
            },
            h = function() {
                switch (g) {
                    case "t":
                        n("t");
                        n("r");
                        n("u");
                        n("e");
                        return true;
                    case "f":
                        n("f");
                        n("a");
                        n("l");
                        n("s");
                        n("e");
                        return false;
                    case "n":
                        n("n");
                        n("u");
                        n("l");
                        n("l");
                        return null;
                }
                r("Unexpected '" + g + "'");
            },
            u, p = function() {
                var w = [];
                if (g === "[") {
                    n("[");
                    q();
                    if (g === "]") {
                        n("]");
                        return w;
                    }
                    while (g) {
                        w.push(u());
                        q();
                        if (g === "]") {
                            n("]");
                            return w;
                        }
                        n(",");
                        q();
                    }
                }
                r("Bad array");
            },
            l = function() {
                var x, w = {};
                if (g === "{") {
                    n("{");
                    q();
                    if (g === "}") {
                        n("}");
                        return w;
                    }
                    while (g) {
                        x = o();
                        q();
                        n(":");
                        if (Object.hasOwnProperty.call(w, x)) {
                            r('Duplicate key "' + x + '"');
                        }
                        w[x] = u();
                        q();
                        if (g === "}") {
                            n("}");
                            return w;
                        }
                        n(",");
                        q();
                    }
                }
                r("Bad object");
            };
        u = function() {
            q();
            switch (g) {
                case "{":
                    return l();
                case "[":
                    return p();
                case '"':
                    return o();
                case "-":
                    return m();
                default:
                    return g >= "0" && g <= "9" ? m() : h();
            }
        };
        return function(z, x) {
            var w;
            v = z;
            j = 0;
            g = " ";
            w = u();
            q();
            if (g) {
                r("Syntax error");
            }
            return typeof x === "function" ? (function y(D, C) {
                var B, A, F = D[C];
                if (F && typeof F === "object") {
                    for (B in F) {
                        if (Object.hasOwnProperty.call(F, B)) {
                            A = y(F, B);
                            if (A !== undefined) {
                                F[B] = A;
                            } else {
                                delete F[B];
                            }
                        }
                    }
                }
                return x.call(D, C, F);
            }({
                "": w
            }, "")) : w;
        };
    }());
    if (this.JSON && !window.ActiveXObject) {
        if (this.JSON.parse && this.json_parse) {
            this.JSON.innerParse = this.JSON.parse;
            this.JSON.parse = function(h, d) {
                if (h != null) {
                    try {
                        if (h.length >= 327680) {
                            return json_parse(h, d);
                        } else {
                            return JSON.innerParse(h, d);
                        }
                    } catch (g) {
                        return (new Function("", "return " + h))();
                    }
                }
            };
        }
    }

    function leap_common_init() {
        leapclient.init();
    }
    leap_common_init();
    leapclient.ID = UUID.randomUUID().replaceall("-", "");
    var leapflash = {};
    leapflash.fp = null;
    var __lpinite = false;
    leapflash.inited = function(d, x) {
        if (__lpinite) {
            return;
        }
        __lpinite = true;
        if (x) {
            if (!leapflash.hasOwnProperty(x)) {
                leapflash[x] = [];
            }
        }
        if (d) {
            leapflash[x].push(d);
        }
        if (x == "leaprpcportal") {
            if (d) {
                leapflash.fp = document.getElementById(d);
                if (leapflash.fp && !leapflash.fp.compress) {
                    var r = leapflash.fp.getElementsByTagName("object");
                    if (r && r.length) {
                        leapflash.fp = r[0];
                    }
                    r = null;
                }
                if (leapflash.fp.s) {
                    leapflash.fp.s(leapclient.getsid());
                }
            }
            if (window._s21) {
                try {
                    var u = null;
                    if (d) {
                        u = leapflash.fp.uncompress(window._s21);
                    } else {
                        u = base64decode(window._s21);
                    }
                    window._s21 = null;
                    if (u != null) {
                        var v = u.split(";");
                        var m = v.length;
                        var p = {};
                        window.res_bgimgs = p;
                        for (var q = 0; q < m; q++) {
                            var z = v[q];
                            if (z != null && z.length > 0) {
                                var o = z.split(",");
                                p["I_" + o[0]] = o[1];
                            }
                        }
                    }
                } catch (w) {}
            }
            if (window._s10) {
                try {
                    var u = null;
                    if (d) {
                        u = leapflash.fp.uncompress(window._s10);
                    } else {
                        u = base64decode(window._s10);
                    }
                    window._s10 = null;
                    if (u != null) {
                        var A = JSON.parse(u);
                        for (var y in A) {
                            if (!y.endsWith("_hashkey")) {
                                var g = A[y + "_hashkey"];
                                if (g != null) {
                                    var h = A[y];
                                    var m = h.length;
                                    var o = new hashtable();
                                    for (var n = 0; n < m; n++) {
                                        var z = h[n];
                                        if (z[g] != null) {
                                            o.add(z[g], z);
                                        }
                                    }
                                    A[y] = o;
                                }
                            }
                        }
                        window.Application = A;
                        A = null;
                    }
                    u = null;
                } catch (w) {}
            }
        }
    };
    var _fpinit = function() {
        if (window && window.isleapybsbrowser == true) {} else {
            if (leapflash.fp == null && document.getElementById("leaprpcportal01") == null) {
                var g = '<object id="leaprpcportal01" style="position:absolute;left:-100px;top:-100px;" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="1" height="1" align="middle"><param name="movie" value="@pathLEAP/Resource/flash/hp.swf@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="play" value="true" /><param name="loop" value="true" /><param name="wmode" value="window" /><param name="scale" value="showall" /><param name="menu" value="true" /><param name="devicefont" value="false" /><param name="salign" value="" /><param name="allowScriptAccess" value="sameDomain" /><param name="FlashVars" value="id=leaprpcportal01&type=leaprpcportal"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@pathLEAP/Resource/flash/hp.swf" width="1" height="1"><param name="movie" value="@pathLEAP/Resource/flash/hp.swf" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="play" value="true" /><param name="loop" value="true" /><param name="wmode" value="window" /><param name="scale" value="showall" /><param name="menu" value="true" /><param name="devicefont" value="false" /><param name="salign" value="" /><param name="allowScriptAccess" value="sameDomain" /><param name="FlashVars" value="id=leaprpcportal01&type=leaprpcportal"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="' + leapconfig.server + 'LEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>';
                g = g.replaceall("@path", leapconfig.server).replaceall("@gv", leapclient.getVersionStr());
                var d = document.createElement("div");
                document.body.appendChild(d);
                d.style.position = "absolute";
                d.style.left = "-100px";
                d.style.top = "-100px";
                d.style.width = "1px";
                d.style.height = "1px";
                d.innerHTML = g;
                d = null;
            }
            window.setTimeout(leapflash.inited, 1000);
        }
    };
    if (window.attachEvent) {
        window.attachEvent("onload", _fpinit);
    } else {
        window.addEventListener("load", _fpinit);
    }
    /*!
     * Sizzle CSS Selector Engine
     *  Copyright 2011, The Dojo Foundation
     *  Released under the MIT, BSD, and GPL Licenses.
     *  More information: http://sizzlejs.com/
     */
    (function() {
        var v = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
            o = "sizcache" + (Math.random() + "").replace(".", ""),
            w = 0,
            z = Object.prototype.toString,
            n = false,
            m = true,
            y = /\\/g,
            C = /\r\n/g,
            F = /\W/;
        [0, 0].sort(function() {
            m = false;
            return 0;
        });
        var j = function(L, G, O, P) {
            O = O || [];
            G = G || document;
            var R = G;
            if (G.nodeType !== 1 && G.nodeType !== 9) {
                return [];
            }
            if (!L || typeof L !== "string") {
                return O;
            }
            var I, T, W, H, S, V, U, N, K = true,
                J = j.isXML(G),
                M = [],
                Q = L;
            do {
                v.exec("");
                I = v.exec(Q);
                if (I) {
                    Q = I[3];
                    M.push(I[1]);
                    if (I[2]) {
                        H = I[3];
                        break;
                    }
                }
            } while (I);
            if (M.length > 1 && p.exec(L)) {
                if (M.length === 2 && q.relative[M[0]]) {
                    T = A(M[0] + M[1], G, P);
                } else {
                    T = q.relative[M[0]] ? [G] : j(M.shift(), G);
                    while (M.length) {
                        L = M.shift();
                        if (q.relative[L]) {
                            L += M.shift();
                        }
                        T = A(L, T, P);
                    }
                }
            } else {
                if (!P && M.length > 1 && G.nodeType === 9 && !J && q.match.ID.test(M[0]) && !q.match.ID.test(M[M.length - 1])) {
                    S = j.find(M.shift(), G, J);
                    G = S.expr ? j.filter(S.expr, S.set)[0] : S.set[0];
                }
                if (G) {
                    S = P ? {
                        expr: M.pop(),
                        set: r(P)
                    } : j.find(M.pop(), M.length === 1 && (M[0] === "~" || M[0] === "+") && G.parentNode ? G.parentNode : G, J);
                    T = S.expr ? j.filter(S.expr, S.set) : S.set;
                    if (M.length > 0) {
                        W = r(T);
                    } else {
                        K = false;
                    }
                    while (M.length) {
                        V = M.pop();
                        U = V;
                        if (!q.relative[V]) {
                            V = "";
                        } else {
                            U = M.pop();
                        }
                        if (U == null) {
                            U = G;
                        }
                        q.relative[V](W, U, J);
                    }
                } else {
                    W = M = [];
                }
            }
            if (!W) {
                W = T;
            }
            if (!W) {
                j.error(V || L);
            }
            if (z.call(W) === "[object Array]") {
                if (!K) {
                    O.push.apply(O, W);
                } else {
                    if (G && G.nodeType === 1) {
                        for (N = 0; W[N] != null; N++) {
                            if (W[N] && (W[N] === true || W[N].nodeType === 1 && j.contains(G, W[N]))) {
                                O.push(T[N]);
                            }
                        }
                    } else {
                        for (N = 0; W[N] != null; N++) {
                            if (W[N] && W[N].nodeType === 1) {
                                O.push(T[N]);
                            }
                        }
                    }
                }
            } else {
                r(W, O);
            }
            if (H) {
                j(H, R, O, P);
                j.uniqueSort(O);
            }
            return O;
        };
        j.uniqueSort = function(H) {
            if (x) {
                n = m;
                H.sort(x);
                if (n) {
                    for (var G = 1; G < H.length; G++) {
                        if (H[G] === H[G - 1]) {
                            H.splice(G--, 1);
                        }
                    }
                }
            }
            return H;
        };
        j.matches = function(G, H) {
            return j(G, null, null, H);
        };
        j.matchesSelector = function(G, H) {
            return j(H, null, null, [G]).length > 0;
        };
        j.find = function(O, G, P) {
            var N, I, K, J, M, H;
            if (!O) {
                return [];
            }
            for (I = 0,
                K = q.order.length; I < K; I++) {
                M = q.order[I];
                if ((J = q.leftMatch[M].exec(O))) {
                    H = J[1];
                    J.splice(1, 1);
                    if (H.substr(H.length - 1) !== "\\") {
                        J[1] = (J[1] || "").replace(y, "");
                        N = q.find[M](J, G, P);
                        if (N != null) {
                            O = O.replace(q.match[M], "");
                            break;
                        }
                    }
                }
            }
            if (!N) {
                N = typeof G.getElementsByTagName !== "undefined" ? G.getElementsByTagName("*") : [];
            }
            var L = {
                set: N,
                expr: O
            };
            try {
                return L;
            } finally {
                L = null;
            }
        };
        j.filter = function(R, Q, U, K) {
            var M, G, P, W, T, H, J, L, S, I = R,
                V = [],
                O = Q,
                N = Q && Q[0] && j.isXML(Q[0]);
            while (R && Q.length) {
                for (P in q.filter) {
                    if ((M = q.leftMatch[P].exec(R)) != null && M[2]) {
                        H = q.filter[P];
                        J = M[1];
                        G = false;
                        M.splice(1, 1);
                        if (J.substr(J.length - 1) === "\\") {
                            continue;
                        }
                        if (O === V) {
                            V = [];
                        }
                        if (q.preFilter[P]) {
                            M = q.preFilter[P](M, O, U, V, K, N);
                            if (!M) {
                                G = W = true;
                            } else {
                                if (M === true) {
                                    continue;
                                }
                            }
                        }
                        if (M) {
                            for (L = 0;
                                (T = O[L]) != null; L++) {
                                if (T) {
                                    W = H(T, M, L, O);
                                    S = K ^ W;
                                    if (U && W != null) {
                                        if (S) {
                                            G = true;
                                        } else {
                                            O[L] = false;
                                        }
                                    } else {
                                        if (S) {
                                            V.push(T);
                                            G = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (W !== undefined) {
                            if (!U) {
                                O = V;
                            }
                            R = R.replace(q.match[P], "");
                            if (!G) {
                                return [];
                            }
                            break;
                        }
                    }
                }
                if (R === I) {
                    if (G == null) {
                        j.error(R);
                    } else {
                        break;
                    }
                }
                I = R;
            }
            return O;
        };
        j.error = function(G) {
            throw new Error("Syntax error, unrecognized expression: " + G);
        };
        var g = j.getText = function(K) {
            var I, J, G = K.nodeType,
                H = "";
            if (G) {
                if (G === 1 || G === 9 || G === 11) {
                    if (typeof K.textContent === "string") {
                        return K.textContent;
                    } else {
                        if (typeof K.innerText === "string") {
                            return K.innerText.replace(C, "");
                        } else {
                            for (K = K.firstChild; K; K = K.nextSibling) {
                                H += g(K);
                            }
                        }
                    }
                } else {
                    if (G === 3 || G === 4) {
                        return K.nodeValue;
                    }
                }
            } else {
                for (I = 0;
                    (J = K[I]); I++) {
                    if (J.nodeType !== 8) {
                        H += g(J);
                    }
                }
            }
            return H;
        };
        var q = j.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function(G) {
                    return G.getAttribute("href");
                },
                type: function(G) {
                    return G.getAttribute("type");
                }
            },
            relative: {
                "+": function(M, H) {
                    var J = typeof H === "string",
                        L = J && !F.test(H),
                        N = J && !L;
                    if (L) {
                        H = H.toLowerCase();
                    }
                    for (var I = 0, G = M.length, K; I < G; I++) {
                        if ((K = M[I])) {
                            while ((K = K.previousSibling) && K.nodeType !== 1) {}
                            M[I] = N || K && K.nodeName.toLowerCase() === H ? K || false : K === H;
                        }
                    }
                    if (N) {
                        j.filter(H, M, true);
                    }
                },
                ">": function(M, H) {
                    var L, K = typeof H === "string",
                        I = 0,
                        G = M.length;
                    if (K && !F.test(H)) {
                        H = H.toLowerCase();
                        for (; I < G; I++) {
                            L = M[I];
                            if (L) {
                                var J = L.parentNode;
                                M[I] = J.nodeName.toLowerCase() === H ? J : false;
                            }
                        }
                    } else {
                        for (; I < G; I++) {
                            L = M[I];
                            if (L) {
                                M[I] = K ? L.parentNode : L.parentNode === H;
                            }
                        }
                        if (K) {
                            j.filter(H, M, true);
                        }
                    }
                },
                "": function(J, H, L) {
                    var K, I = w++,
                        G = B;
                    if (typeof H === "string" && !F.test(H)) {
                        H = H.toLowerCase();
                        K = H;
                        G = d;
                    }
                    G("parentNode", H, I, J, K, L);
                },
                "~": function(J, H, L) {
                    var K, I = w++,
                        G = B;
                    if (typeof H === "string" && !F.test(H)) {
                        H = H.toLowerCase();
                        K = H;
                        G = d;
                    }
                    G("previousSibling", H, I, J, K, L);
                }
            },
            find: {
                ID: function(H, I, J) {
                    if (typeof I.getElementById !== "undefined" && !J) {
                        var G = I.getElementById(H[1]);
                        return G && G.parentNode ? [G] : [];
                    }
                },
                NAME: function(I, L) {
                    if (typeof L.getElementsByName !== "undefined") {
                        var H = [],
                            K = L.getElementsByName(I[1]);
                        for (var J = 0, G = K.length; J < G; J++) {
                            if (K[J].getAttribute("name") === I[1]) {
                                H.push(K[J]);
                            }
                        }
                        return H.length === 0 ? null : H;
                    }
                },
                TAG: function(G, H) {
                    if (typeof H.getElementsByTagName !== "undefined") {
                        return H.getElementsByTagName(G[1]);
                    }
                }
            },
            preFilter: {
                CLASS: function(J, H, I, G, M, N) {
                    J = " " + J[1].replace(y, "") + " ";
                    if (N) {
                        return J;
                    }
                    for (var K = 0, L;
                        (L = H[K]) != null; K++) {
                        if (L) {
                            if (M ^ (L.className && (" " + L.className + " ").replace(/[\t\n\r]/g, " ").indexOf(J) >= 0)) {
                                if (!I) {
                                    G.push(L);
                                }
                            } else {
                                if (I) {
                                    H[K] = false;
                                }
                            }
                        }
                    }
                    return false;
                },
                ID: function(G) {
                    return G[1].replace(y, "");
                },
                TAG: function(H, G) {
                    return H[1].replace(y, "").toLowerCase();
                },
                CHILD: function(G) {
                    if (G[1] === "nth") {
                        if (!G[2]) {
                            j.error(G[0]);
                        }
                        G[2] = G[2].replace(/^\+|\s*/g, "");
                        var H = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(G[2] === "even" && "2n" || G[2] === "odd" && "2n+1" || !/\D/.test(G[2]) && "0n+" + G[2] || G[2]);
                        G[2] = (H[1] + (H[2] || 1)) - 0;
                        G[3] = H[3] - 0;
                    } else {
                        if (G[2]) {
                            j.error(G[0]);
                        }
                    }
                    G[0] = w++;
                    return G;
                },
                ATTR: function(K, H, I, G, L, M) {
                    var J = K[1] = K[1].replace(y, "");
                    if (!M && q.attrMap[J]) {
                        K[1] = q.attrMap[J];
                    }
                    K[4] = (K[4] || K[5] || "").replace(y, "");
                    if (K[2] === "~=") {
                        K[4] = " " + K[4] + " ";
                    }
                    return K;
                },
                PSEUDO: function(K, H, I, G, L) {
                    if (K[1] === "not") {
                        if ((v.exec(K[3]) || "").length > 1 || /^\w/.test(K[3])) {
                            K[3] = j(K[3], null, null, H);
                        } else {
                            var J = j.filter(K[3], H, I, true ^ L);
                            if (!I) {
                                G.push.apply(G, J);
                            }
                            return false;
                        }
                    } else {
                        if (q.match.POS.test(K[0]) || q.match.CHILD.test(K[0])) {
                            return true;
                        }
                    }
                    return K;
                },
                POS: function(G) {
                    G.unshift(true);
                    return G;
                }
            },
            filters: {
                enabled: function(G) {
                    return G.disabled === false && G.type !== "hidden";
                },
                visible: function(G) {
                    return G.getBoundingClientRect().height > 0 && G.type !== "hidden";
                },
                disabled: function(G) {
                    return G.disabled === true;
                },
                checked: function(G) {
                    return G.checked === true;
                },
                selected: function(G) {
                    if (G.parentNode) {
                        G.parentNode.selectedIndex;
                    }
                    return G.selected === true;
                },
                parent: function(G) {
                    return !!G.firstChild;
                },
                empty: function(G) {
                    return !G.firstChild;
                },
                has: function(I, H, G) {
                    return !!j(G[3], I).length;
                },
                header: function(G) {
                    return (/h\d/i).test(G.nodeName);
                },
                text: function(I) {
                    var G = I.getAttribute("type"),
                        H = I.type;
                    return I.nodeName.toLowerCase() === "input" && "text" === H && (G === H || G === null);
                },
                radio: function(G) {
                    return G.nodeName.toLowerCase() === "input" && "radio" === G.type;
                },
                checkbox: function(G) {
                    return G.nodeName.toLowerCase() === "input" && "checkbox" === G.type;
                },
                file: function(G) {
                    return G.nodeName.toLowerCase() === "input" && "file" === G.type;
                },
                password: function(G) {
                    return G.nodeName.toLowerCase() === "input" && "password" === G.type;
                },
                submit: function(H) {
                    var G = H.nodeName.toLowerCase();
                    return (G === "input" || G === "button") && "submit" === H.type;
                },
                image: function(G) {
                    return G.nodeName.toLowerCase() === "input" && "image" === G.type;
                },
                reset: function(H) {
                    var G = H.nodeName.toLowerCase();
                    return (G === "input" || G === "button") && "reset" === H.type;
                },
                button: function(H) {
                    var G = H.nodeName.toLowerCase();
                    return G === "input" && "button" === H.type || G === "button";
                },
                input: function(G) {
                    return (/input|select|textarea|button/i).test(G.nodeName);
                },
                focus: function(G) {
                    return G === G.ownerDocument.activeElement;
                }
            },
            setFilters: {
                first: function(H, G) {
                    return G === 0;
                },
                last: function(I, H, G, J) {
                    return H === J.length - 1;
                },
                even: function(H, G) {
                    return G % 2 === 0;
                },
                odd: function(H, G) {
                    return G % 2 === 1;
                },
                lt: function(I, H, G) {
                    return H < G[3] - 0;
                },
                gt: function(I, H, G) {
                    return H > G[3] - 0;
                },
                nth: function(I, H, G) {
                    return G[3] - 0 === H;
                },
                eq: function(I, H, G) {
                    return G[3] - 0 === H;
                }
            },
            filter: {
                PSEUDO: function(I, N, M, O) {
                    var G = N[1],
                        H = q.filters[G];
                    if (H) {
                        return H(I, M, N, O);
                    } else {
                        if (G === "contains") {
                            return (I.textContent || I.innerText || g([I]) || "").indexOf(N[3]) >= 0;
                        } else {
                            if (G === "not") {
                                var J = N[3];
                                for (var L = 0, K = J.length; L < K; L++) {
                                    if (J[L] === I) {
                                        return false;
                                    }
                                }
                                return true;
                            } else {
                                j.error(G);
                            }
                        }
                    }
                },
                CHILD: function(I, K) {
                    var J, Q, M, P, G, L, O, N = K[1],
                        H = I;
                    switch (N) {
                        case "only":
                        case "first":
                            while ((H = H.previousSibling)) {
                                if (H.nodeType === 1) {
                                    return false;
                                }
                            }
                            if (N === "first") {
                                return true;
                            }
                            H = I;
                        case "last":
                            while ((H = H.nextSibling)) {
                                if (H.nodeType === 1) {
                                    return false;
                                }
                            }
                            return true;
                        case "nth":
                            J = K[2];
                            Q = K[3];
                            if (J === 1 && Q === 0) {
                                return true;
                            }
                            M = K[0];
                            P = I.parentNode;
                            if (P && (P[o] !== M || !I.nodeIndex)) {
                                L = 0;
                                for (H = P.firstChild; H; H = H.nextSibling) {
                                    if (H.nodeType === 1) {
                                        H.nodeIndex = ++L;
                                    }
                                }
                                P[o] = M;
                            }
                            O = I.nodeIndex - Q;
                            if (J === 0) {
                                return O === 0;
                            } else {
                                return (O % J === 0 && O / J >= 0);
                            }
                    }
                },
                ID: function(H, G) {
                    return H.nodeType === 1 && H.getAttribute("id") === G;
                },
                TAG: function(H, G) {
                    return (G === "*" && H.nodeType === 1) || !!H.nodeName && H.nodeName.toLowerCase() === G;
                },
                CLASS: function(H, G) {
                    return (" " + (H.className || H.getAttribute("class")) + " ").indexOf(G) > -1;
                },
                ATTR: function(M, J) {
                    var I = J[1];
                    var G = null;
                    var N = null;
                    try {
                        G = j.attr ? j.attr(M, I) : q.attrHandle[I] ? q.attrHandle[I](M) : M[I] != null ? M[I] : M.getAttribute(I);
                    } catch (L) {} finally {
                        N = G + "";
                    }
                    var K = J[2],
                        H = J[4];
                    return G == null ? K === "!=" : !K && j.attr ? G != null : K === "=" ? N === H : K === "*=" ? N.indexOf(H) >= 0 : K === "~=" ? (" " + N + " ").indexOf(H) >= 0 : !H ? N && G !== false : K === "!=" ? N !== H : K === "^=" ? N.indexOf(H) === 0 : K === "$=" ? N.substr(N.length - H.length) === H : K === "|=" ? N === H || N.substr(0, H.length + 1) === H + "-" : false;
                },
                POS: function(K, H, I, L) {
                    var G = H[2],
                        J = q.setFilters[G];
                    if (J) {
                        return J(K, I, H, L);
                    }
                }
            }
        };
        var p = q.match.POS,
            h = function(H, G) {
                return "\\" + (G - 0 + 1);
            };
        for (var l in q.match) {
            q.match[l] = new RegExp(q.match[l].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
            q.leftMatch[l] = new RegExp(/(^(?:.|\r|\n)*?)/.source + q.match[l].source.replace(/\\(\d+)/g, h));
        }
        q.match.globalPOS = p;
        var r = function(H, G) {
            H = Array.prototype.slice.call(H, 0);
            if (G) {
                G.push.apply(G, H);
                return G;
            }
            return H;
        };
        try {
            Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;
        } catch (D) {
            r = function(K, J) {
                var I = 0,
                    H = J || [];
                if (z.call(K) === "[object Array]") {
                    Array.prototype.push.apply(H, K);
                } else {
                    if (typeof K.length === "number") {
                        for (var G = K.length; I < G; I++) {
                            H.push(K[I]);
                        }
                    } else {
                        for (; K[I]; I++) {
                            H.push(K[I]);
                        }
                    }
                }
                return H;
            };
        }
        var x, u;
        if (document.documentElement.compareDocumentPosition) {
            x = function(H, G) {
                if (H === G) {
                    n = true;
                    return 0;
                }
                if (!H.compareDocumentPosition || !G.compareDocumentPosition) {
                    return H.compareDocumentPosition ? -1 : 1;
                }
                return H.compareDocumentPosition(G) & 4 ? -1 : 1;
            };
        } else {
            x = function(O, N) {
                if (O === N) {
                    n = true;
                    return 0;
                } else {
                    if (O.sourceIndex && N.sourceIndex) {
                        return O.sourceIndex - N.sourceIndex;
                    }
                }
                var L, H, I = [],
                    G = [],
                    K = O.parentNode,
                    M = N.parentNode,
                    P = K;
                if (K === M) {
                    return u(O, N);
                } else {
                    if (!K) {
                        return -1;
                    } else {
                        if (!M) {
                            return 1;
                        }
                    }
                }
                while (P) {
                    I.unshift(P);
                    P = P.parentNode;
                }
                P = M;
                while (P) {
                    G.unshift(P);
                    P = P.parentNode;
                }
                L = I.length;
                H = G.length;
                for (var J = 0; J < L && J < H; J++) {
                    if (I[J] !== G[J]) {
                        return u(I[J], G[J]);
                    }
                }
                return J === L ? u(O, G[J], -1) : u(I[J], N, 1);
            };
            u = function(H, G, I) {
                if (H === G) {
                    return I;
                }
                var J = H.nextSibling;
                while (J) {
                    if (J === G) {
                        return -1;
                    }
                    J = J.nextSibling;
                }
                return 1;
            };
        }
        (function() {
            var H = document.createElement("div"),
                I = "script" + (new Date()).getTime(),
                G = document.documentElement;
            H.innerHTML = "<a name='" + I + "'/>";
            G.insertBefore(H, G.firstChild);
            if (document.getElementById(I)) {
                q.find.ID = function(K, L, M) {
                    if (typeof L.getElementById !== "undefined" && !M) {
                        var J = L.getElementById(K[1]);
                        return J ? J.id === K[1] || typeof J.getAttributeNode !== "undefined" && J.getAttributeNode("id").nodeValue === K[1] ? [J] : undefined : [];
                    }
                };
                q.filter.ID = function(L, J) {
                    var K = typeof L.getAttributeNode !== "undefined" && L.getAttributeNode("id");
                    return L.nodeType === 1 && K && K.nodeValue === J;
                };
            }
            G.removeChild(H);
            G = H = null;
        })();
        (function() {
            var G = document.createElement("div");
            G.appendChild(document.createComment(""));
            if (G.getElementsByTagName("*").length > 0) {
                q.find.TAG = function(H, L) {
                    var K = L.getElementsByTagName(H[1]);
                    if (H[1] === "*") {
                        var J = [];
                        for (var I = 0; K[I]; I++) {
                            if (K[I].nodeType === 1) {
                                J.push(K[I]);
                            }
                        }
                        K = J;
                    }
                    return K;
                };
            }
            G.innerHTML = "<a href='#'></a>";
            if (G.firstChild && typeof G.firstChild.getAttribute !== "undefined" && G.firstChild.getAttribute("href") !== "#") {
                q.attrHandle.href = function(H) {
                    return H.getAttribute("href", 2);
                };
            }
            G = null;
        })();
        if (document.querySelectorAll) {
            (function() {
                var G = j,
                    J = document.createElement("div"),
                    I = "__sizzle__";
                J.innerHTML = "<p class='TEST'></p>";
                if (J.querySelectorAll && J.querySelectorAll(".TEST").length === 0) {
                    return;
                }
                j = function(U, L, P, T) {
                    L = L || document;
                    if (!T && !j.isXML(L)) {
                        var S = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(U);
                        if (S && (L.nodeType === 1 || L.nodeType === 9)) {
                            if (S[1]) {
                                return r(L.getElementsByTagName(U), P);
                            } else {
                                if (S[2] && q.find.CLASS && L.getElementsByClassName) {
                                    return r(L.getElementsByClassName(S[2]), P);
                                }
                            }
                        }
                        if (L.nodeType === 9) {
                            if (U === "body" && L.body) {
                                return r([L.body], P);
                            } else {
                                if (S && S[3]) {
                                    var O = L.getElementById(S[3]);
                                    if (O && O.parentNode) {
                                        if (O.id === S[3]) {
                                            return r([O], P);
                                        }
                                    } else {
                                        return r([], P);
                                    }
                                }
                            }
                            try {
                                return r(L.querySelectorAll(U), P);
                            } catch (Q) {}
                        } else {
                            if (L.nodeType === 1 && L.nodeName.toLowerCase() !== "object") {
                                var M = L,
                                    N = L.getAttribute("id"),
                                    K = N || I,
                                    W = L.parentNode,
                                    V = /^\s*[+~]/.test(U);
                                if (!N) {
                                    L.setAttribute("id", K);
                                } else {
                                    K = K.replace(/'/g, "\\$&");
                                }
                                if (V && W) {
                                    L = L.parentNode;
                                }
                                try {
                                    if (!V || W) {
                                        return r(L.querySelectorAll("[id='" + K + "'] " + U), P);
                                    }
                                } catch (R) {} finally {
                                    if (!N) {
                                        M.removeAttribute("id");
                                    }
                                }
                            }
                        }
                    }
                    return G(U, L, P, T);
                };
                for (var H in G) {
                    j[H] = G[H];
                }
                J = null;
            })();
        }
        (function() {
            var G = document.documentElement,
                I = G.matchesSelector || G.mozMatchesSelector || G.webkitMatchesSelector || G.msMatchesSelector;
            if (I) {
                var K = !I.call(document.createElement("div"), "div"),
                    H = false;
                try {
                    I.call(document.documentElement, "[test!='']:sizzle");
                } catch (J) {
                    H = true;
                }
                j.matchesSelector = function(M, O) {
                    O = O.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!j.isXML(M)) {
                        try {
                            if (H || !q.match.PSEUDO.test(O) && !/!=/.test(O)) {
                                var L = I.call(M, O);
                                if (L || !K || M.document && M.document.nodeType !== 11) {
                                    return L;
                                }
                            }
                        } catch (N) {}
                    }
                    return j(O, null, null, [M]).length > 0;
                };
            }
        })();
        (function() {
            var G = document.createElement("div");
            G.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!G.getElementsByClassName || G.getElementsByClassName("e").length === 0) {
                return;
            }
            G.lastChild.className = "e";
            if (G.getElementsByClassName("e").length === 1) {
                return;
            }
            q.order.splice(1, 0, "CLASS");
            q.find.CLASS = function(H, I, J) {
                if (typeof I.getElementsByClassName !== "undefined" && !J) {
                    return I.getElementsByClassName(H[1]);
                }
            };
            G = null;
        })();

        function d(H, M, L, P, N, O) {
            for (var J = 0, I = P.length; J < I; J++) {
                var G = P[J];
                if (G) {
                    var K = false;
                    G = G[H];
                    while (G) {
                        if (G[o] === L) {
                            K = P[G.sizset];
                            break;
                        }
                        if (G.nodeType === 1 && !O) {
                            G[o] = L;
                            G.sizset = J;
                        }
                        if (G.nodeName.toLowerCase() === M) {
                            K = G;
                            break;
                        }
                        G = G[H];
                    }
                    P[J] = K;
                }
            }
        }

        function B(H, M, L, P, N, O) {
            for (var J = 0, I = P.length; J < I; J++) {
                var G = P[J];
                if (G) {
                    var K = false;
                    G = G[H];
                    while (G) {
                        if (G[o] === L) {
                            K = P[G.sizset];
                            break;
                        }
                        if (G.nodeType === 1) {
                            if (!O) {
                                G[o] = L;
                                G.sizset = J;
                            }
                            if (typeof M !== "string") {
                                if (G === M) {
                                    K = true;
                                    break;
                                }
                            } else {
                                if (j.filter(M, [G]).length > 0) {
                                    K = G;
                                    break;
                                }
                            }
                        }
                        G = G[H];
                    }
                    P[J] = K;
                }
            }
        }
        if (document.documentElement.contains) {
            j.contains = function(H, G) {
                return H !== G && (H.contains ? H.contains(G) : true);
            };
        } else {
            if (document.documentElement.compareDocumentPosition) {
                j.contains = function(H, G) {
                    return !!(H.compareDocumentPosition(G) & 16);
                };
            } else {
                j.contains = function() {
                    return false;
                };
            }
        }
        j.isXML = function(G) {
            var H = (G ? G.ownerDocument || G : 0).documentElement;
            return H ? H.nodeName !== "HTML" : false;
        };
        var A = function(I, G, M) {
            var L, N = [],
                K = "",
                O = G.nodeType ? [G] : G;
            while ((L = q.match.PSEUDO.exec(I))) {
                K += L[0];
                I = I.replace(q.match.PSEUDO, "");
            }
            I = q.relative[I] ? I + "*" : I;
            for (var J = 0, H = O.length; J < H; J++) {
                j(I, O[J], N, M);
            }
            return j.filter(K, N);
        };
        window.Sizzle = j;
    })();
    var LEAP = new Object();
    var ismobie = false;
    var isdebug = true;
    var islogdebug = false;
    Object.isEmpty = function(h) {
        if (h == null) {
            return true;
        }
        var d = 0;
        for (var g in h) {
            d++;
        }
        h = null;
        return d == 0;
    };
    var ___rslt = navigator.appVersion.match(/MSIE (\d+\.\d+)/, "");
    LEAP.isIE6 = (___rslt != null && Number(___rslt[1]) >= 5.5 && Number(___rslt[1]) < 7);

    function enableAlphaImages(l) {
        if (LEAP.isIE6) {
            if (l == null) {
                l = LEAP.getElements("img[_trans_=1][_settrans_!=1]");
            }
            if (l != null) {
                for (var g = 0; g < l.length; g++) {
                    var d = l[g];
                    if (d && d.getAttribute("_trans_") == "1" && d.src.match(/\.png$/i) != null && d.getAttribute("_settrans_") == null) {
                        var j = d.src;
                        var h = d.offsetWidth > 0;
                        if (h) {
                            d.style.width = d.width + "px";
                            d.style.height = d.height + "px";
                        }
                        d.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + j + "', sizingMethod='crop')";
                        d.src = leapconfig.server + "LEAP/Resource/SystemTemplate/pixel.gif";
                        d.setAttribute("_settrans_", "1");
                    }
                }
            }
        }
        l = null;
    }
    LEAP.transImages = function(d) {
        if (LEAP.isIE6) {
            if (d && typeof d == "string") {
                d = LEAP.getElement(d);
            }
            enableAlphaImages(LEAP.getElements("img[_trans_=1]"), d);
        }
    };
    LEAP.asynTransImages = function(d, g) {
        if (LEAP.isIE6) {
            if (g == null) {
                g = 100;
            }
            if (d && d.tagName) {
                d = d.tagName + "[ctid=" + LEAP.ctid(d) + "]:first";
            }
            LEAP.asyn(LEAP.transImages, null, g, d);
        }
    };
    LEAP.clone = function(h, g) {
        if (h && h.clone != null) {
            return h.clone();
        }
        if (g == null) {
            g = {};
        }
        for (var d in h) {
            g[d] = h[d];
        }
        return g;
    };
    LEAP.getURL = function(d) {
        if (d == null) {
            return leapconfig.server;
        }
        if (d.charAt(0) == "/") {
            return leapconfig.server + d.substr(1);
        } else {
            return leapconfig.server + d;
        }
    };
    LEAP.isIE = null;
    (function() {
        if (document.all) {
            LEAP.isIE = true;
        } else {
            LEAP.isIE = false;
        }
    })();
    LEAP.getAbsolutePos = function(g) {
        var h = g.getBoundingClientRect();
        var d = {
            x: h.left,
            y: h.top
        };
        if (LEAPBrowser.isIE) {
            d.x = d.x - 2;
            d.y = d.y - 2;
        }
        return d;
    };
    LEAP.stopEvent = function(d) {
        g = d ? d : window.event;
        if (LEAP.isIE) {
            g.keyCode = 0;
            g.cancelBubble = true;
            g.returnValue = false;
            try {
                g.preventDefault();
            } catch (g) {}
            try {
                g.stopPropagation();
            } catch (g) {}
        } else {
            g.preventDefault();
            g.stopPropagation();
        }
    };
    if (!LEAP.isIE) {
        HTMLElement.prototype.__defineGetter__("innerText", function() {
            return this.textContent;
        });
        HTMLElement.prototype.__defineSetter__("innerText", function(d) {
            this.textContent = d;
        });
        Event.prototype.__defineGetter__("offsetX", function() {
            var g = this.target;
            var d = LEAP.getAbsolutePos(g).x;
            g = null;
            return this.clientX - d;
        });
        Event.prototype.__defineGetter__("offsetY", function() {
            var d = this.target;
            var g = LEAP.getAbsolutePos(d).y;
            d = null;
            return this.clientY - g;
        });
        Event.prototype.__defineGetter__("srcElement", function() {
            return this.target;
        });
    }
    LEAP.selector = Sizzle;
    var DateFormat = function(g) {
        var j = function(l) {
            l = l.replace(/yyyy/g, g.getFullYear());
            l = l.replace(/yy/g, g.getFullYear().toString().slice(2));
            l = l.replace(/mm/g, (g.getMonth() + 1) < 10 ? "0" + (g.getMonth() + 1) : g.getMonth() + 1);
            l = l.replace(/dd/g, g.getDate() < 10 ? "0" + g.getDate() : g.getDate());
            l = l.replace(/wk/g, g.getDay() < 10 ? "0" + g.getDay() : g.getDay());
            l = l.replace(/hh/g, g.getHours() < 10 ? "0" + g.getHours() : g.getHours());
            l = l.replace(/mi/g, g.getMinutes() < 10 ? "0" + g.getMinutes() : g.getMinutes());
            l = l.replace(/ss/g, g.getSeconds() < 10 ? "0" + g.getSeconds() : g.getSeconds());
            l = l.replace(/ms/g, g.getMilliseconds() < 10 ? "0" + g.getMilliseconds() : g.getMilliseconds());
            return l;
        };
        var d = function() {};
        var h = function() {
            return g.toLocaleString();
        };
        g = new Date(g);
        if (!g || g == "NaN") {
            g = new Date();
        }
        this.format = j;
        this.valueOf = d;
        this.toString = h;
    };

    function StringBuffer(d) {
        this._strings_ = [];
        if (d != null) {
            this._strings_[0] = d;
        }
    }
    StringBuffer.prototype.append = function(d) {
        if (d == null) {
            return this;
        }
        this._strings_.push(d);
        return this;
    };
    StringBuffer.prototype.clear = function() {
        this._strings_.clear();
        return this;
    };
    StringBuffer.prototype.toString = function(d) {
        if (d == null) {
            d = "";
        }
        return this._strings_.join(d);
    };
    Number.prototype.substr = function(h, d) {
        var g = String(this);
        return g.substr(h, d);
    };
    Number.prototype.substring = function(h, d) {
        var g = String(this);
        return g.substring(h, d);
    };
    String.prototype.Trim = function() {
        return this.replace(/(^\s*)|(\s*$)/g, "");
    };
    String.prototype.replace2 = function(g, d) {
        if (d == null) {
            d = "";
        }
        return this.replace(g, d);
    };
    String.prototype.Trim2 = function() {
        return this.replace(/(^[\s\u3000]*)|([\s\u3000]*$)/g, "");
    };
    String.prototype.getLength = function() {
        var d = this.match(/[^\x00-\xff]/ig);
        return this.length + (d == null ? 0 : d.length);
    };
    String.prototype.trim = function() {
        return this.replace(/(^\s*)|(\s*$)/g, "");
    };
    String.isEmpty = function(d) {
        if (d == null) {
            return true;
        }
        if (typeof d == "string") {
            return d.Trim().length == 0;
        }
        d = d.toString();
        return d.Trim().length == 0;
    };
    String.getString = function(g, d) {
        if (String.isEmpty(g)) {
            return d;
        } else {
            return g;
        }
        return null;
    };
    String.prototype.isEmpty = function() {
        return this.Trim().length == 0;
    };
    String.prototype.startWith = function(d) {
        if (!String.isEmpty(d)) {
            return this.indexOf(d) == 0;
        }
        return false;
    };
    String.prototype.endWith = function(j) {
        if (!String.isEmpty(j)) {
            var d = j.length;
            var g = this.length;
            if (d > g) {
                return false;
            }
            for (var h = 0; h < d; h++) {
                if (j.charAt(h) != this.charAt(g - d + h)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    String.prototype.indexof = function(d) {
        return this.indexOf(d);
    };
    String.prototype.startsWith = String.prototype.startWith;
    String.prototype.endsWith = String.prototype.endWith;
    Array.prototype.contains = function(d) {
        return this.indexof(d) > -1;
    };
    Array.prototype.add = function(d) {
        this[this.length] = d;
    };
    Array.prototype.addall = function(h) {
        if (h == null) {
            return;
        }
        var d = h.length;
        if (d != null && d > 0) {
            for (var g = 0; g < d; g++) {
                this[this.length] = h[g];
            }
        }
    };
    Array.concat = function(m, h) {
        if (m != null && h != null) {
            var j = [];
            var d = m.length;
            if (d != null && d > 0) {
                for (var n = 0; n < d; n++) {
                    j[n] = m[n];
                }
            }
            var g = h.length;
            if (g != null && g > 0) {
                for (var n = 0; n < g; n++) {
                    j[d + n] = h[n];
                }
            }
            return j;
        } else {
            if (m != null) {
                return m;
            } else {
                return h;
            }
        }
    };
    Array.prototype.insert = function(m, j) {
        if (j == undefined || isNaN(j)) {
            j = 0;
        }
        var d = this.length;
        var h = new Object();
        var g = this.slice(0, j).concat(h).concat(this.slice(j, d));
        g[j] = m;
        try {
            return g;
        } finally {
            m = null;
        }
    };
    Array.prototype.insertBefore = function(h, g) {
        var d = this.indexof(g);
        if (d == -1) {
            return this.concat(g);
        }
        return this.insert(h, d);
    };
    Array.prototype.replace = function(g, d) {
        this[g] = d;
    };
    Array.prototype.clear = function() {
        this.length = 0;
    };
    Array.prototype.indexof = function(h) {
        if (h == null) {
            return -1;
        }
        var d = this.length;
        for (var g = 0; g < d; g++) {
            if (this[g] == h) {
                return g;
            }
        }
        return -1;
    };
    if (Array.prototype.hasOwnProperty("indexOf")) {
        Array.prototype.indexOf = Array.prototype.indexof;
    }
    Array.prototype.removeindex = function(d) {
        if (isNaN(d) || d > this.length) {
            return false;
        }
        this.splice(d, 1);
    };
    Array.prototype.remove = function(g) {
        var d = this.indexof(g);
        if (d > -1) {
            this.removeindex(d);
        }
    };
    var hashtable = function() {
        this.keys = {};
    };
    hashtable._k_ = "key";
    hashtable.prototype.contains = function(d) {
        if (this.count == 0) {
            return false;
        }
        if (d != null && !(typeof d == "string" && d.startsWith(hashtable._k_))) {
            d = "key_" + d;
        }
        return this.keys.hasOwnProperty(d);
    };
    hashtable.prototype.count = 0;
    hashtable.prototype.size = function() {
        return this.count;
    };
    hashtable.prototype.getkey = function(d) {
        if (d.startWith(hashtable._k_ + "_")) {
            return d.substring(4);
        }
    };
    hashtable.prototype.add = function(d, g) {
        if (d != null && !(typeof d == "string" && d.startsWith(hashtable._k_))) {
            d = "key_" + d;
        }
        if (this.contains(d)) {
            return this;
        }
        this.keys[d] = g;
        this.count++;
        return this;
    };
    hashtable.prototype.getvalue = function(d) {
        if (d != null && !(typeof d == "string" && d.startsWith(hashtable._k_))) {
            d = "key_" + d;
        }
        return this.keys[d];
    };
    hashtable.prototype.replace = function(g, d) {
        if (g != null && !(typeof g == "string" && g.startsWith(hashtable._k_))) {
            g = "key_" + g;
        }
        if (this.contains(g)) {
            this.keys[g] = d;
        }
        return this;
    };
    hashtable.prototype.remove = function(d) {
        if (d != null && !(typeof d == "string" && d.startsWith(hashtable._k_))) {
            d = "key_" + d;
        }
        if (!this.contains(d)) {
            return false;
        }
        try {
            this.count = this.count - 1;
            this.keys[d] = null;
        } finally {
            delete this.keys[d];
        }
        return this;
    };
    hashtable.prototype.saferemove = function(d) {
        if (d != null && !(typeof d == "string" && d.startsWith(hashtable._k_))) {
            d = "key_" + d;
        }
        delete this.keys[d];
        this.count--;
        return this;
    };
    hashtable.prototype.clear = function() {
        this.keys = null;
        this.keys = {};
        this.count = 0;
    };
    hashtable.prototype.clone = function() {
        var h = this.keys;
        var g = new hashtable();
        for (var d in h) {
            g.add(d, this.getvalue(d));
        }
        return g;
    };
    var commfields = {
        instance: "instance",
        ggc: "___global_GC_Flage",
        gcfs: "[_GC=",
        gcfe: "]",
        gcf: "_GCA",
        gco: new hashtable(),
        string: "string",
        idpre: "#",
        value: "value",
        ct: "ct",
        ht: "ht",
        ctf: "ctf",
        ctg: "ctg",
        tpof: "tpof",
        tag: "tagName",
        bindfiled: "bindfiled_",
        bl: "&nbsp",
        vv: "@v",
        vn: "@n",
        vid: "@i",
        bt: "bt",
        md: "md",
        _value: "_value",
        c: 1,
        tpo: "<a ctf='table_tpo' style='font-size:12px' href='javascript:void(0)' tpof='@v'>@n</a>",
        tpos: "|",
        tpos2: ":",
        rsccv: "___codevalue___",
        sncel: "<input ctf='table_chk' type='checkbox'/>@sn",
        pge: "@pageNum<font style='color: #001693;font-weight: bold;text-align:center;width:8px;'>/</font>@pageCount页 @beginNum<font style='color: #001693;font-weight: bold;text-align:center;width:8px;'>/</font>@count条 @pageSize条<font style='color: #001693;font-weight: bold;text-align:center;width:8px;'>/</font>页",
        rsc: "com.longrise.LEAP.Base.Objects.ResultSet",
        addflag: "<DIV class='lgimgselbtn lgimg_delete'  ctf='table_deleterow' title='删除'></DIV>"
    };
    var UIEventManager = new Object();
    UIEventManager.o = "on";
    UIEventManager.u = "_uuid";
    UIEventManager._e = "___events";
    UIEventManager._s = new hashtable();
    UIEventManager._s.add("touchstart", "1");
    UIEventManager._s.add("touchmove", "1");
    UIEventManager._s.add("touchend", "1");
    UIEventManager.addEvent = function(n, r, u, p, l, v) {
        if (u == null) {
            return;
        }
        if (!v) {
            v = 50;
        }
        var g = null;
        var z = p;
        var h = UIEventManager.o;
        try {
            if (n && n.hasOwnProperty && n.hasOwnProperty("setAttribute")) {
                n.setAttribute("__iuem", "1");
            }
            if (!n.events) {
                n.events = [];
            }
            g = n.events[r];
            if (!g) {
                g = n.events[r] = [];
                if (n[h + r]) {
                    g[0] = n[h + r];
                }
            }
            var d = g.length;
            var j = false;
            if (g && d > 0) {
                for (var m = d - 1; m > -1; m--) {
                    var w = g[m];
                    var q = w[3];
                    if (q < v) {
                        if (m < d - 1) {
                            g = g.insert([u, l, z, v], m + 1);
                        } else {
                            g.add([u, l, z, v]);
                        }
                        j = true;
                        break;
                    }
                }
            }
            if (!j) {
                g = g.insert([u, l, z, v], 0);
            }
            n.events[r] = g;
            if (n[h + r] && n[h + r] != UIEventManager.handleEvent) {
                var y = n[h + r];
                n.events[r] = g.insert([y, n, null]);
                n[h + r] = null;
            }
            if (!n[h + r]) {
                if (UIEventManager._s.contains(r) && n.addEventListener) {
                    n.addEventListener(r, UIEventManager.handleEvent);
                }
                n[h + r] = UIEventManager.handleEvent;
                var o = [r];
                n[UIEventManager._e] = o;
                o = null;
            } else {
                var x = n[UIEventManager._e];
                if (x && !x.contains(r)) {
                    x.add(r);
                }
                x = null;
            }
        } finally {
            g = null;
            n = null;
            z = null;
        }
    };
    UIEventManager.removeEvent = function(m, n, g) {
        var o = m.___events;
        var p = UIEventManager.o;
        if (n == null) {
            if (m.events && o) {
                var d = o.length;
                for (var j = 0; j < d; j++) {
                    var n = o[j];
                    m.events[n].clear();
                    m[p + n] = null;
                    if (UIEventManager._s.contains(n)) {
                        m.removeEventListener(n, UIEventManager.handleEvent);
                    }
                }
                o.clear();
            }
        } else {
            if (m.events && m.events[n]) {
                if (g != null) {
                    var h = m.events[n];
                    for (j = h.length - 1; j > -1; j--) {
                        if (h[j][0] == g) {
                            h.removeindex(j);
                        }
                    }
                    if (h.length == 0) {
                        h.clear();
                        o.remove(n);
                        m[p + n] = null;
                        if (UIEventManager._s.contains(n)) {
                            m.removeEventListener(n, UIEventManager.handleEvent);
                        }
                    }
                    h = null;
                } else {
                    m.events[n].clear();
                    o.remove(n);
                    m[p + n] = null;
                    if (UIEventManager._s.contains(n)) {
                        m.removeEventListener(n, UIEventManager.handleEvent);
                    }
                }
            }
        }
        m = null;
    };
    UIEventManager.handleEvent = function(d) {
        var g = true;
        d = d || window.event;
        if (d == null && this.document.parentWindow != window) {
            d = this.document.parentWindow.event;
        }
        if (d == null || d.type == null || d.srcElement == null || d.srcElement.disabled || d.srcElement.tagName == null) {
            if (d == null) {
                return;
            }
            if (d.type != null && (d.type == "load" || d.type == "unload")) {} else {
                return;
            }
        }
        if (d.srcElement != null && d.srcElement.tagName == "APPLET") {
            return;
        }
        var l = this.events[d.type];
        if (l == null) {
            return;
        }
        var j = l.length;
        if (j == null || j == 0) {
            return;
        }
        for (var o = j - 1; o > -1; o--) {
            var h = null;
            try {
                h = l[o];
            } catch (v) {}
            if (h == null) {
                continue;
            }
            var n = h[1];
            var q = h[2];
            var r = h[0];
            try {
                if (r == null) {
                    continue;
                }
                var u = {
                    e: d,
                    caller: this,
                    arg: q,
                    type: d.type
                };
                if (n == null) {
                    n = this;
                }
                var p = r.call(n, u);
                if (p != null) {
                    if (p == false) {
                        break;
                    }
                    if (p.breakEvent == true) {
                        return false;
                    }
                }
            } catch (m) {
                LEAP.showError(m);
            } finally {
                r = null;
                if (u != null) {
                    u.caller = u.e = u.arg = null;
                }
                n = q = u = null;
            }
        }
        l = null;
        return g;
    };
    DelegateUIEventManager = new Object();
    DelegateUIEventManager.a = new array();
    DelegateUIEventManager.b = new hashtable();
    DelegateUIEventManager.c = new array();
    DelegateUIEventManager.d = new array();
    DelegateUIEventManager.init = function() {
        DelegateUIEventManager.c.add("click");
        DelegateUIEventManager.c.add("dblclick");
        DelegateUIEventManager.c.add("keydown");
        DelegateUIEventManager.c.add("keypress");
        DelegateUIEventManager.c.add("keyup");
        DelegateUIEventManager.c.add("mousemove");
        DelegateUIEventManager.c.add("touchstart");
        DelegateUIEventManager.c.add("touchmove");
        DelegateUIEventManager.c.add("touchend");
        DelegateUIEventManager.c.add("touchclick");
        DelegateUIEventManager.d.add("touchclick");
    }();
    DelegateUIEventManager.u = "_uuid";
    DelegateUIEventManager.e = "___devents";
    DelegateUIEventManager.addEvent = function(m, p, q, n, j, r) {
        var v = m[DelegateUIEventManager.e];
        if (v == null) {
            v = m[DelegateUIEventManager.e] = new hashtable();
        }
        if (!r) {
            r = 50;
        }
        var w = v.getvalue(p);
        if (w == null) {
            w = [];
            v.add(p, w);
        }
        var g = {
            arg: n,
            domain: j,
            fn: q,
            priority: r
        };
        var d = w.length;
        var h = false;
        if (w && d > 0) {
            for (var l = d - 1; l > -1; l--) {
                var u = w[l];
                var o = u.priority;
                if (o < r) {
                    if (l < d - 1) {
                        w = w.insert(g, l + 1);
                    } else {
                        w.add(g);
                    }
                    h = true;
                    break;
                }
            }
        }
        if (!h) {
            w = w.insert(g, 0);
        }
        v.replace(p, w);
        if (!DelegateUIEventManager.a.contains(p)) {
            if (!DelegateUIEventManager.d.contains(p)) {
                UIEventManager.addEvent(document.body, p, DelegateUIEventManager.handleEvent);
            }
            DelegateUIEventManager.a.add(p);
        }
        g = v = w = q = n = m = p = j = null;
    };
    DelegateUIEventManager.removeEvent = function(j, m, g) {
        if (j != null) {
            if (m == null && g == null) {
                j[DelegateUIEventManager.e] = null;
                j.removeAttribute(DelegateUIEventManager.e);
            } else {
                if (m != null && g != null) {
                    var p = j[DelegateUIEventManager.e];
                    if (p == null) {
                        return;
                    }
                    var n = p.getvalue(m);
                    if (n != null) {
                        var d = n.length;
                        for (var h = d - 1; h > -1; h--) {
                            var o = n[h];
                            if (o.fn == g) {
                                n.remove(o);
                            }
                        }
                    }
                    p = n = null;
                } else {
                    if (m == null && g != null) {} else {
                        if (m != null && g == null) {
                            var p = j[DelegateUIEventManager.e];
                            if (p != null) {
                                p.remove(m);
                            }
                        }
                    }
                }
            }
        }
    };
    DelegateUIEventManager.handleEvent = function(d) {
        var o = d.e;
        var m = o.target || o.srcElement;
        var p = o.type;
        if (d.type) {
            p = d.type;
        }
        var r = m[DelegateUIEventManager.e];
        if (r == null) {
            return;
        }
        var u = r.getvalue(p);
        if (u != null) {
            var g = u.length;
            for (var n = g - 1; n > -1; n--) {
                var q = null;
                try {
                    q = u[n];
                } catch (o) {}
                if (q == null) {
                    continue;
                }
                var w = {
                    caller: m,
                    e: o,
                    arg: q.arg,
                    type: p
                };
                var j = q.domain;
                if (j == null) {
                    j = m;
                }
                try {
                    if (q.fn.call(j, w) == false) {
                        break;
                    }
                } catch (h) {
                    LEAP.showError(h);
                } finally {
                    q = w = j = null;
                }
            }
        }
        r = u = m = o = d = null;
    };
    ElementEventManager = new Object();
    ElementEventManager.a = new hashtable();
    ElementEventManager.e = "__eevents";
    ElementEventManager.addManagedEventType = function(h, g) {
        if (ElementEventManager.a.contains(h)) {
            ElementEventManager.a.getvalue(h).add(g);
        } else {
            var d = new array();
            d.add(g);
            ElementEventManager.a.add(h, d);
        }
    };
    ElementEventManager.addEvent = function(m, p, q, n, j, r) {
        if (m == null || p == null || q == null) {
            return;
        }
        if (!r) {
            r = 50;
        }
        var v = m[ElementEventManager.e];
        if (v == null) {
            v = m[ElementEventManager.e] = new hashtable();
        }
        var w = v.getvalue(p);
        if (w == null) {
            w = [];
            v.add(p, w);
        }
        var g = {
            arg: n,
            domain: j,
            fn: q,
            priority: r
        };
        var d = w.length;
        var h = false;
        if (w && d > 0) {
            for (var l = d - 1; l > -1; l--) {
                var u = w[l];
                var o = u.priority;
                if (o < r) {
                    if (l < d - 1) {
                        w = w.insert(g, l + 1);
                    } else {
                        w.add(g);
                    }
                    h = true;
                    break;
                }
            }
        }
        if (!h) {
            w = w.insert(g, 0);
        }
        v.replace(p, w);
        g = v = w = q = n = m = p = j = null;
    };
    ElementEventManager.removeEvent = function(m, n, g) {
        if (m != null) {
            if (n == null && g == null) {
                m[ElementEventManager.e] = null;
                m.removeAttribute(ElementEventManager.e);
            } else {
                if (n != null && g != null) {
                    var o = m[ElementEventManager.e];
                    if (o && o.contains(n)) {
                        var h = o.getvalue(n);
                        if (h != null) {
                            var d = h.length;
                            for (var j = d - 1; j > -1; j--) {
                                if (h[j].fn == g) {
                                    h.remove(h[j]);
                                }
                            }
                            if (h.length == 0) {
                                o.remove(n);
                            }
                            if (o.count == 0) {
                                m[ElementEventManager.e] = null;
                                m.removeAttribute(ElementEventManager.e);
                            }
                            h = null;
                        }
                    }
                    o = null;
                } else {
                    if (n == null && g != null) {} else {
                        if (n != null && g == null) {
                            var o = m[ElementEventManager.e];
                            if (o != null) {
                                o.remove(n);
                            }
                            o = null;
                        }
                    }
                }
            }
            m = g = n = null;
        }
    };
    ElementEventManager.handleEvent = function(m, o, u) {
        var p = m[ElementEventManager.e];
        if (p == null) {
            return;
        }
        var r = p.getvalue(o);
        if (r != null) {
            var g = r.length;
            for (var n = g - 1; n > -1; n--) {
                var q = null;
                try {
                    q = r[n];
                } catch (w) {}
                if (q == null) {
                    continue;
                }
                var d = {
                    caller: m,
                    arg: q.arg,
                    arg2: u,
                    type: o
                };
                var j = q.domain;
                if (j == null) {
                    j = m;
                }
                try {
                    if (q.fn.call(j, d) == false) {
                        break;
                    }
                } catch (h) {
                    LEAP.showError(h);
                } finally {
                    q = d = j = null;
                }
            }
        }
        p = r = m = u = null;
    };
    LEAP.getElement = function(d, l, j, g) {
        var h = null;
        try {
            if (l != null && typeof(l) == commfields.string) {
                l = LEAP.getElement(l);
            }
            h = LEAP.selector(d, l, j, g);
            if (h.length > 0) {
                return h[0];
            }
        } catch (m) {} finally {
            h = null;
        }
    };
    LEAP.getElements = function(d, l, j, g) {
        var h = null;
        try {
            if (l != null && typeof(l) == commfields.string) {
                l = LEAP.getElement(l);
            }
            h = LEAP.selector(d, l, j, g);
            if (h != null && h.length == 0) {
                return null;
            }
            return h;
        } catch (m) {} finally {
            h = null;
        }
    };
    LEAP.addEvent = function(d, u, v, r, m, x, w) {
        if (typeof(d) == commfields.string) {
            d = LEAP.getElements(d);
        }
        if (d == null || u == null || v == null) {
            return;
        }
        if (u != null) {
            u = u.Trim();
        }
        if (x == null) {
            x = false;
        }
        var p = x != true && DelegateUIEventManager.c.contains(u);
        var h = null;
        if (p) {
            h = DelegateUIEventManager;
        } else {
            h = UIEventManager;
        }
        if (d instanceof Array) {
            var j = d.length;
            for (var o = 0; o < j; o++) {
                var n = d[o];
                if (!LEAP.isIE && n != null && (u == "keydown" || u == "keyup") && n == document.body) {
                    n = document;
                }
                var q = n.getAttribute(commfields.ct);
                if (q == null || q.trim().length == 0) {
                    q = n.getAttribute(commfields.ht);
                }
                var g = q != null && ElementEventManager.a.contains(q) && ElementEventManager.a.getvalue(q).contains(u);
                if (g) {
                    ElementEventManager.addEvent(n, u, v, r, m, w);
                } else {
                    h.addEvent(n, u, v, r, m, w);
                }
                n = null;
            }
        } else {
            var q = null;
            if (d.getAttribute != null) {
                q = d.getAttribute(commfields.ct);
                if (q == null || q.trim().length == 0) {
                    q = d.getAttribute(commfields.ht);
                }
            }
            var g = q != null && ElementEventManager.a.contains(q) && ElementEventManager.a.getvalue(q).contains(u);
            if (!LEAP.isIE && d != null && (u == "keydown" || u == "keyup") && d == document.body) {
                d = document;
            }
            if (g) {
                ElementEventManager.addEvent(d, u, v, r, m, w);
            } else {
                h.addEvent(d, u, v, r, m, w);
            }
        }
        d = u = v = r = m = null;
    };
    LEAP.removeEvent = function(d, q, r, u) {
        if (typeof(d) == commfields.string) {
            d = LEAP.getElements(d);
        }
        if (d == null || q == null || r == null) {
            return;
        }
        if (q != null) {
            q = q.Trim();
        }
        if (u == null) {
            u = false;
        }
        var n = u != true && DelegateUIEventManager.c.contains(q);
        var h = null;
        if (n) {
            h = DelegateUIEventManager;
        } else {
            h = UIEventManager;
        }
        if (d instanceof Array) {
            var j = d.length;
            for (var o = 0; o < j; o++) {
                var m = d[o];
                var p = m.getAttribute(commfields.ct);
                var g = p != null && ElementEventManager.a.contains(p) && ElementEventManager.a.getvalue(p).contains(q);
                if (g) {
                    ElementEventManager.removeEvent(m, q, r);
                } else {
                    h.removeEvent(m, q, r);
                }
                m = null;
            }
        } else {
            var p = null;
            if (d.getAttribute != null) {
                p = d.getAttribute(commfields.ct);
            }
            var g = p != null && ElementEventManager.a.contains(p) && ElementEventManager.a.getvalue(p).contains(q);
            if (g) {
                ElementEventManager.removeEvent(d, q, r);
            } else {
                h.removeEvent(d, q, r);
            }
        }
        d = q = r = null;
    };
    LEAP.setGCFlag = function(g, d) {
        if (g._GC != null) {
            return;
        }
        if (d == null) {
            d = "___global_GC_Flage";
        }
        g._GC = d;
    };
    LEAP.getGCFlag = function(d) {
        return d.getAttribute("_GC");
    };
    LEAP.setGCAttribute = function(g, d, j) {
        if (g == null) {
            return;
        }
        LEAP.setGCFlag(g);
        g[d] = j;
        var h = g._GCA;
        if (h == null) {
            h = g._GCA = new array();
            h.add(d);
        } else {
            if (!h.contains(d)) {
                h.add(d);
            }
        }
        h = j = d = g = null;
    };
    LEAP.getGCAttribute = function(g, d) {
        if (g != null) {
            return g[d];
        }
    };
    LEAP.removeGCAttribute = function(g, d) {
        if (g != null && d != null) {
            g[d] = null;
            g.removeAttribute(d);
            g[commfields.gcf].remove(d);
        }
    };
    LEAP.createGCObject = function(d) {
        if (d == null) {
            d = commfields.ggc;
        }
        var g = commfields.gco.getvalue(d);
        if (g == null) {
            g = new Object();
            commfields.gco.add(d, g);
        }
        return g;
    };
    LEAP.getGCObject = function(d) {
        if (d == null) {
            d = commfields.ggc;
        }
        return commfields.gco.getvalue(d);
    };
    LEAP.setAttribute = function(m, n, g) {
        if (typeof(m) == commfields.string) {
            m = LEAP.getElements(m);
        }
        if (m == null) {
            return;
        }
        var j = m instanceof Array;
        if (j) {
            if (m.length > 0) {
                var d = m.length;
                for (var h = 0; h < d; h++) {
                    m[h][n] = g;
                    m[h].setAttribute(n, g);
                }
            }
        } else {
            m[n] = g;
        }
        m = null;
    };
    LEAP.removeAttribute = function(h, j) {
        if (typeof(h) == commfields.string) {
            h = LEAP.getElements(h);
        }
        if (h == null) {
            return;
        }
        if (!(h instanceof Array)) {
            h = [h];
        }
        var d = h.lenght;
        for (var g = 0; g < d; g++) {
            h[g].removeAttribute(j);
        }
    };
    LEAP.getAttribute = function(h, g) {
        if (h == null) {
            return;
        }
        var d = h[g];
        if (d == null) {
            return h.getAttribute(g);
        }
        return d;
    };
    LEAP._stylearr1 = ["width", "height", "top", "left", "right", "bottom", "margginLeft", "margginRight", "margginTop", "margginBottom", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom"];
    LEAP.setStyle = function(d, g, o) {
        if (d == null || g == null) {
            return;
        }
        if (typeof(d) == commfields.string) {
            d = LEAP.getElements(d);
        }
        if (d == null) {
            return;
        }
        if (o == true || d instanceof Array) {} else {
            d = [d];
        }
        var h = d.length;
        for (var n = 0; n < h; n++) {
            var p = d[n];
            for (var j in g) {
                var r = g[j];
                if (typeof r != "function") {
                    try {
                        if (LEAP._stylearr1.contains(j.toString().toLowerCase())) {
                            if (!String.isEmpty(r)) {
                                var m = r.toString().toLowerCase().trim();
                                if (!m.endsWith("%") && !m.endsWith("px") && m != "0") {
                                    r += "px";
                                }
                            }
                        }
                        if (p.style[j] != r) {
                            p.style[j] = r;
                        }
                    } catch (p) {
                        try {
                            p.style[j] = g[j];
                        } catch (q) {}
                    }
                }
            }
            p = null;
        }
        d = null;
    };
    LEAP.GCCollect = function(o) {
        var p = o == null || o == commfields.ggc;
        if (p && o == null) {
            o = commfields.ggc;
        }
        var h = LEAP.getElements(commfields.gcfs + o + commfields.gcfe);
        if (h != null && h.length > 0) {
            var d = h.length;
            for (var j = 0; j < d; j++) {
                var q = h[j];
                var n = q.getAttribute(commfields.gcf);
                if (n != null) {
                    for (var g in n.keys) {
                        var m = n.getvalue(g);
                        q[m] = null;
                        m = null;
                    }
                    q[commfields.gcf] = null;
                    n = null;
                }
                UIEventManager.removeEvent(q);
                DelegateUIEventManager.removeEvent(q);
                q = null;
            }
        }
        if (!p) {
            if (commfields.gco.contains(o)) {
                commfields.gco.remove(o);
            }
        } else {
            commfields.gco.clear();
        }
    };
    LEAP.request = function(g, h, d, r, o, m, n, j, p, q, l) {
        return leapclient.request(g, h, d, r, o, m, n, j, p, q, l);
    };
    LEAP.request2 = function(d) {
        return leapclient.request2(d);
    };
    LEAP.asynrequest = function(h, l, m, g, d, j) {
        return leapclient.request(h, l, m, g, null, null, null, null, null, d, j);
    };
    LEAP._check = function(g, d) {
        if (g == null || d == null) {
            return;
        }
        if (typeof(g) == commfields.string) {
            g = LEAP.getElement(g);
        }
        if (g == null || g.getAttribute("ct") != d) {
            return;
        }
        try {
            return g;
        } finally {
            g = null;
        }
    };
    LEAP._match = function(j, m, n, o, g) {
        if (n == null) {
            n = commfields.ct;
        }
        var p = null;
        try {
            if (j.getAttribute(n) == m || j[n] == m) {
                return j;
            }
            if (o == null) {
                o = 19;
            }
            p = j.parentNode;
            var d = -1;
            for (var l = 0; l < o; l++) {
                d++;
                if (p == null) {
                    return;
                }
                if (p.tagName == "BODY") {
                    return;
                }
                if (p.getAttribute(n) == m || p[n] == m) {
                    if (g == true) {
                        return d;
                    }
                    return p;
                }
                p = p.parentNode;
                if (p == null) {
                    return;
                }
            }
        } catch (h) {} finally {
            p = j = null;
        }
    };
    LEAP.formatdate = function(d, h) {
        if (h == null) {
            if (d == null) {
                return;
            }
            if (typeof(d) == "string" && d.indexOf(":") > 0) {
                h = 0;
            } else {
                h = 1;
            }
        }
        if (d == null) {
            return null;
        }
        var g = "yyyy-mm-dd hh:mi:ss";
        if (h == 1) {
            g = "yyyy-mm-dd";
        } else {
            if (h == 2) {
                g = "yyyy-mm-dd hh:mi:ss.ms";
            } else {
                if (h == 3) {
                    g = "yyyy-mm-dd hh:mi";
                }
            }
        }
        if (d instanceof Date) {
            return new DateFormat(d).format(g);
        } else {
            return new DateFormat(LEAP.tonum(d)).format(g);
        }
    };
    LEAP._checkIdCard = function(g) {
        if (g == null || (g.trim().length != 15 && g.trim().length != 18)) {
            return false;
        }
        var h = 0;
        if (g.length == 15) {
            g = LEAP._convertCard(g);
        }
        if (!/^\d{17}(\d|x)$/i.test(g)) {
            return false;
        }
        g = g.replace(/x$/i, "a");
        for (var d = 17; d >= 0; d--) {
            h += (Math.pow(2, d) % 11) * parseInt(g.charAt(17 - d), 11);
        }
        if (h % 11 != 1) {
            return false;
        }
        return true;
    };
    LEAP.toBirthday = function(g) {
        if (!LEAP._checkIdCard(g)) {
            LEAP.messagebox.alert("不正确的身份证号码");
            return null;
        }
        if (g.length == 15) {
            g = LEAP._convertCard(g);
        }
        var h = g.substr(6, 4) + "-" + Number(g.substr(10, 2)) + "-" + Number(g.substr(12, 2));
        var j = g.substr(6, 4) + "-" + g.substr(10, 2) + "-" + g.substr(12, 2);
        var l = new Date(h.replace(/-/g, "/"));
        if (h != (l.getFullYear() + "-" + (l.getMonth() + 1) + "-" + l.getDate())) {
            LEAP.messagebox.alert("出生年月与身份证号码不一致");
            return null;
        }
        return j;
    };
    LEAP._convertCard = function(CardNum) {
        CardNum = CardNum.substr(0, 6) + "19" + CardNum.substr(6, 15);
        var lastNumber;
        var getNum = eval(CardNum.charAt(0) * 7 + CardNum.charAt(1) * 9 + CardNum.charAt(2) * 10 + CardNum.charAt(3) * 5 + CardNum.charAt(4) * 8 + CardNum.charAt(5) * 4 + CardNum.charAt(6) * 2 + CardNum.charAt(7) * 1 + CardNum.charAt(8) * 6 + CardNum.charAt(9) * 3 + CardNum.charAt(10) * 7 + CardNum.charAt(11) * 9 + CardNum.charAt(12) * 10 + CardNum.charAt(13) * 5 + CardNum.charAt(14) * 8 + CardNum.charAt(15) * 4 + CardNum.charAt(16) * 2);
        getNum = getNum % 11;
        switch (getNum) {
            case 0:
                lastNumber = "1";
                break;
            case 1:
                lastNumber = "0";
                break;
            case 2:
                lastNumber = "X";
                break;
            case 3:
                lastNumber = "9";
                break;
            case 4:
                lastNumber = "8";
                break;
            case 5:
                lastNumber = "7";
                break;
            case 6:
                lastNumber = "6";
                break;
            case 7:
                lastNumber = "5";
                break;
            case 8:
                lastNumber = "4";
                break;
            case 9:
                lastNumber = "3";
                break;
            case 10:
                lastNumber = "2";
                break;
        }
        return CardNum + lastNumber;
    };
    LEAP.toDate = function(j) {
        if (j == null) {
            return;
        }
        var h = null;
        var d = j.indexOf(".");
        if (d > -1) {
            h = j.substring(d + 1) * 1;
            j = j.substring(0, d);
        }
        var g = new Date(Date.parse(j.replace(/-/g, "/")));
        if (h != null) {
            g.setMilliseconds(h);
        }
        return g;
    };
    LEAP.getLoadedModule = function(d) {
        return GlobalModuleManager.getModule(d);
    };
    LEAP.parsedatestr = function(d, g) {
        if (g == null) {
            g = 0;
        }
        if (d == null) {
            return null;
        }
        if (d != null && d.javaClass != null && (d.javaClass == "java.util.Date" || d.javaClass == "java.sql.Timestamp")) {
            return LEAP.formatdate(d.time, g);
        }
        return d;
    };
    LEAP.tonum = function(g) {
        if (g == null || g == undefined || isNaN(g)) {
            g = 0;
        }
        var d = Number(g);
        if (isNaN(d)) {
            return 0;
        }
        return d;
    };
    LEAP.parsenum = function(g) {
        if (g == null || g == undefined || isNaN(g)) {
            return null;
        }
        var d = Number(g);
        if (isNaN(d)) {
            return null;
        }
        return d;
    };
    LEAP.isArray = function(d) {
        if (d == null) {
            return false;
        }
        return Object.prototype.toString.apply(d) == "[object Array]";
    };
    LEAP.convertResult = function(m) {
        if (m != null && m.javaClass != null) {
            if (m.javaClass == commfields.rsc) {
                if (m == null || m.result == null || m.result.length == 0) {
                    return null;
                }
                var d = new Array();
                var h = m.result.length;
                var w = m.codeValues != null;
                for (var q = 0; q < h; q++) {
                    var r = new Object();
                    var v = m.result[q];
                    if (!v) {
                        continue;
                    }
                    var u = m.metaData.length;
                    for (var o = 0; o < u; o++) {
                        var n = m.metaData[o].name;
                        var p = m.metaData[o].type;
                        var x = v[o];
                        if (w) {
                            var g = m.codeValues[q];
                            if (g != null) {
                                _cv = g[o];
                                if (_cv != null) {
                                    r[commfields.rsccv + n] = _cv;
                                }
                            }
                        }
                        if (p == -5 || p == -6 || p == -7 || p == 4 || p == 5 || p == 6 || p == 7 || p == 8) {
                            if (String.isEmpty(x)) {
                                x = null;
                            } else {
                                x = LEAP.tonum(x);
                            }
                        }
                        r[n] = x;
                    }
                    d.add(r);
                }
                return d;
            } else {
                if (m.javaClass == "com.longrise.LEAP.Base.Objects.EntitySet") {
                    return m.result;
                } else {
                    if (m.javaClass == "com.longrise.LEAP.Base.Objects.EntityBeanSet") {
                        if (m == null || m.result == null || m.result.length == 0) {
                            return null;
                        }
                        var d = new Array();
                        var h = m.result.length;
                        var w = m.codeValues != null;
                        if (w) {
                            for (var q = 0; q < h; q++) {
                                var r = m.result[q];
                                var v = m.result[q];
                                if (!v) {
                                    continue;
                                }
                                var u = m.metaData.length;
                                for (var o = 0; o < u; o++) {
                                    var n = m.metaData[o].name;
                                    var p = m.metaData[o].type;
                                    var x = v[n];
                                    if (w) {
                                        var g = m.codeValues[q];
                                        if (g != null) {
                                            _cv = g[o];
                                            if (_cv != null) {
                                                r[commfields.rsccv + n] = _cv;
                                            }
                                        }
                                    }
                                    if (p == -5 || p == -6 || p == -7 || p == 4 || p == 5 || p == 6 || p == 7 || p == 8) {
                                        if (String.isEmpty(x)) {
                                            x = null;
                                        } else {
                                            x = LEAP.tonum(x);
                                        }
                                    }
                                    r[n] = x;
                                }
                                d.add(r);
                            }
                            return d;
                        } else {
                            return m.result;
                        }
                    }
                }
            }
        }
        if (m != null && m.result != null) {
            return m.result;
        }
        return m;
    };
    var ChangeResult = function() {};
    ChangeResult.prototype.javaClass = "com.longrise.LEAP.Base.Objects.ChangeResult";
    ChangeResult.prototype.addparameter = function(h, d, g) {
        if (this.metaData == null) {
            this.metaData = [];
            this.result = [];
            this.source = [];
        }
        this.metaData.push(h);
        this.result.push(d);
        this.source.push(g);
    };
    ChangeResult.prototype.add = function(h, g, d) {
        return this.addparameter(name, g, d);
    };
    var QueryParameters = function() {};
    QueryParameters.prototype.javaClass = "com.longrise.LEAP.Base.Objects.QueryParameter";
    QueryParameters.prototype.setGroup = function(d) {
        if (String.isEmpty(d)) {
            this.group = null;
        } else {
            d += "";
            d = d.Trim().toLowerCase();
            this.group = d;
        }
    };
    var SearchParameters = function() {};
    SearchParameters.prototype.javaClass = "com.longrise.LEAP.Base.Objects.SearchParameters";
    var JavaDate = function() {};
    JavaDate.prototype.javaClass = "java.util.Date";
    SearchParameters.prototype.setExtendQuery = function(d) {
        if (d != null) {
            this.extendQuery = d;
        }
    };
    SearchParameters.prototype.setPrefixParameter = function(d) {
        if (d != null) {
            this.prefixParameter = d;
        }
    };
    SearchParameters.prototype.addParameter = function(g, l, d, h) {
        if (this.parameters == null) {
            this.parameters = [];
        }
        var j = new QueryParameters();
        j.name = g;
        j.value = l;
        if (d != null) {
            j.flag = d;
        }
        if (h != null) {


            j.type = h;
        }
        this.parameters.push(j);
        return j;
    };
    SearchParameters.prototype.getParameter = function(g) {
        if (this.parameters == null) {
            return;
        }
        var d = this.parameters.length;
        for (var h = d - 1; h > -1; h--) {
            var j = this.parameters[h];
            if (j.name == g) {
                return j;
            }
        }
    };
    SearchParameters.prototype.get = function(d) {
        return this.getParameter(d);
    };
    SearchParameters.prototype.add = function(g, j, d, h) {
        return this.addParameter(g, j, d, h);
    };
    SearchParameters.prototype.setGroupLogic = function(h, g) {
        if (h == null) {
            return;
        }
        h += "";
        h = h.toLowerCase().Trim();
        if (g == "or" || g == "2" || g == 2) {
            g = 2;
        } else {
            g = 1;
        }
        if (this.groups == null) {
            this.groups = [];
        }
        if (this.groups.length > 0) {
            var d = this.groups.length;
            for (var j = 0; j < d; j++) {
                if (this.groups[j].name == h) {
                    return;
                }
            }
        }
        this.groups.add({
            name: h,
            logic: g
        });
    };
    SearchParameters.prototype.removeParameter = function(g) {
        if (this.parameters == null) {
            return;
        }
        var d = this.parameters.length;
        for (var h = d - 1; h > -1; h--) {
            var j = this.parameters[h];
            if (j.name == g) {
                this.parameters.remove(j);
            }
        }
    };
    SearchParameters.prototype.addField = function(d) {
        if (this.fields == null) {
            this.fields = [];
        }
        if (d != null) {
            if (!this.fields.contains(d)) {
                this.fields.push(d);
            }
        }
    };
    SearchParameters.prototype.setOrder = function(d) {
        this.order = d;
    };
    SearchParameters.prototype.getOrder = function() {
        return this.order;
    };
    SearchParameters.prototype.setName = function(d) {
        this.name = d;
    };
    SearchParameters.prototype.clone = function() {
        var j = new SearchParameters();
        j.name = this.name;
        j.order = this.order;
        if (this.parameters != null && this.parameters.length > 0) {
            var d = this.parameters.length;
            for (var g = 0; g < d; g++) {
                var h = this.parameters[g];
                j.addParameter(h.name, h.value, h.flag, h.type);
            }
        }
        if (this.fields != null && this.fields.length > 0) {
            var d = this.fields.length;
            for (var g = 0; g < d; g++) {
                var h = this.fields[g];
                j.addField(h);
            }
        }
        if (this.groups != null && this.groups.length > 0) {
            var d = this.groups.length;
            for (var g = 0; g < d; g++) {
                var h = this.groups[g];
                j.setGroupLogic(h.name, h.logic);
            }
        }
        return j;
    };
    var SearchBuilder = function(d) {
        this.parameter = new SearchParameters();
        this.parameter.name = d;
        this.name = d;
    };
    SearchBuilder.prototype.getOrder = function() {
        return this.parameter.getOrder();
    };
    SearchBuilder.prototype.par = function(g, l, d, m, j) {
        if (d == null) {
            d = 11;
        }
        var h = this.parameter.add(g, l, d, j);
        h.setGroup(m);
        return this;
    };
    SearchBuilder.prototype.par2 = function(g, n, o, p, l) {
        var h = null;
        if (String.isEmpty(o)) {
            h = 11;
        } else {
            var j = o.trim().toLowerCase();
            h = 1;
            var d = j;
            var m = j.indexOf(" ");
            if (m > -1) {
                var q = j.substring(0, m);
                if (q == "or") {
                    h = 2;
                    d = j.substring(m);
                } else {
                    if (q == "and") {
                        d = j.substring(m);
                    } else {
                        d = j;
                    }
                }
            }
            d = d.trim();
            h += "";
            if (d == "=") {
                h += "1";
            } else {
                if (d == "like %v%") {
                    h += "2";
                } else {
                    if (d == "like %v") {
                        h += "3";
                    } else {
                        if (d == ">") {
                            h += 4;
                        } else {
                            if (d == "<") {
                                h += 5;
                            } else {
                                if (d == ">=") {
                                    h += 6;
                                } else {
                                    if (d == "<=") {
                                        h += 7;
                                    } else {
                                        if (d == "<>") {
                                            h += 8;
                                        } else {
                                            if (d == "like v%") {
                                                h += 9;
                                            } else {
                                                if (d == "not like %v") {
                                                    h += 10;
                                                } else {
                                                    if (d == "not like %v%") {
                                                        h += 11;
                                                    } else {
                                                        if (d == "not like v%") {
                                                            h += 12;
                                                        } else {
                                                            if (d == "is null") {
                                                                h += 13;
                                                            } else {
                                                                if (d == "is not null") {
                                                                    h += 14;
                                                                } else {
                                                                    if (d == "in") {
                                                                        h += 15;
                                                                    } else {
                                                                        if (d == "not in") {
                                                                            h += 16;
                                                                        } else {
                                                                            if (d == "@>") {
                                                                                h += "20";
                                                                            } else {
                                                                                if (d == "@<") {
                                                                                    h += "21";
                                                                                } else {
                                                                                    if (d == "&&") {
                                                                                        h += "22";
                                                                                    } else {
                                                                                        h += "2";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return this.par(g, n, h, p, l);
    };
    SearchBuilder.prototype.setGroupLogic = function(g, d) {
        this.parameter.setGroupLogic(g, d);
        return this;
    };
    SearchBuilder.prototype.setGroupLogic2 = function(h, g) {
        var d = 1;
        if (g == null || g.trim().toLowerCase() != "or") {
            d = 1;
        } else {
            d = 2;
        }
        return this.parameter.setGroupLogic(h, d);
    };
    SearchBuilder.prototype.order = function(d) {
        this.parameter.setOrder(d);
        return this;
    };
    SearchBuilder.prototype.fields = function() {
        if (arguments.length > 0) {
            var g = arguments.length;
            for (var m = 0; m < g; m++) {
                if (arguments[m] != null) {
                    if (arguments[m] instanceof Array) {
                        var d = arguments[m];
                        var n = d.length;
                        for (var h = 0; h < n; h++) {
                            if (d[h] != null) {
                                this.parameter.addField(d[h]);
                            }
                        }
                    } else {
                        this.parameter.addField(arguments[m]);
                    }
                }
            }
        }
        return this;
    };
    SearchBuilder.prototype.getParameter = function(d) {
        return this.parameter.getParameter(d);
    };
    SearchBuilder.prototype.parval = function(d) {
        var g = this.parameter.getParameter(d);
        if (g != null) {
            return g.value;
        }
        return null;
    };
    SearchBuilder.prototype.removeParameter = function(d) {
        this.parameter.removeParameter(d);
    };
    SearchBuilder.prototype.toJSON = function(d) {
        if (this.autoControlArea != null) {
            this.parameter.autoControlArea = this.autoControlArea;
        }
        if (this.prefixParameter != null) {
            this.parameter.prefixParameter = this.prefixParameter;
        }
        if (this.pageNum != null) {
            this.parameter.pageNum = this.pageNum;
        }
        if (this.pageSize != null) {
            this.parameter.pageSize = this.pageSize;
        }
        if (this.name != null) {
            this.parameter.name = this.name;
        }
        if (this.getCodeValue != null) {
            this.parameter.getCodeValue = this.getCodeValue;
        }
        if (this.distinct != null) {
            this.parameter.distinct = this.distinct;
        }
        if (this.toCount != null) {
            this.parameter.toCount = this.toCount;
        }
        if (this.toResult != null) {
            this.parameter.toResult = this.toResult;
        }
        if (this.fillCNMetaData != null) {
            this.parameter.fillCNMetaData = this.fillCNMetaData;
        }
        if (this.returnCodeValue != null) {
            this.parameter.returnCodeValue = this.returnCodeValue;
        }
        if (this.fillCodeValue != null) {
            this.parameter.fillCodeValue = this.fillCodeValue;
        }
        if (this.name2 != null) {
            this.parameter.name2 = this.name2;
        }
        if (this.pageCount != null) {
            this.parameter.pageCount = this.pageCount;
        }
        if (this.extendQuery != null) {
            this.parameter.extendQuery = this.extendQuery;
        }
        if (this.codetypes != null) {
            this.parameter.codetypes = this.codetypes;
        }
        if (this.isgis != null) {
            this.parameter.isgis = this.isgis;
        }
        this.parameter.gisFilter = this.gisFilter;
        this.parameter.javaClass = "com.longrise.LEAP.BLL.Cache.SearchBuilder";
        return this.parameter;
    };
    SearchBuilder.prototype.addField = function(d) {
        this.parameter.addField(d);
    };
    SearchBuilder.prototype.setOrder = function(d) {
        this.parameter.setOrder(d);
    };
    SearchBuilder.prototype.setPrefixParameter = function(d) {
        this.parameter.setPrefixParameter(d);
    };
    SearchBuilder.prototype.search = function(j, d, h) {
        if (this.moduleInstance != null) {
            var g = LEAP.getLoadedModule(this.moduleInstance);
            if (g != null) {
                if (h == null) {
                    h = "beanSearch";
                }
                try {
                    return g.asynrequest(h, {
                        par: this
                    }, j, d);
                } finally {
                    g = null;
                }
            }
        }
    };
    SearchBuilder.prototype.setExtendQuery = function(d) {
        this.parameter.setExtendQuery(d);
    };
    SearchBuilder.prototype.add = function(g, j, d, h) {
        return this.parameter.addParameter(g, j, d, h);
    };
    SearchBuilder.prototype.addParameter = function(g, j, d, h) {
        return this.parameter.addParameter(g, j, d, h);
    };
    var DataResult = function() {};
    DataResult.prototype.javaClass = "com.longrise.LEAP.Base.Objects.DataResult";
    DataResult.prototype.addparameter = function(d, g) {
        if (this.metaData == null) {
            this.metaData = [];
            this.result = [];
        }
        this.metaData.push(d);
        this.result.push(g);
    };
    DataResult.prototype.addParameter = function(d, g) {
        return this.addparameter(d, g);
    };
    DataResult.prototype.add = function(d, g) {
        return this.addparameter(d, g);
    };
    DataResult.prototype.setParameter = function(g, h) {
        if (this.metaData.contains(g)) {
            var d = this.metaData.indexof(g);
            this.result[d] = h;
        } else {
            this.add(g, h);
        }
    };
    LEAP._p = function(str) {
        if (str == null) {
            return;
        }
        var l = str.indexOf("<!--@");
        if (l > -1) {
            var e = str.substr(l + 5, str.indexOf("-->", l) - l - 5);
            var o = null;
            try {
                var ex = "({" + e.replaceall(" =", "=").replaceall("= ", "=").replaceall("=", ":").Trim().replaceall("\r\n", " ").replaceall("\n", " ").replaceall("  ", " ").replaceall(" ", ",") + "})";
                var o = eval(ex);
                if (o != null && ex != null) {
                    var idx = ex.indexOf("module:");
                    if (idx > -1) {
                        var idx2 = ex.indexOf(",");
                        if (idx2 < 0) {
                            idx2 = ex.length - 2;
                        }
                        var n = ex.substring(idx + 7, idx2);
                        o.___moduleName = n;
                    }
                }
            } catch (err) {}
        }
        return o;
    };
    LEAP._m = new hashtable();
    LEAP.buildModuleDef = function(d) {
        if (d == null) {
            return;
        }
        if (d.type == "static") {} else {
            if (d.type = "instance") {}
        }
    };
    LEAP.getLastError = function() {
        var d = leapclient.getLastError();
        if (d != null && d.error != null) {
            return d;
        }
        return null;
    };
    var ___maus = new hashtable();
    var __haspa = false;
    LEAP.___asynGetModuleAuthoritysCallBack = function(n, g) {
        var j = g.name;
        var o = g.callback;
        if (n == null) {
            n = {};
            n.url = "";
        } else {
            if (n.userinfo != null) {
                LEAP.userInfo = n.userinfo;
                LEAP.getUserInfo(g.now);
            }
        }
        if (n != null && n.operations != null) {
            var h = n.operations.length;
            var d = new array();
            for (var m = 0; m < h; m++) {
                d.add(n.operations[m]);
            }
            n.operations = null;
            n.operations = d;
        }
        if (o != null) {
            try {
                o(n, g.args);
            } finally {
                n = o = null;
            }
        }
    };
    LEAP.asynGetModuleAuthoritys = function(h, l, g) {
        if (h == null) {
            return null;
        }
        h = h.Trim();
        if (___maus.contains(h)) {
            l(___maus.getvalue(h));
        } else {
            var d = !__haspa;
            var j = LEAP.request2({
                name: "app_getLogicModuleOperations",
                par: {
                    n: h,
                    g: d
                },
                callback: LEAP.___asynGetModuleAuthoritysCallBack,
                arg: {
                    name: h,
                    callback: l,
                    arg: g,
                    now: new Date().getTime()
                }
            });
        }
    };
    LEAP.fillModuleAuthoritys = function(g, h, d) {
        if (h == null) {
            h = {};
            h.url = "";
        } else {
            if (h.userinfo != null) {
                LEAP.userInfo = h.userinfo;
                LEAP.getUserInfo(d);
            }
        }
        ___maus.add(g, h);
        return h;
    };
    LEAP.getModuleAuthoritys = function(h) {
        if (h == null) {
            return null;
        }
        h = h.Trim();
        if (___maus.contains(h)) {
            return ___maus.getvalue(h);
        }
        var d = !__haspa;
        var g = new Date().getTime();
        var j = LEAP.request2({
            name: "app_getLogicModuleOperations",
            par: {
                n: h,
                g: d
            }
        });
        return LEAP.fillModuleAuthoritys(h, j, g);
    };
    var __fp = "LEAP/Resource/HTML/Control/form.html";
    var __fp2 = "LEAP/Resource/HTML/Control/form2.html";
    var __fp3 = "LEAP/Resource/HTML/Control/form3.html";
    var __fp4 = "LEAP/Resource/HTML/Control/form4.html";
    var __als1 = ["Province", "City", "County", "Street", "Community", "Team"];
    var __als6 = ["省", "市", "区", "街道", "社区", "网格"];
    var __als2 = [2, 4, 6, 9, 12, 15];
    var __als3 = 18;
    var __als4 = "<font style='float:left;line-height:24px;margin-left:@splitWidth;'>@name</font><div ds='@ds' defaultvalue='@default' instance='@instance' readonly='@readonly' ut='@group_@areaname' style='width:@itemWidth;float:left;' group='@group' code='@code' size='@size' deep='@deep' count='@count' class='select' ct='select' search='10'  md='@md' bt='select'><div class='lg_p_lr_right select_drop' ctf='select_drop'></div><div class='lg_p_lr_fill search_fill'><div class='lg_p_lr_fill_c search_fill_c' ><input name='button' type=button class='selectbtn ellipsis' ctf='selectbtn' /></div></div><div class='select_items' ctf='select_items'><div><a value='' href='javascript:void(0)' ctf='select_item'>&nbsp</a></div><!--values--></div></div>";
    var __als5 = "<div><a value='@value' href='javascript:void(0)' ctf='select_item'>@text</a></div>";
    LEAP.userInfo = null;
    LEAP.areaString = null;
    LEAP.areaStrings = new hashtable();
    LEAP._cpf = null;
    LEAP.getUserInfo = function(d) {
        LEAP.processArea(d);
        if (LEAP._cpf == null && LEAP.userInfo != null) {
            var h = LEAP.userInfo.forcechangepwd;
            var g = window._s14;
            if (h != null && h == 1 && LEAP.form) {
                if (g == "1") {
                    LEAP.asyn(LEAP._pCPF, null, 10000);
                }
            }
        }
        if (LEAP.userInfo && LEAP.userInfo.extendinfo && typeof(LEAP.userInfo.extendinfo) == "string") {
            try {
                LEAP.userInfo.extendinfo = JSON.parse(LEAP.userInfo.extendinfo);
            } catch (j) {}
        }
        return LEAP.userInfo;
    };
    LEAP._pCPF = function() {
        if (LEAP._cpf == null && LEAP.userInfo != null) {
            var g = LEAP.userInfo.forcechangepwd;
            if (g != null && g == 1 && LEAP.form) {
                LEAP._showMask();
                LEAP._processinggifdiv.style.display = "none";
                var d = {
                    name: "changePass",
                    title: "修改密码",
                    width: "360",
                    height: "380",
                    formtype: "3"
                };
                LEAP._cpf = LEAP.form.create3(d);
                LEAP._cpf.module.setData();
                LEAP.addEvent(LEAP._cpf.form, "formHided", LEAP._cpfFH);
            }
        }
    };
    LEAP._cpfFH = function() {
        var d = LEAP.request2({
            name: "app_isForceChangePWD"
        });
        if (d) {
            LEAP.form.show(LEAP._cpf.form);
        } else {
            if (LEAP.userInfo) {
                LEAP.userInfo.forcechangepwd = null;
            }
            LEAP._cpf.module.dispose();
            LEAP.form.close(LEAP._cpf.form);
            LEAP.hideMask();
        }
    };
    LEAP.getServerTime = function() {
        return new Date(LEAP.getServerTimeTicket());
    };
    LEAP.getServerTimeTicket = function() {
        return leapclient._serverTime + leapclient._tickDiff + (new Date().getTime() - leapclient._endPointTicket);
    };
    LEAP.getServerTimeFormat = function(d) {
        if (d == null) {
            d = 0;
        }
        return LEAP.formatdate(LEAP.getServerTime(), d);
    };
    LEAP.__setuitimefn = function() {
        if (!LEAP.userInfo.getTimeTicket) {
            LEAP.userInfo.getTimeTicket = function() {
                return LEAP.getServerTimeTicket();
            };
            LEAP.userInfo.getTime = function() {
                return LEAP.getServerTime();
            };
            LEAP.userInfo.getTimeFormart = function(d) {
                return LEAP.getServerTimeFormat(d);
            };
        }
    };
    LEAP.processArea = function() {
        if (__haspa == false) {
            __haspa = true;
            if (LEAP.userInfo == null || LEAP.userInfo.userflag == null) {
                LEAP.userInfo = LEAP.request("app_getUserInfo");
            }
            if (LEAP.userInfo && LEAP.userInfo.areacnnames) {
                __als6 = LEAP.userInfo.areacnnames;
            }
            if (window._userdefinedareas != null) {
                __als6 = window._userdefinedareas;
            }
            if (LEAP.userInfo && LEAP.userInfo.userflag) {
                LEAP.__setuitimefn();
                if (LEAP.userInfo == null || LEAP.userInfo.userflag == null) {
                    return;
                }
                var n = LEAP.userInfo;
                if (n != null && LEAP.areaString == null && n.areavalues != null && n.areaLevel < 6) {
                    if (n.areaLevel != null && n.areaLevel < __als1.length) {
                        var m = __als1[n.areaLevel];
                        LEAP.addCodeType(m, n.areavalues, LEAP.getrealarea(n.areaid));
                        var p = "";
                        var o = 1;
                        for (var l = n.areaLevel; l < __als6.length; l++) {
                            var q = "";
                            if (l == n.areaLevel) {
                                var r = "";
                                for (var h = 0; h < n.areavalues.length; h++) {
                                    r += __als5.replace("@value", n.areavalues[h].codeid).replace("@text", n.areavalues[h].codevalue);
                                }
                                q = __als4.replace("<!--values-->", r).replace("@name", __als6[l]).replace("@default", LEAP.userInfo.areaid);
                            } else {
                                q = __als4.replace("@name", __als6[l]).replace("defaultvalue='@default'", "");
                            }
                            q = q.replace("@itemWidth", "@" + __als1[l] + "itemWidth");
                            p += q.replace("@code", __als1[l]).replace("@areaname", __als1[l]).replace("@size", __als2[l]).replace("@deep", l + 1).replace("@count", __als3);
                            LEAP.areaStrings.add(__als1[l], p);
                            o++;
                        }
                        LEAP.areaString = p;
                    } else {
                        LEAP.areaString = n.areaCNName;
                    }
                } else {
                    if (n != null && LEAP.areaString == null && n.areavalues == null && n.areaLevel == 6) {
                        var g = LEAP.getrealarea(n.areaid);
                        var d = n.areaLevel - 1;
                        var r = __als5.replace("@value", g).replace("@text", n.areaCNName);
                        var q = __als4.replace("<!--values-->", r).replace("@name", __als6[d]).replace("@default", n.areaid);
                        var p = q.replace("@code", __als1[d]).replace("@areaname", __als1[d]).replace("@size", __als2[d]).replace("@deep", d + 1).replace("@count", __als3);
                        LEAP.areaString = p;
                    }
                }
            }
        }
    };
    LEAP.bindControl = function(m, g) {
        if (m == null || g == null) {
            return;
        }
        var j = null;
        if (g.instance) {
            j = g.instance;
        } else {
            if (g.getAttribute) {
                j = g.getAttribute("instance");
            }
        }
        if (j == null) {
            return null;
        }
        if (typeof m == "string") {
            j = g.instance;
            m = m.replaceall("@instance", j);
            m = m.replaceall(" ht=", ' instance="' + j + '" ht=');
            m = m.replaceall(" ct=", ' instance="' + j + '" ct=');
            m = m.replaceall(" ctg=", ' instance="' + j + '" ctg=');
            m = m.replaceall(" ut=", ' instance="' + j + '" ut=');
            m = m.replaceall(" st=", ' instance="' + j + '" st=');
            m = m.replaceall(" module=", ' instance="' + j + '" module=');
            m = m.replaceall(" panel=", ' instance="' + j + '" panel=');
            m = m.replaceall("\tht=", ' instance="' + j + '" ht=');
            m = m.replaceall("\tct=", ' instance="' + j + '" ct=');
            m = m.replaceall("\tctg=", ' instance="' + j + '" ctg=');
            m = m.replaceall("\tut=", ' instance="' + j + '" ut=');
            m = m.replaceall("\tst=", ' instance="' + j + '" st=');
            m = m.replaceall("\tmodule=", ' instance="' + j + '" module=');
            m = m.replaceall("\tpanel=", ' instance="' + j + '" panel=');
            m = m.replaceall("\nht=", ' instance="' + j + '" ht=');
            m = m.replaceall("\nct=", ' instance="' + j + '" ct=');
            m = m.replaceall("\nctg=", ' instance="' + j + '" ctg=');
            m = m.replaceall("\nut=", ' instance="' + j + '" ut=');
            m = m.replaceall("\nst=", ' instance="' + j + '" st=');
            m = m.replaceall("\nmodule=", ' instance="' + j + '" module=');
            m = m.replaceall("\npanel=", ' instance="' + j + '" panel=');
        } else {
            if (m instanceof Array) {
                var d = m.length;
                for (var h = 0; h < d; h++) {
                    m[h].setAttribute("instance", j);
                }
            } else {
                m.setAttribute("instance", j);
            }
        }
        try {
            return m;
        } finally {
            m = null;
        }
    };
    LEAP.deniedModule = function(g, j, h, l) {
        if (j != null) {
            j.innerHTML = "";
            j.innerHTML = "无访问权限";
        }
    };
    LEAP.getModule = function(N, u, o, G, J, q) {
        var y = null;
        if (J == null) {
            if (N == null || !(N == __fp || N == __fp2 || N == __fp3 || N == __fp4)) {
                if (N == null) {
                    if (G != null) {
                        N = G.___moduleName;
                    }
                }
                if (N == null) {
                    return;
                }
                var w = LEAP.getModuleAuthoritys(N);
                if (w == null || w.operations == null || w.operations.length == 0) {
                    LEAP.deniedModule(N, u, o, G);
                    return;
                }
                y = w.url;
            }
            if (N == __fp) {
                y = __fp;
            }
            if (N == __fp2) {
                y = __fp2;
            }
            if (N == __fp3) {
                y = __fp3;
            }
            if (N == __fp4) {
                y = __fp4;
            }
            if (G == null && y == null) {
                return;
            }
            var g = G != null;
            if (G != null && G.type == null) {
                G.type = "instance";
            }
            if (y != null && typeof(u) == commfields.string) {
                u = LEAP.getElement(u);
            }
            if ((y == null || y == "") && u != null) {
                if (u != null) {
                    u.innerHTML = "";
                    u.innerHTML = "加载模型[" + N + "]错误,未登录或者配置错误,请重新登录!";
                } else {
                    var I = LEAP.getElements("[ut=System_AreaControl]");
                    if (I != null) {
                        for (var C = 0; C < I.length; C++) {
                            I[C].innerHTML = "";
                        }
                    }
                }
                return;
            }
            if (q != null && q != "" && y != null && y != "") {
                var y = y.Trim();
                var B = q.Trim();
                var K = y.substring(y.lastIndexOf("."));
                K = y.substring(0, y.lastIndexOf(".")) + "_" + B + K;
                y = K;
            }
        }
        if (G == null) {
            if (y != null && y.Trim() != "" && LEAP._m.contains(y)) {
                G = LEAP._m.getvalue(y);
            } else {
                var M = null;
                if (J != null) {
                    M = J;
                } else {
                    M = leapclient.load(y);
                }
                if (M == null) {
                    return;
                }
                if (y == __fp3) {
                    M = M.replaceall("@server", leapconfig.server);
                }
                if (y == __fp4) {
                    M = M.replaceall("@server", leapconfig.server);
                }
                var D = M.indexOf("</head>");
                var z = null;
                if (D > 1) {
                    var F = M.indexOf("<head>");
                    z = M.substr(F, D - F);
                    var n = [];
                    var r = [];
                    var m = z.split("\n");
                    var A = m.length;
                    for (var C = 0; C < A; C++) {
                        var v = m[C];
                        var o = -1;
                        if (v.toLowerCase().indexOf("<script") > -1 && v.indexOf(" path") > -1) {
                            o = 1;
                        } else {
                            if (v.toLowerCase().indexOf("<link") > -1 && v.indexOf(" path") > -1) {
                                o = 2;
                            }
                        }
                        if (o != -1) {
                            v = v.replaceall(" ", "");
                            var H = v.indexOf("path=");
                            var x = v.substr(H + 5, 1);
                            var h = v.substr(H + 6);
                            h = h.substr(0, h.indexOf(x));
                            if (o == 1) {
                                n.push(h);
                            } else {
                                if (o == 2) {
                                    r.push(h);
                                }
                            }
                        }
                    }
                    for (var C = 0; C < n.length; C++) {
                        leapclient.loadjs(n[C]);
                    }
                    for (var C = 0; C < r.length; C++) {
                        leapclient.loadcss(r[C]);
                    }
                }
                var j = M.indexOf("</head>");
                var L = M;
                if (j > 0) {
                    L = M.substr(j + 8);
                }
                var G = LEAP._p(z);
                if (G == null) {
                    G = {};
                }
                if (G.type == null) {
                    G.type = "instance";
                }
                G.source = L;
                if (y != null && y.Trim() != "") {
                    LEAP._m.add(y, G);
                }
            }
        }
        if (G.type == "instance") {
            if (G.module != null && typeof(G.module) == "function") {
                var F = new G.module();
                G = LEAP.clone(G, F);
            } else {
                G = LEAP.clone(G);
            }
        } else {
            if (G.___hasmoduleinit != true) {
                var F = G.module;
                G.module = null;
                LEAP.clone(G, F);
                if (F != null) {
                    G = F;
                }
            }
        }
        var p = UUID.cID();
        G.instance = p;
        if (G.type == "instance" || (G.type == "static" && G.___hasmoduleinit != true)) {}
        if (G.type == "static") {
            G.___hasmoduleinit = true;
            LEAP._m.replace(y, G);
        }
        G.___def = w;
        try {
            return G;
        } finally {
            u = G = null;
        }
    };
    LEAP.newPageObjectInstance = function(m, l, g, o, j, h) {
        var p = l;
        p.addEvent = pageObject.addEvent;
        p.removeEvent = pageObject.removeEvent;
        p.getElements = pageObject.getElements;
        p.getElement = pageObject.getElement;
        if (p.setPageData == null && typeof(p.setPageData) != "function") {
            p.setPageData = pageObject.setPageData;
        }
        p.getPageData = pageObject.getPageData;
        p.convertChangeResult = LEAP.convertChangeResult;
        p.regEvent = pageObject.regEvent;
        p.fireEvent = pageObject.fireEvent;
        p.getControl = pageObject.getControl;
        p.getMD = pageObject.getMD;
        p.getUT = pageObject.getUT;
        p.getQueryParameter = pageObject.getQueryParameter;
        p.getCreateParameter = pageObject.getCreateParameter;
        p.clearPageData = pageObject.clearPageData;
        p.getUpdateParameter = pageObject.getUpdateParameter;
        p.deleteResult = pageObject.deleteResult;
        p.hideForm = pageObject.hideForm;
        p.showForm = pageObject.showForm;
        p.getValue = pageObject.getValue;
        p.setValue = pageObject.setValue;
        p.validateUI = pageObject.validateUI;
        p.request = pageObject.request;
        p.getLastExtendResult = pageObject.getLastExtendResult;
        p.clearValidateUI = pageObject.clearValidateUI;
        p.getLastError = pageObject.getLastError;
        p.setLastExtendResult = pageObject.setLastExtendResult;
        p.getLastError = pageObject.getLastError;
        p.unRegEvent = pageObject.unRegEvent;
        p.addShortKeyEvent = pageObject.addShortKeyEvent;
        p.asynrequest = pageObject.asynrequest;
        p.innerPageLoad = pageObject.innerPageLoad;
        p.name = m;
        p.loadModule = pageObject.loadModule;
        p.loadModule2 = pageObject.loadModule2;
        p.loadForm = pageObject.loadForm;
        p.loadForm3 = pageObject.loadForm3;
        p.loadForm2 = pageObject.loadForm2;
        p.loadWFForm = pageObject.loadWFForm;
        p.getST = pageObject.getST;
        p.st = pageObject.st;
        p.ut = pageObject.ut;
        p.md = pageObject.md;
        p.loadNoneUIModule = pageObject.loadNoneUIModule;
        p.getParentModule = pageObject.getParentModule;
        p.bindData = pageObject.bindData;
        p._isPageObject = pageObject._isPageObject;
        p.innerAsynRefreshPage = pageObject.innerAsynRefreshPage;
        p.innerBuildQuery = pageObject.innerBuildQuery;
        p.innerRefreshPage = pageObject.innerRefreshPage;
        p.innerSearch = pageObject.innerSearch;
        p.innerReset = pageObject.innerReset;
        p.searchMore = pageObject.searchMore;
        if (p.viewPageLoad != null) {
            p._viewPageLoad_ = p.viewPageLoad;
        }
        p.viewPageLoad = pageObject.innerViewPageLoad;
        if (p.insertPageLoad != null) {
            p._insertPageLoad_ = p.insertPageLoad;
        }
        p.insertPageLoad = pageObject.innerInsertPageLoad;
        if (p.searchPageLoad != null) {
            p._searchPageLoad_ = p.searchPageLoad;
        }
        p.searchPageLoad = pageObject.innerSearchPageLoad;
        if (p.modifyPageLoad != null) {
            p._modifyPageLoad_ = p.modifyPageLoad;
        }
        p.modifyPageLoad = pageObject.innerModifyPageLoad;
        for (var n in pageObjectExtend) {
            p[n] = pageObjectExtend[n];
        }
        if (p.setPageDataByPK == null) {
            p.setPageDataByPK = pageObject.setPageDataByPK;
        }
        if (p.dispose == null) {
            p.dispose = pageObject.dispose;
        } else {
            p.innerDispose = p.dispose;
            p.dispose = pageObject.dispose;
        }
        if (p.pageLoad == null) {
            p.pageLoad = pageObject.pageLoad;
        } else {
            p._pageLoad = p.pageLoad;
            p.pageLoad = pageObject.pageLoad;
        }
        p.parentElement = g;
        if (o) {
            p.pom = o.___pageObjectModel;
            p.___parentModule = o.___parentModule;
            p.moduleParameter = o;
            p.parentPageModule = o.___parentModule;
            o.___pageObjectModel = null;
            o.___parentModule = null;
        }
        if (j == null || j != false) {
            if (p.pageLoad != null) {
                p.pageLoad.call(p);
            }
        }
        if (!p.instance) {
            p.instance = UUID.cID();
        }
        if (!h) {
            PageObjectModel.___allObjects.add(p.instance, p);
        }
        return p;
    };
    LEAP.debuger = function() {
        var h = new StringBuffer();
        var g = 0;
        var j = null;
        var d = 0;
        this.start = function(l) {
            if (!islogdebug) {
                return;
            }
            var m = new Date();
            j = m.getTime();
            g++;
            if (l == null) {
                l = g;
            }
            h.append("[").append(l).append("].开始 ").append(m.getYear()).append("-").append(m.getMonth() + 1).append("-").append(m.getDate()).append(" ").append(m.getHours()).append(":").append(m.getMinutes()).append(".").append(m.getMilliseconds()).append("\n");
        };
        this.end = function() {
            if (!islogdebug) {
                return;
            }
            var l = new Date();
            var m = l.getTime();
            var n = m - j;
            d += n;
            j = m;
            h.append("[").append(name).append("].结束 ").append(l.getYear()).append("-").append(l.getMonth() + 1).append("-").append(l.getDate()).append(" ").append(l.getHours()).append(":").append(l.getMinutes()).append(".").append(l.getMilliseconds()).append("\n");
            h.append("耗时:").append(n).append("ms\n\n");
        };
        this.getinfo = function() {
            if (!islogdebug) {
                return;
            }
            h.append("总计耗时:").append(d).append("ms\n\n");
            return h.toString();
        };
    };
    LEAP.__SimpleModuleMouseOver = function(d) {
        var g = d.e.srcElement;
        if (g.getAttribute("simplemodue") == 1) {
            g.style.filter = "alpha(opacity = 100)";
            g.style.opacity = "1";
        }
    };
    LEAP.__SimpleModuleSetIMGH = function(j, d) {
        var l = LEAP.getElement("DIV[ctid=" + j + "]");
        var h = document.createElement("DIV");
        h.style.position = "absolute";
        h.style.top = "15px";
        h.style.height = "68px";
        h.style.width = "18px";
        h.style.top = l.offsetHeight / 2 - 34;
        h.style.lef = "-18px";
        h.style.cursor = "pointer";
        h.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif)";
        h.style.zIndex = "999";
        h.style.filter = "alpha(opacity = 30)";
        h.style.opacity = "0.3";
        l.appendChild(h);
        var g = LEAP.getLoadedModule(d);
        g.addEvent(h, "click", g.hideForm);
        l = h = null;
    };
    LEAP.__SimpleModuleMouseOut = function(d) {
        var h = d.e.srcElement;
        if (h.getAttribute("simplemodue") == 1) {
            h.style.filter = "alpha(opacity = 50)";
            h.style.opacity = "0.5";
        }
        var g = LEAP.getLoadedModule(h.moduleInstance);
        if (g) {
            if (g.simpleFormCloseMode && g.simpleFormCloseMode == 1) {
                g.dispose();
            }
        }
    };
    LEAP.loadSimpleModule = function(m) {
        var o = document.createElement("div");
        document.body.appendChild(o);
        o.mid = "div";
        o.style.position = "absolute";
        o.style.left = "0px";
        o.style.top = "0px";
        o.style.zIndex = "99999";
        o.style.display = "none";
        var j = document.createElement("div");
        j.mid = "div2";
        j.style.position = "relative";
        o.appendChild(j);
        try {
            var l = m.width;
            var g = m.height;
            if (l == null) {
                l = 500;
            }
            if (g == null) {
                g = "auto";
            }
            if (typeof(l) == "string" && l.indexOf("%") > -1) {
                l = document.body.clientWidth * ("0." + l.replace("%", ""));
            } else {
                l = l + "px";
            }
            if (typeof(g) == "string" && g.indexOf("%") > -1) {
                g = document.body.clientHeight * ("0." + g.replace("%", ""));
            } else {
                g = g + "px";
            }
            if (l) {
                o.style.width = l;
            }
            if (g) {
                o.style.height = g;
            }
            if (o.style.height == "auto") {
                o.style.height = "325px";
                g = 325;
            }
            j.style.width = "100%";
            m.parent = o;
            var h = LEAP.loadModule2(m);
            if (h) {
                h.simpleForm = o;
                o.moduleInstance = h.instance;
                o.setAttribute("simplemodue", "1");
                LEAP.addEvent(o, "mouseenter", LEAP.__SimpleModuleMouseOver, null, null, true);
                LEAP.addEvent(o, "mouseleave", LEAP.__SimpleModuleMouseOut, null, null, true);
                var d = document.createElement("IMG");
                d.style.position = "absolute";
                d.style.right = "15px";
                d.style.top = "10px";
                d.style.cursor = "pointer";
                d.src = leapconfig.server + "LEAP/Resource/images/itemstyle/form/sclose.gif";
                d.style.zIndex = "999";
                o.appendChild(d);
                if (m.autodispose) {
                    h.addEvent(d, "click", h.dispose);
                } else {
                    h.addEvent(d, "click", h.hideForm);
                }
                LEAP.form.z += 10;
                var n = "simpleformcon_" + LEAP.form.z;
                o.setAttribute("id", n);
                if (m.autoposition == null) {
                    m.autoposition = true;
                }
                LEAP.asyn(LEAP.__setsfl, null, 100, n, l, g, m);
                return h;
            } else {
                LEAP.removeElement(o, false);
            }
        } finally {
            j = o = null;
        }
    };
    LEAP.__setsfl = function(n, h, g, j) {
        if (typeof(h) == "string" && h.indexOf("px") > -1) {
            h = h.replace("px", "") * 1;
        }
        if (typeof(g) == "string" && g.indexOf("px") > -1) {
            g = g.replace("px", "") * 1;
        }
        var m = document.getElementById(n);
        var d = j.x;
        var l = j.y;
        if (d == null) {
            d = (document.body.clientWidth - h) / 2;
        }
        if (l == null) {
            l = (document.body.clientHeight - g) / 2;
        }
        if (d < 0) {
            d = 20;
        }
        if (l < 0) {
            l = 40;
        }
        m.style.zIndex = LEAP.form.z++;
        if (j.autoposition) {
            m.style.left = d + "px",
                m.style.top = l + "px";
        }
        m.style.display = "block";
        m = null;
    };
    LEAP.loadModule2 = function(d) {
        var g = d.path;
        if (g == null) {
            g = d.name;
        }
        return LEAP.loadModule(g, d.parent, d.type, d.d, d.htmlsource, d.distributeFlag, d.moduleParameter, d.moduleLoadArg, d.pageMode, d.callback, d.domain, d.authority);
    };
    LEAP.systemLog = {};
    LEAP.systemLog.logRes = function(d) {};
    LEAP.loadModule = function(name, parent, type, d, htmlsource, distributeFlag, moduleParameter, moduleLoadArg, pageMode, callback, domain, authority) {
        try {
            var path = null;
            var icon = null;
            var _md = null;
            if (moduleLoadArg != null && moduleLoadArg.par != null && moduleLoadArg.par.pageMode != null) {
                pageMode = moduleLoadArg.par.pageMode;
            }
            var dbger = new LEAP.debuger();
            try {
                dbger.start("加载资源");
                if (htmlsource == null) {
                    if (name == null || !(name == __fp || name == __fp2 || name == __fp3 || name == __fp4)) {
                        if (name == null) {
                            if (d != null) {
                                name = d.___moduleName;
                            }
                        }
                        if (name == null) {
                            return;
                        }
                        _md = LEAP.getModuleAuthoritys(name);
                        if (_md == null || _md.operations == null || _md.operations.length == 0) {
                            LEAP.deniedModule(name, parent, type, d);
                            return;
                        }
                        path = _md.url;
                        icon = _md.icon;
                    }
                    if (name == __fp) {
                        path = __fp;
                    }
                    if (name == __fp2) {
                        path = __fp2;
                    }
                    if (name == __fp3) {
                        path = __fp3;
                    }
                    if (name == __fp4) {
                        path = __fp4;
                    }
                    if (d == null && path == null) {
                        return;
                    }
                    var autoload = d != null;
                    if (d != null && d.type == null) {
                        d.type = "instance";
                    }
                    if (path != null && typeof(parent) == commfields.string) {
                        parent = LEAP.getElement(parent);
                    }
                    if ((path == null || path == "") && parent != null) {
                        if (parent != null) {
                            parent.innerHTML = "";
                            parent.innerHTML = "加载模型[" + name + "]错误,未登录或者配置错误,请重新登录!";
                        } else {
                            var areacons = LEAP.getElements("[ut=System_AreaControl]");
                            if (areacons != null) {
                                for (var i = 0; i < areacons.length; i++) {
                                    areacons[i].innerHTML = "";
                                }
                            }
                        }
                        return;
                    }
                    if (distributeFlag != null && distributeFlag != "" && path != null && path != "") {
                        var path = path.Trim();
                        var fileFlag = distributeFlag.Trim();
                        var fileName = path.substring(path.lastIndexOf("."));
                        fileName = path.substring(0, path.lastIndexOf(".")) + "_" + fileFlag + fileName;
                        path = fileName;
                    }
                }
                dbger.end();
                dbger.start("处理脚本/样式/模型名称");
                if (d == null) {
                    if (path != null && path.Trim() != "" && LEAP._m.contains(path)) {
                        d = LEAP._m.getvalue(path);
                    } else {
                        var res = null;
                        if (htmlsource != null) {
                            res = htmlsource;
                        } else {
                            res = leapclient.load(path);
                        }
                        if (res == null) {
                            return;
                        }
                        if (path == __fp3) {
                            res = res.replaceall("@server", leapconfig.server);
                        }
                        if (path == __fp4) {
                            res = res.replaceall("@server", leapconfig.server);
                        }
                        if (res.indexof("@serveruirl@") > -1) {
                            res = res.replaceall("@serveruirl@", leapconfig.server);
                        }
                        var hed = res.indexOf("</head>");
                        var hedstr = null;
                        if (hed > 1) {
                            var _t = res.indexOf("<head>");
                            hedstr = res.substr(_t, hed - _t);
                            var scripts = [];
                            var styles = [];
                            var lines = hedstr.split("\n");
                            var l = lines.length;
                            for (var i = 0; i < l; i++) {
                                var line = lines[i];
                                var type = -1;
                                if (line.toLowerCase().indexOf("<script") > -1 && line.indexOf(" path") > -1) {
                                    type = 1;
                                } else {
                                    if (line.toLowerCase().indexOf("<link") > -1 && line.indexOf(" path") > -1) {
                                        type = 2;
                                    }
                                }
                                if (type != -1) {
                                    line = line.replaceall(" ", "");
                                    var pi = line.indexOf("path=");
                                    var s = line.substr(pi + 5, 1);
                                    var sc = line.substr(pi + 6);
                                    sc = sc.substr(0, sc.indexOf(s));
                                    if (type == 1) {
                                        scripts.push(sc);
                                    } else {
                                        if (type == 2) {
                                            styles.push(sc);
                                        }
                                    }
                                }
                            }
                            for (var i = 0; i < scripts.length; i++) {
                                leapclient.loadjs(scripts[i]);
                            }
                            for (var i = 0; i < styles.length; i++) {
                                LEAP.asyn(leapclient.loadcss, leapclient, i * 10 + 10, styles[i]);
                            }
                        }
                        var hidx = res.indexOf("</head>");
                        var ret = res;
                        if (hidx > 0) {
                            ret = res.substr(hidx + 8);
                        }
                        var d = LEAP._p(hedstr);
                        if (d == null) {
                            d = {};
                        }
                        if (d.type == null) {
                            d.type = "instance";
                        }
                        d.source = ret;
                        if (path != null && path.Trim() != "") {
                            LEAP._m.add(path, d);
                        }
                    }
                }
                dbger.end();
                dbger.start("实例化模型步骤1");
                if (d.type == "instance") {
                    if (d.module != null && typeof(d.module) == "function") {
                        var _t = new d.module();
                        d = LEAP.clone(d, _t);
                    } else {
                        d = LEAP.clone(d);
                    }
                } else {
                    if (d.___hasmoduleinit != true) {
                        var _t = d.module;
                        d.module = null;
                        LEAP.clone(d, _t);
                        if (_t != null) {
                            d = _t;
                        }
                    }
                }
                dbger.end();
                var uid = UUID.cID();
                d.instance = uid;
                d.pageModuleIcon = icon;
                dbger.start("实例化模型步骤2");
                if (d.type != "static" && d.source != null) {
                    var now = new Date().getTime();
                    d.source = d.source.replaceall("@instance", uid);
                    d.source = d.source.replaceall(" ht=", ' instance="' + uid + '" ht=');
                    d.source = d.source.replaceall(" ct=", ' instance="' + uid + '" ct=');
                    d.source = d.source.replaceall(" ctg=", ' instance="' + uid + '" ctg=');
                    d.source = d.source.replaceall(" ut=", ' instance="' + uid + '" ut=');
                    d.source = d.source.replaceall(" st=", ' instance="' + uid + '" st=');
                    d.source = d.source.replaceall(" module=", ' instance="' + uid + '" module=');
                    d.source = d.source.replaceall(" panel=", ' instance="' + uid + '" panel=');
                    d.source = d.source.replaceall("\tht=", ' instance="' + uid + '" ht=');
                    d.source = d.source.replaceall("\tct=", ' instance="' + uid + '" ct=');
                    d.source = d.source.replaceall("\tctg=", ' instance="' + uid + '" ctg=');
                    d.source = d.source.replaceall("\tut=", ' instance="' + uid + '" ut=');
                    d.source = d.source.replaceall("\tst=", ' instance="' + uid + '" st=');
                    d.source = d.source.replaceall("\tmodule=", ' instance="' + uid + '" module=');
                    d.source = d.source.replaceall("\tpanel=", ' instance="' + uid + '" panel=');
                    d.source = d.source.replaceall("\nht=", ' instance="' + uid + '" ht=');
                    d.source = d.source.replaceall("\nct=", ' instance="' + uid + '" ct=');
                    d.source = d.source.replaceall("\nctg=", ' instance="' + uid + '" ctg=');
                    d.source = d.source.replaceall("\nut=", ' instance="' + uid + '" ut=');
                    d.source = d.source.replaceall("\nst=", ' instance="' + uid + '" st=');
                    d.source = d.source.replaceall("\nmodule=", ' instance="' + uid + '" module=');
                    d.source = d.source.replaceall("\npanel=", ' instance="' + uid + '" panel=');
                    uid = null;
                } else {
                    var ts = LEAP.getElements("[module][modulecn],[ct]:not([instance]),[ht]:not([instance]),[ut]:not([instance]),[st]:not([instance]),[ctg]:not([instance]),[panel]:not([instance])");
                    if (ts != null && ts.length > 0) {
                        var l = ts.length;
                        for (var i = 0; i < l; i++) {
                            var t = ts[i];
                            t.setAttribute("instance", uid);
                        }
                    }
                }
                dbger.end();
                dbger.start("实例化模型步骤3");
                if (d.type == "instance" || (d.type == "static" && d.___hasmoduleinit != true)) {
                    LEAP.newPageObjectInstance(name, d, parent, moduleParameter, false, true);
                }
                if (d.type == "static") {
                    d.___hasmoduleinit = true;
                    LEAP._m.replace(path, d);
                }
                dbger.end();
                d.___def = _md;
                if (parent != null) {
                    dbger.start("加载页面视图");
                    parent.innerHTML = d.source;
                    dbger.end();
                    autoload = true;
                }
                if (autoload) {
                    if (d.pageLoad != null) {
                        var dynaCodes = null;
                        var areacons = null;
                        var moduleElement = null;
                        var btn_search = null;
                        var btn_submit = null;
                        var defels = [];
                        var tables = [];
                        dbger.start("加载控件缓存");
                        var __cacheUT = new hashtable();
                        var __cacheMD = new hashtable();
                        var __cacheST = new hashtable();
                        d.__cacheUT = __cacheUT;
                        d.__cacheMD = __cacheMD;
                        d.__cacheST = __cacheST;
                        var panels = [];
                        d.___initBTMDS = [];
                        var ______binds = [];
                        d.______binds = ______binds;
                        var hasprocessedall = false;
                        if (parent == null) {
                            parent = document.body;
                        }
                        var _allcontrols = [];
                        d._allcontrols = _allcontrols;
                        if (parent != null) {
                            var els = null;
                            if (parent.all) {
                                els = parent.all;
                                hasprocessedall = true;
                            } else {
                                els = parent.getElementsByTagName("*");
                            }
                            if (els != null) {
                                var l = els.length;
                                for (var i = 0; i < l; i++) {
                                    var cur = els[i];
                                    if (cur.tagName == "APPLET") {
                                        continue;
                                    }
                                    var st = cur.getAttribute("st");
                                    var ut = cur.getAttribute("ut");
                                    var md = cur.getAttribute("md");
                                    if (moduleElement == null && cur.getAttribute("module") != null) {
                                        moduleElement = cur;
                                    }
                                    if (st != null) {
                                        if (!__cacheST.contains(st)) {
                                            __cacheST.add(st, cur);
                                        }
                                    }
                                    if (ut != null) {
                                        if (!__cacheUT.contains(st)) {
                                            __cacheUT.add(ut, cur);
                                        }
                                        if (ut == "System_AreaControl") {
                                            if (areacons == null) {
                                                areacons = [];
                                            }
                                            areacons.add(cur);
                                        } else {
                                            if (btn_search == null && ut == "btn_search") {
                                                btn_search = cur;
                                            } else {
                                                if (btn_submit == null && ut == "submit") {
                                                    btn_submit = cur;
                                                }
                                            }
                                        }
                                    }
                                    if (md != null) {
                                        if (!__cacheMD.contains(st)) {
                                            __cacheMD.add(md, cur);
                                        }
                                        if ((cur.getAttribute("ht") != null || cur.getAttribute("ct") != null) && cur.getAttribute("bt") != null) {
                                            d.___initBTMDS.add(cur);
                                        }
                                    }
                                    var dc = cur.getAttribute("dynacode");
                                    var code = cur.getAttribute("code");
                                    if (dc == 1 && code != null) {
                                        if (dynaCodes == null) {
                                            dynaCodes = [];
                                        }
                                        dynaCodes.add(cur);
                                    }
                                    if (cur.getAttribute("defaultvalueexp") != null) {
                                        defels.add(cur);
                                    }
                                    if (cur.getAttribute("bindevents") != null) {
                                        ______binds.add(cur);
                                    }
                                    if (cur.getAttribute("panel") != null || cur.getAttribute("al") != null) {
                                        panels.add(cur);
                                    }
                                    var ct = cur.getAttribute("ct");
                                    if (ct != null) {
                                        _allcontrols.push(cur);
                                        if (ct == "table") {
                                            tables.add(cur);
                                        }
                                    } else {
                                        if (cur.getAttribute("ctf") == null && (cur.tagName == "INPUT" || cur.tagName == "TEXTAREA")) {
                                            _allcontrols.push(cur);
                                        }
                                    }
                                    cur = null;
                                }
                            }
                        }
                        _allcontrols = null;
                        ______binds = null;
                        d.moduleElement = moduleElement;
                        d.___btnSubmit = btn_submit;
                        dbger.end();
                        dbger.start("处理区域步骤1");
                        if (LEAP.areaString == null) {
                            LEAP.processArea();
                        }
                        dbger.end();
                        dbger.start("处理区域步骤2");
                        if (LEAP.areaString != null) {
                            if (areacons != null) {
                                for (var i = 0; i < areacons.length; i++) {
                                    var group = areacons[i].getAttribute("group");
                                    var md = areacons[i].getAttribute("md");
                                    var iw = areacons[i].getAttribute("itemWidth");
                                    var sw = areacons[i].getAttribute("splitWidth");
                                    var rl = areacons[i].getAttribute("readonly");
                                    var ds = areacons[i].getAttribute("ds");
                                    var ll = areacons[i].getAttribute("lastLevel");
                                    var proiw = areacons[i].getAttribute("l1width");
                                    var cityiw = areacons[i].getAttribute("l2width");
                                    var countyiw = areacons[i].getAttribute("l3width");
                                    var streetiw = areacons[i].getAttribute("l4width");
                                    var commuiw = areacons[i].getAttribute("l5width");
                                    var teamiw = areacons[i].getAttribute("l6width");
                                    areacons[i].setAttribute("_cansel_", "1");
                                    areacons[i].removeAttribute("value");
                                    areacons[i].setAttribute("bt", "text");
                                    if (group == null || group.Trim() == "") {
                                        group = "area";
                                    }
                                    if (md == null || md.Trim() == "") {
                                        md = "areaid";
                                    }
                                    if (iw == null) {
                                        iw = "80px";
                                    }
                                    if (sw == null || sw.Trim() == "") {
                                        sw = "10px";
                                    }
                                    if (rl == null) {
                                        rl = "0";
                                    }
                                    if (proiw == null) {
                                        proiw = iw;
                                    }
                                    if (cityiw == null) {
                                        cityiw = iw;
                                    }
                                    if (countyiw == null) {
                                        countyiw = iw;
                                    }
                                    if (streetiw == null) {
                                        streetiw = iw;
                                    }
                                    if (commuiw == null) {
                                        commuiw = iw;
                                    }
                                    if (teamiw == null) {
                                        teamiw = iw;
                                    }
                                    var __str = null;
                                    if (ll == null || ll.Trim() == "") {
                                        __str = LEAP.areaString;
                                    } else {
                                        __str = LEAP.areaStrings.getvalue(ll);
                                    }
                                    if (__str == null) {
                                        areacons[i].setAttribute("_cansel_", "0");
                                        areacons[i].setAttribute("value", LEAP.getUserInfo().areaid);
                                        areacons[i].innerHTML = LEAP.getUserInfo().areaCNName;
                                        continue;
                                    }
                                    if (ds == null || ds == "") {
                                        __str = __str.replaceall("ds='@ds'", "");
                                    } else {
                                        __str = __str.replaceall("@ds", ds);
                                    }
                                    __str = __str.replaceall("@instance", d.instance).replaceall("@readonly", rl).replaceall("@md", md).replaceall("@group", group).replaceall("@splitWidth", sw);
                                    __str = __str.replace("@ProvinceitemWidth", proiw).replace("@CityitemWidth", cityiw).replace("@CountyitemWidth", countyiw).replace("@StreetitemWidth", streetiw).replace("@CommunityitemWidth", commuiw).replace("@TeamitemWidth", teamiw);
                                    areacons[i].innerHTML = __str;
                                    var l = areacons[i].children.length;
                                    for (var k = 0; k < l; k++) {
                                        var cur = areacons[i].children[k];
                                        var ct = cur.getAttribute("ct");
                                        if (ct != null && ct == "select") {
                                            d._allcontrols.push(cur);
                                        }
                                        cur = null;
                                    }
                                }
                            }
                            areacons = null;
                        } else {
                            if (areacons != null) {
                                for (var i = 0; i < areacons.length; i++) {
                                    areacons[i].innerHTML = "";
                                }
                            }
                        }
                        dbger.end();
                        dbger.start("处理选择控件");
                        var sels = LEAP.getElements(".select", parent);
                        if (sels && sels.length) {
                            LEAP.setStyle(sels, {
                                zIndex: "98"
                            }, true);
                        }
                        dbger.end();
                        dbger.start("处理默认值");
                        try {
                            d.processDefaultValues.call(d, defels);
                        } catch (e) {
                            LEAP.messagebox.alert("设置页面默认值时发生错误:" + e.message);
                        }
                        dbger.end();
                        dbger.start("处理模型关系");
                        PageObjectModel.___allObjects.add(d.instance, d);
                        dbger.end();
                        dbger.start("处理加载事件步骤1");
                        if (!pageMode) {
                            if (moduleElement) {
                                var mt = moduleElement.getAttribute("moduletype");
                                if (mt && mt == "search") {
                                    pageMode = "search";
                                }
                            }
                            if (!pageMode) {
                                if (btn_search) {
                                    pageMode = "search";
                                    btn_search = null;
                                } else {
                                    if (btn_submit) {
                                        pageMode = "insert";
                                        btn_submit = null;
                                    }
                                }
                            }
                        }
                        d.pageMode = pageMode;
                        d.authority = authority;
                        dbger.start("处理权限");
                        LEAP.processModuleAuthority(d, parent, d.authority, panels, tables);
                        d.___alpanels = panels;
                        panels = tables = null;
                        dbger.end();
                        if (moduleLoadArg == null) {
                            moduleLoadArg = {};
                        } else {
                            moduleLoadArg = {
                                arg: moduleLoadArg
                            };
                        }
                        var _par = null;
                        if (!String.isEmpty(_md.parameter)) {
                            try {
                                _par = eval("({" + _md.parameter + "})");
                            } catch (e) {}
                            if (_par == null) {
                                _par = _md.parameter;
                            }
                        }
                        moduleLoadArg.moduleArg = _par;
                        dbger.end();
                        dbger.start("处理动态代码表");
                        if (!hasprocessedall) {
                            dynaCodes = LEAP.getElements("div[dynacode=1][ht][code],div[dynacode=1][ct][code],th[code][dynacode=1],td[code][dynacode=1]", parent);
                        }
                        if (dynaCodes != null && dynaCodes.length > 0) {
                            var dcs = null;
                            var toReqCodes = [];
                            var _dl = dynaCodes.length;
                            for (var i = 0; i < _dl; i++) {
                                var _dc = dynaCodes[i];
                                var _hdc = _dc.getAttribute("dynacode");
                                if (_hdc == "1") {
                                    if (dcs == null) {
                                        dcs = [];
                                    }
                                    dcs.add(_dc);
                                }
                                toReqCodes.add(_dc.getAttribute("code"));
                                _dc = null;
                            }
                            LEAP.bathCacheCodes(toReqCodes);
                            dynaCodes = null;
                            if (dcs != null) {
                                for (var ii = 0; ii < dcs.length; ii++) {
                                    var _dc = dcs[ii];
                                    var ct = _dc.getAttribute("ct");
                                    if (ct != null) {
                                        if (ct == LEAP.checkbox.d || ct == LEAP.radio.d || ct == LEAP.select.d) {
                                            if (ct == LEAP.checkbox.d) {
                                                LEAP.checkbox.removeItems(_dc);
                                                var cvs = LEAP.getCodeValue(_dc.getAttribute("code"));
                                                if (cvs) {
                                                    var l = cvs.length;
                                                    for (var i = 0; i < l; i++) {
                                                        LEAP.checkbox.addItem(_dc, cvs[i].codevalue, cvs[i].codeid);
                                                    }
                                                }
                                            } else {
                                                if (ct == LEAP.radio.d) {
                                                    LEAP.radio.removeItems(_dc);
                                                    var cvs = LEAP.getCodeValue(_dc.getAttribute("code"));
                                                    if (cvs) {
                                                        var l = cvs.length;
                                                        for (var i = 0; i < l; i++) {
                                                            LEAP.radio.addItem(_dc, cvs[i].codevalue, cvs[i].codeid);
                                                        }
                                                    }
                                                } else {
                                                    if (ct == LEAP.select.d) {
                                                        LEAP.select.clearItem(_dc);
                                                        var cvs = LEAP.getCodeValue(_dc.getAttribute("code"));
                                                        if (cvs) {
                                                            var l = cvs.length;
                                                            for (var i = 0; i < l; i++) {
                                                                LEAP.select.addItem(_dc, cvs[i].codeid, cvs[i].codevalue);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if (ct == LEAP.select2.d || ct == LEAP.checkbox2.d) {
                                                if (ct == LEAP.select2.d) {
                                                    var cvs = LEAP.getCodeValue(_dc.getAttribute("code"));
                                                    var valueStr = "";
                                                    if (cvs) {
                                                        var l = cvs.length;
                                                        var values = [];
                                                        for (var i = 0; i < l; i++) {
                                                            if (!cvs[i]) {
                                                                continue;
                                                            }
                                                            values.add({
                                                                codeid: cvs[i].codeid,
                                                                codevalue: cvs[i].codevalue
                                                            });
                                                        }
                                                        if (values.length > 0) {
                                                            valueStr = JSON.stringify(values);
                                                        }
                                                    }
                                                    _dc.setAttribute("values", valueStr);
                                                } else {
                                                    if (ct == LEAP.checkbox2.d) {
                                                        LEAP.checkbox2.clearItems(_dc);
                                                        var cvs = LEAP.getCodeValue(_dc.getAttribute("code"));
                                                        if (cvs) {
                                                            var l = cvs.length;
                                                            for (var i = 0; i < l; i++) {
                                                                LEAP.checkbox2.addItem(_dc, cvs[i].codevalue, cvs[i].codeid, false, cvs[i]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        dbger.end();
                        dbger.start("处理加载事件步骤2");
                        if (moduleLoadArg == null) {
                            d.pageLoad.call(d);
                        } else {
                            d.pageLoad.call(d, moduleLoadArg);
                        }
                        dbger.end();
                        dbger.start("处理加载事件步骤3");
                        if (d) {
                            try {
                                pageMode = d.pageMode;
                                if (pageMode) {
                                    d.pageMode = pageMode;
                                    if (pageMode == "search" && d.searchPageLoad) {
                                        d.searchPageLoad();
                                    } else {
                                        if (pageMode == "insert" && d.insertPageLoad) {
                                            d.insertPageLoad();
                                        } else {
                                            if (pageMode == "modify" && d.modifyPageLoad) {
                                                d.modifyPageLoad();
                                            } else {
                                                if (pageMode == "view" && d.viewPageLoad) {
                                                    d.viewPageLoad();
                                                }
                                            }
                                        }
                                    }
                                    if (pageMode == "view") {
                                        var sb = btn_submit;
                                        if (sb != null) {
                                            sb.style.display = "none";
                                            sb = null;
                                        }
                                    } else {
                                        if (pageMode == "insert" || pageMode == "modify") {
                                            var sb = btn_submit;
                                            if (sb != null) {
                                                sb.style.display = "";
                                                sb = null;
                                            }
                                        }
                                    }
                                    d._rebuildMdAttr(pageMode);
                                    d._hideButton(pageMode);
                                }
                                d._hideExpressElement();
                            } catch (err) {
                                LEAP.showError(err);
                            }
                        }
                        dbger.end();
                    }
                }
            } finally {}
            try {
                return d;
            } finally {
                dbger.start("处理加载后事件");
                if (d.afterPageLoad) {
                    try {
                        if (moduleLoadArg == null) {
                            d.afterPageLoad.call(d);
                        } else {
                            d.afterPageLoad.call(d, moduleLoadArg);
                        }
                    } catch (err) {
                        LEAP.showError(err);
                    }
                }
                moduleLoadArg = parent = d = null;
                dbger.end();
                if (islogdebug) {
                    LEAP.messagebox.alert(dbger.getinfo());
                }
            }
        } catch (err) {
            LEAP.showError(err);
            return null;
        }
    };
    LEAP.processModuleAuthority = function(X, q, m, u, T, O) {
        if (X == null || X.___def == null) {
            return;
        }
        var v = m;
        if (v == null || !v.length || v.length == 0) {
            v = null;
        }
        var B = X.___def.operations;
        var n = X.___def.status;
        if (B == null) {
            B = ["system.all"];
            n = [0];
        }
        var D = B.indexof("system.all");
        var o = D > -1;
        var h = n[D];
        var C = null;
        var L = 0;
        if (v != null) {
            L = v.length;
        }
        var J = new StringBuffer("[instance=" + X.instance + "][al]");
        J.append(",[instance=" + X.instance + "][panel]");
        var p = new array();
        var W = new array();
        var g = false;
        var K = false;
        var Q = false;
        var z = new array();
        if (o) {
            if (v != null) {
                for (var V = 0; V < L; V++) {
                    var F = v[V].status;
                    if (F == -1) {
                        W.add(v[V].name);
                    } else {
                        if (F == 0) {
                            z.add(v[V].name);
                        } else {
                            if (F == 110) {
                                p.add(v[V].name);
                            } else {
                                if (F == 120) {
                                    W.add(v[V].name);
                                }
                            }
                        }
                    }
                }
            }
            if (h == 110) {
                g = true;
            } else {
                if (h == 120) {
                    K = true;
                } else {
                    if (h == 0) {
                        Q = true;
                    }
                }
            }
        } else {
            K = true;
            var S = B.length;
            for (var V = 0; V < S; V++) {
                var w = B[V];
                var F = n[V];
                if (F == -1) {
                    W.add(w);
                } else {
                    if (F == 0) {
                        z.add(w);
                    } else {
                        if (F == 110) {
                            p.add(w);
                        } else {
                            if (F == 120) {
                                W.add(w);
                            }
                        }
                    }
                }
            }
            if (z.length > 0 || p.length > 0) {
                K = true;
            }
            if (v != null) {
                for (var V = 0; V < L; V++) {
                    var F = v[V].status;
                    var w = v[V].name;
                    if (F == 0) {
                        if (z.contains(w)) {
                            z.remove(w);
                        } else {
                            if (W.contains(w) || p.contains(w)) {
                                continue;
                            }
                        }
                        z.add(w);
                    } else {
                        if (F == 110) {
                            if (z.contains(w)) {
                                z.remove(w);
                            }
                            if (p.contains(w) || W.contains(w)) {
                                continue;
                            } else {
                                p.add(w);
                            }
                        } else {
                            if (F == 120) {
                                if (z.contains(w)) {
                                    z.remove(w);
                                }
                                if (p.contains(w)) {
                                    p.contains(w);
                                }
                                W.add(w);
                            }
                        }
                    }
                }
            }
        }
        if (Q && W.length == 0 && p.length == 0) {} else {
            if (z.length > 0 || p.length > 0 || W.length > 0) {
                if (u == null) {
                    C = LEAP.getElements(J.toString(), q);
                } else {
                    C = u;
                }
                if (C != null) {
                    var S = C.length;
                    for (var V = 0; V < S; V++) {
                        var Z = C[V];
                        var w = Z.getAttribute("al");
                        if (String.isEmpty(w)) {
                            w = Z.getAttribute("panel");
                        }
                        if (String.isEmpty(w)) {
                            continue;
                        }
                        if (z.contains(w)) {
                            LEAP.setOPAreaStatus(Z, 0, O);
                        } else {
                            if (p.contains(w)) {
                                LEAP.setOPAreaStatus(Z, 110, O);
                            } else {
                                if (W.contains(w)) {
                                    LEAP.setOPAreaStatus(Z, 120, O);
                                } else {
                                    if (Q) {
                                        LEAP.setOPAreaStatus(Z, 0, O);
                                    } else {
                                        if (K) {
                                            LEAP.setOPAreaStatus(Z, 120, O);
                                        } else {
                                            if (g) {
                                                LEAP.setOPAreaStatus(Z, 110, O);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (B != null) {
            if (!(o && h == 0)) {
                if (T == null) {
                    T = LEAP.getElements("div[ct=table][instance=" + X.instance + "]", q);
                }
                if (T != null) {
                    var N = X.___def.operations;
                    var S = T.length;
                    for (var V = 0; V < S; V++) {
                        var A = LEAP.getElements("th[ctf=table_header][tpo!=null][tpoal!=null]", T[V]);
                        if (A != null) {
                            var I = A.length;
                            for (var U = 0; U < I; U++) {
                                var R = A[U].getAttribute("tpo");
                                var M = A[U].getAttribute("tpoal");
                                if (R != null && R.Trim() != "" && M != null && M.Trim() != "") {
                                    var H = R.split("|");
                                    var r = M.split("|");
                                    if (r.length < H.length) {
                                        var P = r.length;
                                        r.length = H.length;
                                        for (var Y = P; Y < H.length; Y++) {
                                            r[Y] = "";
                                        }
                                    }
                                    var y = [];
                                    for (jj = 0; jj < H.length; jj++) {
                                        var J = H[jj];
                                        var x = r[jj];
                                        if (x == null || x.Trim() == "") {
                                            continue;
                                        }
                                        if (N.contains(x)) {
                                            y.add(J);
                                        }
                                    }
                                    var G = y.join("|");
                                    if (G != H) {
                                        A[U].setAttribute("tpo", G);
                                    }
                                    A[U].removeAttribute("tpoal");
                                }
                            }
                        }
                        A = null;
                    }
                }
                T = null;
            }
        }
    };
    LEAP.setReadonly = function(j, h, d) {
        var g = j.getAttribute("ct");
        if (g == null) {
            g = j.getAttribute("ht");
        }
        if (h != null && (h == true || h == "1")) {
            if (j.getAttribute("ct") == null) {
                j.setAttribute("readOnly", "true");
            } else {
                if (g == "simplecheck") {
                    j.setAttribute("disabled", "true");
                } else {
                    if (LEAP[g] && LEAP[g].setReadOnly) {
                        LEAP[g].setReadOnly(j, true);
                    } else {
                        j.setAttribute("readonly", "1");
                    }
                }
            }
        } else {
            if (j.getAttribute("ct") == null) {
                j.removeAttribute("readOnly");
            } else {
                if (g == "simplecheck") {
                    j.removeAttribute("disabled");
                } else {
                    if (LEAP[g] && LEAP[g].setReadOnly) {
                        LEAP[g].setReadOnly(j, h);
                    } else {
                        j.removeAttribute("readonly");
                    }
                }
            }
        }
        j = null;
    };
    LEAP.setOPAreaStatusStep2 = function(n, m, d, j) {
        var g = n.getAttribute("___srstatus");
        var l = n.getAttribute("ct");
        if (l == null) {
            l = n.getAttribute("ht");
        }
        if (l == null) {
            l = n.tagName;
        }
        if (g == null) {
            if (n.getAttribute("ct") == null) {
                g = n.getAttribute("readOnly");
                if (g == null) {
                    g = false;
                }
            } else {
                if (l == "simplecheck") {
                    g = n.getAttribute("disabled");
                } else {
                    g = n.getAttribute("readonly");
                    if (g == null) {
                        g = 0;
                    }
                }
            }
            n.setAttribute("___srstatus", g);
        }
        n.setAttribute("___isoparea", "1");
        n.setAttribute("___isoparea_status", d);
        if (d == 120) {
            return;
        }
        var h = false;
        if (g != null && (g == 1 || g == true)) {
            h = true;
        }
        if (m) {
            LEAP.setReadonly(n, m);
        } else {
            if (n.getAttribute("ct") == null) {
                if (g == "false") {
                    n.removeAttribute("readOnly");
                } else {
                    n.setAttribute("readOnly", g);
                }
            } else {
                if (l == "simplecheck") {
                    n.removeAttribute("disabled");
                } else {
                    if (LEAP[l] && LEAP[l].setReadOnly) {
                        if (g == "true") {
                            g = true;
                        } else {
                            g = false;
                        }
                        LEAP[l].setReadOnly(n, g);
                    } else {
                        if (g == "0") {
                            n.removeAttribute("readonly");
                        } else {
                            n.setAttribute("readonly", g);
                        }
                    }
                }
            }
        }
        n = null;
    };
    LEAP.setOPAreaStatus = function(q, j, h, g) {
        var w = q.getAttribute(commfields.instance);
        var p = false;
        var v = null;
        if (q.all) {
            p = true;
            v = q.all;
        } else {
            v = LEAP.getElements("[ct][instance=" + w + "],[ht][instance=" + w + "]", q);
        }
        if (h) {
            q.setAttribute("_sys_opstatus_s_display", q.style.display);
            q.setAttribute("_sys_opstatus_s_code", q.getAttribute("_sys_opareastatus"));
        }
        q.setAttribute("_sys_isoparea", "1");
        if (j == 110) {
            var r = q;
            LEAP.setOPAreaStatusStep2(r, true, "110");
            q.setAttribute("_sys_opareastatus", "110");
            if (v != null) {
                var d = v.length;
                for (var m = 0; m < d; m++) {
                    var r = v[m];
                    if (p) {
                        var n = r.getAttribute("ct");
                        var u = r.getAttribute("ht");
                        var o = r.getAttribute("instance");
                        if (o != null && (n != null || u != null) && o == w) {} else {
                            continue;
                        }
                    }
                    if (h) {
                        r.setAttribute("_sys_opstatus_s_display", r.style.display);
                        r.setAttribute("_sys_opstatus_s_code", r.getAttribute("_sys_opareastatus"));
                    }
                    LEAP.setOPAreaStatusStep2(r, true, "110", h);
                    r.setAttribute("_sys_opareastatus", "110");
                    r = null;
                }
                v != null;
            }
        } else {
            if (j == 120) {
                q.style.display = "none";
                q.setAttribute("_sys_opareastatus", "120", h);
                if (g) {
                    LEAP.setOPAreaStatusStep2(q, false, "0");
                }
                if (v != null) {
                    var d = v.length;
                    for (var m = 0; m < d; m++) {
                        var r = v[m];
                        if (p) {
                            var n = r.getAttribute("ct");
                            var u = r.getAttribute("ht");
                            var o = r.getAttribute("instance");
                            if (o != null && (n != null || u != null) && o == w) {} else {
                                continue;
                            }
                        }
                        if (h) {
                            r.setAttribute("_sys_opstatus_s_display", r.style.display);
                            r.setAttribute("_sys_opstatus_s_code", r.getAttribute("_sys_opareastatus"));
                        }
                        r.setAttribute("_sys_opareastatus", "120", h);
                        if (g) {
                            LEAP.setOPAreaStatusStep2(r, false, "0");
                        }
                        r = null;
                    }
                    v != null;
                }
            } else {
                if (j == 0) {
                    q.style.display = "";
                    q.setAttribute("_sys_opareastatus", "0", h);
                    if (g) {
                        LEAP.setOPAreaStatusStep2(q, false, "0");
                    }
                    if (v != null) {
                        var d = v.length;
                        for (var m = 0; m < d; m++) {
                            var r = v[m];
                            if (p) {
                                var n = r.getAttribute("ct");
                                var u = r.getAttribute("ht");
                                var o = r.getAttribute("instance");
                                if (o != null && (n != null || u != null) && o == w) {} else {
                                    continue;
                                }
                            }
                            if (h) {
                                r.setAttribute("_sys_opstatus_s_display", r.style.display);
                                r.setAttribute("_sys_opstatus_s_code", r.getAttribute("_sys_opareastatus"));
                            }
                            r.setAttribute("_sys_opareastatus", "0", h);
                            if (g) {
                                LEAP.setOPAreaStatusStep2(r, false, "0");
                            }
                            r = null;
                        }
                        v != null;
                    }
                }
            }
        }
        q = null;
    };
    LEAP.removeElement = function(j, h) {
        if (j == null) {
            return;
        }
        if (LEAP._gb == null) {
            LEAP._gb = document.createElement("div");
            LEAP._gb.style.display = "none";
            document.body.appendChild(LEAP._gb);
        }
        if (h != true && !(j instanceof Array)) {
            j = [j];
        }
        var d = j.length;
        for (var g = d - 1; g > -1; g--) {
            LEAP._gb.appendChild(j[g]);
        }
        LEAP._gb.innerHTML = "";
        j = null;
    };
    LEAP.disableF11 = false;
    LEAP._isFullScreen = false;
    if (__s__3.href.indexOf("_f=1") > -1) {
        LEAP._isFullScreen = true;
    }
    LEAP.shortKeyService = function(A) {
        var d = A.e.srcElement;
        var x = A.e.type;
        var n = -1;
        if (LEAP.isIE) {
            n = A.e.keyCode;
        } else {
            n = A.e.which;
        }
        try {
            if (LEAP.disableF11 && n == 122) {
                LEAP.stopEvent(A.e);
                return;
            }
            if (LEAP._isFullScreen && A.e.altKey) {
                LEAP.stopEvent(A.e);
                return;
            }
            if (n == 113 || n == 118 || n == 119 || n == 120 || n == 13 || n == 27 || ((A.e.ctrlKey || A.e.altKey) && (n == 67 || n == 71 || n == 75 || n == 77 || n == 79 || n == 80 || n == 83 || n == 84 || n == 81 || n == 87 || n == 69 || n == 65 || n == 83 || n == 88))) {
                if (d.tagName != "BODY") {
                    var z = d;
                    var r = null;
                    for (var q = 0; q < 20; q++) {
                        if (z == null || z.tagName == "BODY") {
                            break;
                        }
                        shortKeys = z.getAttribute("shortkey");
                        var w = false;
                        if (shortKeys != null) {
                            var h = shortKeys.length;
                            for (var p = 0; p < h; p++) {
                                var y = shortKeys[p];
                                r = y.keycode;
                                var u = r.indexOf("ctrl+") == 0;
                                var B = r.indexOf("alt+") == 0;
                                if (u) {
                                    r = r.substring(5);
                                } else {
                                    if (B) {
                                        r = r.substring(4);
                                    }
                                }
                                if (r != null && r != "" && r.Trim() != "" && r == n.toString()) {
                                    if (u == A.e.ctrlKey || B == A.e.altKey) {
                                        var o = y.domain;
                                        if (o == null) {
                                            o = z;
                                        }
                                        var g = {
                                            caller: d,
                                            e: A.e,
                                            arg: y.arg,
                                            ut: d.getAttribute("ut")
                                        };
                                        try {
                                            y.fn.call(o, g);
                                        } catch (m) {
                                            LEAP.showError(m);
                                        } finally {
                                            y = g = o = null;
                                            LEAP.stopEvent(A.e);
                                            return false;
                                        }
                                        w = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (w == true) {
                            break;
                        }
                        shortKeys = null;
                        z = z.parentNode;
                    }
                    z = null;
                }
            }
            if (n == 8) {
                if (d.tagName != "INPUT" && d.tagName != "TEXTAREA" && d.getAttribute("CONTENTEDITABLE") != "true" && !d.hasAttribute("canbak")) {
                    LEAP.stopEvent(A.e);
                    return false;
                } else {
                    if ((d.tagName == "INPUT" || d.tagName == "TEXTAREA") && d.readOnly) {
                        LEAP.stopEvent(A.e);
                        return false;
                    }
                }
            }
            if (A.e.ctrlKey && n == 87) {
                LEAP.stopEvent(A.e);
            }
        } finally {
            A = null;
        }
    };
    LEAP.addShortKeyEvent = function(d, j, g, h, l) {
        try {
            if (d != null && j != null && g != null) {
                if (j.shortkey == null) {
                    j.shortkey = [{
                        keycode: d.toString(),
                        fn: g,
                        arg: h,
                        domain: l
                    }];
                } else {
                    j.shortkey.add({
                        keycode: d.toString(),
                        fn: g,
                        arg: h,
                        domain: l
                    });
                }
            }
        } finally {
            d = j = g = h = l = null;
        }
    };
    LEAP._pl = function() {
        UIEventManager.removeEvent(window, "load", LEAP._pl);
        if (LEAP.isIE) {
            try {
                document.execCommand("BackgroundImageCache", false, true);
            } catch (d) {}
        }
        var g = LEAP._p(LEAP.getElement("head").innerHTML);
        LEAP.loadModule(null, null, null, g);
        g = null;
        LEAP.addEvent(document.body, "keydown", LEAP.systemEventProcesser, null, null, true);
        LEAP.addEvent(document.body, "click", LEAP.systemEventProcesser, null, null, true);
        LEAP.addEvent(document.body, "keydown", LEAP.shortKeyService, null, null, true);
        LEAP.addEvent(document.body, "touchstart", LEAP._ontouchstart, null, null, true);
        LEAP.addEvent(document.body, "touchend", LEAP._ontouchend, null, null, true);
    };
    LEAP._ontouchstart = function(g) {
        var j = g.e;
        var d = j.targetTouches[0].pageX;
        var l = j.targetTouches[0].pageY;
        var h = new Date().getTime();
        LEAP._tleo = {
            x: d,
            y: l,
            t: h
        };
        g = j = null;
    };
    LEAP._ontouchend = function(g) {
        try {
            if (LEAP._tleo) {
                var d = g.e.changedTouches[0].pageX;
                var j = g.e.changedTouches[0].pageY;
                var h = new Date().getTime();
                if ((h - LEAP._tleo.t) < 150 && Math.abs(d - LEAP._tleo.x) < 10 && Math.abs(j - LEAP._tleo.y) < 10) {
                    DelegateUIEventManager.handleEvent({
                        e: g.e,
                        type: "touchclick"
                    });
                    LEAP._tleo = null;
                }
            }
        } finally {
            e = null;
        }
    };
    LEAP.systemEventProcesser = function(o) {
        var d = o.e.srcElement;
        var n = o.e.type;
        var g = d.getAttribute("readonly");
        var l = d.getAttribute("readOnly");
        var p = d.tagName;
        if ((g != null && g == "1") || (l != null && l == "true")) {
            var h = false;
            if (n == "keydown") {
                var j = null;
                if (LEAP.isIE) {
                    j = o.e.keyCode;
                } else {
                    j = o.e.which;
                }
                h = (j == 9 && (p == "INPUT" || p == "TEXTAREA"));
            }
            if (n == "click" && (p == "INPUT" || p == "TEXTAREA") || h) {} else {
                LEAP.stopEvent(o.e);
                var m = {
                    breakEvent: true
                };
                return m;
            }
        }
        o = d = null;
    };
    UIEventManager.addEvent(window, "load", LEAP._pl, null, null, 40);
    LEAP.getBindValue = function(binddef, value, data, ct, autoUseCodeCache, module) {
        if (binddef == null) {
            return;
        }
        var ri = value;
        if (value == null) {
            ri = value = "";
        } else {
            value = LEAP.parsedatestr(value);
        }
        if ((String.isEmpty(value)) && (binddef.defaultcode != null && binddef.code != null)) {
            ri = value = binddef.defaultcode;
        }
        if (value != null && typeof(value) != "") {
            if (value.toString != null) {
                value = value.toString();
            } else {
                value = value + "";
            }
        }
        if (value != "") {
            if (binddef != null && binddef.code != null && binddef.code.Trim() != "") {
                if ((autoUseCodeCache != null && autoUseCodeCache == false)) {
                    value = data["data.___codevalue___" + binddef.md];
                } else {
                    if (value != null && value.indexOf(",") > -1) {
                        var vs = value.split(",");
                        var value = "";
                        for (var i = 0; i < vs.length; i++) {
                            var tv = vs[i];
                            if (tv != null && tv.Trim() != "") {
                                var tvv = LEAP.getCodeText(binddef.code, tv);
                                if (tvv != null && tvv.Trim() != "") {
                                    if (value != "") {
                                        value += ",";
                                    }
                                    value += tvv;
                                }
                            }
                        }
                    } else {
                        value = LEAP.getCodeText(binddef.code, value, binddef.defaultcode);
                    }
                }
            }
            if (value == null) {
                value = "";
            } else {
                if (binddef != null && binddef.bt == "date" && value != "") {
                    var _t = value.split(" ");
                    if (_t.length > 0) {
                        value = _t[0];
                    }
                } else {
                    if (binddef != null && binddef.bt == "datetime" && value != "") {
                        var _t = value.split(" ");
                        if (_t.length > 1) {
                            value = _t[0] + " " + _t[1].substring(0, _t[1].lastIndexOf("."));
                        }
                    } else {
                        if (binddef != null && binddef.bt == "datetime2" && value != "") {
                            var _t = value.split(" ");
                            if (_t.length > 1) {
                                value = _t[0] + "<br>  " + _t[1].substring(0, _t[1].lastIndexOf("."));
                            }
                        }
                    }
                }
            }
        }
        try {
            if (binddef.btfn != null) {
                if (binddef._btfn == null) {
                    try {
                        binddef._btfn = eval("(" + binddef.btfn + ")");
                    } catch (err) {}
                }
                if (binddef._btfn != null) {
                    value = binddef._btfn(binddef, value, data, ct);
                }
            }
            if ((binddef.btexp != null && value != null && value != "") || binddef.sncol == "1") {
                value = binddef.btexp.replaceall(commfields.vv, value).replaceall(commfields.vvn, binddef.txt).replaceall(commfields.vid, ri);
            }
            if (binddef.tpo != null) {
                if (binddef._tpo != null) {
                    value = binddef._tpo;
                } else {
                    if (binddef.tpo == "_addrow") {
                        binddef._tpo = value = commfields.addflag;
                    } else {
                        var tpos = binddef.tpo.split(commfields.tpos);
                        var l = tpos.length;
                        var ret = "";
                        for (var i = 0; i < l; i++) {
                            var o = tpos[i];
                            if (String.isEmpty(o.Trim())) {
                                continue;
                            }
                            var t = o.split(commfields.tpos2);
                            var _t = t[0];
                            if (t.length > 2) {
                                _t = "";
                                for (var ii = 0; ii < t.length - 1; ii++) {
                                    _t += t[ii];
                                    if (ii < t.length - 2) {
                                        _t += ":";
                                    }
                                }
                            }
                            ret += commfields.tpo.replace(commfields.vn, _t).replace(commfields.vv, t[t.length - 1]);
                            if (i != l - 1) {
                                ret += commfields.bl;
                            }
                        }
                        binddef._tpo = value = ret;
                    }
                }
            }
        } catch (err) {}
        binddef = data = ct = null;
        return value;
    };
    LEAP.getBindDef = function(g) {
        if (g._bdef == null) {
            var d = {
                md: g.getAttribute("md"),
                sncol: g.getAttribute("sncol") == "1",
                bt: g.getAttribute("bt"),
                ut: g.getAttribute("ut"),
                st: g.getAttribute("st"),
                btexp: g.getAttribute("btexp"),
                btfn: g.getAttribute("btfn"),
                urlpath: g.getAttribute("urlpath"),
                code: g.getAttribute("code"),
                pcodes: g.getAttribute("pcodes"),
                tpo: g.getAttribute("tpo"),
                defaultcode: g.getAttribute("defaultcode"),
                enableedit: g.getAttribute("enableedit"),
                btcontrol: g.getAttribute("btcontrol"),
                treecol: g.getAttribute("treecol"),
                textalign: g.getAttribute("textalign"),
                check: g.getAttribute("check"),
                innerHTML: g.innerHTML,
                _width: g.style.width,
                _height: g.style.height,
                _colspan: g.getAttribute("_colspan"),
                _rowspan: g.getAttribute("_rowspan"),
                colorexp: g.getAttribute("colorexp"),
                imgexp: g.getAttribute("imgexp"),
                menuexp: g.getAttribute("menuexp"),
                oper: g.getAttribute("oper"),
                btstyle: g.getAttribute("btstyle"),
                tipfn: g.getAttribute("tipfn"),
                tipoffset: g.getAttribute("tipoffset"),
                btclass: g.getAttribute("btclass"),
                fcolor: g.getAttribute("fcolor"),
                bcolor: g.getAttribute("bcolor"),
                btdis: g.getAttribute("btdis")
            };
            g._bdef = d;
        } else {
            d = g._bdef;
        }
        g = null;
        return d;
    };
    var vhts = new array();
    vhts.add("INPUT");
    vhts.add("TEXTAREA");
    var skipvhts = new array();
    skipvhts.add("TD");
    skipvhts.add("TH");
    LEAP.bindData = function(I, H, p, B, r, o, D, y) {
        if (y == null) {
            y = true;
        }
        if (D == null) {
            D = false;
        }
        if (I == null) {
            if (D) {
                return;
            }
            I = {};
        }
        if (o == null) {
            var w = '[bt][instance="' + H + '"][md]';
            if (p != null) {
                w += p;
            }
            o = LEAP.getElements(w, r);
        }
        var G = [];
        var J = [];
        if (o != null) {
            var z = o.length;
            for (var C = 0; C < z; C++) {
                var x = o[C];
                var g = x.getAttribute(commfields.ctf);
                if (g != null && y && g == "dynaedit_edit") {
                    continue;
                }
                var F = x.getAttribute(commfields.ct);
                var d = x.getAttribute(commfields.ctg);
                var n = F == null && d == null;
                var j = LEAP.getBindDef(x);
                if (D && !I.hasOwnProperty(j.md)) {
                    continue;
                }
                var u = I[j.md];
                if (u != null && typeof(u) != "string") {
                    u = u + "";
                }
                var h = u;
                if (n) {
                    u = LEAP.getBindValue(j, u, I, x, B);
                    var A = x.getAttribute("type");
                    if (A != null && x.tagName == "INPUT" && A.toLowerCase() == "checkbox") {
                        if (u == null) {
                            x.checked = false;
                        }
                        if (u == true || u == "true" || u == "1" || u == 1) {
                            x.checked = true;
                        } else {
                            x.checked = false;
                        }
                    } else {
                        if (vhts.contains(x.tagName)) {
                            x.value = u;
                            x.setAttribute("value", u);
                        } else {
                            if (skipvhts.contains(x.tagName)) {
                                continue;
                            } else {
                                x.innerText = u;
                            }
                        }
                    }
                    if (j.code != null && j.code.Trim() != "") {
                        x.setAttribute("_codevalue", h);
                    }
                    var m = x.getAttribute("ctef");
                    if (m && LEAP[m]) {
                        LEAP[m].onsetValue(x);
                    }
                } else {
                    if (d == "simplecheck") {
                        if (J.contains(j.md)) {
                            continue;
                        }
                        J.add(j.md);
                        LEAP.simplecheck.setValue(x, h);
                    } else {
                        if (F == "select") {
                            var q = x.getAttribute("group");
                            if (G.contains(q)) {
                                continue;
                            }
                            LEAP.select.setValue(x, h, false);
                            if (q != null && q.Trim() != "") {
                                G.push(q);
                            }
                        } else {
                            if (F.indexOf("upload_control_") == 0) {
                                LEAP.upload.setValue(x, h);
                            } else {
                                if ("radio" == F) {
                                    var q = x.getAttribute("group");
                                    if (G.contains(q)) {
                                        continue;
                                    }
                                    if (q != null && q.Trim() != "") {
                                        G.push(q);
                                    }
                                    if (B != null && B == false) {
                                        LEAP.radio.setValueByText(x, h, false);
                                    } else {
                                        LEAP.radio.setValue(x, h, false);
                                    }
                                } else {
                                    if (F == "organselector") {
                                        LEAP.organSelector._setValue(x, h);
                                    } else {
                                        if (F == "chart") {
                                            LEAP.flashchart.setValue(x, h);
                                        } else {
                                            if (F && LEAP[F] && LEAP[F].setValue) {
                                                u = LEAP[F].setValue(x, h);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.convertChangeResult = function(d) {
        if (d == null) {
            return;
        }
        var j = new ChangeResult();
        for (var h in d) {
            if (h != "changeResultName" && h != "_data") {
                var n = h;
                var m = null;
                var l = null;
                var g = d[h];
                if (g == null) {
                    m = l = null;
                } else {
                    if (g.hashide) {
                        continue;
                    }
                    m = g.value;
                    l = g.source;
                }
                j.addparameter(n, m, l);
            }
        }
        return j;
    };
    LEAP.convertDataResult = function(d) {
        if (d == null) {
            return;
        }
        var j = new DataResult();
        for (var h in d) {
            if (h != "dataResultName" && h != "_data") {
                var m = h;
                var l = null;
                var g = d[h];
                if (g == null) {
                    l = null;
                } else {
                    l = g;
                }
                if (l == null) {
                    continue;
                }
                j.addparameter(m, l);
            }
        }
        return j;
    };
    LEAP.converObject = function(d) {
        if (d != null && d.metaData != null && d.result != null) {
            if (d.javaClass == "com.longrise.LEAP.Base.Objects.DataResult" || d.javaClass == "com.longrise.LEAP.Base.Objects.ChangeResult") {
                var g = d.metaData.length;
                var h = new Object();
                for (var j = 0; j < g; j++) {
                    h[d.metaData[j]] = d.result[j];
                }
                d = null;
                return h;
            }
        } else {
            return d;
        }
    };
    LEAP.getValue = function(q, o, h) {
        if (q == null) {
            return;
        }
        if (typeof(q) == "string") {
            q = LEAP.getElement(q, o);
        }
        if (q == null) {
            return;
        }
        var d = q.getAttribute(commfields.ct);
        var n = q.getAttribute(commfields.ctg);
        var j = d == null && n == null;
        var l = LEAP.getBindDef(q);
        var p = null;
        if (j) {
            var m = q.getAttribute("type");
            if (m != null && q.tagName == "INPUT" && m.toLowerCase() == "checkbox") {
                p = q.checked;
                if (p == true) {
                    p = "1";
                } else {
                    p = "0";
                }
            } else {
                if (vhts.contains(q.tagName)) {
                    p = q.value;
                } else {
                    if (skipvhts.contains(q.tagName)) {} else {
                        p = q.innerText;
                    }
                }
            }
        } else {
            if (d == "areagroup") {
                p = LEAP.select.getValue(q);
            } else {
                if (d == "areagroup") {
                    var g = LEAP.getElement("[ct=select]", q);
                    if (g == null) {
                        return;
                    }
                    p = LEAP.select.getValue(g);
                } else {
                    if (d.indexOf("upload_control_") == 0) {
                        p = LEAP.upload.getValue(q);
                    } else {
                        if (d == "organselector") {
                            p = LEAP.organSelector._getValue(q);
                        } else {
                            if (d == "opinion" && LEAP.opinion) {
                                if (h) {
                                    p = LEAP.opinion.validate(q);
                                } else {
                                    p = LEAP.opinion.getValue(q);
                                }
                            } else {
                                if (d == "opinion2" && LEAP.opinion2) {
                                    if (h) {
                                        p = LEAP.opinion2.validate(q);
                                    } else {
                                        p = LEAP.opinion2.getValue(q);
                                    }
                                } else {
                                    if (d == "attlist" && LEAP.attlist) {
                                        if (h) {
                                            p = LEAP.attlist.validate(q);
                                        } else {
                                            p = LEAP.attlist.getValue(q);
                                        }
                                    } else {
                                        if (d && LEAP[d] && LEAP[d].getValue) {
                                            p = LEAP[d].getValue(q);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return p;
    };
    LEAP.setValue = function(r, q, p) {
        if (r == null) {
            return;
        }
        if (typeof(r) == "string") {
            r = LEAP.getElement(r, p);
        }
        if (r == null) {
            return;
        }
        var d = r.getAttribute(commfields.ct);
        var m = r.getAttribute(commfields.ctg);
        var h = d == null && m == null;
        var j = LEAP.getBindDef(r);
        var n = q;
        q = LEAP.getBindValue(j, q, null, r);
        if (h) {
            var l = r.getAttribute("type");
            if (l != null && r.tagName == "INPUT" && l.toLowerCase() == "checkbox") {
                if (q == null) {
                    r.checked = false;
                }
                if (q == true || q == "true" || q == "1" || q == 1) {
                    r.checked = true;
                } else {
                    r.checked = false;
                }
            } else {
                if (vhts.contains(r.tagName)) {
                    r.value = q;
                } else {
                    if (skipvhts.contains(r.tagName)) {} else {
                        r.innerText = q;
                    }
                }
            }
            var o = r.getAttribute("ctef");
            if (o && LEAP[o]) {
                LEAP[o].onsetValue(r);
            }
        } else {
            if (d == "areagroup") {
                var g = LEAP.getElement("[ct=select]", r);
                if (g == null) {
                    return;
                }
                LEAP.select.setValue(r, n, false);
            } else {
                if (d == "select") {
                    LEAP.select.setValue(r, n, false);
                } else {
                    if (d.indexOf("upload_control_") == 0) {
                        LEAP.upload.setValue(r, n);
                    } else {
                        if ("radio" == d) {
                            LEAP.radio.setValue(r, n, false);
                        } else {
                            if (d == "organselector") {
                                LEAP.organSelector._setValue(r, n);
                            } else {
                                if (d == "chart") {
                                    LEAP.flashchart.setValue(r, n);
                                } else {
                                    if (d && LEAP[d] && LEAP[d].setValue) {
                                        q = LEAP[d].setValue(r, n);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.getData = function(T, N, w, J, n, P, V) {
        if (V == null) {
            V = true;
        }
        var W = '[bt][instance="' + N + '"][md]';
        if (w != null) {
            W += w;
        }
        if (J == true) {
            W = W + "[islwfp!=1]";
        }
        var z = null;
        if (P == null) {
            if (n instanceof Array) {
                z = [];
                var Q = n.length;
                for (var R = 0; R < Q; R++) {
                    if (n[R] != null) {
                        z.addall(LEAP.getElements(W, n[R]));
                    }
                }
                if (z.length == 0) {
                    z = null;
                }
            } else {
                z = LEAP.getElements(W, n);
            }
        } else {
            z = P;
        }
        var C = null;
        var T = LEAP.clone(T);
        var m = [];
        var F = null;
        var S = null;
        var I = null;
        var h = null;
        if (J == true) {
            F = {};
            I = {};
            h = {};
        }
        var o = null;
        var g = [];
        var r = {};
        if (z != null) {
            var Q = z.length;
            for (var R = 0; R < Q; R++) {
                var M = z[R];
                if (M.getAttribute("multipar")) {
                    continue;
                }
                var B = M.getAttribute(commfields.ctf);
                if (B != null && V == true && B == "dynaedit_edit") {
                    continue;
                }
                var x = M.getAttribute(commfields.ct);
                var O = LEAP.getBindDef(M);
                var A = M.getAttribute(commfields.ctg);
                var D = x == null && A == null;
                if (O.md == null) {
                    continue;
                }
                var L = null;
                var y = T[O.md];
                var p = null;
                var j = null;
                if (D) {
                    var q = M.getAttribute("type");
                    if (q != null && M.tagName == "INPUT" && q.toLowerCase() == "checkbox") {
                        L = M.checked;
                        if (L == true) {
                            L = "1";
                        } else {
                            L = "0";
                        }
                    } else {
                        if (vhts.contains(M.tagName)) {
                            L = M.value;
                        } else {
                            if (skipvhts.contains(M.tagName)) {
                                continue;
                            } else {
                                L = M.innerText;
                            }
                        }
                    }
                    if (O.bt == "date") {
                        if (L != null && L.Trim().indexOf(" ") > -1) {
                            L = L.Trim().split(" ")[0];
                        }
                        if (y != null && y.Trim().indexOf(" ") > -1) {
                            y = y.Trim().split(" ")[0];
                        }
                    }
                    if (O.code != null && O.code.Trim() != "") {
                        L = M.getAttribute("_codevalue");
                    }
                } else {
                    if (x == "areagroup") {
                        p = "areagroup";
                        var u = M.getAttribute("group");
                        if (u != null && u.Trim() != "") {
                            if (r[O.md] == null) {
                                r[O.md] = {};
                            }
                            if (r[O.md].sizes == null) {
                                r[O.md].sizes = [];
                            }
                            r[O.md].sizes.add(M.getAttribute("size"));
                        }
                        if (m.contains(u)) {
                            continue;
                        }
                        L = LEAP.select.getValue(M);
                        if (u != null && u.Trim() != "") {
                            m.push(u);
                            if (r[O.md] == null) {
                                r[O.md] = {};
                            }
                            r[O.md].count = M.getAttribute("count");
                        }
                    } else {
                        if (A == "simplecheck") {
                            if (g.contains(O.md)) {
                                continue;
                            }
                            p = "simplecheck";
                            L = LEAP.simplecheck.getValue(M);
                            g.add(O.md);
                        } else {
                            if (x == "select") {
                                p = "select";
                                var u = M.getAttribute("group");
                                if (u != null && u.Trim() != "") {
                                    if (r[O.md] == null) {
                                        r[O.md] = {};
                                    }
                                    if (r[O.md].sizes == null) {
                                        r[O.md].sizes = [];
                                    }
                                    r[O.md].sizes.add(M.getAttribute("size"));
                                }
                                if (m.contains(u)) {
                                    continue;
                                }
                                L = LEAP.select.getValue(M);
                                if (u != null && u.Trim() != "") {
                                    m.push(u);
                                    if (r[O.md] == null) {
                                        r[O.md] = {};
                                    }
                                    r[O.md].count = M.getAttribute("count");
                                }
                            } else {
                                if (x.indexOf("upload_control_") == 0) {
                                    p = "upload";
                                    L = LEAP.upload.getValue(M);
                                } else {
                                    if ("radio" == x) {
                                        var u = M.getAttribute("group");
                                        if (m.contains(u)) {
                                            continue;
                                        }
                                        if (u != null && u.Trim() != "") {
                                            m.push(u);
                                        }
                                        p = "radio";
                                        L = LEAP.radio.getValue(M);
                                    } else {
                                        if (x == "organselector") {
                                            p = "organselector";
                                            L = LEAP.organSelector._getValue(M);
                                        } else {
                                            if (x && LEAP[x] && LEAP[x].getValue) {
                                                contorltype = x;
                                                L = LEAP[x].getValue(M);
                                            } else {
                                                continue;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (L != null && typeof(L) == "number") {
                    L = L + "";
                }
                if (y != null && typeof(y) == "number") {
                    y = y + "";
                }
                var U = O.md;
                if (C != null) {
                    var G = 1;
                    while (C[U] != null) {
                        U = O.md + "___" + G + "___";
                        G++;
                    }
                }
                var d = false;
                if ((String.isEmpty(L)) && (String.isEmpty(y))) {
                    d = true;
                }
                if (J || (L != y && !d)) {
                    var K = false;
                    if ((O.bt == "date" || O.bt == "datetime")) {
                        if (O.bt == "date") {
                            if (L != null && L.indexOf(" ") > -1) {
                                L = L.Trim().split(" ")[0];
                            }
                            if (y != null && y.indexOf(" ") > -1) {
                                y = y.Trim().split(" ")[0];
                            }
                        }
                        if (U != O.md) {
                            K = false;
                        } else {
                            if (L == y) {
                                K = true;
                            }
                        }
                    }
                    if (!K) {
                        if (C == null) {
                            C = {};
                        }
                        if (y != null && typeof(y) != "string") {
                            y = y + "";
                        }
                        if (L != null && typeof(L) != "string") {
                            L = L + "";
                        }
                        var H = M.getAttribute("_hide");
                        H = H != null && H == 1;
                        C[U] = {
                            source: y,
                            value: L,
                            controltype: p,
                            hashide: H
                        };
                        if (H) {
                            if (S == null) {
                                S = [];
                            }
                            S.add(U);
                        }
                        T[U] = L;
                        if (J == true) {
                            F[U] = LEAP.parsenum(M.getAttribute("search"));
                            I[U] = M.getAttribute("searchgroup");
                            h[U] = M.getAttribute("skipsearch");
                        }
                    }
                }
                if (o == null) {
                    o = {};
                }
                o[U] = L;
                if (j != null && r[U] == null) {
                    r[U] = ext;
                }
            }
        }
        try {
            var C = {
                change: C,
                data: T,
                searchtype: F,
                group: I,
                skipsearch: h,
                curData: o,
                extend: r,
                hides: S
            };
            return C;
        } finally {
            C = T = null;
        }
    };
    LEAP.hasCSS = function(h, d) {
        if (h == null) {
            return;
        }
        var g = h.className;
        h = null;
        if (g != null && g != "" && (g == d || g.split(" ").contains(d))) {
            return true;
        }
        return false;
    };
    LEAP.addCSS = function(m, r, o) {
        if (m == null) {
            return;
        }
        if (o != true && !(m instanceof Array)) {
            m = [m];
        }
        var d = m.length;
        for (var h = 0; h < d; h++) {
            var p = m[h].className;
            var q = p.split(" ");
            if (p != null && p != "" && (p == r || q.contains(r))) {
                continue;
            }
            var n = q.length;
            for (var g = n - 1; g > -1; g--) {
                if (q[g] == "" || q[g] == " ") {
                    q.removeindex(g);
                }
            }
            q.add(r);
            m[h].className = q.join(" ");
        }
        m = null;
    };
    LEAP.removeCSS = function(n, u, q) {
        if (n == null) {
            return;
        }
        if (q != true && !(n instanceof Array)) {
            n = [n];
        }
        var g = n.length;
        for (var m = 0; m < g; m++) {
            var r = n[m].className.split(" ");
            var o = r.length;
            var d = false;
            for (var h = 0; h < o; h++) {
                if (r[h] == u) {
                    r[h] = "";
                    d = true;
                }
            }
            if (d) {
                n[m].className = r.join(" ");
            }
        }
        n = null;
    };
    LEAP.bathCacheCodes = function(g) {
        if (g != null && g.length) {
            var h = g.length;
            var d = [];
            for (var j = 0; j < h; j++) {
                var q = g[j];
                if (String.isEmpty(q)) {
                    continue;
                }
                var p = "__codetype_" + q.toLowerCase();
                var o = commfields.gco.getvalue(p);
                if (o == null) {
                    d.add(q);
                }
            }
            if (d.length > 0) {
                var n = LEAP.request("app_bathGetCodeValues", {
                    codeTypes: d
                });
                if (n) {
                    for (var m = 0; m < n.length; m++) {
                        var q = n[m].codetype;
                        var r = n[m].values;
                        var p = "__codetype_" + q.toLowerCase();
                        o = {
                            i: true,
                            r: r
                        };
                        commfields.gco.add(p, o);
                    }
                }
            }
        }
    };
    LEAP.getCodeValue = function(h, g) {
        if (h == null || h == "") {
            return;
        }
        var m = "__codetype_" + h.toLowerCase();
        if (g) {
            g = String(g);
        }
        if (g != null && g.Trim() != "") {
            var l = LEAP.parsenum(g);
            if (l != null) {
                m += "__parentcode__" + l;
            } else {
                m += "__parentcode__" + g;
            }
        }
        var j = commfields.gco.getvalue(m);
        if (j == null) {
            var d = null;
            if (g == null || g.Trim() == "") {
                d = LEAP.request("getCodeValues2", {
                    c: h
                });
            } else {
                d = LEAP.request("getCodeValuesByParentValue", {
                    c: h,
                    p: g
                });
            }
            j = {
                i: true,
                r: d
            };
            commfields.gco.add(m, j);
        }
        return j.r;
    };
    LEAP.addCodeType = function(g, j, d) {
        if (g == null || g == "") {
            return;
        }
        if (d == null || d == "") {
            var n = "__codetype_" + g.toLowerCase();
            var h = commfields.gco.getvalue(n);
            if (h == null) {
                h = {
                    i: true,
                    r: []
                };
                for (var m = 0; m < j.length; m++) {
                    if (j[m]) {
                        j[m].codetypename = g;
                        h.r.add(j[m]);
                    }
                }
                commfields.gco.add(n, h);
            }
        } else {
            var n = "__codetype_" + g.toLowerCase();
            d = String(d);
            var l = LEAP.parsenum(d);
            if (l != null) {
                n += "__parentcode__" + l;
            } else {
                n += "__parentcode__" + d;
            }
            h = {
                i: true,
                r: []
            };
            for (var m = 0; m < j.length; m++) {
                j[m].codetypename = g;
                h.r.add(j[m]);
            }
            commfields.gco.add(n, h);
        }
    };
    LEAP.getCodeText = function(g, n, j) {
        if (n != null) {
            n = String(n);
        }
        if (j != null) {
            j = String(j);
        }
        var h = LEAP.getCodeValue(g);
        if (h != null) {
            if (n == null || n == "") {
                n = j;
            }
            var d = h.length;
            for (var m = 0; m < d; m++) {
                var o = LEAP.parsenum(h[m].codeid);
                if (h[m].codeid == n || (o != null && o == n)) {
                    return h[m].codevalue;
                }
            }
        }
    };
    LEAP.getCodeIDByValue = function(g, m) {
        if (m != null) {
            m = String(m);
        }
        if (m == null || m == "") {
            return;
        }
        var h = LEAP.getCodeValue(g);
        if (h != null) {
            var d = h.length;
            for (var j = 0; j < d; j++) {
                if (h[j].codevalue == m) {
                    return h[j].codeid;
                }
            }
        }
    };
    LEAP.asyn = function(m, j, l) {
        if (!m) {
            return;
        }
        if (l == null) {
            l = 10;
        }
        var d = null;
        if (arguments == null || arguments.length < 4) {} else {
            d = [];
            for (var g = 3; g < arguments.length; g++) {
                d[g - 3] = arguments[g];
            }
        }
        var h = function() {
            try {
                if (m != null) {
                    if (d != null) {
                        m.apply(j, d);
                    } else {
                        m.apply(j);
                    }
                }
            } finally {
                j = d = arguments = m = null;
            }
        };
        setTimeout(h, l);
        h = null;
    };
    LEAP.asynfoo = function(n, l, m) {
        if (n == null) {
            return;
        }
        if (m == null) {
            m = 10;
        }
        var g = null;
        if (arguments == null || arguments.length < 4) {} else {
            g = [];
            for (var h = 3; h < arguments.length; h++) {
                g[h - 3] = arguments[h];
            }
        }
        var j = function() {
            try {
                if (n != null) {
                    if (g != null) {
                        n.apply(l, g);
                    } else {
                        n.apply(l);
                    }
                }
            } finally {}
        };
        var d = setInterval(j, m);
        j = null;
        return d;
    };
    LEAP.getSelectedText = function(p) {
        var l = null;
        var d = null;
        var n = null;
        try {
            if (LEAP.isIE) {
                n = document.selection.createRange();
                if (n.text.length > 0) {
                    l = n.text;
                }
                try {
                    n.moveToPoint(window.event.x, window.event.y);
                } catch (h) {}
                n.moveStart("character", -p.value.length);
                d = n.text.length;
                n = null;
            } else {
                var m = p.selectionStart;
                var j = p.selectionEnd;
                if (m || m == "0") {
                    if (m != j) {
                        l = p.value.substring(m, j);
                    }
                }
                d = m;
            }
            if (String.isEmpty(l)) {
                l = null;
            }
        } catch (h) {} finally {
            n = p = null;
        }
        var g = {
            text: l,
            idx: d
        };
        return g;
    };
    LEAP.getRealSyscode = function(d) {
        if (d == null) {
            return null;
        }
        if (d != null && d.toString().Trim() != "" && d.toString().indexOf(".") > -1) {
            var g = d.toString();
            var j = g.substring(0, g.indexOf("."));
            var h = g.substring(g.indexOf(".") + 1);
            while (h.length % 3 != 0) {
                h += "0";
            }
            while (h.substring(h.length - 3, h.length) == "000") {
                h = h.substring(0, h.length - 3);
            }
            if (String.isEmpty(h)) {
                g = j;
            } else {
                g = j + "." + h;
            }
            return g;
        } else {
            return d.toString();
        }
    };
    LEAP.getNextSyscode = function(d) {
        if (d.indexOf(".") > -1) {
            var g = d.substring(d.length - 3, d.length);
            g = (g * 1 + 1) + "";
            while (g.length < 3) {
                g = "0" + g;
            }
            return d.substring(0, d.length - 3) + g;
        } else {
            return d * 1 + 1;
        }
    };
    LEAP.getParentSyscode = function(g) {
        if (g.indexOf(".") > -1) {
            var d = g.substring(0, g.length - 3);
            if (d.charAt(d.length - 1) == ".") {
                return d.substring(0, d.length - 1);
            }
            return d;
        }
    };
    LEAP.checkSyscodeReleation = function(g, j) {
        if (g && j) {
            var h = LEAP.getRealSyscode(g);
            var d = LEAP.getRealSyscode(j);
            if (h.indexOf(".") == -1) {
                h += ".";
            }
            return d.indexOf(h) == 0;
        }
        return false;
    };
    LEAP.webui = new Object();
    LEAP.webui.refreshWebPart = function() {};
    var Storage = function(g, n) {
        var j = true;
        var o = null;
        var h = "leap_localCache";
        var d = null;
        var p = function() {
            return j;
        };
        var m = function() {
            throw new Error("don't support localCache");
        };
        try {
            o = n.documentElement;
            o.addBehavior("#default#userdata");
            o.save(h);
        } catch (l) {
            j = false;
        }
        if (!j) {
            if (g.localStorage && g.localStorage.getItem) {
                o = g.localStorage;
                j = true;
                d = {
                    set: function(q, r) {
                        return o.setItem(q, r);
                    },
                    get: function(q) {
                        return o.getItem(q);
                    },
                    del: function(q) {
                        return o.removeItem(q);
                    }
                };
            }
        } else {
            d = {
                set: function(q, r) {
                    o.setAttribute(q, r);
                    o.save(h);
                },
                get: function(q) {
                    try {
                        o.load(h);
                        return o.getAttribute(q);
                    } catch (r) {}
                    return null;
                },
                del: function(q) {
                    o.removeAttribute(q);
                    o.save(h);
                }
            };
        }
        if (!d) {
            d = {
                set: m,
                get: m,
                del: m
            };
        }
        d.support = p;
        return d;
    }(window, document);
    var PageObjectModel = function() {
        this.root = null;
        this.innerIndex = new hashtable();
    };
    PageObjectModel.___allObjects = new hashtable();
    PageObjectModel.getObjectByInstance = function(d) {
        return this.___allObjects.getvalue(d);
    };
    PageObjectModel.getModule = function(d) {
        return this.___allObjects.getvalue(d);
    };
    PageObjectModel.prototype.getParentName = function(d) {
        if (d && d.parentInstance && this.innerIndex.contains(d.parentInstance)) {
            return this.innerIndex.getvalue(d.parentInstance).name;
        }
    };
    PageObjectModel.prototype.__getPath = function(u) {
        var n = [];
        var p = [];
        n.add(u.name);
        n.add(u.instance);
        var h = null;
        var q = u;
        while (true) {
            h = q.name;
            n.add(h);
            p.add(q.instance);
            q = this.innerIndex.getvalue(q.parentInstance);
            if (q == null) {
                break;
            }
        }
        var o = new StringBuffer();
        var j = new StringBuffer();
        var g = n.length;
        for (var m = g - 1; m > 0; m--) {
            o.append(n[m]);
            j.append(p[m]);
        }
        var d = {
            namePath: o.toString("."),
            instancePath: j.toString(".")
        };
        return d;
    };
    PageObjectModel.prototype.getRoot = function() {
        return this.getObjectByInstance(this.root);
    };
    PageObjectModel.prototype.addObject = function(l, o) {
        if (o) {
            if (o.dispose && o.instance && l && l.dispose && l.instance) {
                var n = l.instance;
                if (this.innerIndex.contains(n)) {
                    return false;
                }
                var h = o.instance;
                if (this.innerIndex.contains(h)) {
                    var m = this.innerIndex.getvalue(h);
                    if (m.childs != null && m.childs.contains(n)) {
                        return false;
                    }
                    var g = l.name;
                    var j = o.name;
                    var p = {
                        name: g,
                        instance: n,
                        parentInstance: h,
                        parentName: j,
                        model: l
                    };
                    this.innerIndex.add(n, p);
                    var d = this.__getPath(p);
                    p.namePath = d.namePath;
                    p.instancePath = d.instancePath;
                    if (m.childs == null) {
                        m.childs = new array();
                    }
                    m.childs.add(n);
                    return true;
                }
            }
        } else {
            if (this.root) {
                return false;
            }
            var n = l.instance;
            if (n) {
                this.root = n;
                this.innerIndex.add(n, {
                    name: l.name,
                    instance: n,
                    model: l,
                    namePath: l.name,
                    instancePath: n
                });
                return true;
            }
        }
        return false;
    };
    PageObjectModel.prototype.getObjectByInstance = function(d) {
        if (d && this.innerIndex.contains(d)) {
            var g = this.innerIndex.getvalue(d);
            return g.model;
        }
    };
    PageObjectModel.prototype.removeObject = function(d) {
        if (d.___isDisposing) {
            return;
        }
        if (d && d.dispose && d.instance) {
            d.___isDisposing = true;
            var m = d.instance;
            if (this.innerIndex.contains(m)) {
                var o = this.innerIndex.getvalue(m);
                var g = o.parentInstance;
                if (g && this.innerIndex.contains(g)) {
                    var j = this.innerIndex.getvalue(g);
                    if (j.childs != null) {
                        j.childs.remove(m);
                    }
                }
                if (o.childs) {
                    var n = o.childs.keys;
                    for (var l in n) {
                        var p = o.childs.getvalue(l);
                        if (this.innerIndex.contains(p)) {
                            this.removeObject(this.innerIndex.getvalue(p).model);
                        }
                    }
                }
                try {
                    if (o && o.model.dispose) {
                        o.model.dispose();
                    }
                } catch (h) {}
                this.innerIndex.remove(m);
                o.model = o = null;
                return true;
            }
        }
        return false;
    };
    PageObjectModel.prototype.getParent = function(g) {
        if (g && g.dispose && g.instance) {
            var d = g.instance;
            if (this.innerIndex.contains(d)) {
                var j = this.innerIndex.getvalue(d);
                var l = j.parentInstance;
                if (l && this.innerIndex.contains(l)) {
                    var h = this.innerIndex.getvalue(l);
                    if (h) {
                        return h.model;
                    }
                }
            }
        }
    };
    PageObjectModel.prototype.getChilds = function(h) {
        if (h && h.dispose && h.instance) {
            var d = h.instance;
            if (this.innerIndex.contains(d)) {
                var m = this.innerIndex.getvalue(d);
                if (m.childs) {
                    var g = [];
                    var n = m.childs.keys;
                    for (var l in n) {
                        var j = m.childs.getvalue(l);
                        if (this.innerIndex.contains(j)) {
                            g.add(this.innerIndex.getvalue(j).model);
                        }
                    }
                    return g;
                }
            }
        }
    };
    PageObjectModel.prototype.getChildByName = function(g, n) {
        if (n == null) {
            n = this.getRoot();
        }
        if (n && n.dispose && n.instance) {
            var d = n.instance;
            if (this.innerIndex.contains(d)) {
                var l = this.innerIndex.getvalue(d);
                if (l.childs) {
                    var m = l.childs.keys;
                    for (var j in m) {
                        var h = l.childs.getvalue(j);
                        if (this.innerIndex.contains(h)) {
                            var o = this.innerIndex.getvalue(h);
                            if (o.name == g) {
                                return o.model;
                            }
                        }
                    }
                }
            }
        }
    };
    PageObjectModel.prototype.queryObjects = function(n, l) {
        if (n) {
            if (l == null) {
                l = this.getRoot();
            }
            if (l && l.dispose && l.instance) {
                var d = [];
                n = "." + n + ".";
                var j = this.innerIndex.keys;
                for (var g in j) {
                    var h = this.innerIndex.getvalue(g);
                    var m = h.path;
                    m = "." + m + ".";
                    if (m.indexOf(n) > -1) {
                        d.add(h.model);
                    }
                }
                if (d.length > 0) {
                    return d;
                }
            }
        }
    };
    PageObjectModel.prototype.queryObject = function(o, j) {
        if (o) {
            var m = null;
            if (j && j.dispose && j.instance) {
                m = "." + j.instance + ".";
            }
            o = "." + o + ".";
            var h = this.innerIndex.keys;
            for (var d in h) {
                var g = this.innerIndex.getvalue(d);
                var l = g.namePath;
                l = "." + l + ".";
                if (l.indexOf(o) > -1) {
                    if (m) {
                        var n = "." + g.instancePath + ".";
                        if (n.indexOf(m) > -1) {
                            return g.model;
                        }
                    } else {
                        return g.model;
                    }
                }
            }
        }
    };
    LEAP.cleanWordCode = function(h, d) {
        try {
            if (h) {
                var g = h.innerHTML;
                if (!String.isEmpty(g)) {
                    if (d == null) {
                        d = 2;
                    }
                    if (d >= 1) {
                        g = g.replaceall(" FONT-FAMILY: 宋体;", "");
                        g = g.replaceall('FONT-FAMILY: 宋体"', '"');
                        g = g.replaceall("FONT-FAMILY: 宋体'", "'");
                        g = g.replaceall('"FONT-FAMILY: 宋体;', '"');
                        g = g.replaceall("'FONT-FAMILY: 宋体;", "'");
                        g = g.replaceall(" COLOR: black;", "");
                        g = g.replaceall(" COLOR: black", "");
                        g = g.replaceall('"COLOR: black;', '"');
                        g = g.replaceall("'COLOR: black;", "'");
                        g = g.replace(/<o:p>\s*<\/o:p>/g, "");
                        g = g.replace(/<o:p>[\s\S]*?<\/o:p>/g, "&nbsp;");
                        g = g.replace(/\s*mso-[^:]+:[^;"]+;?/gi, "");
                        g = g.replace(/\s*MARGIN: 0(?:cm|in) 0(?:cm|in) 0pt\s*;/gi, "");
                        g = g.replace(/\s*MARGIN: 0(?:cm|in) 0(?:cm|in) 0pt\s*"/gi, '"');
                        g = g.replace(/\s*TEXT-INDENT: 0(?:cm|in)\s*;/gi, "");
                        g = g.replace(/\s*TEXT-INDENT: 0(?:cm|in)\s*"/gi, '"');
                        g = g.replace(/\s*TEXT-ALIGN: [^\s;]+;?"/gi, '"');
                        g = g.replace(/\s*PAGE-BREAK-BEFORE: [^\s;]+;?"/gi, '"');
                        g = g.replace(/\s*FONT-VARIANT: [^\s;]+;?"/gi, '"');
                        g = g.replace(/\s*tab-stops:[^;"]*;?/gi, "");
                        g = g.replace(/\s*tab-stops:[^"]*/gi, "");
                        g = g.replace(/<(\w[^>]*) class=([^ |>]*)([^>]*)/gi, "<$1$3");
                        g = g.replace(/<(\w[^>]*)LINE-HEIGHT:\s+\d+%;([^>]*)/gi, "<$1$2");
                        g = g.replace(/<(\w[^>]*)VERTICAL-ALIGN:(\s+[A-Za-z]+)([^>]*)/gi, "<$1$3");
                        g = g.replace(/<STYLE[^>]*>[\s\S]*?<\/STYLE[^>]*>/gi, "");
                        g = g.replace(/<(?:META|LINK)[^>]*>\s*/gi, "");
                        g = g.replace(/\s*style="\s*"/gi, "");
                        g = g.replace(/<SPAN\s*[^>]*>\s*&nbsp;\s*<\/SPAN>/gi, "&nbsp;");
                        g = g.replace(/<SPAN\s*[^>]*><\/SPAN>/gi, "");
                        g = g.replace(/<(\w[^>]*) lang=([^ |>]*)([^>]*)/gi, "<$1$3");
                        g = g.replace(/<SPAN\s*>([\s\S]*?)<\/SPAN>/gi, "$1");
                        g = g.replace(/<\\?\?xml[^>]*>/gi, "");
                        g = g.replace(/<w:[^>]*>[\s\S]*?<\/w:[^>]*>/gi, "");
                        g = g.replace(/<\/?\w+:[^>]*>/gi, "");
                        g = g.replace(/<\!--[\s\S]*?-->/g, "");
                        g = g.replace(/<(U|I|STRIKE)>&nbsp;<\/\1>/g, "&nbsp;");
                        g = g.replace(/<H\d>\s*<\/H\d>/gi, "");
                        g = g.replace(/<(\w+)[^>]*\sstyle="[^"]*DISPLAY\s?:\s?none[\s\S]*?<\/\1>/ig, "");
                        g = g.replace(/<(\w[^>]*) language=([^ |>]*)([^>]*)/gi, "<$1$3");
                        g = g.replace(/<(\w[^>]*) onmouseover="([^\"]*)"([^>]*)/gi, "<$1$3");
                        g = g.replace(/<(\w[^>]*) onmouseout="([^\"]*)"([^>]*)/gi, "<$1$3");
                        g = g.replace(/<H1([^>]*)>/gi, '<div$1><b><font size="6">');
                        g = g.replace(/<H2([^>]*)>/gi, '<div$1><b><font size="5">');
                        g = g.replace(/<H3([^>]*)>/gi, '<div$1><b><font size="4">');
                        g = g.replace(/<H4([^>]*)>/gi, '<div$1><b><font size="3">');
                        g = g.replace(/<H5([^>]*)>/gi, '<div$1><b><font size="2">');
                        g = g.replace(/<H6([^>]*)>/gi, '<div$1><b><font size="1">');
                        g = g.replace(/<\/H\d>/gi, "</font></b></div>");
                        g = g.replace(/<(table)>/gi, "<$1 border=1>");
                        var j = new RegExp("<SPAN*>([^>]*)</SPAN>", "gi");
                        g = g.replace(j, "$1");
                        j = new RegExp("<DIV*>([^>]*)</DIV>", "gi");
                        g = g.replace(j, "$1");
                        j = new RegExp('<DIV style="COLOR: black">([^>]*)</DIV>', "gi");
                        g = g.replace(j, "$1");
                        j = new RegExp('<SPAN style="COLOR: black">([^>]*)</SPAN>', "gi");
                        g = g.replace(j, "$1");
                        j = new RegExp('<DIV style="COLOR: black;">([^>]*)</DIV>', "gi");
                        g = g.replace(j, "$1");
                        j = new RegExp('<SPAN style="COLOR: black;">([^>]*)</SPAN>', "gi");
                        g = g.replace(j, "$1");
                        g = g.replace(/<((?!td|tr)[^\s]*)[^>]*>[\s\u3000]*<\/\1>/gi, "");
                        g = g.replace(/BACKGROUND\-COLOR:([\s]*)transparent/gi, "");
                        g = g.replace(/BACKGROUND\-COLOR:([\s]*)transparent/gi, "");
                        g = g.replace(/style="([\s]*)"/gi, "");
                        g = g.replace(/style='([\s]*)'/gi, "");
                        g = g.replace(/<TD([\s]*?)>/gi, "<TD>");
                        g = g.replace(/<TR([\s]*?)>/gi, "<TR>");
                        g = g.replace(/style="([\s]+)/gi, 'style="');
                        g = g.replace(/style='([\s]+)/gi, "style='");
                        g = g.replace(/<div([^>]*)>/gi, "");
                        g = g.replace(/<\/div>/gi, "");
                        g = g.replace(/<(table)>/gi, "<$1 border=1 cellspacing='0' cellpadding='0' >");
                        g = g.replace(/<TD([^>]*)>\s*(&nbsp;)+\s*<\/TD>/gi, "<TD $1></TD>");
                        g = g.replace(/<meta(\n|.)*?>/ig, "");
                        g = g.replace(/<!(\n|.)*?>/ig, "");
                        g = g.replace(/<style[^>]*>(\n|.)*?<\/style>/ig, "");
                        g = g.replace(/<script[^>]*>(\n|.)*?<\/script>/ig, "");
                        g = g.replace(/<w:[^>]+>(\n|.)*?<\/w:[^>]+>/ig, "");
                        g = g.replace(/<xml>(\n|.)*?<\/xml>/ig, "");
                        g = g.replace(/<font[^>]*>(\$\{([\w]*):([\w]*)\})<\/font>/gi, "$1");
                        g = g.replace(/<u[^>]*>(\$\{([\w]*):([\w]*)\})<\/u>/gi, "$1");
                        g = g.replace(/<span[^>]*>(\$\{([\w]*):([\w]*)\})<\/span>/gi, "$1");
                        g = g.replace(/<p[^>]*>(\$\{([\w]*):([\w]*)\})<\/p>/gi, "$1");
                    }
                    if (d >= 2) {
                        g = g.replace(/\s*face="[^"]*"/gi, "");
                        g = g.replace(/\s*face=[^ >]*/gi, "");
                        g = g.replace(/<FONT\s*>([\s\S]*?)<\/FONT>/gi, "$1");
                        g = g.replace(/<FONT([^>]*)>/gi, "");
                        g = g.replace(/<\/FONT>/gi, "");
                        g = g.replace(/<span([^>]*)>/gi, "");
                        g = g.replace(/<\/span>/gi, "");
                        g = g.replace(/<p([^>]*)>/gi, "");
                        g = g.replace(/<\/p>/gi, "");
                    }
                    return g;
                }
            }
        } finally {
            h = null;
        }
    };
    var GlobalModuleManager = new Object();
    GlobalModuleManager.getModule = function(d) {
        if (!d) {
            return;
        }
        return PageObjectModel.___allObjects.getvalue(d);
    };
    LEAP.ctid = function(g) {
        if (g != null) {
            var d = g.getAttribute("ctid");
            if (d == null) {
                d = UUID.cID();
                g.setAttribute("ctid", d);
            }
            g = null;
            return d;
        }
        g = null;
    };
    LEAP.getrealarea = function(g) {
        if (g == null) {
            return null;
        }
        var h = g + "";
        var d = h.length;
        if (d > 17 && h.substr(16 - 1, 3) != "000") {
            return h.substr(1 - 1, 18);
        } else {
            if (d > 14 && h.substr(13 - 1, 3) != "000") {
                return h.substr(1 - 1, 15);
            } else {
                if (d > 11 && h.substr(10 - 1, 3) != "000") {
                    return h.substr(1 - 1, 12);
                } else {
                    if (d > 8 && h.substr(7 - 1, 3) != "000") {
                        return h.substr(1 - 1, 9);
                    } else {
                        if (d > 5 && h.substr(5 - 1, 2) != "00") {
                            return h.substr(1 - 1, 6);
                        } else {
                            if (d > 3 && h.substr(3 - 1, 2) != "00") {
                                return h.substr(1 - 1, 4);
                            } else {
                                if (d > 1 && h.substr(1 - 1, 2) != "00") {
                                    return h.substr(1 - 1, 2);
                                } else {
                                    return null;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.getarea = function(g, j) {
        if (g == null) {
            return null;
        }
        if (j == null) {
            return g;
        }
        var h = g + "";
        var d = h.length;
        if (d > 17 && j == 7) {
            return h.substr(1 - 1, 18);
        } else {
            if (d > 14 && j == 6) {
                return h.substr(1 - 1, 15);
            } else {
                if (d > 11 && j == 5) {
                    return h.substr(1 - 1, 12);
                } else {
                    if (d > 8 && j == 4) {
                        return h.substr(1 - 1, 9);
                    } else {
                        if (d > 5 && j == 3) {
                            return h.substr(1 - 1, 6);
                        } else {
                            if (d > 3 && j == 2) {
                                return h.substr(1 - 1, 4);
                            } else {
                                if (d > 1 && j == 1) {
                                    return h.substr(1 - 1, 2);
                                } else {
                                    return null;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.getarealevel = function(g) {
        if (g == null) {
            return null;
        }
        var h = g + "";
        var d = h.length;
        if (d > 17 && h.substr(16 - 1, 3) != "000") {
            return 7;
        } else {
            if (d > 14 && h.substr(13 - 1, 3) != "000") {
                return 6;
            } else {
                if (d > 11 && h.substr(10 - 1, 3) != "000") {
                    return 5;
                } else {
                    if (d > 8 && h.substr(7 - 1, 3) != "000") {
                        return 4;
                    } else {
                        if (d > 5 && h.substr(5 - 1, 2) != "00") {
                            return 3;
                        } else {
                            if (d > 3 && h.substr(3 - 1, 2) != "00") {
                                return 2;
                            } else {
                                if (d > 1 && h.substr(1 - 1, 2) != "00") {
                                    return 1;
                                } else {
                                    return null;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.getareacodevalue = function(n) {
        var o = LEAP.getarealevel(n);
        if (o != null) {
            var j = LEAP.getarea(n, o - 1);
            if (j != null) {
                var m = LEAP.getrealarea(n);
                var g = LEAP.getCodeValue(__als1[o - 1], j);
                if (g != null) {
                    var d = g.length;
                    for (var h = 0; h < d; h++) {
                        if (g[h].codeid == m) {
                            return g[h];
                        }
                    }
                }
            }
        }
    };
    LEAP.mergeObject = function(d, h) {
        if (d && h) {
            for (var g in h) {
                d[g] = h[g];
            }
        }
    };
    LEAP.formatnumber = function(p, q, d) {
        try {
            if (p != null && !isNaN(p)) {
                if (d == null) {
                    d = ",";
                }
                if (q == null) {
                    q = 3;
                }
                p += "";
                var o = [];
                var h = 0;
                if (p.indexOf(".") > -1) {
                    p = p.substring(0, p.indexOf("."));
                }
                var g = p.length;
                for (var j = g - 1; j > -1; j--) {
                    var n = p.charAt(j);
                    if (h > 0 && h % q == 0) {
                        o = o.insert(d, 0);
                    }
                    h++;
                    o = o.insert(n, 0);
                }
                return o.join("");
            } else {
                return "";
            }
        } catch (m) {}
        return p;
    };
    if (window.applet_studio_AnalysisJavaCode == null) {
        window.applet_studio_AnalysisJavaCode = function(d) {
            return leapclient.request("studio_AnalysisJavaCode", {
                src: d
            });
        };
    }
    LEAP.loadIMG = function(j, m, n, l) {
        var h = new Image();
        var d = LEAP.ctid(h);
        var g = null;
        if (m && m.tagName) {
            g = LEAP.ctid(m);
            m.style.display = "none";
        }
        if (l == null) {
            l = window;
        }
        if (n == null) {
            n = function(o) {
                if (o.target) {
                    var p = LEAP.getElement("IMG[ctid=" + o.target + "]");
                    if (p) {
                        if (o.error) {
                            p.style.display = "none";
                        } else {
                            p.src = o.url;
                            p.style.display = "";
                        }
                    }
                    p = null;
                }
            };
        }
        if (LEAPBrowser.isIE && LEAPBrowser.IEVersion < 11) {
            h.onreadystatechange = function() {
                if (h.readyState == "complete" || h.readyState == "loaded") {
                    n.apply(l, [{
                        url: j,
                        error: false,
                        target: g,
                        width: h.width,
                        height: h.height
                    }]);
                    h = null;
                }
            };
        } else {
            h.onload = function() {
                if (h.complete == true) {
                    n.apply(l, [{
                        url: j,
                        error: false,
                        target: g,
                        width: h.width,
                        height: h.height
                    }]);
                    h = null;
                }
            };
        }
        h.onerror = function() {
            n.apply(l, [{
                url: j,
                error: true,
                target: g,
                width: null,
                height: null
            }]);
            h = null;
        };

        h.src = j;
        m = null;
    };
    LEAP.getWorkVisibleBody = function() {
        if (document.compatMode && document.compatMode == "BackCompat") {
            return document.body;
        }
        return document.documentElement;
    };
    LEAP.getInnerWindowSize = function() {
        var g = 0;
        var d = 0;
        if (window.innerWidth) {
            g = window.innerWidth;
        } else {
            if ((document.body) && (document.body.clientWidth)) {
                g = document.body.clientWidth;
            }
        }
        if (window.innerHeight) {
            d = window.innerHeight;
        } else {
            if ((document.body) && (document.body.clientHeight)) {
                d = document.body.clientHeight;
            }
        }
        if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) {
            d = document.documentElement.clientHeight;
            g = document.documentElement.clientWidth;
        }
        var h = {
            width: g,
            height: d
        };
        return h;
    };
    LEAP.geturlpars = function() {
        var o = "href";
        var h = __s__3[o];
        var q = h.indexof("?");
        var n = new hashtable();
        if (q > -1 && q != h.length - 1) {
            var d = h.substring(q + 1);
            var m = d.split("&");
            for (var j = 0; j < m.length; j++) {
                var l = m[j].split("=");
                if (l && l.length && l.length > 1) {
                    var g = l[0];
                    var p = l[1];
                    if (!String.isEmpty(p)) {
                        p = decodeURIComponent(p);
                    } else {
                        p = null;
                    }
                    n.add(g, p);
                }
            }
        }
        return n;
    };
    LEAP.openResource = function(def, parentModule) {
        if (def) {
            if (def.id) {
                LEAP.systemLog.logRes(def);
            }
            if (def.resourcetype == 21) {
                var tou = LEAP.request("LAIP_getAppUrl", {
                    url: def.url
                });
                if (tou) {
                    try {
                        window.open(tou);
                    } catch (E) {}
                    return;
                }
            } else {
                if (def.url && def.url.indexOf("http://") == 0 || def.url.indexOf("https") == 0 || def.url.indexOf("@server") == 0) {
                    def.url = def.url.replace("@server", leapconfig.server);
                    var url = def.url;
                    LEAP.asyn(function(url) {
                        window.open(url);
                    }, null, 100, url);
                } else {
                    if (def.url && def.url.indexOf("fn:") == 0) {
                        try {
                            var fn = def.url.substring(3);
                            eval(fn);
                        } catch (e) {}
                    } else {
                        if (def.url && def.url.indexOf("service:") == 0) {
                            try {
                                var fn = def.url.substring(8);
                                var ret = leapclient.request(fn, {
                                    par: def
                                });
                                if (ret) {
                                    if (ret.indexOf("http://") == 0 || ret.indexOf("https://") == 0) {
                                        window.open(ret);
                                    } else {
                                        window.open(leapconfig.server + ret);
                                    }
                                }
                            } catch (e) {}
                        } else {
                            if (def.url && (def.resourcetype == 11 || def.resourcetype == 2)) {
                                var fn = null;
                                if (def.indexpagemodulestyle && def.indexpagemodulestyle == 3) {
                                    fn = function(data, def) {
                                        if (!data) {
                                            data = def;
                                        }
                                        var par = {
                                            name: "DirIndex",
                                            autodispose: true,
                                            width: data.width,
                                            height: data.height,
                                            title: data.showname,
                                            moduleLoadArg: data.id
                                        };
                                        if (def) {
                                            par.width = def.width;
                                            par.height = def.height;
                                        }
                                        if (parentModule) {
                                            parentModule.loadForm3(par);
                                        } else {
                                            LEAP.form.create3(par);
                                        }
                                    };
                                } else {
                                    if (def.indexpagemodulestyle && def.indexpagemodulestyle == 4) {
                                        fn = function(data, def) {
                                            if (!data) {
                                                data = def;
                                            }
                                            var url = window.geturl(leapconfig.server + "LEAP/Resource/HTML/trusted/trustedload.html?module=DirIndex&lpid=" + data.id + "&text=" + encodeURIComponent(data.showname));
                                            LEAP.asyn(function(url) {
                                                window.open(url);
                                            }, null, 100, url);
                                        };
                                    } else {
                                        if (def.indexpagemodulestyle && def.indexpagemodulestyle == 5) {
                                            fn = function(data, def) {
                                                if (!data) {
                                                    data = def;
                                                }
                                                if (data && data.syscode) {
                                                    LEAP.asyn(function(url) {
                                                        window.open(url);
                                                    }, null, 100, "Index.html?lalid=" + data.id);
                                                }
                                            };
                                        } else {
                                            fn = function(data, def) {
                                                if (!data) {
                                                    data = def;
                                                }
                                                var url = data.url;
                                                if (url.indexOf(".html") > -1 || url.indexOf(".htm") > -1 || url.endsWith("/")) {
                                                    if (url.indexOf("/LEAP/") > 0) {
                                                        LEAP.asyn(function(url) {
                                                            window.open(url);
                                                        }, null, 100, leapconfig.server + "LEAP/Service/RPC/RPC.DO?method=systemauth_trustedv2&sid=" + leapclient.getsid() + "&p=" + encodeURIComponent(url));
                                                        return;
                                                    }
                                                }
                                                if (data && data.syscode) {
                                                    LEAP.asyn(function(url) {
                                                        window.open(url);
                                                    }, null, 100, "Index.html?ltsd=" + LEAP.getRealSyscode(data.syscode).replace(".", "_"));
                                                }
                                            };
                                        }
                                    }
                                }
                                if (def.resourcetype == 11) {
                                    LEAP.request2({
                                        name: "app_getResourceData",
                                        par: {
                                            name: def.url
                                        },
                                        callback: fn,
                                        arg: def
                                    });
                                } else {
                                    if (def.resourcetype == 2) {
                                        fn(def);
                                    }
                                }
                            } else {
                                if (def.resourcetype == 3 || def.resourcetype == 4) {
                                    var modulename = def.resourcetype == 4 ? def.name : def.url;
                                    if (def.indexpagemodulestyle && def.indexpagemodulestyle == 3) {
                                        var par = {
                                            name: modulename,
                                            autodispose: true,
                                            width: def.width,
                                            height: def.height,
                                            title: def.text
                                        };
                                        if (parentModule) {
                                            parentModule.loadForm3(par);
                                        } else {
                                            LEAP.form.create3(par);
                                        }
                                    } else {
                                        var url = window.geturl(leapconfig.server + "LEAP/Resource/HTML/trusted/trustedload.html?module=" + modulename + "&text=" + encodeURIComponent(def.text));
                                        LEAP.asyn(function(url) {
                                            window.open(url);
                                        }, null, 100, url);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP._tfcache = new hashtable();
    LEAP.trustedforward = function(n) {
        if (n.refappserver) {
            var l = n._tf_o_url;
            if (!l) {
                l = n.url;
                n._tf_o_url = l;
            }
            if (LEAP._tfcache == null) {
                LEAP._tfcache = new hashtable();
            }
            var d = {
                server: n.refappserver,
                type: n.indexpagemodulestyle,
                restype: n.resourcetype,
                url: l
            };
            var m = null;
            if (!LEAP._tfcache.contains(d.server)) {
                m = LEAP.request("systemauth_getappserverinfo", {
                    server: d.server
                });
                LEAP._tfcache.add(d.server, m);
            } else {
                m = LEAP._tfcache.getvalue(d.server);
            }
            if (!m) {
                return;
            }
            var l = d.url;
            var h = false;
            if (l.indexOf("@server") > -1) {
                l = l.replace("@server", "");
                h = true;
            }
            if (l.indexOf("LEAP/") == 0) {
                h = true;
            }
            if (!h) {
                l = "LEAP/Resource/HTML/trusted/frameload.html?module=" + encodeURIComponent(l) + "&text=" + encodeURIComponent(n.text);
                if (n.customize) {
                    l += "&arg=" + n.customize;
                }
            }
            var j = LEAP.request("systemauth_jumpto", {
                url: l,
                sys: m.leapsysname
            });
            if (j) {
                var g = new StringBuffer();
                if (m.serveruri) {
                    if (m.serveruri.indexOf("http") == 0) {
                        g.append(m.serveruri);
                    } else {
                        g.append(leapconfig.portal).append("://").append(m.serveruri);
                    }
                } else {
                    g.append(leapconfig.portal).append("://").append(leapconfig.host);
                }
                g.append(":");
                if (m.serverport) {
                    g.append(m.serverport);
                } else {
                    g.append(leapconfig.port);
                }
                g.append("/");
                if (m.servercontext) {
                    g.append(m.servercontext).append("/");
                }
                g.append(j);
                n.value2 = n.url = g.toString();
            }
        }
    };
    LEAP.showGIFNum = function(j, r, h, l, g) {
        try {
            if (g == null) {
                g = "LEAP/Resource/images/gifnum/shadow";
            }
            var q = r + "";
            var m = new StringBuffer();
            for (var o = 0; o < q.length; o++) {
                var p = q.charAt(o);
                var d = leapconfig.server + g + "/" + p + ".gif";
                var n = LEAP.getElement("IMG[sn=" + o + "]", j);
                if (!n) {
                    n = document.createElement("IMG");
                    n.setAttribute("sn", o + "");
                    j.appendChild(n);
                }
                n.src = d;
                if (l) {
                    n.style.height = l;
                } else {
                    n.style.height = "auto";
                }
                if (h) {
                    n.style.width = h;
                } else {
                    n.style.width = "auto";
                }
                n = null;
            }
        } finally {
            j = null;
        }
    };
    LEAP.showError = function(d) {
        if (d && isdebug) {
            var g = d.stack;
            if (g == null) {
                g = d.toString();
            }
            if (LEAP.messagebox && LEAP.messagebox.alert) {
                LEAP.messagebox.alert(g, 3);
            } else {
                window.alert(g);
            }
            throw d;
        }
    };
    LEAP.warpChangedLog = function(d) {
        if (d.hasOwnProperty("__sourceobj__")) {
            return;
        }
        d.__sourceobj__ = LEAP.clone(d);
        d.toJSON = function() {
            var n = [];
            var j = new Object();
            var g = {};
            for (var l in d) {
                j[l] = null;
                if (l == "__sourceobj__") {
                    continue;
                }
                var m = d[l];
                if (m != null) {
                    if (typeof(m) == "function") {
                        continue;
                    }
                    var h = d.__sourceobj__[l];
                    if (typeof(h) == "function") {
                        continue;
                    }
                    if (m != h) {
                        n.push(l);
                    }
                } else {
                    if (d.__sourceobj__[l] != null) {
                        n.push(l);
                    }
                }
                g[l] = m;
            }
            for (var l in d.__sourceobj__) {
                if (j.hasOwnProperty(l)) {
                    continue;
                }
                var m = d.__sourceobj__[l];
                if (m != null) {
                    if (typeof(m) == "function") {
                        continue;
                    }
                    n.push(l);
                } else {
                    n.push(l);
                }
                g[l] = null;
            }
            if (n.length > 0) {
                g.changedPropertys = n;
            }
            return g;
        };
    };
    LEAPLGRS = {};
    LEAPLGRS.idsn = 1;
    LEAPLGRS.es = new hashtable();
    LEAPLGRS.ph = "clientHeight";
    LEAPLGRS.pw = "clientWidth";
    LEAPLGRS.oph = "_rsoheight";
    LEAPLGRS.opw = "_rsowidth";
    LEAPLGRS.selector = Sizzle;
    LEAPLGRS.getElement = function(d, l, j, g) {
        var h = null;
        try {
            if (l != null && typeof(l) == commfields.string) {
                l = LEAPLGRS.getElement(l);
            }
            h = LEAPLGRS.selector(d, l, j, g);
            if (h.length > 0) {
                return h[0];
            }
        } catch (m) {} finally {
            h = null;
        }
    };
    LEAPLGRS.getElements = function(d, l, j, g) {
        var h = null;
        try {
            if (l != null && typeof(l) == commfields.string) {

                l = LEAPLGRS.getElement(l);
            }
            h = LEAPLGRS.selector(d, l, j, g);
            if (h != null && h.length == 0) {
                return null;
            }
            return h;
        } catch (m) {} finally {
            h = null;
        }
    };
    LEAPLGRS.asyn = function(m, j, l) {
        if (!m) {
            return;
        }
        if (l == null) {
            l = 10;
        }
        var d = null;
        if (arguments == null || arguments.length < 4) {} else {
            d = [];
            for (var g = 3; g < arguments.length; g++) {
                d[g - 3] = arguments[g];
            }
        }
        var h = function() {
            try {
                if (m != null) {
                    if (d != null) {
                        m.apply(j, d);
                    } else {
                        m.apply(j);
                    }
                }
            } finally {
                j = d = arguments = m = null;
            }
        };
        setTimeout(h, l);
        h = null;
    };
    LEAPLGRS.id = function(d) {
        if (!d) {
            return null;
        }
        if (d.id) {
            return d.getAttribute("id");
        } else {
            var g = "LEAPLGRES_ID_" + LEAPLGRS.idsn++;
            d.setAttribute("id", g);
            return g;
        }
    };
    LEAPLGRS.setup = function(h, g) {
        if (!LEAPBrowser.notSupportBindEvent && !(LEAPBrowser.isIE && LEAPBrowser.documentMode == 8 && LEAPBrowser.cssmode == 1)) {
            return;
        }
        var d = LEAPLGRS.id(h);
        h = null;
        if (!d) {
            return;
        }
        LEAPLGRS.asyn(LEAPLGRS._setup, null, 800, d, g);
    };
    LEAPLGRS._setup = function(g, m, o) {
        var l = document.getElementById(g);
        if (!l) {
            return;
        }
        if (m == "tb_img") {
            LEAPLGRS.es.add([g], {
                fn: LEAPLG.tb,
                id: g
            });
            l.setAttribute(LEAPLGRS.oph, l[LEAPLGRS.ph]);
            l.setAttribute(LEAPLGRS.opw, l[LEAPLGRS.pw]);
            var j = LEAPLGRS.getElement("DIV.lg_p2_tb_top", l);
            if (j) {
                var d = LEAPLGRS.id(j);
                LEAPLGRS.es.add(d, {
                    fn: LEAPLG.tb_layout,
                    id: d
                });
                j.setAttribute(LEAPLGRS.oph, j[LEAPLGRS.ph]);
                j.setAttribute(LEAPLGRS.opw, j[LEAPLGRS.pw]);
            }
        } else {
            if (m == "bt_img") {
                LEAPLGRS.es.add(g, {
                    fn: LEAPLG.bt,
                    id: g
                });
                l.setAttribute(LEAPLGRS.oph, l[LEAPLGRS.ph]);
                l.setAttribute(LEAPLGRS.opw, l[LEAPLGRS.pw]);
                var h = LEAPLGRS.getElement("DIV.lg_p2_bt_bottom", l);
                if (h) {
                    var n = LEAPLGRS.id(h);
                    LEAPLGRS.es.add(n, {
                        fn: LEAPLG.bt_layout,
                        id: n
                    });
                    h.setAttribute(LEAPLGRS.oph, h[LEAPLGRS.ph]);
                    h.setAttribute(LEAPLGRS.opw, h[LEAPLGRS.pw]);
                }
            } else {
                if (m == "bct_img") {
                    LEAPLGRS.es.add(g, {
                        fn: LEAPLG.bct,
                        id: g
                    });
                    l.setAttribute(LEAPLGRS.oph, l[LEAPLGRS.ph]);
                    l.setAttribute(LEAPLGRS.opw, l[LEAPLGRS.pw]);
                    var j = LEAPLGRS.getElement("DIV.lg_p2_bct_top", l);
                    if (j) {
                        var d = LEAPLGRS.id(j);
                        LEAPLGRS.es.add(d, {
                            fn: LEAPLG.tb_layout,
                            id: d
                        });
                        j.setAttribute(LEAPLGRS.oph, j[LEAPLGRS.ph]);
                        j.setAttribute(LEAPLGRS.opw, j[LEAPLGRS.pw]);
                    }
                    var h = LEAPLGRS.getElement("DIV.lg_p2_bct_bottom", l);
                    if (h) {
                        var n = LEAPLGRS.id(h);
                        LEAPLGRS.es.add(n, {
                            fn: LEAPLG.bt_layout,
                            id: n
                        });
                        h.setAttribute(LEAPLGRS.oph, h[LEAPLGRS.ph]);
                        h.setAttribute(LEAPLGRS.opw, h[LEAPLGRS.pw]);

                    }
                } else {
                    if (m == "other") {
                        l.setAttribute(LEAPLGRS.oph, l[LEAPLGRS.ph]);
                        l.setAttribute(LEAPLGRS.opw, l[LEAPLGRS.pw]);
                        LEAPLGRS.es.add(g, {
                            fn: o,
                            id: g
                        });
                    }
                }
            }
        }
        l = null;
    };
    LEAPLGRS.handler = function() {
        try {
            for (var u in LEAPLGRS.es.keys) {
                var g = LEAPLGRS.es.getvalue(u);
                var r = document.getElementById(g.id);
                if (r) {
                    if (r.currentStyle && r.currentStyle.visibility == "hidden") {
                        continue;
                    }
                    try {
                        var n = r[LEAPLGRS.ph];
                        var q = r[LEAPLGRS.pw];
                        var v = r.getAttribute("_rsinit");
                        if ((n > 0 && q > 0) && (!v || n != r.getAttribute(LEAPLGRS.oph) || q != r.getAttribute(LEAPLGRS.opw))) {
                            if (!v) {
                                r.setAttribute("_rsinit", "1");
                            }
                            var p = [null, r];
                            r.setAttribute(LEAPLGRS.oph, n);
                            r.setAttribute(LEAPLGRS.opw, q);
                            try {
                                g.fn.apply(window, p);
                            } finally {
                                p = null;
                            }
                        }
                    } finally {
                        r = null;
                    }
                } else {
                    LEAPLGRS.es.remove(u);
                }
            }
            if ((LEAPBrowser.IEVersion && LEAPBrowser.IEVersion > 9) || LEAPBrowser.isWebKit) {
                var d = LEAPLGRS.getElements(".lgsearchcon");
                if (d) {
                    var j = d.length;
                    for (var m = 0; m < j; m++) {
                        var r = d[m];
                        if (r.style.display == "block") {
                            r.style.display = "inline-block";
                        }
                        r = null;
                    }
                    d = null;
                }
            }
        } catch (o) {}
        window.setTimeout(LEAPLGRS.handler, 500);
    };
    LEAPLGRS.init = function() {
        LEAPLGRS.handler();
    };
    LEAPLGRS.init();
    var DateUtil = function() {
        var l = null;
        var h = null;
        var g = 1000;
        var m = 60 * g;
        var d = 60 * m;
        var j = 24 * d;
        this.getKey = function(p, q, o) {
            return ["Y", p, "M", q, "D", o].join("");
        };
        this.getKey2 = function(o) {
            o = n(o);
            return ["Y", o.getFullYear(), "M", o.getMonth() + 1, "D", o.getDate()].join("");
        };
        this.isWorkDay = function(p) {
            p = n(p);
            var r = this.getKey2(p);
            var o = LEAP.getUserInfo().workDayCache.workday[r];
            if (o != null) {
                if (o == 1) {
                    return false;
                } else {
                    if (o == 2) {
                        return true;
                    }
                }
            }
            var q = p.getDay();
            if (q == 0) {
                q = 7;
            }
            if (q < 6) {
                return true;
            }
            return false;
        };
        this.getDays = function(r, u) {
            if (r == null || u == null) {
                return null;
            }
            r = n(r);
            u = n(u);
            var q = this.compare(r, u);
            if (q > 0) {
                var p = u;
                u = r;
                r = p;
            } else {
                if (q == 0) {
                    return [r];
                }
            }
            var v = r;
            var o = [];
            while (this.compare(v, u) < 1) {
                o.add(new Date(v.getTime()));
                v.setTime(v.getTime() + j);
            }
            if (o.length > 0) {
                return o;
            }
            return null;
        };
        this.getWorkDays = function(r, u) {
            if (r == null || u == null) {
                return null;
            }
            r = n(r);
            u = n(u);
            var q = this.compare(r, u);
            if (q > 0) {
                var p = u;
                u = r;
                r = p;
            } else {
                if (q == 0) {
                    if (this.isWorkDay(r)) {
                        return [r];
                    }
                }
            }
            var v = r;
            var o = [];
            while (this.compare(v, u) < 1) {
                if (this.isWorkDay(v)) {
                    o.add(new Date(v.getTime()));
                }
                v.setTime(v.getTime() + j);
            }
            if (o.length > 0) {
                return o;
            }
            return null;
        };
        this.addDay = function(p, z, v, q) {
            p = n(p);
            if (p == null) {
                p = new Date();
            }
            if (v == null) {
                v = false;
            }
            if (q == null) {
                q = false;
            }
            var u = p.getTime();
            if (!v && !q) {
                return new Date(u + z * j);
            } else {
                if (v) {
                    var y = Math.abs(z);
                    var w = 1;
                    if (z < 0) {
                        w = -1;
                    }
                    var x = new Date();
                    x.setTime(u);
                    for (var r = 0; r < y; r++) {
                        x.setTime(x.getTime() + (w * j));
                        var o = x.getDay();
                        if (o == 0) {
                            o = 7;
                        }
                        if (o == 6 || o == 7) {
                            r--;
                        }
                    }
                    return x;
                } else {
                    if (q) {
                        var y = Math.abs(z);
                        var w = 1;
                        if (z < 0) {
                            w = -1;
                        }
                        var x = new Date(u);
                        for (var r = 0; r < y; r++) {
                            x.addDay(w);
                            if (!this.isWorkDay(x)) {
                                r--;
                            }
                        }
                        return x;
                    }
                }
            }
            return null;
        };
        this.addHour = function(p, y, u) {
            p = n(p);
            if (p == null) {
                p = new Date();
            }
            if (u == null) {
                u = false;
            }
            if (onlyWorkDay == null) {
                onlyWorkDay = false;
            }
            var r = p.getTime();
            if (!u && !onlyWorkDay) {
                return new Date(r + y * d);
            } else {
                if (u) {
                    var x = Math.abs(y);
                    var v = 1;
                    if (y < 0) {
                        v = -1;
                    }
                    var w = new Date();
                    w.setTime(r + y * d);
                    for (var q = 0; q < x; q++) {
                        w.setTime(w.getTime() + (v * j));
                        var o = w.getDay();
                        if (o == 0) {
                            o = 7;
                        }
                        if (o == 6 || o == 7) {
                            q--;
                        }
                    }
                    return w;
                }
            }
            return null;
        };
        this.buildDate = function(o) {
            o = n(o);
            return new Date(o.getTime());
        };
        this.sameDay = function(q, r) {
            q = n(q);
            r = n(r);
            if (q == null || r == null) {
                return false;
            }
            var p = new Date(q.getTime());
            var o = new Date(r.getTime());
            p.setMinutes(0);
            p.setHours(0);
            p.setSeconds(0);
            p.setMilliseconds(0);
            o.setMinutes(0);
            o.setHours(0);
            o.setSeconds(0);
            o.setMilliseconds(0);
            return this.compare(p, o) == 0;
        };
        var n = function(o) {
            if (o == null) {
                return null;
            }
            if (typeof o == "string") {
                o = LEAP.toDate(o);
            }
            return o;
        };
        this.compare = function(o, p) {
            o = n(o);
            p = n(p);
            return o.getTime() - p.getTime();
        };
        this.gapDay = function(o, y, w, q) {
            o = n(o);
            y = n(y);
            if (w == null) {
                w = false;
            }
            if (q == null) {
                q = false;
            }
            if (o == null || y == null) {
                return 0;
            }
            if (this.sameDay(o, y)) {
                return 0;
            }
            if (w == null) {
                w = false;
            }
            if (q == null) {
                q = false;
            }
            o = this.buildDate(o);
            y = this.buildDate(y);
            o.setMinutes(0);
            o.setHours(0);
            o.setSeconds(0);
            o.setMilliseconds(0);
            y.setMinutes(0);
            y.setHours(0);
            y.setSeconds(0);
            y.setMilliseconds(0);
            var z = (o.getTime() - y.getTime()) / j;
            var r = Math.abs(z);
            var B = o;
            if (o.getTime() > y.getTime()) {
                B = y;
            }
            if (w || q) {
                var x = 0;
                for (var v = 0; v < r; v++) {
                    var A = new Date();
                    A.setTime(B.getTime() + (v + 1) * j);
                    if (w) {
                        var p = A.getDay();
                        if (p == 0 || p == 6) {
                            x += 1;
                        }
                    } else {
                        if (q) {
                            if (!this.isWorkDay(A)) {
                                x += 1;
                            }
                        }
                    }
                }
                var u = Math.abs(z) - x;
                if (u < 0) {
                    u = 1;
                }
                if (z < 0) {
                    z = -u;
                } else {
                    z = u;
                }
            }
            return z;
        };
        this.getDay = function(o) {
            o = n(o);
            if (o == null) {
                return null;
            }
            return o.getDate();
        };
        this.getMonth = function(o) {
            o = n(o);
            if (o == null) {
                return null;
            }
            return o.getMonth() + 1;
        };
        this.getYear = function(o) {
            o = n(o);
            if (o == null) {
                return null;
            }
            return o.getFullYear();
        };
        this.getQuarter = function(o) {
            var p = this.getMonth(o);
            if (p != null) {
                return Math.floor((p - 1) / 3 + 1);
            }
        };
        this.getWeek = function(o) {
            o = n(o);
            if (o == null) {
                return null;
            }
            var p = o.getDay();
            if (p == 0) {
                p = 7;
            }
            return p;
        };
        this.getWeekOfMonth = function(p) {
            p = n(p);
            if (p == null) {
                return null;
            }
            var o = p.getDate();
            var r = new Date(p.getFullYear(), p.getMonth(), 1);
            var q = r.getDay();
            if (q == 0) {
                q = 7;
            }
            return Math.floor((o + q - 2 + 7) / 7);
        };
        this.getWeekOfYear = function(p) {
            p = n(p);
            if (p == null) {
                return null;
            }
            var r = new Date(p.getFullYear(), 0, 1);
            var o = new Date(p.getFullYear(), p.getMonth(), p.getDate());
            var u = (o.getTime() - r.getTime()) / (24 * 60 * 60 * 1000);
            var q = r.getDay();
            if (q == 0) {
                q = 7;
            }
            return Math.floor((u + 1 + q - 2 + 7) / 7);
        };
        this.addMonth = function(p, q) {
            if (q == null) {
                return;
            }
            p = n(p);
            if (p == null) {
                return null;
            }
            var o = new Date(p.getFullYear(), p.getMonth() + q, p.getDate(), p.getHours(), p.getMinutes(), p.getSeconds(), p.getMilliseconds());
            return o;
        };
    };
    LEAP.form = {};
    LEAP.form.d = "form";
    LEAP.form.z = 100;
    LEAP.form._ac = "#5192C8";
    LEAP.form._dc = "#8ab5e8";
    LEAP.form.innerMask = false;
    LEAP.form.enableMin = true;
    LEAP.form.autoMask = false;
    LEAP.form._pm = LEAPBrowser && ((LEAPBrowser.documentMode && LEAPBrowser.documentMode < 7) || (LEAPBrowser.IEVersion && LEAPBrowser.IEVersion == 7 && !LEAPBrowser.documentMode)) ? "absolute" : "fixed";
    LEAP.form.taskItemStr = '<img style="width:18px;height:18px;" onselectstart="return false;" unselectable=on onContextMenu="return false" hidefocus="true" ctf=ltaskbaritem src="@img"><font onselectstart="return false;" unselectable=on onContextMenu="return false" hidefocus="true" ctf=ltaskbaritem style="font-size: 13px;color: #454545;margin-top:3px;cursor:pointer">@text</font><a style="width:100%;height:100%;" href="javascript:" onselectstart="return false;" unselectable=on onContextMenu="return false" hidefocus="true" ctf="ltaskbaritem" targetform="@form" title="@text"></a>';
    LEAP.form.cie6 = '<div class="lgform2" ct="form" ctf="form_setwidth" ctf="form_setheigth" formmode=3 style="position:' + LEAP.form._pm + '"><div class="lgform2_l2"><div class="lgform2_l3" ctf="form_backcolor" ><img src="@serverLEAP/Resource/images/itemstyle/webui/blue/nav_icon2.gif" ctf="form_titleimg" class="lgfomr2_img" onselectstart="return false;" unselectable=on hidefocus="true" onContextMenu="return false"><div class="lgform2_title" ctf="form_title" onselectstart="return false;" unselectable=on hidefocus="true" onContextMenu="return false">Studio 设计器</div><div class="lgform2_btns" ctf="form_btns" onselectstart="return false;" unselectable=on hidefocus="true" onContextMenu="return false"></div><div class="lgform2_content" ctf="form_content" onselectstart="" unselectable=false hidefocus="false" onContextMenu=""></div><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/pixel.gif" style="left:2px;top:26px;position:absolute;overflow:auto;width:10px;height:10px;filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'@serverLEAP/Resource/SystemTemplate/images/main_zs.png\', sizingMethod=\'crop\')"><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/pixel.gif" style="left:2px;bottom:1px;position:absolute;overflow:auto;width:10px;height:10px;filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'@serverLEAP/Resource/SystemTemplate/images2/main_zx.png\', sizingMethod=\'crop\')"><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/pixel.gif" style="top:25px;right:2px;;position:absolute;overflow:auto;width:10px;height:10px;filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'@serverLEAP/Resource/SystemTemplate/images2/main_ys.png\', sizingMethod=\'crop\')"><img src="@serverLEAP/Resource/SystemTemplate/pixel.gif" class="lg_form_sj" style="bottom:1px;right:2px;position:absolute;overflow:auto;width:10px;height:10px;filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'@serverLEAP/Resource/SystemTemplate/images2/main_yx.png\', sizingMethod=\'crop\')"> </div><img src="@serverLEAP/Resource/images/itemstyle/form/resize.gif" ctf="form_resize" class="lgformresize" hidefocus="true" onselectstart="return false;" unselectable=on onContextMenu="return false" border="0"></div>  <iframe sandbox="allow-same-origin allow-scripts allow-top-navigation allow-forms" src="javascript:false" style="position:absolute; visibility:inherit; top:0px; left:0px; width:100%; height:100%; z-index:-1; filter=\'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)\';"></iframe>  </div>';
    LEAP.form.cnie6 = '<div class="lgform2" ct="form" ctf="form_setwidth" ctf="form_setheigth" formmode=3 style="position:' + LEAP.form._pm + '"><div class="lgform2_l2"><div class="lgform2_l3" ctf="form_backcolor" ><img src="@serverLEAP/Resource/images/itemstyle/webui/blue/nav_icon2.gif" ctf="form_titleimg" class="lgfomr2_img" onselectstart="return false;" unselectable=on hidefocus="true" onContextMenu="return false"><div class="lgform2_title" ctf="form_title" onselectstart="return false;" unselectable=on hidefocus="true" onContextMenu="return false">Studio 设计器</div><div class="lgform2_btns" ctf="form_btns" onselectstart="return false;" unselectable=on hidefocus="true" onContextMenu="return false"></div><div class="lgform2_content" ctf="form_content" onselectstart="" unselectable=false hidefocus="false" onContextMenu=""></div><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/images/main_zs.png" style="left:2px;top:26px;position:absolute;overflow:auto;width:10px;height:10px;"><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/images/main_zx.png" style="left:2px;bottom:1px;position:absolute;overflow:auto;width:10px;height:10px;"><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/images/main_ys.png" style="top:25px;right:2px;;position:absolute;overflow:auto;width:10px;height:10px;"><img class="lg_form_sj" src="@serverLEAP/Resource/SystemTemplate/images/main_yx.png" style="bottom:1px;right:2px;position:absolute;overflow:auto;width:10px;height:10px;"> </div><img src="@serverLEAP/Resource/images/itemstyle/form/resize.gif" ctf="form_resize" class="lgformresize" hidefocus="true" onselectstart="return false;" unselectable=on onContextMenu="return false" border="0"></div>  <iframe sandbox="allow-same-origin allow-scripts allow-top-navigation allow-forms" src="javascript:false" style="position:absolute; visibility:inherit; top:0px; left:0px; width:100%; height:100%; z-index:-1; filter=\'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)\';"></iframe>  </div>';
    LEAP.form.__hideCon = null;
    LEAP.form.enableResize = true;
    LEAP.form._addInnerMask = function(d) {
        if (LEAP.form.innerMask == false) {
            return;
        }
        if (d == null) {
            return;
        }
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        if (d.getAttribute("ct") == "form") {
            var g = LEAP.getElement("iframe[ctf=formInnerIframe]", d);
            if (g != null) {
                g.parentNode.removeChild(g);
                g = null;
            }
            g = document.createElement("iframe");
            g.src = "javascript:false";
            g.style.position = "absolute";
            g.style.visibility = "inherit";
            g.style.top = "0px";
            g.style.left = "0px";
            g.style.width = "100%";
            g.style.height = "100%";
            g.style.zIndex = "-1";
            g.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
            g.ctf = "formInnerIframe";
            d.appendChild(g);
            g = null;
        }
    };
    LEAP.form.___hide = function(d) {
        if (LEAP.getElement("object[ctf=GIS]:first", d) != null) {
            if (d.style.top != "-99999px") {
                d.___top = d.style.top;
            }
            if (d.style.left != "-99999px") {
                d.___left = d.style.left;
            }
            d.style.left = d.style.top = "-99999px";
        } else {
            d.style.display = "none";
        }
        d = null;
    };
    LEAP.form.___show = function(d) {
        if (LEAP.getElement("object[ctf=GIS]:first", d) != null) {
            d.style.left = d.___left;
            d.style.top = d.___top;
        } else {
            d.style.display = "block";
        }
        d = null;
    };
    LEAP.form.isHide = function(d) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        var g = d.style.left == "-99999px" || d.style.display == "none" || d.parentElement == LEAP.form.__hideCon;
        d = null;
        return g;
    };
    LEAP.form._init = function() {
        ElementEventManager.addManagedEventType(LEAP.form.d, "formHided");
        ElementEventManager.addManagedEventType(LEAP.form.d, "formHiding");
        UIEventManager.removeEvent(window, "load", LEAP.form._init);
        LEAP.addEvent(document.body, "mousedown", LEAP.form.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "click", LEAP.form.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "dblclick", LEAP.form.uiProcess, null, null, true);
        if (LEAP._dragDiv == null) {
            LEAP._dragDiv = document.createElement("div");
            LEAP._dragDiv.className = "drag";
            LEAP._dragDiv.style.position = LEAP.form._pm;
            document.body.appendChild(LEAP._dragDiv);
        }
        LEAP.form.enableMin = LEAP.form.getTaskBar() != null;
        if (LEAP.form.__hideCon == null) {
            var g = document.createElement("div");
            g.style.position = LEAP.form._pm;
            g.style.x = -99999;
            g.style.y = -99999;
            g.style.overflow = "hidden";
            g.style.width = "0px";
            g.style.height = "0px";
            g.style.lineHeight = "0px";
            g.style.display = "block";
            document.body.appendChild(g);
            LEAP.form.__hideCon = g;
        }
        if (LEAP._maskdiv == null) {
            LEAP._maskdiv = document.createElement("DIV");
            LEAP._maskdiv.style.position = LEAP.form._pm;
            LEAP._maskdiv.style.height = "100%";
            LEAP._maskdiv.style.width = "100%";
            LEAP._maskdiv.style.zIndex = "99998";
            LEAP._maskdiv.style.left = "0px";
            LEAP._maskdiv.style.top = "0px";
            LEAP._maskdiv.style.display = "none";
            LEAP._maskdiv.style.background = "black";
            LEAP._maskdiv.style.filter = "alpha(opacity = 50)";
            LEAP._maskdiv.style.opacity = "0.5";
            document.body.appendChild(LEAP._maskdiv);
            var d = document.createElement("iframe");
            d.src = "javascript:false";
            d.style.position = "absolute";
            d.style.visibility = "inherit";
            d.style.top = "0px";
            d.style.left = "0px";
            d.style.width = "100%";
            d.style.height = "100%";
            d.style.zIndex = "-1";
            d.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
            d.ctf = "formInnerIframe";
            LEAP._maskdiv.appendChild(d);
            d.contentWindow.document.oncontextmenu = function() {
                return false;
            };
            d = null;
        }
        if (LEAP._processinggifdiv == null) {
            LEAP._processinggifdiv = document.createElement("div");
            LEAP._processinggifdiv.style.position = LEAP.form._pm;
            LEAP._processinggifdiv.style.display = "none";
            document.body.appendChild(LEAP._processinggifdiv);
            LEAP._processinggifdiv.style.height = "80px";
            LEAP._processinggifdiv.style.width = "158px";
            LEAP._processinggif = document.createElement("img");
            LEAP._processinggif.height = 80;
            LEAP._processinggif.width = 158;
            LEAP._processinggif.src = PublishServerConfig.getURL("LEAP/Resource/images/itemstyle/form/p.gif");
            LEAP._processinggifdiv.appendChild(LEAP._processinggif);
            LEAP._processinggifdiv.style.left = (document.body.clientWidth / 2 - 158 / 2) + "px";
            LEAP._processinggifdiv.style.top = (document.body.clientHeight / 2 - 80 / 2) + "px";
            LEAP._processinggifdiv.style.zIndex = "99999";
            LEAP._processinggifdiv.appendChild(LEAP._processinggif);
        }
    };
    LEAP.form.init = function() {
        if (document != null && document.body != null) {
            LEAP.form._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.form._init);
        }
    }();
    LEAP._showMask = function(g, d) {
        if (g == null) {
            g = false;
        }
        if (LEAP._maskdiv != null) {
            LEAP._maskdiv.style.display = "block";
            LEAP._processinggifdiv.style.display = "none";
            LEAP._processinggif.src = PublishServerConfig.getURL("LEAP/Resource/images/itemstyle/form/p.gif");
            LEAP._processinggifdiv.style.left = (document.body.clientWidth / 2 - 158 / 2) + "px";
            LEAP._processinggifdiv.style.top = (document.body.clientHeight / 2 - 80 / 2) + "px";
            if (!g) {
                LEAP.form.z += 10;
            }
            if (d) {
                LEAP._maskdiv.style.zIndex = d;
            } else {
                LEAP._maskdiv.style.zIndex = LEAP.form.z;
            }
        }
    };
    LEAP.showMask = function(d) {
        LEAP.form.z += 10;
        LEAP.asyn(LEAP._showMask, null, null, true, d);
    };
    LEAP._hideMask = function() {
        if (LEAP._maskdiv != null) {
            LEAP._maskdiv.style.display = "none";
            LEAP._processinggifdiv.style.display = "none";
        }
    };
    LEAP.hideMask = function() {
        LEAP.asyn(LEAP._hideMask);
    };
    LEAP.form.create2 = function(z, p, d, u, q, o, m, r, w, v, l, j, n, h, g) {
        return LEAP.form.create(z, p, d, u, q, o, m, r, w, v, l, 2, null, null, j, null, null, n, h, g);
    };
    LEAP.form.create3 = function(d) {
        var g = d.path;
        if (g == null) {
            g = d.name;
        }
        return LEAP.form.create(g, d.title, d.width, d.height, d.x, d.y, d.autohide, d.hidemsg, d.autodispose, d.distributeFlag, d.initShow, d.showMode, d.icon, d.moduleLoadArg, d.pageMode, d.moduleParameter, d.authority, d.formtype, d.module);
    };
    LEAP.form.coverTarget = function(j, g) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g);
        }
        if (g == null) {
            return;
        }
        var d = g.clientHeight;
        var h = g.clientWidth;
        var l = LEAP.getAbsolutePos(g);
        LEAP.form.setSize(j, h, d);
        LEAP.form.setLocation(j, l.x, l.y);
    };
    LEAP.form.t = null;
    LEAP.form.create = function(D, Q, G, B, v, u, h, F, m, q, M, d, K, O, L, n, o, I, g) {
        if (M == null) {
            M = true;
        }
        if (d == null) {
            d = 1;
        }
        var z = null;
        if (LEAP.isIE6) {
            z = LEAP.form.cie6;
        } else {
            z = LEAP.form.cnie6;
            if (I) {
                if (I == 3) {
                    z = z.replace('class="lgform2"', 'class="lgform2 lc_popform"').replace("Studio 设计器", '<div ctf="form_settitle" class="lgform2_title_text">Studio 设计器</div>');
                } else {
                    if (I == 4) {
                        M = false;
                        z = z.replace('class="lgform2"', 'class="lgform2 lc_popform lc_popformani"').replace("Studio 设计器", '<div ctf="form_settitle" class="lgform2_title_text">Studio 设计器</div>').replace(' class="lgform2_btns"', ' class="lgform2_btns" style="display:none" ');
                        if (!G) {
                            G = "34%";
                        }
                        if (g && g.pageMode && g.pageMode == "search") {
                            var w = g.getElement(".lgresultpanel");
                            if (w) {
                                u = LEAP.getAbsolutePos(w).y;
                                B = w.clientHeight - 3;
                            }
                        }
                    }
                }
            } else {
                I = 2;
            }
        }
        z = z.replaceall("@server", leapconfig.server);
        var p = UUID.cID();
        z = z.replaceall(" ct=", ' instance="' + p + '" ct=');
        z = z.replaceall("\tct=", ' instance="' + p + '" ct=');
        z = z.replaceall("\nct=", ' instance="' + p + '" ct=');
        var A = document.createElement("div");
        document.body.appendChild(A);
        if (!M) {
            A.display = "none";
        } else {}
        A.style.position = "absolute";
        A.style.left = "0px";
        A.style.top = "0px";
        var C = p;
        A.innerHTML = z;
        var l = LEAP.getElement("[ct=form]", A);
        l.setAttribute("formtype", I);
        if (LEAP.form.autoMask) {
            if (!LEAP.form.maskcount.contains(LEAP.ctid(l))) {
                LEAP.form.maskcount.add(LEAP.ctid(l));
            }
            LEAP.showMask("100");
        }
        var P = {
            form: "[instance=" + C + "]",
            module: null,
            showMode: d,
            show: function() {
                LEAP.form.show(this.form);
            },
            hide: function(x) {
                LEAP.form.hide(this.form, null, null, x);
            },
            setContent: function(x) {
                LEAP.form.setContent(this.form, x);
            },
            setContentElement: function(x) {
                LEAP.form.setContentElement(this.form, x);
            },
            maxSize: function() {
                LEAP.form.maxSize(this.form);
            },
            setSize: function(y, x) {
                LEAP.form.setSize(this.form, y, x);
            }
        };
        LEAP.setStyle(l, {
            zIndex: LEAP.form.z++
        });
        LEAP.form.___activeForm(l);
        if (!M) {
            l.display = "none";
        }
        A.removeChild(l);
        LEAP.removeElement(A);
        document.body.appendChild(l);
        if (h == false) {
            l.setAttribute("autohide", "0");
        }
        if (F != null) {
            l.setAttribute("hidemsg", F);
        }
        var H = false;
        if (D != null) {
            P.module = LEAP.form.setContentModule(l, D, q, O, L, n, o);
            if (P.module.pageLoad != null) {
                P.module.form = P.form;
                var j = P.module.___def;
                if (j != null) {
                    if (!String.isEmpty(j.width)) {
                        G = j.width;
                    }
                    if (!String.isEmpty(j.height)) {
                        B = j.height;
                    }
                    if (j.ismax != null) {
                        H = j.ismax == 1;
                    }
                }
                if (G == null && P.module.isworkflow && P.module.pageModuleWidth) {
                    G = P.module.pageModuleWidth * 1;
                }
                if (B == null && P.module.isworkflow && P.module.pageModuleHeight) {
                    B = P.module.pageModuleHeight * 1;
                }
                if (Q == null && P.module.moduleCNName) {
                    Q = P.module.moduleCNName;
                }
            }
        }
        if (G == null) {
            G = 800;
        }
        if (B == null) {
            B = 500;
        }
        if (typeof(G) == "string" && G.indexOf("%") > -1) {
            G = document.body.clientWidth * ("0." + G.replace("%", ""));
        }
        if (typeof(B) == "string" && B.indexOf("%") > -1) {
            B = document.body.clientHeight * ("0." + B.replace("%", ""));
        }
        if (typeof(G) == "number") {
            G = G + "";
        }
        if (typeof(B) == "number") {
            B = B + "";
        }
        if (G.toLowerCase().endsWith("px") || G.endsWith("%")) {} else {
            G += "px";
        }
        if (B.toLowerCase().endsWith("px") || B.endsWith("%")) {} else {
            B += "px";
        }
        LEAP.form.setSize(l, G, B);
        if (Q != null) {
            LEAP.form.setTitle(l, Q);
        }
        if (H) {
            LEAP.form.maxSize(l);
        } else {
            if (v == null || u == null) {
                var J = LEAP.getInnerWindowSize();
                var N = J.width;
                var r = J.height;
                if (LEAP.isIE && LEAPBrowser.IEVersion < 10 && (LEAPBrowser.documentMode && LEAPBrowser.documentMode > 7)) {
                    r -= 35;
                    N -= 12;
                }
                if (v == null) {
                    v = (N - l.clientWidth) / 2;
                }
                if (u == null) {
                    u = (r - l.clientHeight) / 2;
                }
            }
            if (v < 0) {
                v = 20;
            }
            if (u < 0) {
                u = 40;
            }
            LEAP.setStyle(l, {
                position: LEAP.form._pm,
                left: v + "px",
                top: u + "px"
            });
        }
        if (K == null && P.module != null && P.module.pageModuleIcon != null) {
            K = P.module.pageModuleIcon;
        }
        if (!String.isEmpty(K)) {
            LEAP.form.setTitleImage(l, K);
        }
        if (m == true) {
            l.module = P.module;
        }
        if (d == 1 && P != null) {
            LEAP.form.addTaskBarItem(P.form);
        }
        if (!LEAP.form.enableResize) {
            LEAP.getElement("IMG.lgformresize", l).style.display = "none";
        }
        if (I && I == 4) {
            l.style.display = "";
            l.style.right = "3000px";
        }
        A = l = null;
        if (I && P && P.module) {
            P.module._formtype = I;
        }
        return P;
    };
    LEAP.form.tc = 0;
    LEAP.form._m1 = function() {
        var j = LEAP.getElement("div[ctid=" + LEAP.form.t_ctid + "]");
        if (j.style.position != "fixed") {
            j.style.position = "fixed";
        }
        if (j.style.left != "auto") {
            j.style.left = "auto";
        }
        var h = j.clientWidth;
        if (!j) {
            return;
        }
        LEAP.form.tc++;
        var d = 25;
        if (!LEAPBrowser.isIE) {
            d = 12;
        }
        if (LEAP.form.tc < d) {
            var g = LEAP.form.tc / d;
            j.style.right = -(h - h / d * LEAP.form.tc) + "px";
        } else {
            if (LEAP.form.t != null) {
                window.clearInterval(LEAP.form.t);
                LEAP.form.t = null;
            }
            LEAP.form.tc = 0;
            j.style.right = "0px";
        }
    };
    LEAP.form.setEnableResize = function(g, d) {
        g = LEAP._check(g, LEAP.form.d);
        if (!g) {
            return;
        }
        if (d == null) {
            d = true;
        }
        if (d) {
            LEAP.getElement("IMG.lgformresize", g).style.display = "";
        } else {
            LEAP.getElement("IMG.lgformresize", g).style.display = "none";
        }
        g = null;
    };
    LEAP.form.setTitleImage = function(d, h) {
        try {
            if (String.isEmpty(h)) {
                return;
            }
            d = LEAP._check(d, LEAP.form.d);
            if (d == null) {
                return;
            }
            if (LEAP.hasCSS(d, "lgform2")) {
                var g = h;
                if (g.indexOf("http") != 0) {
                    g = leapconfig.server + g;
                }
                LEAP.getElement("img[ctf=form_titleimg]:first", d).src = g;
            }
        } finally {
            d = null;
        }
    };
    LEAP.form.getFormTitle = function(d) {
        var g = null;
        try {
            d = LEAP._check(d, LEAP.form.d);
            if (d == null) {
                return;
            }
            if (LEAP.hasCSS(d, "lc_popform")) {
                g = LEAP.getElement("[ctf=form_settitle]", d);
                return g.innerText;
            } else {
                if (LEAP.hasCSS(d, "lgform2")) {
                    g = LEAP.getElement("[ctf=form_title]", d);
                    return g.innerText;
                } else {
                    g = LEAP.getElement("[ctf=form_settitle]", d);
                    g.innerText;
                }
            }
        } finally {
            d = g = null;
        }
    };
    LEAP.form.addTaskBarItem = function(l) {
        l = LEAP._check(l, LEAP.form.d);
        if (l == null) {
            return;
        }
        var j = LEAP.form.getTaskBar();
        if (j != null) {
            if (LEAP.getElement("a[targetform=" + l.getAttribute("instance") + "]", j) == null) {
                var m = document.createElement("span");
                m.className = "ltaskitem";
                j.appendChild(m);
                var o = LEAP.form.getFormTitle(l);
                var d = o.getLength();
                var g = d * 7.5 + 35;
                m.style.width = g + "px";
                var h = LEAP.getElement("img[ctf=form_titleimg]:first", l).src;
                var n = LEAP.form.taskItemStr.replaceall("@text", o).replace("@form", l.getAttribute("instance")).replace("@img", h);
                m.innerHTML = n;
                LEAP.form.actviveTakItem(l);
            }
        }
    };
    LEAP.form.setLocation = function(g, d, h) {
        g = LEAP._check(g, LEAP.form.d);
        if (g == null) {
            return;
        }
        LEAP.setStyle(g, {
            left: d + "px",
            top: h + "px"
        });
    };
    LEAP.form.setTitle = function(d, h) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        if (LEAP.hasCSS(d, "lc_popform")) {
            var g = LEAP.getElement("[ctf=form_settitle]", d);
            g.innerText = h;
            g = null;
        } else {
            if (LEAP.hasCSS(d, "lgform2")) {
                var g = LEAP.getElement("[ctf=form_title]", d);
                g.innerText = h;
                g = null;
            } else {
                var g = LEAP.getElement("[ctf=form_settitle]", d);
                g.innerText = h;
                g = null;
            }
        }
    };
    LEAP.form._resetContentSize = function(d) {
        if (d && LEAPBrowser.documentMode && LEAPBrowser.documentMode == 7) {
            var g = LEAP.getElement("div[ctf=form_content]", d);
            if (g) {
                LEAP.setStyle(g, {
                    width: d.clientWidth - 7,
                    height: d.clientHeight - 30
                }, false);
            }
        }
        d = null;
    };
    LEAP.form.coverModule = function(m) {
        if (!m.module) {
            return;
        }
        var l = m.module;
        var j = l.moduleElement.parentElement;
        var o = document.createElement("div");
        o.style.height = "100%";
        o.style.widht = "100%";
        o.style.overFlow = "auto";
        o.style.position = "relative";
        j.appendChild(o);
        l.moduleElement.style.display = "none";
        if (!m.path && m.name) {
            m.path = m.name;
        }
        var d = LEAP.form.setContentModule(o, m.path, m.distributeFlag, m.moduleLoadArg, m.pageMode, m.moduleParameter, m.authority, true);
        var g = document.createElement("img");
        g.src = leapconfig.server + "LEAP/Resource/images/itemstyle/form/cover_black.png";
        g.style.position = "absolute";
        g.style.right = "5px";
        g.style.top = "5px";
        g.style.zIndex = "9999";
        g.style.cursor = "pointer";
        g.style.height = g.style.width = "30px";
        g.setAttribute("ctf", "from_cover_btns");
        o.appendChild(g);
        g = null;
        var n = UUID.cID();
        o.setAttribute("instance", n);
        o.setAttribute("ct", "form_cover");
        var h = {
            form: "[instance=" + n + "]",
            module: d,
            showMode: 1,
            show: function() {
                LEAP.form.show(this.form);
            },
            hide: function(p) {
                LEAP.form.hide(this.form, null, null, p);
            },
            setContent: function(p) {},
            setContentElement: function(p) {},
            maxSize: function() {},
            setSize: function(q, p) {}
        };
        j = d = l = m = o = null;
        return h;
    };
    LEAP.form.setContentModule = function(h, p, o, n, g, q, j, d) {
        if (!d) {
            h = LEAP._check(h, LEAP.form.d);
            if (h == null) {
                return;
            }
            var m = LEAP.getElement("div[ctf=form_content]", h);
            LEAP.form._resetContentSize(h);
            h.setAttribute("form_iscover", "1");
        } else {
            m = h;
        }
        var l = LEAP.loadModule(p, m, null, null, null, o, q, n, g, null, null, j);
        h.setAttribute("moduleinstance", l.instance);
        m = h = null;
        return l;
    };
    LEAP.form.setContent = function(g, d) {
        g = LEAP._check(g, LEAP.form.d);
        if (g == null) {
            return;
        }
        var h = LEAP.getElement("div[ctf=form_content]", g);
        LEAP.form._resetContentSize(g);
        h.innerHTML = d;
        h = g = null;
    };
    LEAP.form.setValue = function(d, g) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        d._value = g;
    };
    LEAP.form.getValue = function(d) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        return d._value;
    };
    LEAP.form.setContentElement = function(d, h) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        var g = LEAP.getElement("div[ctf=form_content]", d);
        LEAP.form._resetContentSize(d);
        g.innerHTML = "";
        g.appendChild(h);
        g = d = h = null;
    };
    LEAP.form.setSize = function(g, h, d) {
        g = LEAP._check(g, LEAP.form.d);
        if (g == null) {
            return;
        }
        var l = g.getAttribute("formmode");
        if (l == null) {
            l = "0";
        }
        if (d != null) {
            if (typeof(d) == "string") {
                if (d.indexOf("%") > -1) {
                    d = document.body.clientHeight * Number("0." + d.replace("%", ""));
                } else {
                    if (d.indexOf("px") > -1) {
                        d = Number(d.substr(0, d.length - 2));
                    }
                }
            }
            if (typeof(d) == "string") {
                d = d * 1;
            }
            var j = g.getAttribute("formtype");
            if (!LEAPBrowser.style_old && typeof(d) == "number") {
                if (!(j && j > 3)) {
                    d = d - 34;
                } else {
                    d = d - 3;
                }
            }
            if (typeof(d) == "number") {
                d += "px";
            }
            if (l == "3") {
                g.style.height = d;
            } else {
                LEAP.setStyle(LEAP.getElements("div[ctf=form_setheigth]", g), {
                    height: d
                });
            }
        }
        if (h != null) {
            if (typeof(h) == "string") {
                if (h.indexOf("%") > -1) {
                    h = document.body.clientWidth * Number("0." + h.replace("%", ""));
                } else {
                    if (h.indexOf("px") > -1) {
                        h = Number(h.substr(0, h.length - 2));
                    }
                }
            }
            if (typeof(h) == "string") {
                h = h * 1;
            }
            if (!LEAPBrowser.style_old && typeof(h) == "number") {
                h = h - 10;
            }
            if (typeof(h) == "number") {
                h += "px";
            }
            if (l == "3") {
                g.style.width = h;
            } else {
                LEAP.setStyle(g, {
                    width: h
                });
            }
        }
        LEAP.form._resetContentSize(g);
        h = d = g = null;
    };
    LEAP.form.close = function(g) {
        var d = LEAP._check(g, LEAP.form.d);
        if (d == null) {
            g = LEAP._check(g, "form_cover");
            if (g) {
                g.innerHTML = "";
                LEAP.removeElement(g);
                g = null;
            }
            return;
        }
        g = d;
        LEAP.form.maskcount.remove(LEAP.ctid(g));
        if (LEAP.form.autoMask && LEAP.form.maskcount.size() == 0) {
            LEAP.hideMask();
        }
        LEAP.form.removeTaskItem(g);
        var h = LEAP.getElement("div[ctf=form_content]", g);
        h.innerHTML = "";
        LEAP.removeElement(h);
        g.innerHTML = "";
        g._value = null;
        LEAP.removeElement(g);
        d = h = g = null;
    };
    LEAP.form.hide = function(g, v, p, o) {
        if (g && g._isFormObj) {
            g.hide();
            return;
        }
        if (LEAP.form.t != null) {
            window.clearInterval(LEAP.form.t);
            LEAP.form.t = null;
        }
        var u = LEAP._check(g, LEAP.form.d);
        if (u == null) {
            g = LEAP._check(g, "form_cover");
            if (g) {
                g.style.display = "none";
                var q = LEAP.getLoadedModule(g.getAttribute("moduleinstance"));
                if (q && q.getParentModule()) {
                    q.getParentModule().moduleElement.style.display = "block";
                }
                g = null;
            }
            g = null;
            return;
        }
        g = u;
        LEAP.form.maskcount.remove(LEAP.ctid(g));
        if (LEAP.form.autoMask && LEAP.form.maskcount.size() == 0) {
            LEAP.hideMask();
        }
        if (p == null) {
            p = true;
        }
        if (!p) {
            LEAP.form._setCurDeActiveForm(g);
        } else {
            LEAP.form.removeTaskItem(g);
            if (g.module != null) {
                var d = g.module;
                g.module = null;
                d.dispose();
                d = null;
                g = null;
                return;
            }
            if (v == true) {
                var m = true;
                var A = g.getAttribute("moduleinstance");
                if (A != null) {
                    var d = LEAP.getLoadedModule(A);
                    if (d != null) {
                        var C = d.pageMode;
                        if (C != null && C == "view") {
                            m = false;
                        }
                        d = null;
                    }
                }
                if (m && (g.getAttribute("autohide") == "0" || g.getAttribute("autohide") == 0)) {
                    var j = g.getAttribute("hidemsg");
                    if (j == null || j == "") {
                        j = "确认关闭窗体?";
                    }
                    if (!window.confirm(j)) {
                        g = null;
                        return;
                    }
                }
            }
        }
        if (o == null || o == true) {
            ElementEventManager.handleEvent(g, "formHiding", {
                form: "div[instance=" + g.getAttribute("instance") + "]",
                removeTaskItem: p
            });
            var A = g.getAttribute("moduleinstance");
            var d = LEAP.getLoadedModule(A);
            if (d != null) {
                if (d.onFormHiding) {
                    var B = d.onFormHiding();
                    if (B != null && B == false) {
                        return;
                    }
                }
                d = null;
            }
        }
        LEAP.form.___hide(g);
        if (o == null || o == true) {
            ElementEventManager.handleEvent(g, "formHided", {
                form: "div[instance=" + g.getAttribute("instance") + "]",
                removeTaskItem: p
            });
        }
        var r = LEAP.getElements("div[ct=form]");
        if (r) {
            var x = r.length;
            var y = 0;
            var w = -1;
            for (var z = 0; z < x; z++) {
                var h = r[z];
                if (LEAP.form.isHide(h)) {
                    continue;
                }
                var n = h.style.zIndex * 1;
                if (n > y) {
                    y = n;
                    w = z;
                }
                h = null;
            }
            if (w > -1) {
                LEAP.form._setCurActiveForm(r[w]);
            }
            r = null;
        }
        u = g = null;
    };
    LEAP.form.maskcount = new hashtable();
    LEAP.form.setFormType = function(g, h) {
        if (typeof(g) == "string") {
            g = LEAP.getElement(g);
        }
        var d = LEAP._check(g, LEAP.form.d);
        if (d) {
            d.setAttribute("formtype", h);
        }
        g = d = null;
    };
    LEAP.form.show = function(j, m, h) {
        if (j && j._isFormObj) {
            j.show();
            return;
        }
        var d = LEAP._check(j, LEAP.form.d);
        if (d == null) {
            j = LEAP._check(j, "form_cover");
            if (j) {
                j.style.display = "block";
                var l = LEAP.getLoadedModule(j.getAttribute("moduleinstance"));
                if (l && l.getParentModule()) {
                    l.getParentModule().moduleElement.style.display = "none";
                }
                j = null;
            }
            j = null;
            return;
        }
        j = d;
        if (LEAP.form.autoMask) {
            if (!LEAP.form.maskcount.contains(LEAP.ctid(j))) {
                LEAP.form.maskcount.add(LEAP.ctid(j));
            }
            LEAP.showMask("100");
        }
        LEAP.form.___hide(j);
        j.style.zIndex = LEAP.form.z++;
        LEAP.form.addTaskBarItem(j);
        LEAP.form.___activeForm(j);
        LEAP.form._addInnerMask(j);
        LEAP.form.actviveTakItem(j);
        if (!m) {
            m = j.getAttribute("formtype");
        }
        if (!m) {
            m = 1;
        }
        var g = j.getAttribute("pft");
        if (h == null) {
            h = true;
        }
        if (m == 4) {
            if (h) {
                LEAP.form.tc = 0;
                LEAP.form.t_ctid = LEAP.ctid(j);
                LEAP.form.t_last = new Date().getTime();
                if (LEAP.form.t) {
                    window.clearInterval(LEAP.form.t);
                }
                LEAP.form.t = setInterval(LEAP.form._m1, 5);
                j.style.display = "";
                j.style.right = "20000";
            } else {
                j.style.right = "0";
            }
        }
        LEAP.form.___show(j);
        j.setAttribute("pft", m);
        d = j = null;
    };
    LEAP.form.uiProcess = function(u) {
        var O = u.e;
        var o = u.e.type;
        var l = null;
        if (o == "click") {
            var j = O.srcElement.getAttribute("ctf");
            var F = false;
            if (j && j.indexOf("select2_") == 0) {
                F = true;
            }
            if (O && O.srcElement && O.srcElement.getAttribute("skipformhide")) {
                F = true;
            }
            if (!F) {
                l = LEAP._match(O.srcElement, "form", "ct", 30);
                if (!l) {
                    if (LEAP.form.t_last) {
                        if (new Date().getTime() - LEAP.form.t_last < 200) {
                            F = true;
                        }
                    }
                    if (!F) {
                        var H = LEAP.getElements("div[ct=form][formtype=4]");
                        if (H) {
                            for (var L = 0; L < H.length; L++) {
                                var m = H[L];
                                if (m.clientWidth > 0) {
                                    var r = m.getAttribute("formtype");
                                    if (r && r == 4) {
                                        LEAP.form.hide(m);
                                        LEAP.form.t_last_ctid = LEAP.ctid(m);
                                        LEAP.form.t_last2 = new Date().getTime();
                                        m = null;
                                    }
                                }
                            }
                            H = null;
                        }
                    }
                }
            }
        }
        if (o == "mouseup" && LEAP.form.dragObj != null) {
            LEAP.removeEvent(document.body, "mousemove", LEAP.form.uiProcess, true);
            LEAP.removeEvent(document.body, "mouseup", LEAP.form.uiProcess, true);
            LEAP.stopEvent(O);
            LEAP.asyn(LEAP.form._t2, null, 30);
            return false;
        } else {
            if (o == "mouseup" && LEAP.form.resizing != null && LEAP.form.resizing) {
                document.body.style.cursor = "";
                var q = LEAP.form.resizestart;
                var B = u.e.clientX - q.x;
                var z = u.e.clientY - q.y;
                if (B <= 150) {
                    B = 150;
                }
                if (z <= 60) {
                    z = 60;
                }
                var C = LEAP.form.resizeform.offsetWidth;
                var M = LEAP.form.resizeform.offsetHeight;
                if (B == C && z == M) {
                    LEAP.stopEvent(O);
                    return false;
                }
                LEAP.form.setSize(LEAP.form.resizeform, B, z);
                if (!LEAP.hasCSS(LEAP.form.resizeform, "lgform2")) {
                    LEAP.getElement("[ctf=form_btn_size]", LEAP.form.resizeform).setAttribute("mode", "normal");
                }
                LEAP.form.resizeform = LEAP.form.resizing = null;
                LEAP.removeEvent(document.body, "mousemove", LEAP.form.uiProcess, true);
                LEAP.removeEvent(document.body, "mouseup", LEAP.form.uiProcess, true);
                LEAP.stopEvent(O);
                return false;
            }
        }
        if (o == "mousemove" && LEAP.form.dragObj != null) {
            if (LEAP.form.dragObj == null) {
                return false;
            }
            var K = LEAP.getAbsolutePos(LEAP.form.dragObj);
            var B = u.e.clientX - LEAP.form.dragObj._offsetX;
            var z = u.e.clientY - LEAP.form.dragObj._offsetY;
            if (B < 0) {
                B = 0;
            }
            if (z < 0) {
                z = 0;
            }
            if (B < 0 || z < 0) {
                LEAP.stopEvent(O);
                return false;
            }
            if (LEAP.form.dragObj._m == "3") {
                var C = LEAP.form.dragObj._w;
                var M = LEAP.form.dragObj._h;
                var n = document.body.clientWidth;
                var D = document.body.clientHeight;
                var Q = LEAP.form.dragObj._sh;
                if (n > 0 && C + B > n) {
                    B = n - C;
                }
                if (D > 0 && M + z > D) {
                    z = D - M;
                }
                if ((n > 0 && C + B > n) || (D > 0 && M + z > D)) {
                    LEAP.stopEvent(O);
                    return false;
                }
                if (Q != null) {
                    if (D > 0 && M + z + Q > D) {
                        z = D - Q - M;
                    }
                    if (D > 0 && M + z + Q > D) {
                        LEAP.stopEvent(O);
                        return false;
                    }
                }
            }
            LEAP.setStyle(LEAP._dragDiv, {
                left: B,
                top: z
            });
            LEAP.stopEvent(O);
            return false;
        }
        if (o == "mousemove") {
            if (LEAP.form.resizing != null && LEAP.form.resizing) {
                var q = LEAP.form.resizestart;
                var B = u.e.clientX - q.x;
                var z = u.e.clientY - q.y;
                if (B <= 150) {
                    B = 150;
                }
                if (z <= 60) {
                    z = 60;
                }
                var C = LEAP.form.resizeform.offsetWidth;
                var M = LEAP.form.resizeform.offsetHeight;
                if (B == C && z == M) {
                    return;
                }
                if (Math.abs(B - C) > 15 || Math.abs(z - M) > 15) {
                    LEAP.form.setSize(LEAP.form.resizeform, B, z);
                }
                LEAP.stopEvent(O);
                return false;
            }
        }
        var v = u.e.srcElement;
        var j = v.getAttribute(commfields.ctf);
        var p = v.getAttribute(commfields.ct);
        if (o == "click" && j == "from_cover_btns") {
            var g = v.parentElement;
            if (g.style.display == "none") {
                LEAP.form.show(g);
            } else {
                LEAP.form.hide(g);
            }
            g = null;
            return;
        }
        if (o == "mousedown" && j == "form4_resize_resize") {
            if (v.children[0].className == "tree_folding_oc_open") {
                LEAP.form.innerResizing = true;
                LEAP.form.innerResizingSrc = v;
                LEAP.form.innerResizingMW = LEAP.form.innerResizingSrc.parentElement.parentElement.parentElement.parentElement.offsetWidth;
                LEAP.form.innerResizingOW = LEAP.form.innerResizingSrc.parentElement.parentElement.parentElement.offsetWidth;
                LEAP.form.resizestart = {
                    x: u.e.clientX
                };
                LEAP.stopEvent(O);
                LEAP.addEvent(document.body, "mousemove", LEAP.form.uiProcess, null, null, true);
                LEAP.addEvent(document.body, "mouseup", LEAP.form.uiProcess, null, null, true);
            }
            return false;
        } else {
            if (o == "mousemove" && LEAP.form.innerResizing != null && LEAP.form.innerResizing == true) {
                var q = LEAP.form.resizestart;
                var B = u.e.clientX - q.x;
                if (B == 0) {
                    return false;
                }
                var C = LEAP.form.innerResizingOW;
                var A = C + B;
                if (A < 100) {
                    A = 100;
                }
                if ((A + 150) >= LEAP.form.innerResizingMW) {
                    return false;
                }
                LEAP.form.innerResizingSrc.parentElement.parentElement.parentElement.style.width = A + "px";
                return false;
            } else {
                if (o == "mouseup" && LEAP.form.innerResizing != null && LEAP.form.innerResizing == true) {
                    LEAP.form.innerResizing = null;
                    LEAP.form.innerResizingSrc = null;
                    LEAP.removeEvent(document.body, "mousemove", LEAP.form.uiProcess, true);
                    LEAP.removeEvent(document.body, "mouseup", LEAP.form.uiProcess, true);
                    LEAP.stopEvent(O);
                    return false;
                } else {
                    if (o == "click" && j == "form4_resize_hidemenu") {
                        if (v.className == "tree_folding_oc_open") {
                            v.className = "tree_folding_oc_close";
                            v.pw = v.parentElement.parentElement.parentElement.parentElement.offsetWidth;
                            v.parentElement.parentElement.parentElement.parentElement.style.width = "10px";
                        } else {
                            v.className = "tree_folding_oc_open";
                            v.parentElement.parentElement.parentElement.parentElement.style.width = v.pw;
                        }
                    }
                }
            }
        }
        var l = null;
        try {
            if (o == "click" && j != null && j == "ltaskbaritem") {
                if (v.tagName != "A") {
                    v = LEAP.getElement("A:first", v.parentElement);
                }
                var R = v.getAttribute("targetform");
                if (R != null) {
                    var d = LEAP.getElement("div[instance=" + R + "]");
                    if (d != null) {
                        var P = v.parentNode;
                        if (P != null) {
                            if (P.getAttribute("l_isactivetaskitem") == null) {
                                LEAP.form.show(d);
                            } else {
                                if (LEAP.form.isHide(d)) {
                                    LEAP.form.show(d);
                                } else {
                                    LEAP.form.hide(d, true, false);
                                }
                            }
                            P = null;
                        }
                        d = null;
                    }
                }
                return;
            }
            if (p == LEAP.form.d) {
                l = v;
            }
            if (l == null && j != null && j.indexOf(LEAP.form.d) == 0) {
                l = LEAP._match(v, LEAP.form.d);
            }
            if (l == null) {
                return;
            }
            if (o == "dblclick") {
                if ((j == "form_settitle" && G != null && G == "3") || j == "form_title") {
                    LEAP.form.show(l);
                    var G = l.getAttribute("formmode");
                    if (G != null && G == "3") {
                        var J = null;
                        if (LEAP.hasCSS(l, "lgform2")) {
                            J = LEAP.getElement("[ctf=form_btns]", l).getAttribute("mode");
                        } else {
                            J = LEAP.getElement("[ctf=form_btn_size]", l).getAttribute("mode");
                        }
                        if (J == "max") {
                            LEAP.form.restoreSize(l);
                        } else {
                            LEAP.form.maxSize(l);
                        }
                    } else {
                        if (v.className == "iframe_title_max_icon") {
                            LEAP.form.maxSize(l);
                        } else {
                            LEAP.form.restoreSize(l);
                        }
                    }
                    return;
                }
            }
            if (o == "click") {
                if (j == "form_btns") {
                    var B = O.offsetX;
                    var z = O.offsetY;
                    if (z < 15) {
                        var I = B > 2 && B < 81 && B != 21 && B != 53;
                        var o = 1;
                        if (LEAP.hasCSS(l, "lc_popform")) {
                            I = B > 6 && B < 96;
                            o = 2;
                        }
                        if (I) {
                            if (LEAP.form.enableMin && ((o == 1 && B < 21) || (o == 2 && B < 36))) {
                                LEAP.form.hide(l, true, false);
                            } else {
                                if ((o == 1 && ((LEAP.form.enableMin && B < 53) || (!LEAP.form.enableMin && B < 21))) || (o == 2 && ((LEAP.form.enableMin && B < 66) || (!LEAP.form.enableMin && B < 30)))) {
                                    LEAP.form.show(l);
                                    var G = l.getAttribute("formmode");
                                    if (G != null && G == "3") {
                                        var J = v.getAttribute("mode");
                                        if (J == "max") {
                                            LEAP.form.restoreSize(l);
                                        } else {
                                            LEAP.form.maxSize(l);
                                        }
                                    } else {
                                        if (v.className == "iframe_title_max_icon") {
                                            LEAP.form.maxSize(l);
                                        } else {
                                            LEAP.form.restoreSize(l);
                                        }
                                    }
                                } else {
                                    LEAP.form.hide(l, true);
                                }
                            }
                        }
                    }
                    return;
                } else {
                    if (j == "form_btn_close") {
                        LEAP.form.hide(l, true);
                        return;
                    } else {
                        if (j == "form_btn_min") {
                            LEAP.form.hide(l, true, false);
                            return;
                        } else {
                            if (j == "form_btn_size") {
                                LEAP.form.show(l);
                                var G = l.getAttribute("formmode");
                                if (G != null && G == "3") {
                                    var J = v.getAttribute("mode");
                                    if (J == "max") {
                                        LEAP.form.restoreSize(l);
                                    } else {
                                        LEAP.form.maxSize(l);
                                    }
                                } else {
                                    if (v.className == "iframe_title_max_icon") {
                                        LEAP.form.maxSize(l);
                                    } else {
                                        LEAP.form.restoreSize(l);
                                    }
                                }
                                return;
                            }
                        }
                    }
                }
            } else {
                if (o == "mousedown" && j == "form_title" || j == "form_settitle") {
                    var G = l.getAttribute("formmode");
                    if ((j == "form_settitle" && G != null && G == "3") || j == "form_title") {
                        var K = LEAP.getAbsolutePos(l);
                        LEAP._dragDiv.style.display = "block";
                        LEAP.setStyle(LEAP._dragDiv, {
                            width: l.offsetWidth,
                            height: l.offsetHeight,
                            left: K.x,
                            top: K.y
                        });
                        if (G == null) {
                            G = "0";
                        }
                        LEAP.addEvent(document.body, "mousemove", LEAP.form.uiProcess, null, null, true);
                        LEAP.addEvent(document.body, "mouseup", LEAP.form.uiProcess, null, null, true);
                        LEAP.form.dragObj = l;
                        LEAP.form.dragObj._w = l.offsetWidth;
                        LEAP.form.dragObj._h = l.offsetHeight;
                        LEAP.form.dragObj._m = G;
                        var N = LEAP.form.getTaskBar();
                        if (N != null) {
                            LEAP.form.dragObj._sh = N.clientHeight;
                            N = null;
                        }
                        l._offsetX = u.e.offsetX + 35;
                        l._offsetY = u.e.offsetY + 9;
                        LEAP.asyn(LEAP.form._t1, null, 30, "div[instance=" + l.getAttribute("instance") + "]:first");
                        LEAP.stopEvent(O);
                        return false;
                    }
                } else {
                    if (o == "mousedown" && j == "form_resize") {
                        LEAP.form.show(l);
                        LEAP.form.resizing = true;
                        LEAP.form.resizeform = l;
                        LEAP.form.resizestart = LEAP.getAbsolutePos(l);
                        LEAP.addEvent(document.body, "mousemove", LEAP.form.uiProcess, null, null, true);
                        LEAP.addEvent(document.body, "mouseup", LEAP.form.uiProcess, null, null, true);
                        document.body.style.cursor = "se-resize";
                        LEAP.stopEvent(O);
                        return false;
                    }
                }
            }
        } finally {
            v = j = p = o = l = null;
        }
    };
    LEAP.form.___activeForm = function(d) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        LEAP.form._setActiveFormStyle(d);
    };
    LEAP.form.___deactiveForm = function(d) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        LEAP.form._setDeActiveFormStyle(d);
    };
    LEAP.form.hideResize = function(g, d) {
        g = LEAP._check(g, LEAP.form.d);
        if (g == null) {
            return;
        }
        var h = LEAP.getElement("[ctf=form_resize]", g);
        if (d == true) {
            h.style.display = "block";
        } else {
            h.style.display = "none";
        }
    };
    LEAP.form.hideAllForm = function() {
        LEAP.asyn(LEAP.form.__hideAllForm);
    };
    LEAP.form._t1 = function(d) {
        d = LEAP.getElement(d);
        LEAP.form._setCurActiveForm(d);
        d.style.zIndex = LEAP.form.z++;
        LEAP.form.___show(d);
    };
    LEAP.form._t2 = function() {
        var o = LEAP.getAbsolutePos(LEAP._dragDiv);
        var d = o.x;
        var p = o.y;
        if (d < 0) {
            d = 0;
        }
        if (p < 0) {
            p = 0;
        }
        if (d < 0 || p < 0) {
            return;
        }
        if (LEAP.form.dragObj._m == "3") {
            var j = LEAP.form.dragObj._w;
            var n = LEAP.form.dragObj._h;
            var g = document.body.clientWidth;
            var m = document.body.clientHeight;
            var l = LEAP.form.dragObj._sh;
            if (g > 0 && j + d > g) {
                d = g - j;
            }
            if (m > 0 && n + p > m) {
                p = m - n;
            }
            if ((g > 0 && j + d > g) || (m > 0 && n + p > m)) {
                return;
            }
            if (l != null) {
                if (m > 0 && n + p + l > m) {
                    p = m - l - n;
                }
                if (m > 0 && n + p + l > m) {
                    return;
                }
            }
        }
        LEAP.form.dragObj.style.display = "none";
        LEAP.form.dragObj.style.left = d + "px";
        LEAP.form.dragObj.style.top = p + "px";
        LEAP.form.dragObj.style.display = "block";
        LEAP._dragDiv.style.display = "none";
        LEAP.form.dragObj = null;
    };
    LEAP.form._setCurActiveForm = function(g) {
        var h = LEAP.form.getTaskBar();
        if (h != null) {
            var d = g.getAttribute("instance");
            if (d != null) {
                var j = LEAP.getElement("a[targetform=" + d + "]", h);
                if (j != null) {
                    LEAP.form._setActiveTIStyle(j);
                }
            }
            h = null;
        }
        LEAP.form._setActiveFormStyle(g);
    };
    LEAP.form._setCurDeActiveForm = function(g) {
        var h = LEAP.form.getTaskBar();
        if (h != null) {
            var d = g.getAttribute("instance");
            if (d != null) {
                var j = LEAP.getElement("a[targetform=" + d + "]", h);
                if (j != null) {
                    LEAP.form._setDeActiveTIStyle(j);
                }
            }
            h = null;
        }
        LEAP.form._setDeActiveFormStyle(g);
    };
    LEAP.form._setActiveFormStyle = function(d) {
        if (!d) {
            return;
        }
        try {
            var h = d.getAttribute("l_isactiveform");
            if (h != null && h == "1") {
                return;
            }
            var g = LEAP.getElement("div[l_isactiveform=1]:first");
            if (g) {
                if (LEAP.hasCSS(g, "lgform2")) {
                    LEAP.form.___setDACFORMPROP(g);
                } else {
                    LEAP.getElement("div[ctf=form_title]:first", g).style.backgroundImage = "";
                }
                g.removeAttribute("l_isactiveform");
                g = null;
            }
            d.setAttribute("l_isactiveform", "1");
            if (LEAP.hasCSS(d, "lgform2")) {
                LEAP.form.___setACFORMPROP(d);
            } else {
                LEAP.getElement("div[ctf=form_title]:first", d).style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/form/f2top.gif)";
            }
        } finally {
            d = null;
        }
    };
    LEAP.form.themeStyle = "";
    LEAP.form.___setACFORMPROP = function(d) {
        var j = LEAP.getElement("div[ctf=form_btns]:first", d);
        if (d.getAttribute("formtype") > 2) {
            if (j && d.getAttribute("formtype") == 3) {
                j.style.backgroundPositionX = "-25px";
                j.style.right = "-8px";
            }
            return;
        }
        if (LEAP.hasCSS(d, "lc_popform")) {
            if (!LEAP.form.enableMin) {
                j.style.backgroundPositionX = "-36px";
                j.style.right = "-36px";
            }
            return;
        }
        var g = LEAP.getElement("div[ctf=form_backcolor]:first", d);
        g.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/form/" + LEAP.form.themeStyle + "back-1.jpg)";
        g.style.backgroundRepeat = "no-repeat";
        g.style.backgroundColor = LEAP.form._ac;
        var h = "form2_btns.jpg";
        if (!LEAP.form.enableMin) {
            h = LEAP.form.themeStyle + "NM_form2_btns.jpg";
            j.style.width = "58px";
        }
        j.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/form/" + h + ")";
        j = null;
        var l = LEAP.getElement("div[st=formcons]:first", d);
        if (l) {
            l.style.backgroundColor = LEAP.form._ac;
            l = null;
        }
        g = null;
        d = null;
    };
    LEAP.form.___setDACFORMPROP = function(d) {
        if (d.getAttribute("formtype") > 2) {
            return;
        }
        var g = LEAP.getElement("div[ctf=form_backcolor]:first", d);
        g.style.backgroundImage = "";
        g.style.backgroundColor = LEAP.form._dc;
        var h = "form2_btns_2.jpg";
        var j = LEAP.getElement("div[ctf=form_btns]:first", d);
        if (!LEAP.form.enableMin) {
            h = LEAP.form.themeStyle + "NM_form2_btns-2.jpg";
            j.style.width = "58px";
        }
        j.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/form/" + h + ")";
        j = null;
        var l = LEAP.getElement("div[st=formcons]:first", d);
        if (l) {
            l.style.backgroundColor = LEAP.form._dc;
            l = null;
        }
        g = null;
        d = null;
    };
    LEAP.form._setAllDeActiveForm = function() {
        var d = LEAP.getElement("div[l_isactiveform=1]:first");
        if (d) {
            if (LEAP.hasCSS(d, "lgform2")) {
                LEAP.form.___setACFORMPROP(d);
            } else {
                LEAP.getElement("div[ctf=form_title]:first", d).style.backgroundImage = "";
            }
            d.removeAttribute("l_isactiveform");
            d = null;
        }
    };
    LEAP.form._setDeActiveFormStyle = function(d) {
        try {
            var g = d.getAttribute("l_isactiveform");
            if (g != null && g == "1") {
                if (LEAP.hasCSS(d, "lgform2")) {
                    LEAP.form.___setACFORMPROP(d);
                } else {
                    LEAP.getElement("div[ctf=form_title]:first", d).style.backgroundImage = "";
                }
                d.removeAttribute("l_isactiveform");
                d = null;
            }
        } finally {
            d = null;
        }
    };
    LEAP.form._setActiveTIStyle = function(d) {
        if (d.tagName == "A") {
            d = d.parentElement;
        }
        var h = LEAP.form.getTaskBar();
        if (h != null) {
            var l = d.getAttribute("l_isactivetaskitem");
            if (l != null && l == "1") {
                return;
            }
            var g = LEAP.getElement("span[l_isactivetaskitem=1]", h);
            if (g) {
                var j = LEAP.getElement("a:first", g);
                g.removeAttribute("l_isactivetaskitem");
                g.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/index/id.jpg)";
                j = null;
            }
            var j = LEAP.getElement("a:first", d);
            d.setAttribute("l_isactivetaskitem", "1");
            d.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/index/ia.jpg)";
            j = null;
            h = null;
        }
    };
    LEAP.form._setDeActiveTIStyle = function(d) {
        if (d.tagName == "A") {
            d = d.parentElement;
        }
        var g = LEAP.form.getTaskBar();
        if (g != null) {
            var h = d.getAttribute("l_isactivetaskitem");
            if (h != null && h == "1") {
                var j = LEAP.getElement("a:first", d);
                d.removeAttribute("l_isactivetaskitem");
                d.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/index/id.jpg)";
                j = null;
            }
            g = null;
        }
        d = null;
    };
    LEAP.form._setAllDeActiveTI = function() {
        var g = LEAP.form.getTaskBar();
        if (g != null) {
            var d = LEAP.getElement("span[l_isactivetaskitem=1]", g);
            if (d) {
                var h = LEAP.getElement("a:first", d);
                d.removeAttribute("l_isactivetaskitem");
                d.style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/images/index/id.jpg)";
            }
            g = null;
        }
    };
    LEAP.form.__hideAllForm = function() {
        LEAP.form._setAllDeActiveForm();
        LEAP.form._setAllDeActiveTI();
        var d = LEAP.getElements("div[ct=form]");
        if (d) {
            for (var g = 0; g < d.length; g++) {
                LEAP.form.___hide(d[g]);
            }
        }
        d = null;
    };
    LEAP.form.getTaskBar = function() {
        if (LEAP.form.ishastaskbar == null) {
            LEAP.form.ishastaskbar = false;
            LEAP.form.taskbar = LEAP.getElement("div[ct=lg_taskbar]");
            if (LEAP.form.taskbar != null) {
                LEAP.form.ishastaskbar = true;
                LEAP.form.taskbarheight = LEAP.form.taskbar.parentElement.parentElement.offsetHeight;
            }
        }
        return LEAP.form.taskbar;
    };
    LEAP.form.removeTaskItem = function(h) {
        h = LEAP._check(h, LEAP.form.d);
        if (h == null) {
            return;
        }
        var g = LEAP.form.getTaskBar();
        if (g != null) {
            var d = h.getAttribute("instance");
            if (d != null) {
                var j = LEAP.getElement("a[targetform=" + d + "]", g);
                if (j != null) {
                    g.removeChild(j.parentNode);
                }
            }
            g = null;
        }
        h = null;
    };
    LEAP.form.actviveTakItem = function(g) {
        g = LEAP._check(g, LEAP.form.d);
        if (g == null) {
            return;
        }
        var d = LEAP.form.getTaskBar();
        if (d != null) {
            var h = LEAP.getElement("a[targetform=" + g.getAttribute("instance") + "]", d);
            LEAP.form._setActiveTIStyle(h);
            d = null;
        }
        g = null;
    };
    LEAP.form.maxSize = function(m) {
        m = LEAP._check(m, LEAP.form.d);
        if (m == null) {
            return;
        }
        if (!LEAP.hasCSS(LEAP.getElement("[ctf=form_btn_size]", m), "iframe_title_res_icon")) {
            var o = m.getAttribute("formmode");
            var j = m.style.left;
            var p = m.style.top;
            var d = m.clientWidth;
            var u = m.clientHeight;
            m.setAttribute("size_left", j);
            m.setAttribute("size_top", p);
            m.setAttribute("size_width", d);
            if (o == null || o != "3") {
                m.setAttribute("size_height", u - 48);
            } else {
                m.setAttribute("size_height", u);
            }
            m.style.left = "0px";
            m.style.top = "0px";
            LEAP.form.getTaskBar();
            var g = LEAP.getInnerWindowSize();
            var r = g.width;
            var l = g.height;
            if (LEAP.isIE && LEAPBrowser.IEVersion < 10 && (LEAPBrowser.documentMode && LEAPBrowser.documentMode > 7)) {
                l -= 35;
                r -= 12;
            }
            if (o == null || o != "3") {
                LEAP.getElement("[ctf=form_btn_size]", m).className = "iframe_title_res_icon";
                var n = l - 50;
                if (LEAP.form.ishastaskbar) {
                    n = n - LEAP.form.taskbarheight;
                }
                LEAP.form.setSize(m, r, n);
            } else {
                if (LEAP.hasCSS(m, "lgform2")) {
                    LEAP.getElement("[ctf=form_btns]", m).setAttribute("mode", "max");
                } else {
                    LEAP.getElement("[ctf=form_btn_size]", m).setAttribute("mode", "max");
                }
                var n = l;
                var q = r;
                if (LEAP.form.ishastaskbar) {
                    l = l - LEAP.form.taskbarheight;
                }
                LEAP.form.setSize(m, r, l);
            }
        }
        LEAP.form._resetContentSize(m);
        m = null;
    };
    LEAP.form.restoreSize = function(d) {
        d = LEAP._check(d, LEAP.form.d);
        if (d == null) {
            return;
        }
        var g = d.getAttribute("formmode");
        if (g != null && g == "3") {
            if (LEAP.hasCSS(d, "lgform2")) {
                LEAP.getElement("[ctf=form_btns]", d).setAttribute("mode", "normal");
            } else {
                LEAP.getElement("[ctf=form_btn_size]", d).setAttribute("mode", "normal");
            }
            d.style.left = d.getAttribute("size_left");
            d.style.top = d.getAttribute("size_top");
            LEAP.form.setSize(d, d.getAttribute("size_width"), d.getAttribute("size_height"));
        } else {
            if (!LEAP.hasCSS(LEAP.getElement("[ctf=form_btn_size]", d), "iframe_title_max_icon")) {
                LEAP.getElement("[ctf=form_btn_size]", d).className = "iframe_title_max_icon";
                d.style.left = d.getAttribute("size_left");
                d.style.top = d.getAttribute("size_top");
                LEAP.form.setSize(d, d.getAttribute("size_width"), d.getAttribute("size_height"));
            }
        }
        d = null;
    };
    LEAP.form.onselectstart = function() {
        return false;
    };
    LEAP.form.formContent = '<div st="formcons" style="width:100%;height:100%;background-color:#5192C8 ;*+padding-left: 0px;*+padding-bottom: 0px;*+padding-top:0px;overflow:hidden;position: relative;"><div ut="cons_main_left" class="lg_p_lr_left" style="width: 205px;"><div style="width: 100%; height: 100%"><div ut="cons_main_spliter" class="lg_p_lr_right" style="width: 9px;cursor: pointer;"><div style="height:200px"></div><img ut="main_resize" src="@urlpreLEAP/Resource/SystemTemplate/images/resize_close.gif" style="left:3px"></div><div class="lg_p_lr_fill"><!-- <img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/tree_zxj.png" style="left:0px;bottom:-1px;position:absolute;overflow:auto;width:10px;height:10px;"><img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/tree_zj.png" style="position:absolute;overflow:auto;width:10px;height:10px;"> --><img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/tree_yj.png" style="right:-1px;;position:absolute;overflow:auto;width:10px;height:10px;"><img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/tree_yxj.png" style="bottom:-1px;right:-1px;position:absolute;overflow:auto;width:10px;height:10px;"> <div class="lg_p_lr_fill_c" style="padding:3px;border:1px solid #CBCCCE;background-color: #F3F3F3;position: relative;*+position:;"><div ut="con_leftworkarea" style="width:;*+width:100%;height:;*+height:100%;border-top: 1px solid #00A8EC;border-bottom: 1px solid #00A8EC;background-color: #72B4E8;overflow: auto;position:absolute;*+position:;top:3px;bottom:9px;left:3px;right:3px;"> <div ut="con_mainTree" style="display: none;width:100%;height:auto;background-color: #F3F3F5;"><div style="height: 13px;background-image: url(@urlpreLEAP/Resource/SystemTemplate/images/tree_contop.png);font-size:1px"></div><UL class="tree" ut="mainTree" ct="tree"></UL><div style="height: 12px;background-image: url(@urlpreLEAP/Resource/SystemTemplate/images/tree_conbottom.png);font-size:1px"></div></div> </div></div></div></div></div><div class="lg_p_lr_fill" style="position: relative;"><div class="lg_p_lr_fill_c" style="*+padding-right:0px;background-color: white;"><table ut="cons_main_bg" style="width:99%;height:99%;border:0;text-align: center;" cellpadding="0" cellspacing="0"><td valign="middle" align="center"><img ut="img_main_bg" src="@urlpreLEAP/Resource/SystemTemplate/images2/wa_bg.jpg" /></td></table><div ut="con_workarea" style="width:100%;height:100%;background-color: white;display:none"></div></div><img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/main_zx.png" style="left:-1px;bottom:-2px;position:absolute;overflow:auto;width:10px;height:10px;"><img class="lg_form_sj" _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/main_zs.png" style="left:-1px;top:-1px;position:absolute;overflow:auto;width:10px;height:10px;"><!-- <img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/main_ys.png" style="top:-1px;right:-2px;;position:absolute;overflow:auto;width:10px;height:10px;"><img _trans_=1 src="@urlpreLEAP/Resource/SystemTemplate/images2/main_yx.png" style="bottom:-2px;right:-2px;position:absolute;overflow:auto;width:10px;height:10px;"> --></div></div>'.replaceall("@urlpre", leapconfig.server);
    LEAP.form.createWithDir = function(d) {};
    LEAP.select = {};
    LEAP.select.a = "<a value='@v'href='javascript:void(0)'ctf='select_item'>@n</a>";
    LEAP.select.b = "@v";
    LEAP.select.c = "@n";
    LEAP.select.d = "select";
    LEAP.select.dd = "areagroup";
    LEAP.select.init = function() {
        if (document != null && document.body != null) {
            LEAP.select._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.select._init);
        }
        ElementEventManager.addManagedEventType(LEAP.select.d, "valueChange");
        ElementEventManager.addManagedEventType(LEAP.select.dd, "valueChange");
    };
    LEAP.select._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.select.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keydown", LEAP.select.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.select._init);
    };
    LEAP.select.getValueLevel = function(j) {
        var m = j;
        try {
            j = LEAP._check(j, LEAP.select.d);
            if (j == null) {
                j = LEAP._check(m, LEAP.select.dd);
                var p = j.getAttribute("md");
                if (j == null) {
                    return;
                } else {
                    if (p != null && (p == "areaid" || p == "qhareaid")) {
                        var q = LEAP.select.getValue(j);
                        if (q == null) {
                            return 0;
                        } else {
                            return LEAP.getarealevel(q);
                        }
                    } else {
                        j = LEAP.getElement("[ct=select][deep]", j);
                        if (j == null) {
                            return;
                        }
                    }
                }
            }
            var u = j.getAttribute("group");
            if (u != null && u.Trim() != "") {
                var w = j.getAttribute("deep");
                if (w == null || w.toString().Trim() == "") {
                    return;
                }
                w = LEAP.parsenum(w);
                if (w == null) {
                    return;
                }
                var x = j.getAttribute("instance");
                var o = "div[ct=select][group=" + u + "]";
                if (x != null && x.Trim() != null) {
                    o += "[instance='" + x + "']";
                }
                var n = LEAP.getElements(o);
                if (n != null) {
                    var g = n.length;
                    var d = null;
                    for (var h = g - 1; h > -1; h--) {
                        d = n[h];
                        var r = d.getAttribute(commfields.value);
                        if (r == null || r == "") {
                            if (h == 0) {
                                d = null;
                                break;
                            } else {
                                continue;
                            }
                        }
                        if (d == null) {
                            return;
                        } else {
                            return LEAP.parsenum(d.getAttribute("deep"));
                        }
                    }
                }
            }
        } finally {
            m = j = null;
        }
    };
    LEAP.select.getValue = function(m) {
        var q = m;
        try {
            if (m != null) {
                var n = m.getAttribute("ct");
                var y = m.getAttribute("group");
                if (n == "areagroup") {
                    if (y != null && y.Trim() != "") {
                        var p = m.getAttribute("_cansel_");
                        if (p != null && p == "0") {
                            return m.getAttribute("value");
                        }
                    }
                }
            }
            m = LEAP._check(m, LEAP.select.d);
            if (m == null) {
                m = LEAP._check(q, LEAP.select.dd);
                if (m == null) {
                    return;
                } else {
                    m = LEAP.getElement("[ct=select][deep]", m);
                    if (m == null) {
                        return;
                    }
                }
            }
            if (y != null && y.Trim() != "") {
                var p = m.getAttribute("_cansel_");
                if (p != null && p == "0") {
                    return m.getAttribute("value");
                    return;
                }
                var z = m.getAttribute("deep");
                if (z == null || z.toString().Trim() == "") {
                    return;
                }
                z = LEAP.parsenum(z);
                if (z == null) {
                    return;
                }
                var A = m.getAttribute("instance");
                var w = "div[ct=select][group=" + y + "]";
                if (A != null && A.Trim() != null) {
                    w += "[instance='" + A + "']";
                }
                var u = LEAP.getElements(w);
                if (u != null) {
                    var h = u.length;
                    for (var j = h - 1; j > -1; j--) {
                        var g = u[j];
                        var x = g.getAttribute(commfields.value);
                        if (x == null || x == "") {
                            if (j == 0) {
                                var d = m.getAttribute("defaultvalue");
                                if (d != null && d.Trim() != "") {
                                    return d.Trim();
                                }
                            } else {
                                continue;
                            }
                        }
                        var o = g.getAttribute("count");
                        var r = LEAP.select._fill(o, x);
                        if (r == null || r.toString().Trim() == "") {
                            var d = m.getAttribute("defaultvalue");
                            if (d != null && d.Trim() != "") {
                                return d.Trim();
                            }
                        }
                        return r;
                    }
                }
            } else {
                var r = m.getAttribute(commfields.value);
                if (r == null || r.toString().Trim() == "") {
                    var d = m.getAttribute("defaultvalue");
                    if (d != null && d.Trim() != "") {
                        return d.Trim();
                    }
                }
                return r;
            }
        } finally {
            q = m = null;
        }
    };
    LEAP.select.getSelectedText = function(h) {
        h = LEAP._check(h, LEAP.select.d);
        if (h == null) {
            return;
        }
        var g = LEAP.getElement("[ctf=selectbtn]", h);
        if (g != null) {
            var d = g.value;
            g = null;
            return d;
        }
        g = null;
    };
    LEAP.select.setValue = function(j, q, d, n) {
        var m = j;
        try {
            j = LEAP._check(j, LEAP.select.d);
            if (j == null) {
                j = LEAP._check(m, LEAP.select.dd);
                if (j == null) {
                    return;
                } else {
                    j = LEAP.getElement("[ct=select][deep]", j);
                    if (j == null) {
                        return;
                    }
                }
            }
            if (q != null) {
                q = q.toString();
            }
            var u = j.getAttribute("size");
            var o = j.getAttribute("count");
            if (!String.isEmpty(q) && o != null && q.length < o) {
                while (q.length < o) {
                    q = "0" + q;
                }
            }
            var v = LEAP.select._sub(u, q);
            var g = LEAP.select._fill(o, v);
            var l = LEAP.getElement(".select_items a[value=" + v + "]", j);
            if (l == null) {
                l = LEAP.getElement('.select_items a[value=""]', j);
            }
            if (l != null) {
                var r = j.getAttribute(commfields.value);
                var h = l.getAttribute(commfields.value);
                var p = g;
                if (q == null) {
                    p = "";
                }
                j.setAttribute(commfields.value, p);
                LEAP.getElement("[ctf=selectbtn]", j).value = l.innerText;
                if (n != false) {
                    LEAP.select._setvalue(j, r, q, d);
                }
            } else {
                j.setAttribute(commfields.value, "");
                LEAP.getElement("[ctf=selectbtn]", j).value = "";
                if (n != false) {
                    LEAP.select._setvalue(j, r, q, d);
                }
            }
        } finally {
            j = null;
            m = null;
        }
    };
    LEAP.select.addItem = function(h, j, d) {
        h = LEAP._check(h, LEAP.select.d);
        if (h == null) {
            return;
        }
        if (j != null && j != NaN) {
            j = j + "";
        }
        if (d != null && d != NaN) {
            d = d + "";
        }
        var l = LEAP.getElement(".select_items", h);
        var m = document.createElement("div");
        l.appendChild(m);
        if (j == null || j.Trim() == "") {
            j = "";
        }
        if (d == null || d.Trim() == "") {
            d = "&nbsp";
        }
        var g = h.getAttribute("size");
        j = LEAP.select._sub(g, j);
        m.innerHTML = LEAP.select.a.replace(LEAP.select.b, j).replace(LEAP.select.c, d);
        h = l = m = null;
    };
    LEAP.select.clearItem = function(d) {
        d = LEAP._check(d, LEAP.select.d);
        if (d == null) {
            return;
        }
        var g = LEAP.getElement(".select_items", d);
        if (g != null) {
            g.innerHTML = "";
        }
        d.setAttribute(commfields.value, "");
        LEAP.getElement(".selectbtn", d).value = "";
        LEAP.select.addItem(d, "", "");
        g = d = null;
    };
    LEAP.select.getItemText = function(h, j) {
        h = LEAP._check(h, LEAP.select.d);
        if (h == null) {
            return;
        }
        var d = LEAP.getElement(".select_items a[value=" + j + "]", h);
        if (d != null) {
            var g = d.innerText;
            d = h = d = null;
            return g;
        }
        h = null;
    };
    LEAP.select.removeItem = function(g, h) {
        g = LEAP._check(g, LEAP.select.d);
        if (g == null) {
            return;
        }
        var d = LEAP.getElement(".select_items a[value=" + h + "]", g);
        if (d != null) {
            d.parentNode.parentNode.removeChild(d.parentNode);
            if (g.getAttribute(commfields.value) == h) {
                g.setAttribute(commfields.value, "");
                LEAP.getElement(".selectbtn", g).value = "";
            }
        }
    };
    LEAP.select.uiProcess = function(q) {
        var v = q.e.srcElement;
        var d = v.getAttribute("ctf");
        var n = q.e.type;
        var g = null;
        if (n == "keydown" && d == "selectbtn" && v.tagName == "INPUT" && (g = LEAP._match(v, LEAP.select.d)) != null) {
            if (g.getAttribute("readonly") == "1") {
                return;
            }
            var N = -1;
            if (LEAP.isIE) {
                N = q.e.keyCode;
            } else {
                N = q.e.which;
            }
            var J = g.getAttribute("md") == "areaid";
            if ((N >= 48 && N <= 57) || (N >= 96 && N <= 105)) {
                var S = -1;
                if (N < 58) {
                    S = N - 48;
                } else {
                    if (N < 106) {
                        S = N - 96;
                    }
                }
                S += "";
                var h = new Date();
                var B = g.getAttribute("___pretime");
                g.setAttribute("___pretime", h.getTime());
                var j = g.getAttribute("___prekey");
                if (j == null) {
                    j = "";
                }
                if (B != null && B != "") {
                    B = B * 1;
                    if (h.getTime() - B < 300) {
                        S = j + S;
                        g.setAttribute("___prekey", S);
                        window.status = S;
                    } else {
                        g.setAttribute("___prekey", "" + S);
                        window.status = S;
                    }
                } else {
                    g.setAttribute("___prekey", "" + S);
                    window.status = S;
                }
                var H = LEAP.getElements("a[ctf=select_item]", g);
                var G = g.getAttribute("size");
                var U = false;
                if (G != null && G > 2) {
                    U = true;
                }
                var M = H.length;
                for (var P = 0; P < M; P++) {
                    var R = H[P];
                    var K = R.getAttribute("value");
                    var m = null;
                    if (K == null || K == "" || K.Trim() == "") {
                        continue;
                    }
                    if (U) {
                        m = K.substr(K.length - 2) * 1 + "";
                    }
                    var Q = K;
                    if (m != null && m != "" && m.Trim() != "") {
                        Q = m;
                    }
                    if (Q != null && Q.Trim() != "") {
                        if (Q.indexOf(S) == 0) {
                            LEAP.select.setValue(g, K, true, true);
                            break;
                        }
                    }
                    R = null;
                }
                H = null;
            }
            if (N == 37 || N == 38) {
                var K = LEAP.select.getValue(g);
                var o = LEAP.getElements("a[ctf=select_item]", g);
                if (o != null) {
                    var M = o.length;
                    if (K == null) {
                        if (M > 1) {
                            LEAP.select.setValue(g, o[1 - 1].getAttribute("value"), true, true);
                        } else {
                            LEAP.select.setValue(g, o[0].getAttribute("value"), true, true);
                        }
                    }
                    for (var P = 0; P < M; P++) {
                        var T = o[P].getAttribute("value");
                        if ((T.Trim() != "" && J && K.substring(0, T.length) == T) || (!J && K == T)) {
                            if (P == 0) {
                                if (!J) {
                                    LEAP.select.setValue(g, o[M - 1].getAttribute("value"), true, true);
                                }
                                break;
                            }
                            var T = o[P - 1].getAttribute("value");
                            if (T != null && T.Trim() == null) {
                                T = null;
                            }
                            if ((T == null || T.Trim() == "") && J) {} else {
                                LEAP.select.setValue(g, T, true, true);
                            }
                        }
                    }
                }
                LEAP.stopEvent(q.e);
                return;
                breakEvent: true;
            } else {
                if (N == 39 || N == 40) {
                    var K = LEAP.select.getValue(g);
                    var o = LEAP.getElements("a[ctf=select_item]", g);
                    if (o != null) {
                        var M = o.length;
                        if (K == null) {
                            if (M > 0) {
                                LEAP.select.setValue(g, o[1].getAttribute("value"), true, true);
                            } else {
                                if (M == 0) {
                                    LEAP.select.setValue(g, o[0].getAttribute("value"), true, true);
                                }
                            }
                        } else {
                            var D = false;
                            for (var P = 0; P < M; P++) {
                                var T = o[P].getAttribute("value");
                                if ((T.Trim() != "" && J && K.substring(0, T.length) == T) || (!J && K == T)) {
                                    if (P == M - 1) {
                                        if (!J) {
                                            LEAP.select.setValue(g, null, true, true);
                                        }
                                        D = true;
                                        break;
                                    }
                                    var T = o[P + 1].getAttribute("value");
                                    if (T != null && T.Trim() == null) {
                                        T = null;
                                    }
                                    if ((T == null || T.Trim() == "") && J) {} else {
                                        LEAP.select.setValue(g, T, true, true);
                                    }
                                    D = true;
                                }
                            }
                            if (!D) {
                                if (M > 1) {
                                    LEAP.select.setValue(g, o[1].getAttribute("value"), true, true);
                                } else {
                                    LEAP.select.setValue(g, o[0].getAttribute("value"), true, true);
                                }
                            }
                        }
                    }
                    LEAP.stopEvent(q.e);
                    return;
                    breakEvent: true;
                }
            }
            return;
        }
        if (n == "mouseout") {
            var z, w;
            if (d == "select_drop") {
                w = v;
                z = LEAP.getElement("[ctf=selectbtn]", w.parentNode);
            } else {
                if (d == "selectbtn") {
                    z = v;
                    w = LEAP.getElement("[ctf=select_drop]", z.parentNode.parentNode.parentNode);
                } else {
                    return;
                }
            }
            LEAP.removeCSS(z, "selectbtnon");
            LEAP.removeCSS(w, "selectdropon");
            LEAP.addCSS(w, "selectdropout");
            v = z = w = null;
            return;
        } else {
            if (n == "mouseover") {
                var z, w;
                if (d == "select_drop") {
                    w = v;
                    z = LEAP.getElement("[ctf=selectbtn]", w.parentNode);
                } else {
                    if (d == "selectbtn") {
                        z = v;
                        w = LEAP.getElement("[ctf=select_drop]", z.parentNode.parentNode.parentNode);
                    } else {
                        return;
                    }
                }
                LEAP.removeCSS(w, "selectdropout");
                LEAP.addCSS(w, "selectdropon");
                LEAP.addCSS(z, "selectbtnon");
                v = z = w = null;
                return;
            }
        }
        var O = LEAP.getElement(".select_items[_ui_select_on=1]");
        if (O != null) {
            LEAP.setAttribute(O, "_ui_select_on", null);
            LEAP.setStyle(O, {
                display: "none"
            });
            LEAP.setStyle(O.parentNode, {
                zIndex: "98"
            });
            if (d != null) {
                if (d == "selectbtn" || d == "select_drop") {
                    if (d == "selectbtn") {
                        if (O.parentNode == v.parentNode.parentNode.parentNode) {
                            O = null;
                            return;
                        }
                    } else {
                        if (O.parentNode == v.parentNode) {
                            O = null;
                            return;
                        }
                    }
                }
            }
            O = null;
        }
        if (d != null) {
            if (d == "selectbtn" || d == "select_drop") {
                var L = null;
                var g = null;
                if (d == "select_drop") {
                    g = v.parentNode;
                } else {
                    g = v.parentNode.parentNode.parentNode;
                }
                if (g.getAttribute("readonly") == "1") {
                    return;
                }
                L = LEAP.getElement(".select_items", g);
                z = LEAP.getElement("[ctf=selectbtn]", g);
                var C = z.offsetLeft;
                var A = z.offsetTop;
                LEAP.setStyle(L, {
                    display: "block"
                });
                if (g.getAttribute("_table_sel_top")) {
                    LEAP.setStyle(L, {
                        display: "block",
                        top: g.getAttribute("_table_sel_top"),
                        left: C
                    });
                } else {
                    LEAP.setStyle(L, {
                        display: "block",
                        top: A + 22,
                        left: C
                    });
                }
                if (!L.parentNode.getAttribute("_inform")) {
                    L.parentNode.style.zIndex = "99";
                }
                L._ui_select_on = 1;
                L = null;
            } else {
                if (d == "select_item") {
                    var F = v.parentNode.parentNode.parentNode;
                    var I = F.getAttribute(commfields.value);
                    var p = v.getAttribute(commfields.value);
                    var u = F.getAttribute("count");
                    I = LEAP.select._fill(u, I);
                    p = LEAP.select._fill(u, p);
                    LEAP.getElement(".selectbtn", F).value = v.innerText;
                    if (p == null) {
                        p = "";
                    }
                    F.setAttribute(commfields.value, p);
                    v.parentNode.parentNode.style.display = "none";
                    LEAP.getElement(".selectbtn", F).focus();
                    LEAP.select._setvalue(F, I, p, true, true);
                    F = null;
                }
            }
        }
        v = null;
    };
    LEAP.select._sub = function(g, d) {
        if (d == null) {
            return;
        }
        if (typeof(g) == "string" && (d.Trim() == "" || d.Trim() == "&nbsp")) {
            return "";
        }
        if (g != null && (typeof(g) == "number" || g.Trim() != "")) {
            g = LEAP.parsenum(g);
            if (g != null && d.length > g) {
                d = d.substr(0, g);
            }
        }
        return d;
    };
    LEAP.select._fill = function(j, g) {
        if (g == null) {
            return;
        }
        if (typeof(j) == "string" && (g.Trim() == "" || g.Trim() == "&nbsp")) {
            return "";
        }
        if (j != null && (typeof(length) == "number" || (j.Trim() != "" && g != null && g.Trim() != ""))) {
            j = LEAP.parsenum(j);
            if (j != null) {
                var d = g.length;
                for (var h = 0; h < j - d; h++) {
                    g += "0";
                }
            }
        }
        return g;
    };
    LEAP.select._setvalue = function(B, D, o, S, z) {
        var N, w;
        var C = B.getAttribute("size");
        N = LEAP.select._sub(C, D);
        w = LEAP.select._sub(C, o);
        if (S) {
            if (w != N) {
                ElementEventManager.handleEvent(B, "valueChange", {
                    caller: B,
                    pv: N,
                    lv: w
                });
                if (B.getAttribute("_istabledynasize")) {
                    var Q = LEAP._match(B, "table");
                    if (Q) {
                        Q.setAttribute(LEAP.table.p, w + "");
                        Q[LEAP.table.p] = w * 1;
                        LEAP.table.refreshPage(Q);
                        Q = null;
                    }
                }
            }
        }
        var u = B.getAttribute("group");
        if (u != null && u.Trim() != "") {
            var L = B.getAttribute("deep");
            if (L == null || L.Trim() == "") {
                return;
            }
            L = LEAP.parsenum(L);
            if (L == null) {
                return;
            }
            var R = B.getAttribute("instance");
            var O = "";
            if (R != null && R.Trim() != null) {
                O = "[instance='" + R + "']";
            }
            if (z) {
                if (w == N) {
                    return;
                }
                var j = "div[ct=select][deep][group=" + u + "]";
                if (L > 0) {
                    for (var M = 1; M <= L; M++) {
                        j += "[deep!=" + M + "]";
                    }
                }
                var h = LEAP.getElements(j + O);
                if (h != null) {
                    for (var M = 0; M < h.length; M++) {
                        LEAP.select.clearItem(h[M]);
                    }
                    if (o != null && o.Trim() != "") {
                        var d = h[0].getAttribute("code");
                        var C = B.getAttribute("size");
                        var K = LEAP.getCodeValue(d, LEAP.select._sub(C, o));
                        if (K != null) {
                            for (var M = 0; M < K.length; M++) {
                                LEAP.select.addItem(h[0], K[M].codeid, K[M].codevalue);
                            }
                        }
                    }
                }
            } else {
                var j = "div[ct=select][deep][group=" + u + "]";
                var h = LEAP.getElements(j + O);
                if (h != null) {
                    var J = h.length;
                    for (var H = 1; H < J; H++) {
                        for (var F = 0; F < H; F++) {
                            var P = h[H];
                            var G = P.getAttribute("size");
                            if (G == null || G.Trim() == "") {
                                continue;
                            }
                            var T = h[F];
                            var x = T.getAttribute("size");
                            if (x == null || x.Trim() == "") {
                                continue;
                            }
                            G = LEAP.parsenum(G);
                            x = LEAP.parsenum(x);
                            if (G < x) {
                                h[H] = T;
                                h[F] = P;
                            }
                        }
                    }
                    var g = 0;
                    for (var M = 0; M < J; M++) {
                        var I = h[M];
                        if (M != 0) {
                            LEAP.select.clearItem(I);
                            LEAP.select.setValue(I, "", false, false);
                        }
                        var d = I.getAttribute("code");
                        var C = I.getAttribute("size");
                        if (C == null || C.Trim() == "") {
                            continue;
                        }
                        var p, q;
                        if (M != 0) {
                            p = LEAP.select._sub(g, o);
                            if (p == null || p.Trim() == "") {
                                continue;
                            }
                            K = LEAP.getCodeValue(d, p);
                        }
                        if (M != 0 && K != null) {
                            for (var A = 0; A < K.length; A++) {
                                LEAP.select.addItem(I, K[A].codeid, K[A].codevalue);
                            }
                        }
                        var y = o;
                        if (o != null) {
                            y = LEAP.parsenum(o.substr(g, C - g));
                        }
                        if (y == null || y == 0) {
                            continue;
                        }
                        LEAP.select.setValue(I, o, false, false);
                        g = C;
                    }
                }
            }
            var U = LEAP._match(B, LEAP.select.dd);
            if (U != null) {
                ElementEventManager.handleEvent(U, "valueChange", {
                    caller: U,
                    pv: N,
                    lv: w
                });
                U = null;
            }
        }
    };
    LEAP.select.init();
    LEAP.check = {};
    LEAP.check.p = "white";
    LEAP.check.n = "#FFDDDD";
    LEAP.check.i = "#FFF7E5";
    LEAP.check.t = "<div style='display: block' class=tip_top><div style=' overflow:auto; width:100%;'><div ctf='tip_content_msg' class='tip_msg'></div><div ctf='tip_content_err' class='tip_err'></div></div></div><div style='display: block' class=tip_bottom></div>";
    LEAP.check._init = function() {
        ElementEventManager.addManagedEventType("text", "valueChange");
        ElementEventManager.addManagedEventType("textarea", "valueChange");
        ElementEventManager.addManagedEventType("input", "valueChange");
        LEAP.addEvent(document.body, "click", LEAP.check.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keypress", LEAP.check.uiProcess, null, null, true);
        if (LEAP.isIE) {
            LEAP.addEvent(document.body, "focusin", LEAP.check.uiProcess, null, null, true);
            LEAP.addEvent(document.body, "focusout", LEAP.check.uiProcess, null, null, true);
        } else {
            document.addEventListener("focus", LEAP.check.uiProcess, true);
            document.addEventListener("blur", LEAP.check.uiProcess, true);
        }
        var g = document.createElement("div");
        g.className = "tip";
        g.setAttribute("ct", "tip");
        document.body.appendChild(g);
        g.innerHTML = LEAP.check.t;
        g = null;
    };
    LEAP.check.uiProcess = function(arg) {
        var e = null;
        var src = null;
        var k = null;
        var type = null;
        if (arg != null && arg.e != null && arg.e.type != null) {
            type = arg.e.type;
        }
        try {
            if (type != null) {
                src = arg.e.srcElement;
                e = arg.e;
                if (LEAP.isIE) {
                    e = window.event;
                    k = e.keyCode;
                } else {
                    k = e.which;
                }
            } else {
                e = arg;
                src = arg.target;
                k = e.which;
            }
            type = e.type;
            if (src == null || src.getAttribute == null) {
                return;
            }
            var ht = src.getAttribute("ht");
            var ctef = src.getAttribute("ctef");
            if (ctef && LEAP[ctef]) {
                if (type == "focusin" || type == "focus") {
                    LEAP[ctef].onfocus(src);
                } else {
                    if (type == "focusout" || type == "blur") {
                        LEAP[ctef].onblur(src);
                    }
                }
            }
            if (ht != null && (ht == "text" || ht == "textarea" || ht == "input") && ((src.tagName == "INPUT" && src.type == "text") || src.tagName == "TEXTAREA")) {
                if (type == "focusin" || type == "focus") {
                    src.setAttribute("pv", src.value);
                } else {
                    if (type == "focusout" || type == "blur") {
                        var pv = src.getAttribute("pv");
                        if (pv == null) {
                            pv = "";
                        }
                        var lv = src.value;
                        src.setAttribute("pv", lv);
                        if (pv != lv) {
                            ElementEventManager.handleEvent(src, "valueChange", {
                                caller: src,
                                pv: pv,
                                lv: lv
                            });
                        }
                    }
                }
            }
            var f = src.getAttribute("tip");
            if (f == "") {
                f = null;
            }
            if (f == "null" || f == "NULL") {
                src.removeAttribute("tip");
                f = null;
            }
            var c = src.getAttribute("check");
            if (f == null && c == null) {
                return;
            }
            var m = src._chec_error_msg;
            if (m == "null" || m == "NULL") {
                m = null;
                src._chec_error_msg = null;
            }
            if ((type == "mouseout" || type == "mouseover" || type == "mousemove" || type == "click") && (f != null || m != null)) {
                var tip = LEAP.getElement("[ct=tip]");
                var last = tip.last;
                var ctid = src.getAttribute("ctid");
                if (type == "mouseover") {
                    if (f == null) {
                        f = "";
                    }
                    LEAP.getElement("[ctf=tip_content_msg]").innerHTML = f;
                    if (m == null) {
                        m = "";
                    }
                    LEAP.getElement("[ctf=tip_content_err]").innerHTML = m;
                    LEAP.setStyle(tip, {
                        display: "block",
                        left: e.clientX - 23 + document.body.scrollLeft,
                        top: e.clientY + 2 + document.body.scrollTop
                    });
                    if (ctid == null) {
                        ctid = UUID.cID();
                        src.setAttribute("ctid", ctid);
                    }
                    tip.last = ctid;
                } else {
                    if (type == "mouseout") {
                        if (last == ctid) {
                            tip.last = null;
                            tip.style.display = "none";
                        }
                    } else {
                        if (type == "mousemove") {
                            if (ctid == last && tip.style.display == "block") {
                                LEAP.setStyle(tip, {
                                    left: e.clientX - 23 + document.body.scrollLeft,
                                    top: e.clientY + 2 + document.body.scrollTop
                                });
                            }
                        }
                    }
                }
                tip = null;
                return;
            }
            if (type == "click") {
                return;
            }
            var def = src._check_def;
            if (def == null) {
                def = {};
                try {
                    if (c != null) {
                        try {
                            if (c != null) {
                                var tstart = c.indexOf("exp:");
                                if (c.indexOf("exp:") > -1) {
                                    var tmp = c.substring(tstart + 4);
                                    var tli = tmp.lastIndexOf(":");
                                    if (tli == -1) {
                                        if (tmp[0] != "'" && tmp[0] != '"') {
                                            tmp = "'" + tmp + "'";
                                        }
                                        c = c.substring(0, tstart) + "exp:" + tmp;
                                    } else {
                                        var tli2 = tmp.indexOf(",");
                                        if (tli2) {
                                            var tmp2 = tmp.substring(0, tli2);
                                            if (tmp2[0] != "'" && tmp2[0] != '"') {
                                                tmp2 = "'" + tmp2 + "'";
                                            }
                                            c = c.substring(0, tstart) + tmp.substring(tli2 + 1) + ",exp:" + tmp2;
                                        }
                                    }
                                }
                            }
                        } catch (err) {}
                        def.check = eval("({" + c + "})");
                        if (def.check != null && def.check.exp != null && typeof(def.check.exp) == "string") {
                            def.check.exp = new RegExp(def.check.exp);
                        }
                        if (def.exp != null && typeof(def.exp) == "string") {
                            def.exp = new RegExp(def.exp);
                        }
                        def.warn = src.getAttribute("warn");
                    }
                } catch (err) {}
                if (f != null) {
                    def.tip = f;
                }
                src._check_def = def;
            }
            if (def == null) {
                return;
            }
            if (src.getAttribute("_rscolor_") == null) {
                var rc = src.style.backgroundColor;
                if (rc == null || rc == "" || rc == LEAP.check.n || rc == LEAP.check.i || rc == LEAP.check.p) {
                    rc = "";
                }
                src.setAttribute("_rscolor_", rc);
            }
            if (def.check != null && def.check.maxlen != null) {
                if (src.maxLength != def.check.maxlen + "") {
                    src.maxLength = def.check.maxlen;
                }
            }
            var id = src.getAttribute("ctid");
            if (id == null) {
                id = UUID.cID();
                src.setAttribute("ctid", id);
            }
            if (type == "keypress" && def.check != null) {
                if (k == 8 || k == 0 || k == 13 || k == 35 || k == 36 || k == 37 || k == 38 || k == 39 || k == 40) {
                    return;
                }
                if (e.ctrlKey && (k == 67 || k == 99)) {
                    return;
                }
                if (e.ctrlKey && (k == 86 || k == 118)) {
                    if (def.check.isnumber == true || def.check.enablecn == false) {
                        if (!LEAP.isIE) {
                            e.preventDefault();
                        }
                    }
                    return;
                }
                if (def.check.maxlen != null) {
                    var v = LEAP.getValue(src, null, true);
                    var l = 0;
                    if (v != null) {
                        l = (v + "").length;
                    }
                    if (def.check.maxlen <= l) {
                        var _t = LEAP.getSelectedText(src);
                        var word = _t.text;
                        var idx = _t.idx;
                        if (word == null) {
                            if (LEAP.isIE) {
                                e.returnValue = false;
                            } else {
                                e.preventDefault();
                            }
                            return;
                        }
                    }
                }
                if (def.check.isen == true) {
                    if (k < 65 || k > 122) {
                        if (LEAP.isIE) {
                            e.returnValue = false;
                        } else {
                            e.preventDefault();
                        }
                        return;
                    }
                }
                if (def.check.isint == true) {
                    var v = LEAP.getValue(src, null, true);
                    var _d = LEAP.getSelectedText(src);
                    if (k == 45) {
                        var l = 0;
                        if (v != null) {
                            l = (v + "").length;
                        }
                        if (l == 0) {
                            return;
                        } else {
                            if ((_d.idx == 0 && _d.text == null) || (_d.text != null && _d.text.length - _d.idx == 0)) {
                                if (v.indexOf("-") == -1 || (_d.text != null && _d.text.indexOf("-") != -1)) {
                                    return;
                                }
                            } else {
                                if (LEAP.isIE) {
                                    e.returnValue = false;
                                } else {
                                    e.preventDefault();
                                }
                                return;
                            }
                        }
                    } else {
                        if (k < 48 || k > 57) {
                            if (k == 48) {
                                var v = LEAP.getValue(src, null, true);
                                var l = 0;
                                if (v != null) {
                                    l = (v + "").length;
                                }
                                if (l !== 0) {
                                    return;
                                }
                            }
                            if (LEAP.isIE) {
                                e.returnValue = false;
                            } else {
                                e.preventDefault();
                            }
                            return;
                        }
                    }
                }
                if (def.check.isnumber == true) {
                    var v = LEAP.getValue(src, null, true);
                    var _d = LEAP.getSelectedText(src);
                    var _v = v;
                    if (v == "-") {
                        _v = "0";
                    }
                    if (k > 46 && k < 58 && (def.check.precision != null || def.check.decimalplace != null) && v != "") {
                        if (((parseInt(_v) + "").length >= def.check.precision && _d.text == null && _d.idx <= def.check.precision) || (def.check.decimalplace != null && v.indexOf(".") > 0 && _d.text == null && _d.idx > v.indexOf(".") && def.check.decimalplace <= (v.length - v.indexOf(".") - 1))) {
                            if (LEAP.isIE) {
                                e.returnValue = false;
                            } else {
                                e.preventDefault();
                            }
                            return;
                        }
                    }
                    if (k == 45) {
                        var l = 0;
                        if (v != null) {
                            l = (v + "").length;
                        }
                        if (l == 0) {
                            return;
                        } else {
                            if ((_d.idx == 0 && _d.text == null) || (_d.text != null && _d.text.length - _d.idx == 0)) {
                                if (v.indexOf("-") == -1 || (_d.text != null && _d.text.indexOf("-") != -1)) {
                                    return;
                                }
                            } else {
                                if (LEAP.isIE) {
                                    e.returnValue = false;
                                } else {
                                    e.preventDefault();
                                }
                                return;
                            }
                        }
                    }
                    if ((k < 48 || k > 57 || k == 48) && k != 45) {
                        if (k == 46 || k == 48) {
                            if (k == 48) {
                                if (v == "" || ((v.indexOf("0.") == 0 || v.indexOf("-0.") == 0) && v * 1 == 0)) {
                                    return;
                                } else {
                                    if (v * 1 == 0) {
                                        if (LEAP.isIE) {
                                            e.returnValue = false;
                                        } else {
                                            e.preventDefault();
                                        }
                                        return;
                                    }
                                }
                            }
                            var l = 0;
                            if (v != null) {
                                l = (v + "").length;
                            }
                            if (l > 0) {
                                if (k == 46 && def.check.maxlen != null && (l + 1) == def.check.maxlen) {
                                    if (LEAP.isIE) {
                                        e.returnValue = false;
                                    } else {
                                        e.preventDefault();
                                    }
                                    return;
                                }
                                if (k == 46 && (v + "").indexOf(".") == -1) {
                                    return;
                                } else {
                                    if (k == 48) {
                                        if (l !== 0) {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                        if (LEAP.isIE) {
                            e.returnValue = false;
                        } else {
                            e.preventDefault();
                        }
                        return;
                    }
                }
                if (def.check.isidcard == true) {
                    var v = LEAP.getValue(src, null, true);
                    var l = 0;
                    if (v != null) {
                        l = (v + "").length;
                    }
                    if (l > 17) {
                        if (LEAP.isIE) {
                            e.returnValue = false;
                        } else {
                            e.preventDefault();
                        }
                        return;
                    }
                    if (l < 17) {
                        if (k < 48 || k > 57) {
                            if (LEAP.isIE) {
                                e.returnValue = false;
                            } else {
                                e.preventDefault();
                            }
                            return;
                        }
                    }
                    if (l == 17) {
                        if ((k < 48 || k > 57) && k != 88 && k != 120) {
                            if (LEAP.isIE) {
                                e.returnValue = false;
                            } else {
                                e.preventDefault();
                            }
                            return;
                        }
                    }
                }
                return;
            }
            if (f != null && def.tip != null) {
                if (type == "mouseover") {} else {
                    if (type == "mouseout") {}
                }
            }
            if (c != null && def.check != null) {
                if (type == "blur" || type == "focusout") {
                    LEAP.check.setStyle(src, "");
                    LEAP.check.validate(src, false);
                } else {
                    if (type == "focus" || type == "focusin") {
                        LEAP.check.setStyle(src, LEAP.check.i);
                        if (def.check.enablecn == false || def.check.isen == true || def.check.isint == true || def.check.isnumber == true) {
                            if (src.style.imeMode != "disabled") {
                                src.style.imeMode = "disabled";
                            }
                        }
                    }
                }
            }
            def = null;
        } finally {
            e = src = arg = null;
        }
    };
    LEAP.check.getErrorMsg = function(d) {
        if (d == null) {
            return;
        }
        if (typeof(d) == commfields.string) {
            d = LEAP.getElement(d);
        }
        if (d == null) {
            return;
        }
        var g = d._chec_error_msg;
        d = null;
        return g;
    };
    LEAP.check.setCheck = function(h, d) {
        if (h == null) {
            return;
        }
        if (typeof(h) == commfields.string) {
            h = LEAP.getElements(h);
        }
        if (h == null) {
            return;
        }
        if (h.length) {} else {
            h = [h];
        }
        if (d == null || d == "null") {
            d = "";
        }
        LEAP.setAttribute(h, "check", d);
        for (var g = 0; g < h.length; g++) {
            h[g]["_check_def"] = null;
            h[g]["_chec_error_msg"] = null;
        }
        LEAP.check.setStyle(h, "", true);
        h = null;
    };
    LEAP.check.setCheckFunction = function(l, h, j) {
        if (l == null) {
            return;
        }
        if (typeof(l) == commfields.string) {
            l = LEAP.getElements(l);
        }
        if (l == null) {
            return;
        }
        if (l.length) {} else {
            l = [l];
        }
        for (var g = 0; g < l.length; g++) {
            l[g]["_check_function"] = h;
            var d = l[g].getAttribute("check");
            if (h != null) {
                if (d == null || d.Trim().length == 0) {
                    l[g].setAttribute("check", "__innercheckfn__");
                }
            } else {
                if (d == "__innercheckfn__") {
                    l[g].setAttribute("check", "");
                    l[g].removeAttribute("check");
                }
            }
            if (h != null) {
                h._cdomain = j;
            }
            l[g]["_chec_error_msg"] = null;
        }
        l = null;
    };
    LEAP.check.setTip = function(g, d) {
        if (g == null) {
            return;
        }
        if (typeof(g) == commfields.string) {
            g = LEAP.getElements(g);
        }
        if (g == null) {
            return;
        }
        if (g.length) {} else {
            g = [g];
        }
        if (d == null || d == "null") {
            d = "";
        }
        LEAP.setAttribute(g, "tip", d);
        g = null;
    };
    LEAP.check.setErrorMsg = function(j, g) {
        if (j == null) {
            return;
        }
        if (typeof(j) == commfields.string) {
            j = LEAP.getElements(j);
        }
        if (j == null) {
            return;
        }
        if (j.length) {} else {
            j = [j];
        }
        if (g == "") {
            g = null;
        }
        for (var h = 0; h < j.length; h++) {
            j[h]["_chec_error_msg"] = g;
            if (g != null) {
                LEAP.check.setStyle(j[h], LEAP.check.n);
                var l = j[h].getAttribute("ctid");
                if (l == null) {
                    l = UUID.cID();
                    j[h].setAttribute("ctid", l);
                }
            } else {
                var d = j[h].getAttribute("_rscolor_");
                if (d == null) {
                    d = LEAP.check.p;
                }
                LEAP.check.setStyle(j[h], d);
            }
        }
        j = null;
    };
    LEAP.check.validate = function(elements, autoshowerr) {
        if (elements == null) {
            return;
        }
        if (typeof(elements) == commfields.string) {
            elements = LEAP.getElements(elements);
        }
        if (elements == null) {
            return;
        }
        if (elements.length) {} else {
            elements = [elements];
        }
        var ret = null;
        var ll = elements.length;
        var groups = [];
        var mds = [];
        for (var j = 0; j < ll; j++) {
            var src = elements[j];
            var _hide = src.getAttribute("_hide");
            if (_hide == 1) {
                continue;
            }
            var ct = src.getAttribute(commfields.ct);
            if (src.getAttribute("_rscolor_") == null) {
                var rc = src.style.backgroundColor;
                if ("radio" == ct && (rc == null || rc == "")) {
                    src.setAttribute("_rscolor_", LEAP.check.i);
                } else {
                    if (rc == null || rc == "" || rc == LEAP.check.n || rc == LEAP.check.i || rc == LEAP.check.p) {
                        rc = "";
                    }
                    src.setAttribute("_rscolor_", rc);
                }
            }
            var md = src.getAttribute(commfields.md);
            var ctg = src.getAttribute(commfields.ctg);
            var group = null;
            var mdcn = src.getAttribute("mdcn");
            if (mdcn == null) {
                mdcn = "";
            }
            if (ct != null && md != null && ctg == "simplecheck") {
                if (mds.contains(md)) {
                    continue;
                } else {
                    mds.add(md);
                }
            }
            if (ct != null && (ct == "select" || "radio" == ct || ct == "areagroup")) {
                group = src.getAttribute("group");
                if (group != null) {
                    if (groups.contains(group)) {
                        continue;
                    } else {
                        groups.add(group);
                    }
                }
            }
            var _dc = src.getAttribute("_dynacheck");
            var def = src._check_def;
            var _fndef = src._check_function;
            if (def == null) {
                def = {};
                var c = src.getAttribute("check");
                if (c != null && c != "__innercheckfn__") {
                    try {
                        if (c != null) {
                            var tstart = c.indexOf("exp:");
                            if (c.indexOf("exp:") > -1) {
                                var tmp = c.substring(tstart + 4);
                                var tli = tmp.lastIndexOf(":");
                                if (tli == -1) {
                                    if (tmp[0] != "'" && tmp[0] != '"') {
                                        tmp = "'" + tmp + "'";
                                    }
                                    c = c.substring(0, tstart) + "exp:" + tmp;
                                } else {
                                    var tli2 = tmp.indexOf(",");
                                    if (tli2) {
                                        var tmp2 = tmp.substring(0, tli2);
                                        if (tmp2[0] != "'" && tmp2[0] != '"') {
                                            tmp2 = "'" + tmp2 + "'";
                                        }
                                        c = c.substring(0, tstart) + tmp.substring(tli2 + 1) + ",exp:" + tmp2;
                                    }
                                }
                            }
                            def.check = eval("({" + c + "})");
                            def.warn = src.getAttribute("warn");
                        }
                    } catch (err) {}
                    if (src.getAttribute("tip") != null) {
                        def.tip = src.getAttribute("tip");
                    }
                    src._check_def = def;
                }
            }
            if (_dc == "check") {
                if (def == null) {
                    def = {};
                }
                if (def.check == null) {
                    def.check = {};
                }
                def.check.notnull = true;
                src._check_def = def;
            } else {
                if (_dc == "uncheck") {
                    if (def && def.check) {
                        delete def.check.notnull;
                    }
                    src._check_def = def;
                }
            }
            if (def == null && _fndef == null) {
                continue;
            }
            if (def.check == null && _fndef == null) {
                continue;
            }
            if (def != null && def.check != null && def.check.maxlen != null) {
                if (src.maxLength != def.check.maxlen + "") {
                    src.maxLength = def.check.maxlen;
                }
            }
            if (def && def.check && def.check.exp != null && typeof(def.check.exp) == "string") {
                def.check.exp = new RegExp(def.check.exp);
            }
            var msg = "";
            if (msg == "" && def != null && def.check != null && def.check.checkfn != null) {
                var instance = src.getAttribute("instance");
                if (instance != null) {
                    var module = LEAP.getLoadedModule(instance);
                    if (module != null) {
                        var fn = module[def.check.checkfn];
                        if (fn != null) {
                            msg = fn.call(module, src);
                            if (msg == null) {
                                msg = "";
                            }
                            fn = null;
                        }
                        module = null;
                    }
                }
            }
            if (msg == "" && def != null && def.check != null && def.check.codelevel > 0 && group != null) {
                var deep = null;
                if (ct == "select" || ct == "areagroup") {
                    deep = LEAP.select.getValueLevel(src, null, true);
                } else {
                    if (ct == "radio") {
                        deep = LEAP.radio.getValueLevel(src);
                    }
                }
                if (deep == null) {
                    deep = 0;
                }
                if (def.check.codelevel > deep) {
                    if (md != null || (md == "area" || md == "areaid" || md == "qhareaid")) {
                        msg += "*区域级别不符合,必须选择到" + __als6[def.check.codelevel - 1] + "级别!";
                    } else {
                        if (!String.isEmpty(mdcn)) {
                            msg += mdcn + "级别不符合";
                        } else {
                            if (md != null) {
                                msg += md + "级别不符合";
                            } else {
                                msg += "联动级别不符合";
                            }
                        }
                    }
                }
            }
            var v = LEAP.getValue(src, null, true);
            if (v != null && v.msg) {
                msg = v.msg;
                v = null;
            }
            var l = 0;
            if (v != null && typeof(msg) == "string") {
                l = (v + "").length;
            }
            if (msg == "" && def != null && def.check != null && def.check.notnull == true) {
                if (l == 0 || String.isEmpty(v)) {
                    msg += "*[" + mdcn + "]填写内容不允许为空";
                }
            }
            if (msg == "" && def != null && def.check != null && l > 0) {
                if (def.check.maxlen != null && def.check.maxlen < l) {
                    if (msg != null) {
                        msg += "<br>";
                    }
                    msg += "*[" + mdcn + "]您填写的内容太长,系统允许填写的最大长度是" + def.check.maxlen + "字";
                }
                if (def.check.minlen != null && def.check.minlen > l) {
                    if (msg != null) {
                        msg += "<br>";
                    }
                    msg += "*[" + mdcn + "]您填写的内容太短,系统允许填写的最小长度是" + def.check.minlen + "字";
                }
                if ((def.check.isint == true || def.check.isnumber == true) && (def.check.maxnumber != null || def.check.minnumber != null)) {
                    if (def.check.maxnumber != null) {
                        var _v = v * 1;
                        if (_v > def.check.maxnumber) {
                            if (msg != null) {
                                msg += "<br>";
                            }
                            msg += "*[" + mdcn + "]超出最大值限制，最大值:" + def.check.maxnumber;
                        }
                    }
                    if (def.check.minnumber != null) {
                        var _v = v * 1;
                        if (_v < def.check.minnumber) {
                            if (msg != null) {
                                msg += "<br>";
                            }
                            msg += "*[" + mdcn + "]超出最小值限制，最小值:" + def.check.minnumber;
                        }
                    }
                }
                if (def.check.isint == true) {
                    if (isNaN(parseInt(v))) {
                        if (msg != null) {
                            msg += "<br>";
                        }
                        msg += "*[" + mdcn + "]非法整数";
                    } else {
                        for (var i = 0; i < l; i++) {
                            var _t = v.charAt(i);
                            if ((_t < "0" || _t > "9") && _t != "-") {
                                if (msg != null) {
                                    msg += "<br>";
                                }
                                msg += "*[" + mdcn + "]只允许填写数字";
                                break;
                            }
                        }
                    }
                }
                if (def.check.isnumber == true) {
                    for (var i = 0; i < l; i++) {
                        var _t = v.charAt(i);
                        var _err = false;
                        if ((_t < "0" || _t > "9") && _t != "." && _t != "-") {
                            if (msg != null) {
                                msg += "<br>";
                            }
                            msg += "*[" + mdcn + "]只允许填写数字";
                            _err = true;
                            break;
                        }
                    }
                    if (!_err && (def.check.precision != null || def.check.decimalplace != null) && v != "") {
                        if (isNaN(parseInt(v))) {
                            if (msg != null) {
                                msg += "<br>";
                            }
                            msg += "*[" + mdcn + "]非法数字";
                        } else {
                            if (def.check.precision < (parseInt(v) + "").length) {
                                if (msg != null) {
                                    msg += "<br>";
                                }
                                msg += "*[" + mdcn + "]整数位超出限制,整数位:" + def.check.precision;
                            }
                        }
                        if (def.check.decimalplace != null && v.indexOf(".") > -1 && def.check.decimalplace <= (v.length - v.indexOf(".") - 2)) {
                            if (msg != null) {
                                msg += "<br>";
                            }
                            msg += "*[" + mdcn + "]小数数位超出限制,小数位:" + def.check.decimalplace;
                        }
                    }
                }
                if (def.check.isen == true) {
                    for (var i = 0; i < l; i++) {
                        var _t = v.charAt(i);
                        if (_t < "A" || _t > "z") {
                            if (msg != null) {
                                msg += "<br>";
                            }
                            msg += "*[" + mdcn + "]只允许填写英文";
                            break;
                        }
                    }
                }
                if (def.check.enablecn == false) {
                    if (escape(v).indexOf("%u") >= 0) {
                        if (msg != null) {
                            msg += "<br>";
                        }
                        msg += "*[" + mdcn + "]不允许填写中文";
                    }
                }
                if (def.check.exp != null) {
                    if (!def.check.exp.exec(v)) {
                        if (msg != null) {
                            msg += "<br>";
                        }
                        if (def.check.warn != null) {
                            msg += "*" + def.check.warn;
                        } else {
                            msg += "*[" + mdcn + "]填写内容不符合规则";
                        }
                    }
                }
                if (def.check.isidcard == true) {
                    if (!LEAP._checkIdCard(v)) {
                        if (msg != null) {
                            msg += "<br>";
                        }
                        msg += "*[" + mdcn + "]错误的身份证号码";
                    }
                }
            }
            if (msg == "" && src._check_function != null) {
                var fn = src._check_function;
                var _msg = null;
                try {
                    var d = fn._cdomain;
                    if (d == null) {
                        d = this;
                    }
                    _msg = fn.call(d, src);
                } catch (err) {}
                if (_msg != null) {
                    if (msg != null) {
                        msg += "<br>";
                    }
                    msg += "*" + _msg;
                }
            }
            if (msg == "") {
                msg = null;
            }
            src.setAttribute("_chec_error_msg", msg);
            if (msg != null) {
                LEAP.check.setStyle(src, LEAP.check.n);
                if (ret == null) {
                    ret = [];
                }
                var id = src.getAttribute("ctid");
                if (id == null) {
                    id = UUID.cID();
                    src.setAttribute("ctid", id);
                }
                ret.add("[ctid=" + id + "]");
            } else {
                var color = src.getAttribute("_rscolor_");
                if (color == null) {
                    color = LEAP.check.p;
                }
                LEAP.check.setStyle(src, color);
            }
            src = def = null;
        }
        elements = null;
        if (ret != null) {
            try {
                return ret;
            } finally {
                if (autoshowerr != false) {
                    var msg = LEAP.getElement(ret[0]).getAttribute("_chec_error_msg");
                    var _focus = false;
                    if (window._messagetip == "1") {
                        if (window.confirm(msg.replace("*", "").replace("<br>", "") + "\n点击确定移动到错误位置!") == true) {
                            _focus = true;
                        }
                    } else {
                        LEAP.messagebox.alert(msg.replace("*", "").replace("<br>", ""), 2);
                        _focus = true;
                    }
                    if (_focus) {
                        try {
                            LEAP.getElement(ret[0]).focus();
                        } catch (err) {}
                    }
                }
                ret = null;
            }
        }
    };
    LEAP.check.clearValidate = function(g) {
        if (g == null) {
            return;
        }
        if (typeof(g) == commfields.string) {
            g = LEAP.getElements(g);
        }
        if (g == null) {
            return;
        }
        if (g.length) {} else {
            g = [g];
        }
        var d = LEAP.getElement("[ct=tip]");
        if (d != null) {
            d.display = "none";
        }
        LEAP.check.setStyle(g, "", true);
        g = null;
    };
    LEAP.check.hideTip = function() {
        var d = LEAP.getElement("[ct=tip]");
        d.last = null;
        d.style.display = "none";
        d = null;
    };
    LEAP.check.setStyle = function(n, j, m) {
        if (m == null) {
            m = n instanceof Array;
        }
        if (m == true) {
            var d = n.length;
            for (var h = 0; h < d; h++) {
                var o = n[h];
                if (o.getAttribute("ct") == "select") {
                    var g = LEAP.getElement("[ctf=selectbtn]", o);
                    if (g && g.style.backgroundColor != j) {
                        g.style.backgroundColor = j;
                    }
                    g = null;
                } else {
                    if (o.style.backgroundColor != j) {
                        o.style.backgroundColor = j;
                    }
                }
                if (j == "") {
                    o._chec_error_msg = null;
                }
                o = null;
            }
        } else {
            var o = n;
            if (o.getAttribute("ct") == "select") {
                var g = LEAP.getElement("[ctf=selectbtn]", o);
                if (g && g.style.backgroundColor != j) {
                    g.style.backgroundColor = j;
                }
                g = null;
            } else {
                if (o.style.backgroundColor != j) {
                    o.style.backgroundColor = j;
                }
            }
            if (j == "") {
                o._chec_error_msg = null;
            }
            o = null;
        }
        n = j = null;
    };
    LEAP.check.init = function() {
        if (document != null && document.body != null) {
            LEAP.check._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.check._init);
        }
    }();
    LEAP.radio = {};
    LEAP.radio.d = "radio";
    LEAP.radio.init = function() {
        if (document != null && document.body != null) {
            LEAP.radio._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.radio._init);
        }
        ElementEventManager.addManagedEventType(LEAP.radio.d, "valueChange");
        ElementEventManager.addManagedEventType(LEAP.radio.d, "clickItem");
    };
    LEAP.radio._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.radio.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keydown", LEAP.radio.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.radio._init);
    };
    LEAP.radio.uiProcess = function(n) {
        var p = null;
        var g = null;
        var d = null;
        var o = null;
        var r = null;
        var j = null;
        try {
            p = n.e.srcElement;
            if (null == p) {
                return;
            }
            g = n.e.type;
            if (null == g) {
                return;
            }
            var d = LEAP._match(p, LEAP.radio.d);
            var h = null;
            if (g == "keydown" && (p.tagName == "INPUT" || d != null || ((h = p.getAttribute("ct")) != null && h.indexOf("upload_control_") == 0))) {
                if (d != null && d.getAttribute("readonly") == "1") {
                    return;
                }
                var C = -1;
                if (LEAP.isIE) {
                    C = n.e.keyCode;
                } else {
                    C = n.e.which;
                }
                if (C == 9 && LEAPBrowser.isIE) {
                    var z = "input:visible,div[ct=radio]:visible";
                    if (h != null) {
                        z += ",[ct=" + h + "]:visible";
                    }
                    var y = LEAP.getElements(z);
                    if (y != null) {
                        var B = y.length;
                        for (var D = 0; D < B; D++) {
                            if ((y[D] == p || y[D] == d) && D != B - 1) {
                                if (y[D + 1].tagName == "INPUT") {
                                    break;
                                } else {
                                    var x = y[D + 1];
                                    try {
                                        if (x != null && x.getAttribute("readonly") == "1") {
                                            return;
                                        }
                                        if (LEAP.radio.getValue(x) == null) {
                                            LEAP.radio.setValue(x, LEAP.getElement("label[ctf=radio_label]:first", x).getAttribute("value"));
                                        }
                                        var F = LEAP.ctid(x);
                                        LEAP.asyn(function(l) {
                                            this.id = l;
                                            LEAP.getElement("[ctid=" + this.id + "]").focus();
                                        }, window, 50, F);
                                    } catch (m) {
                                        continue;
                                    }
                                    LEAP.stopEvent(n.e);
                                    x = null;
                                    break;
                                }
                            }
                        }
                        y = null;
                    }
                }
                if (d != null) {
                    if (C == 37 || C == 38) {
                        var q = LEAP.getElements("label[ctf=radio_label]", d);
                        if (q != null) {
                            var A = LEAP.radio.getValue(d);
                            var B = q.length;
                            if (A == null) {
                                var w = q[0].getAttribute("value");
                                LEAP.radio.setValue(d, w);
                                ElementEventManager.handleEvent(d, "valueChange", {
                                    radio: d,
                                    newvalue: w,
                                    oldvalue: A,
                                    src: d,
                                    pv: A,
                                    lv: w
                                });
                            } else {
                                if (A == q[0].getAttribute("value")) {
                                    var w = q[B - 1].getAttribute("value");
                                    LEAP.radio.setValue(d, w);
                                    ElementEventManager.handleEvent(d, "valueChange", {
                                        radio: d,
                                        newvalue: w,
                                        oldvalue: A,
                                        src: d,
                                        pv: A,
                                        lv: w
                                    });
                                } else {
                                    for (var D = 0; D < B; D++) {
                                        var w = q[D].getAttribute("value");
                                        if (w == A && D != 0) {
                                            LEAP.radio.setValue(d, q[D - 1].getAttribute("value"));
                                            ElementEventManager.handleEvent(d, "valueChange", {
                                                radio: d,
                                                newvalue: w,
                                                oldvalue: A,
                                                src: d,
                                                pv: A,
                                                lv: w
                                            });
                                        }
                                    }
                                }
                            }
                        }
                        d.focus();
                        LEAP.stopEvent(n.e);
                    } else {
                        if (C == 39 || C == 40) {
                            var q = LEAP.getElements("label[ctf=radio_label]", d);
                            if (q != null) {
                                var A = LEAP.radio.getValue(d);
                                var B = q.length;
                                if (A == null) {
                                    var w = q[0].getAttribute("value");
                                    LEAP.radio.setValue(d, q[0].getAttribute("value"));
                                    ElementEventManager.handleEvent(d, "valueChange", {
                                        radio: d,
                                        newvalue: w,
                                        oldvalue: A,
                                        src: d,
                                        pv: A,
                                        lv: w
                                    });
                                } else {
                                    if (A == q[B - 1].getAttribute("value")) {
                                        var w = q[0].getAttribute("value");
                                        LEAP.radio.setValue(d, w);
                                        ElementEventManager.handleEvent(d, "valueChange", {
                                            radio: d,
                                            newvalue: w,
                                            oldvalue: A,
                                            src: d,
                                            pv: A,
                                            lv: w
                                        });
                                    } else {
                                        for (var D = 0; D < B; D++) {
                                            var w = q[D].getAttribute("value");
                                            if (w == A && D != B - 1) {
                                                LEAP.radio.setValue(d, q[D + 1].getAttribute("value"));
                                                ElementEventManager.handleEvent(d, "valueChange", {
                                                    radio: d,
                                                    newvalue: w,
                                                    oldvalue: A,
                                                    src: d,
                                                    pv: A,
                                                    lv: w
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                            d.focus();
                            LEAP.stopEvent(n.e);
                        }
                    }
                }
            }
            if ("radio_label" != p.getAttribute("ctf")) {
                return;
            }
            d = LEAP._match(p, LEAP.radio.d);
            if (null == d) {
                return;
            }
            if ("1" == d.getAttribute("readonly")) {
                return;
            }
            o = d.getAttribute("ccancel");
            if (null == o || "" == o) {
                o = "y";
            }
            if ("click" == g) {
                if ("radio_disabled" == p.className) {
                    return;
                }
                var u = d.getAttribute("group");
                if (u == null || u.Trim() == "") {
                    o = o.Trim().toLowerCase();
                    if ("y" == o || "yes" == o) {
                        r = LEAP.radio.getValue(d);
                        if ("radio_checked" == p.className) {
                            LEAP.radio.clean(d);
                        } else {
                            LEAP.radio.clean(d);
                            p.className = "radio_checked";
                        }
                        j = LEAP.radio.getValue(d);
                        ElementEventManager.handleEvent(d, "valueChange", {
                            radio: d,
                            newvalue: j,
                            oldvalue: r,
                            src: d,
                            pv: r,
                            lv: j
                        });
                    } else {
                        if ("radio_unchecked" == p.className) {
                            r = LEAP.radio.getValue(d);
                            LEAP.radio.clean(d);
                            p.className = "radio_checked";
                            j = LEAP.radio.getValue(d);
                            ElementEventManager.handleEvent(d, "valueChange", {
                                radio: d,
                                newvalue: j,
                                oldvalue: r,
                                src: d,
                                pv: r,
                                lv: j
                            });
                        }
                    }
                } else {
                    o = o.Trim().toLowerCase();
                    if ("y" == o || "yes" == o) {
                        if ("radio_checked" == p.className) {
                            return;
                        }
                    }
                    LEAP.radio._setGroupItems(d, p);
                }
                ElementEventManager.handleEvent(d, "clickItem", {
                    item: p
                });
            }
        } finally {
            j = r = o = d = p = n = g = null;
        }
    };
    LEAP.radio._setGroupItems = function(m, d) {
        if (m == null) {
            return;
        }
        var w = m.getAttribute("size");
        var q = m.getAttribute("group");
        var h = LEAP.radio.getValue(m);
        var j = null;
        if (q != null && q.Trim() != "") {
            var r = m.getAttribute("deep");
            if (r == null || r.Trim() == "") {
                return;
            }
            r = LEAP.parsenum(r);
            if (r == null) {
                return;
            }
            var u = m.getAttribute("instance");
            var p = "";
            if (u != null && u.Trim() != null) {
                p = "[instance='" + u + "']";
            }
            var o = "div[ct=radio][deep][group=" + q + "]";
            if (r > 0) {
                for (var l = 1; l <= r; l++) {
                    o += "[deep!=" + l + "]";
                }
            }
            if ("radio_checked" == d.className) {
                LEAP.radio.clean(m);
            } else {
                LEAP.radio.clean(m);
                d.className = "radio_checked";
            }
            var n = LEAP.getElements(o + p);
            if (n != null) {
                for (var l = 0; l < n.length; l++) {
                    LEAP.radio.removeItems(n[l]);
                }
                j = LEAP.radio.getValue(m);
                if (j != null && j.Trim() != "") {
                    var g = n[0].getAttribute("code");
                    var v = LEAP.getCodeValue(g, LEAP.select._sub(w, j));
                    if (v != null) {
                        for (var l = 0; l < v.length; l++) {
                            LEAP.radio.addItem(n[0], v[l].codevalue, v[l].codeid, false);
                        }
                    }
                }
            } else {
                j = LEAP.radio.getValue(m);
            }
            ElementEventManager.handleEvent(m, "valueChange", {
                radio: m,
                newvalue: j,
                oldvalue: h,
                src: m,
                pv: h,
                lv: j
            });
        }
    };
    LEAP.radio.getNameByValue = function(h, j) {
        var d = null;
        var g = null;
        try {
            h = LEAP._check(h, LEAP.radio.d);
            if (null == h) {
                return null;
            }
            d = LEAP.getElements("[ctf=radio_label]", h);
            if (null == d) {
                return null;
            }
            for (g = 0; g < d.length; g++) {
                if (d[g].getAttribute("value").Trim() == j) {
                    return (LEAP.isIE ? d[g].innerText : d[g].textContent);
                }
            }
            return null;
        } finally {
            g = h = null;
        }
    };
    LEAP.radio.getCheckedItem = function(h) {
        var d = null;
        var g = null;
        var j = null;
        try {
            h = LEAP._check(h, LEAP.radio.d);
            if (null == h) {
                return null;
            }
            d = LEAP.getElements("[ctf=radio_label]", h);
            if (null == d) {
                return null;
            }
            j = new hashtable();
            for (g = 0; g < d.length; g++) {
                if ("radio_checked" == d[g].className) {
                    j.add(d[g].getAttribute("value").Trim(), (LEAP.isIE ? d[g].innerText : d[g].textContent));
                }
            }
            return j.count > 0 ? j : null;
        } finally {
            j = g = h = null;
        }
    };
    LEAP.radio.getValueLevel = function(j) {
        var r = null;
        var q = "";
        try {
            j = LEAP._check(j, LEAP.radio.d);
            if (null == j) {
                return null;
            }
            var g = j;
            var x = j.getAttribute("group");
            var z = null;
            var o = LEAP.getElements("[class=radio_checked]", g) != null;
            if (x != null && x.Trim() != "") {
                var y = j.getAttribute("deep");
                z = j.getAttribute("size");
                if (z == null || z.toString().Trim() == "") {
                    return;
                }
                z = LEAP.parsenum(z);
                if (y == null || y.toString().Trim() == "") {
                    return;
                }
                y = LEAP.parsenum(y);
                if (y == null) {
                    return;
                }
                var n = j.getAttribute("count");
                if (n != null && n.trim().length > 0) {
                    n = LEAP.parsenum(n);
                } else {
                    n = z;
                }
                var w = j.getAttribute("instance");
                var v = "div[ct=radio][group=" + x + "]";
                v += "[deep!=" + y + "]";
                if (w != null && w.Trim() != null) {
                    v += "[instance='" + w + "']";
                }
                var p = LEAP.getElements(v);
                if (p != null) {
                    for (var h = 0; h < p.length; h++) {
                        var l = p[h].getAttribute("deep");
                        var u = p[h].getAttribute("size");
                        if (u == null || u.toString().Trim() == "") {
                            continue;
                        }
                        u = LEAP.parsenum(u);
                        if (u > z) {
                            z = u;
                        }
                        if (l == null || l.toString().Trim() == "") {
                            continue;
                        }
                        l = LEAP.parsenum(l);
                        if (l == null) {
                            continue;
                        }
                        if (l > y) {
                            var d = LEAP.getElements("[ctf=radio_label]", p[h]);
                            if (d == null || d.length == 0) {
                                continue;
                            }
                            if (LEAP.getElements("[class=radio_checked]", p[h])) {
                                g = p[h];
                                y = l;
                            }
                        } else {
                            if (!o) {
                                g = p[h];
                                y = l;
                            }
                        }
                    }
                }
            } else {
                return null;
            }
            if (g == null) {
                return null;
            }
            return g.getAttribute("deep");
        } finally {
            q = j = r = g = z = x = y = l = u = null;
        }
    };
    LEAP.radio.getValue = function(g) {
        var u = null;
        var h = "";
        try {
            g = LEAP._check(g, LEAP.radio.d);
            if (null == g) {
                return null;
            }
            var d = g;
            var o = g.getAttribute("group");
            var r = null;
            var z = LEAP.getElements("[class=radio_checked]", d) != null;
            if (o != null && o.Trim() != "") {
                var y = g.getAttribute("deep");
                r = g.getAttribute("size");
                if (r == null || r.toString().Trim() == "") {
                    return;
                }
                r = LEAP.parsenum(r);
                if (y == null || y.toString().Trim() == "") {
                    return;
                }
                y = LEAP.parsenum(y);
                if (y == null) {
                    return;
                }
                var n = g.getAttribute("count");
                if (n != null && n.trim().length > 0) {
                    n = LEAP.parsenum(n);
                } else {
                    n = r;
                }
                var C = g.getAttribute("instance");
                var l = "div[ct=radio][group=" + o + "]";
                l += "[deep!=" + y + "]";
                if (C != null && C.Trim() != null) {
                    l += "[instance='" + C + "']";
                }
                var j = LEAP.getElements(l);
                if (j != null) {
                    for (var w = 0; w < j.length; w++) {
                        var v = j[w].getAttribute("deep");
                        var p = j[w].getAttribute("size");
                        if (p == null || p.toString().Trim() == "") {
                            continue;
                        }
                        p = LEAP.parsenum(p);
                        if (p > r) {
                            r = p;
                        }
                        if (v == null || v.toString().Trim() == "") {
                            continue;
                        }
                        v = LEAP.parsenum(v);
                        if (v == null) {
                            continue;
                        }
                        if (v > y) {
                            var q = LEAP.getElements("[ctf=radio_label]", j[w]);
                            if (q == null || q.length == 0) {
                                continue;
                            }
                            if (LEAP.getElements("[class=radio_checked]", j[w])) {
                                d = j[w];
                                y = v;
                            }
                        } else {
                            if (!z) {
                                d = j[w];
                                y = v;
                            }
                        }
                    }
                }
            }
            u = LEAP.getElements("[ctf=radio_label]", d);
            if (null == u) {
                return null;
            }
            for (var A = 0; A < u.length; A++) {
                if ("radio_checked" == u[A].className) {
                    h = u[A].getAttribute("value").Trim();
                    if (n != null) {
                        if (h.length < n) {
                            var B = n - h.length;
                            for (var x = 0; x < B; x++) {
                                h = h + "0";
                            }
                        }
                    }
                    break;
                }
            }
            A = null;
            return ("" == h) ? null : h;
        } finally {
            h = g = u = d = r = o = y = v = p = null;
        }
    };
    LEAP.radio._setGroupValue = function(h, x, D, w, o) {
        var M = h.getAttribute("deep");
        var z = h.getAttribute("size");
        var d = h.getAttribute("code");
        if (M == null || M.Trim() == "") {
            return;
        }
        M = LEAP.parsenum(M);
        if (M == null) {
            return;
        }
        if (z == null || z.Trim() == "") {
            return;
        }
        z = LEAP.parsenum(z);
        if (z == null) {
            return;
        }
        var S = h.getAttribute("instance");
        var O = "";
        if (S != null && S.Trim() != null) {
            O = "[instance='" + S + "']";
        }
        var r = "div[ct=radio][deep][group=" + x + "]";
        var q = LEAP.getElements(r + O);
        if (q != null) {
            var H = q.length;
            for (var F = 1; F < H; F++) {
                for (var C = 0; C < F; C++) {
                    var Q = q[F];
                    var R = Q.getAttribute("deep");
                    if (R == null || R.Trim() == "") {
                        continue;
                    }
                    var T = q[C];
                    var B = T.getAttribute("deep");
                    if (B == null || B.Trim() == "") {
                        continue;
                    }
                    R = LEAP.parsenum(R);
                    B = LEAP.parsenum(B);
                    if (R < B) {
                        q[F] = T;
                        q[C] = Q;
                    }
                }
            }
            var p = 0;
            for (var L = 0; L < H; L++) {
                var G = q[L];
                if (L > 0) {
                    LEAP.radio.removeItems(G);
                }
                var v = G.getAttribute("deep");
                var A = G.getAttribute("code");
                var p = G.getAttribute("size");
                if (v == null || v.Trim() == "") {
                    continue;
                }
                if (p == null || p.Trim() == "") {
                    continue;
                }
                v = LEAP.parsenum(v);
                p = LEAP.parsenum(p);
                if (D == null || D.trim().length == 0 || D.length < p) {
                    if (D == null || D.trim().length == 0) {
                        D = "";
                    }
                    var N = p - D.length;
                    for (var J = 0; J < N; J++) {
                        D = D + "0";
                    }
                }
                var u = p - p / v;
                var y = D.substring(0, p);
                var I = null;
                if (u == 0) {
                    I = LEAP.getCodeValue(A);
                } else {
                    I = LEAP.getCodeValue(A, LEAP.select._sub(u, D));
                }
                if (I != null) {
                    if (L > 0) {
                        for (var K = 0; K < I.length; K++) {
                            LEAP.radio.addItem(q[L], I[K].codevalue, I[K].codeid, false);
                        }
                    }
                    var g = LEAP.getElement("[ctf=radio_label][value=" + y + "]", q[L]);
                    if (g) {
                        g.className = "radio_checked";
                        g.setAttribute("ischecked", true);
                    }
                }
                if (o) {
                    var P = G[ElementEventManager.e];
                    if (P != null && P.contains("valueChange")) {
                        ElementEventManager.handleEvent(G, "valueChange", {
                            newvalue: D,
                            oldvalue: w,
                            src: G,
                            pv: w,
                            lv: D
                        });
                    }
                }
            }
        }
    };
    LEAP.radio.setValue = function(l, n, h) {
        if (h == null) {
            h = true;
        }
        var d = null;
        try {
            l = LEAP._check(l, LEAP.radio.d);
            if (null == l) {
                return;
            }
            if (n != null) {
                n = n.toString();
            }
            var p = LEAP.radio.getValue(l);
            LEAP.radio.clean(l);
            var m = l.getAttribute("count");
            if (!String.isEmpty(n) && m != null && n.length < m) {
                while (n.length < m) {
                    n = "0" + n;
                }
            }
            var o = l.getAttribute("group");
            if (o != null && o.trim().length > 0) {
                LEAP.radio._setGroupValue(l, o, n, p, h);
            } else {
                d = LEAP.getElements("[ctf=radio_label]", l);
                if (null == d) {
                    return;
                }
                for (var g = 0; g < d.length; g++) {
                    if (d[g].getAttribute("value").Trim() == n) {
                        if (n == null) {
                            if (d[g].className == "radio_disabled") {
                                d[g].className = "radio_disabled";
                            }
                        } else {
                            if ("radio_disabled" == d[g].className) {
                                continue;
                            }
                            d[g].className = "radio_checked";
                            d[g].setAttribute("ischecked", true);
                            if (h) {
                                ElementEventManager.handleEvent(l, "valueChange", {
                                    radio: l,
                                    newvalue: d[g].getAttribute("value"),
                                    src: l,
                                    pv: null,
                                    lv: d[g].getAttribute("value")
                                });
                            }
                            break;
                        }
                    }
                }
                g = null;
            }
        } finally {
            l = n = d = null;
        }
    };
    LEAP.radio.setValueByText = function(h, l) {
        var d = null;
        try {
            h = LEAP._check(h, LEAP.radio.d);
            if (null == h) {
                return;
            }
            LEAP.radio.clean(h);
            if (l == null) {
                return;
            }
            l = l.toString();
            d = LEAP.getElements("[ctf=radio_label]", h);
            if (null == d) {
                return;
            }
            for (var g = 0; g < d.length; g++) {
                if (d[g].innerText.Trim() == l) {
                    if ("radio_disabled" == d[g].className) {
                        continue;
                    }
                    d[g].className = "radio_checked";
                    d[g].setAttribute("ischecked", true);
                    ElementEventManager.handleEvent(h, "valueChange", {
                        radio: h,
                        newvalue: d[g].getAttribute("value"),
                        caller: h,
                        pv: null,
                        lv: d[g].getAttribute("value")
                    });
                    break;
                }
            }
            g = null;
        } finally {
            h = l = d = null;
        }
    };
    LEAP.radio.clean = function(h) {
        var d = null;
        try {
            h = LEAP._check(h, LEAP.radio.d);
            if (null == h) {
                return;
            }
            d = LEAP.getElements("[ctf=radio_label]", h);
            if (null == d) {
                return;
            }
            for (var g = 0; g < d.length; g++) {
                if ("radio_disabled" == d[g].className) {
                    continue;
                }
                d[g].className = "radio_unchecked";
                d[g].setAttribute("ischecked", false);
            }
            g = null;
        } finally {
            h = d = null;
        }
    };
    LEAP.radio.addItem = function(j, h, n, m) {
        var o = null;
        var g = null;
        try {
            j = LEAP._check(j, LEAP.radio.d);
            if (null == j) {
                return;
            }
            if (null == h || "" == h) {
                h = "&nbsp;";
            }
            o = document.createElement("div");
            j.appendChild(o);
            o.className = "radio_div";
            o.setAttribute("ctf", "radio_item");
            g = document.createElement("label");
            o.appendChild(g);
            g.setAttribute("ctf", "radio_label");
            g.innerHTML = h;
            g.setAttribute("value", n);
            if (null == m) {
                m = false;
            }
            if ("boolean" == typeof(m)) {
                if (m) {
                    LEAP.radio.setValue(j, n);
                } else {
                    g.className = "radio_unchecked";
                }
            } else {
                g.className = "radio_disabled";
            }
        } finally {
            o = g = j = h = n = m = null;
        }
    };
    LEAP.radio.removeItems = function(j, g, l) {
        var d = null;
        try {
            j = LEAP._check(j, LEAP.radio.d);
            if (null == j) {
                return;
            }
            d = LEAP.getElements("[ctf=radio_label]", j);
            if (null == d) {
                return;
            }
            if (null != g && null != l) {
                for (var h = 0; h < d.length; h++) {
                    if (d[h].getAttribute("value") == l && d[h].innerHTML == g) {
                        j.removeChild(d[h].parentNode);
                    }
                }
                h = null;
            } else {
                if (null != g) {
                    for (var h = 0; h < d.length; h++) {
                        if (d[h].innerHTML == g) {
                            j.removeChild(d[h].parentNode);
                        }
                    }
                    h = null;
                } else {
                    if (null != l) {
                        for (var h = 0; h < d.length; h++) {
                            if (d[h].getAttribute("value") == l) {
                                j.removeChild(d[h].parentNode);
                            }
                        }
                        h = null;
                    } else {
                        for (var h = 0; h < d.length; h++) {
                            j.removeChild(d[h].parentNode);
                        }
                        h = null;
                    }
                }
            }
        } finally {
            d = j = g = l = null;
        }
    };
    LEAP.radio.setDisabled = function(j, m, g, l) {
        var d = null;
        try {
            j = LEAP._check(j, LEAP.radio.d);
            if (null == j) {
                return;
            }
            if ("boolean" != typeof(m)) {
                return;
            }
            d = LEAP.getElements("[ctf=radio_label]", j);
            if (null == d) {
                return;
            }
            if (null != g && null != l) {
                for (var h = 0; h < d.length; h++) {
                    if (d[h].getAttribute("value") == l && d[h].innerHTML == g) {
                        if (m) {
                            d[h].className = "radio_disabled";
                        } else {
                            d[h].className = "radio_unchecked";
                        }
                    }
                }
                h = null;
            } else {
                if (null != g) {
                    for (var h = 0; h < d.length; h++) {
                        if (d[h].innerHTML == g) {
                            if (m) {
                                d[h].className = "radio_disabled";
                            } else {
                                d[h].className = "radio_unchecked";
                            }
                        }
                    }
                    h = null;
                } else {
                    if (null != l) {
                        for (var h = 0; h < d.length; h++) {
                            if (d[h].getAttribute("value") == l) {
                                if (m) {
                                    d[h].className = "radio_disabled";
                                } else {
                                    d[h].className = "radio_unchecked";
                                }
                            }
                        }
                        h = null;
                    }
                }
            }
        } finally {
            d = j = g = l = null;
        }
    };
    LEAP.radio.setReadOnly = function(d, g) {
        try {
            d = LEAP._check(d, LEAP.radio.d);
            if (null == d) {
                return;
            }
            if (g) {
                d.setAttribute("readonly", "1");
            } else {
                d.setAttribute("readonly", "0");
            }
        } finally {
            d = g = null;
        }
    };
    LEAP.radio.init();
    LEAP.table = {};
    LEAP.table.d = "table";
    LEAP.table.a = "_headers";
    LEAP.table.b = "_lastRowIndex";
    LEAP.table.m = "_searchMethod";
    LEAP.table.md = LEAP.table.m + "d";
    LEAP.table.p = "pageSize";
    LEAP.table.maxContentLength = 150;
    LEAP.table.maxShowSize = 200;
    LEAP.table.z = '<input idx="@idx" type="checkbox" datatype=@datatype cntext="@cntext" checked ctf="table_props_chk_md" name="checkbox" md="@md" code="@code" id="checkbox" >@text<br>';
    LEAP.table.t = null;
    LEAP.table.s = null;
    LEAP.table.selectedColor = "#f8fec7";
    LEAP.table.scolor = "#FFFFFF";
    LEAP.table.spcolor = "#f8f8f8";
    LEAP.table.movecolor = "#f8fec7";
    LEAP.table.movecolor1 = "#eaf4fc";
    LEAP.table.lasteditcontroltype = null;
    LEAP.table.lasteditcontrolid = null;
    LEAP.table.modifyflag = '<label style="position:absolute;left:0px;top:0px;color:red;">*</label>';
    LEAP.table.nodeopen = "<label ctf=table_node_open class=table_node_open></label>";
    LEAP.table.nodeclose = "<label ctf=table_node_close class=table_node_close></label>";
    LEAP.table.pageli = '<li ctf="@ctf"><a href="javascript:" ctf="@c1" ctfe="@ctfe" utf="@utf">@sy</a></li>';
    LEAP.table._tempDiv = null;
    LEAP.table._moveDiv = null;
    LEAP.table.table_page_body = null;
    LEAP.table.table_page_size_body = null;
    LEAP.table.defaultSortMode = "server";
    LEAP.table.init = function() {
        if (document != null && document.body != null) {
            LEAP.table._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.table._init);
        }
        ElementEventManager.addManagedEventType(LEAP.table.d, "dataLoaded");
        ElementEventManager.addManagedEventType(LEAP.table.d, "selectedIndexChange");
        ElementEventManager.addManagedEventType(LEAP.table.d, "rowOperationClick");
        ElementEventManager.addManagedEventType(LEAP.table.d, "doubleClick");
        ElementEventManager.addManagedEventType(LEAP.table.d, "cellClick");
        ElementEventManager.addManagedEventType(LEAP.table.d, "headerClick");
        ElementEventManager.addManagedEventType(LEAP.table.d, "cellValueChanged");
        ElementEventManager.addManagedEventType(LEAP.table.d, "chkClick");
        ElementEventManager.addManagedEventType(LEAP.table.d, "tableMenuClick");
    };
    LEAP.table._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.table.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "mousedown", LEAP.table.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "mouseup", LEAP.table.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keydown", LEAP.table.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "dblclick", LEAP.table.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.table._init);
        if (LEAP.table._tempDiv == null) {
            LEAP.table._tempDiv = document.createElement("div");
            LEAP.setStyle(LEAP.table._tempDiv, {
                display: "none",
                width: "0px",
                height: "0px"
            });
            document.body.appendChild(LEAP.table._tempDiv);
        }
        if (LEAP.table._moveDiv == null) {
            LEAP.table._moveDiv = document.createElement("div");
            LEAP.setStyle(LEAP.table._moveDiv, {
                display: "none",
                width: "4px",
                height: "30px",
                position: "absolute",
                zIndex: 99999,
                background: "red"
            });
            document.body.appendChild(LEAP.table._moveDiv);
        }
    };
    LEAP.table._crid = function() {
        if (LEAP.table._rid != null) {
            var d = LEAP.getElement("#" + LEAP.table._rid);
            if (d != null) {
                d._resize = false;
                LEAP.table._rid = null;
                d = null;
            }
        }
    };
    LEAP.table._hideMoveDiv = function() {
        LEAP.table._moveDiv.def = null;
        LEAP.setStyle(LEAP.table._moveDiv, {
            display: "none"
        });
    };
    LEAP.table.buildQueryExt = function() {
        if (this._orderExp != null) {
            if (this.innerBuildQuery != null) {
                var g = this.innerBuildQuery();
                if (g != null) {
                    if (LEAP.isArray(g)) {
                        var d = g[0].order;
                        if (d == null) {
                            g[0].setOrder(this._orderExp);
                        } else {
                            g[0].setOrder(this._orderExp + " , " + d);
                        }
                    } else {
                        var d = g.order;
                        if (d == null) {
                            g.setOrder(this._orderExp);
                        } else {
                            g.setOrder(this._orderExp + " , " + d);
                        }
                    }
                    return g;
                }
            }
        } else {
            if (this.innerBuildQuery != null) {
                return this.innerBuildQuery();
            }
        }
    };
    LEAP.table.menuItemStr = '<li issys=@issys ctf=table_menuitem flag=@flag class="lg2menu_item"><a ctf=table_menuitem flag=@flag href="javascript:">@text</a></li>';
    LEAP.table.showMenu = function(j, r, n, q, o) {
        if (n && n.length > 0) {
            if (LEAP.table.menu == null) {
                var d = LEAP.table.menu = document.createElement("UL");
                d.className = "lg2menu_ul";
                LEAP.addEvent(d, "mouseleave ", LEAP.table.hideMenu, null, null, true);
                document.body.appendChild(d);
                d = null;
            }
            LEAP.table.menu.style.width = "146px";
            LEAP.table.menu.innerHTML = "";
            LEAP.table.menu.style.left = q - 10 + "px";
            LEAP.table.menu.style.top = o - 10 + "px";
            LEAP.table.menu.setAttribute("elementFind", j);
            LEAP.table.menu.setAttribute("TDFind", r);
            var g = n.length;
            var m = new StringBuffer();
            for (var h = 0; h < g; h++) {
                var v = n[h];
                var p = 0;
                if (v.issys != null) {
                    p = v.issys;
                }
                var u = LEAP.table.menuItemStr.replaceall("@flag", v.flag).replace("@text", v.text).replace("@issys", p);
                m.append(u);
            }
            LEAP.table.menu.innerHTML = m.toString();
            LEAP.table.menu.style.display = "block";
        }
    };
    LEAP.table.hideMenu = function() {
        if (LEAP.table.menu != null && LEAP.table.menu.style.display != "none") {
            LEAP.table.menu.style.display = "none";
        }
    };
    LEAP.table.uiProcess = function(arg) {
        if (arg == null) {
            return;
        }
        var src = arg.e.srcElement;
        if (src == null) {
            return;
        }
        var type = arg.e.type;
        if (type == null) {
            return;
        }
        var tag = src.tagName;
        if (tag == null) {
            return;
        }
        var ctf = src.getAttribute(commfields.ctf);
        if (ctf != "table_page_num" && ctf != "table_page_numsyrow_a") {
            var table_page_body = LEAP.table.table_page_body;
            if (table_page_body) {
                LEAP.setStyle(table_page_body, {
                    display: "none"
                });
            }
        }
        if (ctf != "table_page_size" && ctf != "table_page_size_numsyrow_a" && ctf != "table_page_pagesize" && ctf != "table_page_size_go" && ctf != "table_export_curPage") {
            var table_page_size_body = LEAP.table.table_page_size_body;
            if (table_page_size_body) {
                LEAP.setStyle(table_page_size_body, {
                    display: "none"
                });
            }
        }
        if (type == "click" && ctf == "table_copybtn" && LEAP.table.cr != null && LEAP.table.cf != null) {
            var hasfield = LEAP.getElement("input[ctf=table_copyhasfield]", "div" + LEAP.table.cf);
            var ret = new Object();
            if (hasfield.value == 1 || hasfield.value == true || hasfield.value == "on") {
                var fields = LEAP.table.cr[0];
                LEAP.table.cr.removeindex(0);
                ret.result = LEAP.table.cr;
                var l = fields.length;
                ret.metaData = [];
                for (var i = 0; i < l; i++) {
                    var f = fields[i];
                    var md = new Object();
                    md.name = f;
                    ret.metaData.add(md);
                }
            } else {
                ret.result = LEAP.table.cr;
            }
            ret.size = ret.count = ret.result.length;
            if (LEAP.table.cfun != null) {
                LEAP.table.cfun(ret);
            }
            ret = null;
            LEAP.table.cfun = null;
            LEAP.table.cr = null;
            LEAP.form.hide(LEAP.table.cf);
        }
        if (type == "keydown") {
            var k = null;
            if (LEAP.isIE) {
                k = arg.e.keyCode;
            } else {
                k = arg.e.which;
            }
            if ((k == 38 || k == 40) && ((ctf != null && ctf.indexOf("table_") == 0) || src.tagName == "TABLE")) {
                var element = LEAP._match(src, LEAP.table.d);
                if (element != null) {
                    if (k == 40) {
                        LEAP.table.setSelectedIndex(element, LEAP.table.getSelectedIndex(element) + 1);
                    }
                    if (k == 38) {
                        if (element[LEAP.table.b] == null) {
                            var rows = LEAP.getElements("tr[ctf=table_row]", element);
                            if (rows != null) {
                                LEAP.table.setSelectedIndex(element, rows.length - 1);
                            }
                            rows = null;
                        } else {
                            LEAP.table.setSelectedIndex(element, LEAP.table.getSelectedIndex(element) - 1);
                        }
                    }
                    LEAP.stopEvent(arg.e);
                }
                element = src = null;
                return false;
            }
            if (k == 27 || k == 13 || k == 9 || k == 40 || k == 38) {
                if (src.getAttribute("ttf") == "table_cell_edite_contrl_cons" || LEAP._match(src, "table_cell_edite_contrl_cons", "ttf") != null) {
                    if (k == 27) {
                        LEAP.table.hideCellEidt(true);
                    } else {
                        if (k == 13 || k == 9 || k == 40 || k == 38) {
                            if ((k == 13 || k == 40 || k == 38) && src.tagName == "TEXTAREA" && !arg.e.ctrlKey) {
                                return;
                            }
                            if (LEAP.table.lasteditcontrolid != null) {
                                var control = LEAP.getElement("[ctid=" + LEAP.table.lasteditcontrolid + "]", LEAP.table._tempDiv);
                                if (control != null) {
                                    var _cell = LEAP.getElement("[ctid=" + control.getAttribute("cellid") + "]");
                                    if (_cell != null) {
                                        var element = LEAP._match(_cell, "table");
                                        if (element != null && LEAP.table.modifyCellValue != null) {
                                            var ret = LEAP.table.modifyCellValue(element);
                                            if (ret != false && LEAP.table.editNextCell != null) {
                                                if (k == 9) {
                                                    LEAP.table.editNextCell(_cell, element);
                                                    LEAP.stopEvent(arg.e);
                                                } else {
                                                    if ((src.tagName == "TEXTAREA" && arg.e.ctrlKey && k == 38) || (src.tagName != "TEXTAREA" && k == 38)) {
                                                        LEAP.table.editPreRowCell(_cell, element);
                                                        LEAP.stopEvent(arg.e);
                                                    } else {
                                                        if ((src.tagName == "TEXTAREA" && arg.e.ctrlKey && k == 40) || (src.tagName != "TEXTAREA" && k == 40)) {
                                                            LEAP.table.editNextRowCell(_cell, element);
                                                            LEAP.stopEvent(arg.e);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        element = null;
                                    }
                                    control = _cell = null;
                                }
                            }
                        }
                    }
                }
            }
            return;
        }
        var _temp = LEAP._match(src, "table_cell_edite_contrl_cons", commfields.ttf);
        if (_temp == null && (type == "click" || type == "dblclick") && LEAP.table.hideCellEidt != null) {
            if (src.getAttribute("ttf") == "table_cell_edite_contrl_cons" || LEAP._match(src, "table_cell_edite_contrl_cons", "ttf") != null) {} else {
                LEAP.table.hideCellEidt();
                if (LEAP.table.modifyCellValue != null) {
                    var control = LEAP.getElement("[ctid=" + LEAP.table.lasteditcontrolid + "]", LEAP.table._tempDiv);
                    if (control != null) {
                        var _cell = LEAP.getElement("[ctid=" + control.getAttribute("cellid") + "]");
                        if (_cell != null) {
                            LEAP.table.modifyCellValue(LEAP._match(_cell, LEAP.table.d));
                        }
                        control = _cell = null;
                    }
                }
            }
        }
        if (type == "mouseout") {
            if (tag == "TD" && ctf == "table_cell") {
                var row = LEAP._match(src, "table_row", commfields.ctf);
                var element = LEAP._match(row, LEAP.table.d);
                if (row == null) {
                    return;
                }
                var index = row.sectionRowIndex;
                var seindex = element[LEAP.table.b];
                if (index == seindex) {} else {
                    if ((index % 2) == 0) {
                        LEAP.setStyle(row, {
                            background: "#F5F8FF"
                        });
                    } else {
                        LEAP.setStyle(row, {
                            background: "#FFFFFF"
                        });
                    }
                }
                row = element = src = null;
                return false;
            }
            src = null;
            return;
        }
        if (type == "mousemove") {
            var def = LEAP.table._moveDiv.def;
            if (tag == "TD" && ctf == "table_cell") {
                var row = LEAP._match(src, "table_row", commfields.ctf);
                var element = LEAP._match(row, LEAP.table.d);
                if (row == null) {
                    return;
                }
                var index = row.sectionRowIndex;
                var seindex = element[LEAP.table.b];
                if (index == seindex) {}
                row.style.backgroundColor = LEAP.table.selectedColor;
                return false;
            } else {
                if (tag != "TH" && def == null) {
                    LEAP.table._hideMoveDiv();
                    return;
                }
            }
            if (tag == "TH" && def != null && def._src != null) {
                if (src != def._src) {
                    LEAP.table._hideMoveDiv();
                    return;
                }
                var w = def._width;
                var dx = def._dx;
                var lr = def.lr;
                var x = arg.e.offsetX;
                var tw = x - dx;
                var rw = w + tw;
                var left = arg.e.clientX;
                if (lr == "l") {
                    rw = w - tw;
                    left = left - 7;
                } else {
                    left = left + 3;
                }
                if (rw > 20) {
                    LEAP.setStyle(LEAP.table._moveDiv, {
                        display: "block",
                        left: left + "px"
                    });
                }
                w = dx = lr = x = tw = rw = left = null;
            } else {
                LEAP.table._hideMoveDiv();
            }
            def = src = type = tag = null;
            return false;
        }
        if (type == "mousedown") {
            if (ctf == "table_addrow") {
                var element = LEAP._match(src, LEAP.table.d);
                if (element != null) {
                    LEAP.table.newRow(element);
                }
            } else {
                if (ctf == "table_deleterow") {
                    var element = LEAP._match(src, LEAP.table.d);
                    if (element != null) {
                        var row = LEAP._match(src, "table_row", commfields.ctf);
                        LEAP.table.removeRow(element, row.sectionRowIndex);
                    }
                } else {
                    if (tag == "TH") {
                        var isstat = src.getAttribute("isstat");
                        if (isstat != null && isstat == "1") {} else {
                            var w = src.clientWidth;
                            var x = arg.e.offsetX;
                            var def = null;
                            var nSrc = null;
                            if (w < x + 10 || x < 10) {
                                var left = arg.e.clientX + 3;
                                if (x < 10) {
                                    left = arg.e.clientX - 7;
                                }
                                var t = arg.e.clientY - 15;
                                var h = 30;
                                if (src.getBoundingClientRect()) {
                                    t = src.getBoundingClientRect().top;
                                    h = src.offsetHeight - 2;
                                }
                                LEAP.setStyle(LEAP.table._moveDiv, {
                                    display: "block",
                                    left: left + "px",
                                    top: t + "px",
                                    height: h + "px"
                                });
                                left = t = h = null;
                                def = {
                                    _dx: x,
                                    _width: w,
                                    _src: src,
                                    lr: "r"
                                };
                                if (w < x + 10) {
                                    nSrc = src.nextSibling;
                                    if (nSrc != null && nSrc.nodeType != 1 && nSrc.tagName != "TH") {
                                        nSrc = nSrc.nextSibling;
                                    }
                                }
                                if (x < 10) {
                                    nSrc = src.previousSibling;
                                    if (nSrc != null && nSrc.nodeType != 1 && nSrc.tagName != "TH") {
                                        nSrc = nSrc.previousSibling;
                                    }
                                    def.lr = "l";
                                }
                                if (nSrc == null) {
                                    return;
                                }
                                def._nsrc = nSrc;
                                LEAP.table._moveDiv.def = def;
                                LEAP.addEvent(document.body, "mousemove", LEAP.table.uiProcess, null, null, true);
                            } else {
                                LEAP.table._hideMoveDiv();
                            }
                            def = nSrc = w = x = null;
                            return false;
                        }
                    }
                }
            }
            src = type = tag = null;
            return;
        }
        if (type == "mouseup") {
            LEAP.removeEvent(document.body, "mousemove", LEAP.table.uiProcess, true);
            var def = LEAP.table._moveDiv.def;
            LEAP.table._hideMoveDiv();
            if (tag == "TH" && def != null && def._src) {
                var w = def._width;
                var dx = def._dx;
                var x = arg.e.offsetX;
                var lr = def.lr;
                var tw = x - dx;
                var rw = w + tw;
                var nrw = null;
                var nsrc = def._nsrc;
                if (lr == "l") {
                    rw = w - tw;
                    nrw = nsrc.clientWidth + tw;
                } else {
                    nrw = nsrc.clientWidth - tw;
                }
                if (rw > 20) {
                    def._src.style.width = rw + "px";
                    if (nrw != null) {
                        nsrc.style.width = nrw + "px";
                    }
                }
                var last = LEAP.getElement("th[_thid_=" + nsrc.getAttribute("_thid_") + "]:last", nsrc.parentElement.parentElement.parentElement.parentElement);
                if (last != nsrc) {
                    last.style.width = nsrc.style.width;
                }
                last = LEAP.getElement("th[_thid_=" + def._src.getAttribute("_thid_") + "]:last", def._src.parentElement.parentElement.parentElement.parentElement);
                if (last != nsrc) {
                    last.style.width = def._src.style.width;
                }
                last = w = dx = x = lr = tw = rw = nrw = nsrc = null;
                src = type = tag = null;
                LEAP.stopEvent(arg.e);
                return false;
            }
            def = null;
        }
        if (type == "click") {
            LEAP.table.hideMenu();
        }
        var utf = src.getAttribute("utf");
        var ctf = src.getAttribute(commfields.ctf);
        var ct = src.getAttribute(commfields.ct);
        var table = null;
        var tablect = null;
        if (type == "click" && ctf == "table_menuitem") {
            var li = src;
            if (li.tagName != "LI") {
                li = src.parentElement;
            }
            if (li.tagName != "LI") {
                li = li.parentElement;
            }
            var ul = li.parentElement;
            var element = LEAP.getElement(ul.getAttribute("elementFind"));
            var td = LEAP.getElement(ul.getAttribute("TDFind"));
            var row = td.parentElement;
            var text = LEAP.getElement("A:first", li).innerText;
            var flag = li.getAttribute("flag");
            var headers = LEAP.table.getHeaders(element);
            var header = null;
            if (headers != null) {
                header = headers[td.cellIndex];
            }
            var md = null;
            if (header != null) {
                md = header.md;
            }
            ElementEventManager.handleEvent(element, "tableMenuClick", {
                row: row,
                cell: td,
                src: src,
                index: row.sectionRowIndex,
                cellIndex: td.cellIndex,
                data: row.data,
                selectedIndex: element[LEAP.table.b],
                header: header,
                md: md
            });
            return;
        }
        if (ct == LEAP.table.d) {
            tablect = src;
        }
        if (tablect == null && ctf != null && ctf.indexOf(LEAP.table.d) == 0) {
            tablect = LEAP._match(src, LEAP.table.d);
        }
        if (tablect == null) {
            if (utf == "table_page") {
                tablect = LEAP.getElement("div[ct=table]", src.parentElement.parentElement.parentElement.parentElement.parentElement);
            }
            if (utf == "table_page" && (ctf == "table_page_numsyrow_a" || ctf == "table_page_size_numsyrow_a")) {
                tablect = LEAP.getElement("div[ct=table]", src.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement);
            }
            if (utf == "table_page" && (ctf == "table_page_pagesize" || ctf == "table_page_size_go" || ctf == "table_page_daochu")) {
                tablect = LEAP.getElement("div[ct=table]", src.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement);
            }
            if (!tablect) {
                return;
            }
        }
        if (type == "mouseup") {
            if (ctf == "table_header" && tablect.getAttribute("enablesort") != "0") {
                if (tablect.getAttribute("sort") == "client") {
                    var md = src.getAttribute("md");
                    if (md != null && md.Trim() != "" && src.getAttribute("sncol") != "1") {
                        var pageNum = tablect.pageNum;
                        if (pageNum == null) {
                            pageNum = 1;
                        } else {
                            pageNum = LEAP.tonum(tablect.pageNum);
                        }
                        var isasc = src.getAttribute("isasc") == null;
                        if (isasc) {
                            src.setAttribute("isasc", "1");
                        } else {
                            src.removeAttribute("isasc");
                        }
                        var flag = LEAP.getElement("div[flag=orderflag]", src.parentNode);
                        if (flag == null) {
                            var flag = document.createElement("div");
                            flag.style.width = "18px";
                            flag.style.height = "16px";
                            flag.style.left = "10px";
                            flag.style.top = "0px";
                            flag.style.position = "absolute";
                            flag.setAttribute("flag", "orderflag");
                        }
                        if (isasc) {
                            flag.style.background = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/order1.png)  no-repeat center";
                        } else {
                            flag.style.background = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/order2.png)  no-repeat center";
                        }
                        src.style.position = "relative";
                        src.appendChild(flag);
                        flag = null;
                        var mode = 0;
                        if (isasc) {
                            mode = 1;
                        }
                        LEAP.table.gotoPage(tablect, pageNum, tablect.pageResult, mode, md);
                    }
                } else {
                    var autosort = true;
                    var maxsort = null;
                    if (LEAP.getUserInfo() != null) {
                        autosort = LEAP.getUserInfo().autosort;
                        maxsort = LEAP.getUserInfo().maxsort;
                    }
                    if (autosort != null && autosort == true) {
                        var element = LEAP._match(src, LEAP.table.d);
                        if ((element.pageResultCount == null || maxsort == null) || element.pageResultCount <= maxsort) {
                            var md = src.getAttribute("md");
                            if (md != null && md.Trim() != "" && src.getAttribute("sncol") != "1") {
                                var module = LEAP.getLoadedModule(element.getAttribute("instance"));
                                if (module != null) {
                                    try {
                                        if (module.moduleVersion > 1 && module.innerSearch && module.innserGetSortPar && module.innserSetSortPar) {
                                            module.innserSetSortPar(md, null, src);
                                            module.innerSearch();
                                            return;
                                        }
                                    } finally {
                                        module = null;
                                    }
                                }
                                var fn = tablect[LEAP.table.m];
                                if (fn != null) {
                                    var domain = tablect[LEAP.table.md];
                                    if (domain != null) {
                                        try {
                                            if (domain.buildQuery != null) {
                                                if (domain.innerBuildQuery == null) {
                                                    domain.innerBuildQuery = domain.buildQuery;
                                                    domain.buildQuery = LEAP.table.buildQueryExt;
                                                }
                                                var isasc = src.getAttribute("isasc") == null;
                                                if (isasc) {
                                                    src.setAttribute("isasc", "1");
                                                } else {
                                                    src.removeAttribute("isasc");
                                                }
                                                if (isasc) {
                                                    domain._orderExp = md;
                                                } else {
                                                    domain._orderExp = md + " desc";
                                                }
                                                LEAP.table.refreshPage(tablect);
                                                var flag = LEAP.getElement("div[flag=orderflag]", src.parentNode);
                                                if (flag == null) {
                                                    var flag = document.createElement("div");
                                                    flag.style.width = "18px";
                                                    flag.style.height = "16px";
                                                    flag.style.left = "10px";
                                                    flag.style.top = "0px";
                                                    flag.style.position = "absolute";
                                                    flag.setAttribute("flag", "orderflag");
                                                }
                                                if (isasc) {
                                                    flag.style.background = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/order1.png)  no-repeat center";
                                                } else {
                                                    flag.style.background = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/order2.png)  no-repeat center";
                                                }
                                                src.style.position = "relative";
                                                src.appendChild(flag);
                                                flag = null;
                                            }
                                        } finally {
                                            domain == null;
                                        }
                                    }
                                }
                            }
                        } else {
                            LEAP.messagebox.alert("超出允许排序的最大记录数[" + maxsort + "]", 2);
                        }
                    }
                    return;
                }
            }
            if (ctf == "table_export") {
                LEAP.stopEvent(arg.e);
                var epm = tablect.getAttribute("exportmode");
                if (epm == "1") {
                    var result = tablect.result;
                    if (result != null) {
                        var url = LEAP.request("ExportExcelByResult", {
                            r: result
                        });
                        if (url != null) {
                            window.open(window.geturl(leapconfig.server + "LEAP/Download/excelReport/" + url));
                        }
                    }
                    return;
                } else {
                    if (epm == "2") {
                        var result = new Object();
                        result.resultSetName = "导出报表";
                        result.metaData = [];
                        result.result = [];
                        var headers = LEAP.table.getHeaders(tablect);
                        var rows = LEAP.getElements("[ctf=table_row]", tablect);
                        if (rows) {
                            for (var i = 0; i < headers.length; i++) {
                                var text = headers[i].text;
                                if (headers[i].sncol) {
                                    text = "序号";
                                }
                                result.metaData.add({
                                    name: text
                                });
                            }
                            for (var j = 0; j < rows.length; j++) {
                                var row = [];
                                result.result.add(row);
                                row = result.result[j];
                                for (var i = 0; i < headers.length; i++) {
                                    var cell = rows[j].children[i];
                                    var text = cell.innerText;
                                    if (text && text.indexOf("...") > -1) {
                                        text = cell.getAttribute("sourcevalue");
                                    }
                                    if (text == null || text == "undefined") {
                                        text = "";
                                    }
                                    row[i] = text;
                                }
                            }
                            var url = LEAP.request("ExportExcelByResult", {
                                r: result
                            });
                            if (url != null) {
                                window.open(window.geturl(leapconfig.server + "LEAP/Download/excelReport/" + url));
                            }
                        }
                        return;
                    }
                }
                if (LEAP.table.s == null) {
                    LEAP.table.s = leapclient.load("LEAP/Resource/HTML/Control/tableExport.html");
                }
                var econs = LEAP.getElement("[ctf=table_export_cons]", tablect);
                if (econs == null) {
                    var div = document.createElement("div");
                    div.innerHTML = LEAP.table.s;
                    econs = LEAP.getElement("[ctf=table_export_cons]", div);
                    tablect.appendChild(econs);
                    LEAP.removeElement(div);
                    var instance = tablect.getAttribute("instance");
                    if (instance) {
                        var module = LEAP.getLoadedModule(instance);
                        if (module && module.isCanExportAll && module.isCanExportAll()) {
                            LEAP.getElement("[ctf=table_export_allPage_cons]", econs).style.display = "block";
                        }
                    }
                    div = null;
                    econs = null;
                } else {
                    if (econs.style.display == "none") {
                        econs.style.display = "block";
                    } else {
                        econs.style.display = "none";
                    }
                    econs = null;
                }
            }
            if (ctf == "table_export_setPageSize") {
                LEAP.stopEvent(arg.e);
                var ctid = LEAP.ctid(LEAP.getElement("[ctf=table_export_cons]", tablect));
                LEAP.asyn(function() {
                    LEAP.getElement("[ctid=" + ctid + "]").style.display = "none";
                }, null, 10);
                var sizes = LEAP.getElement("[ctf=table_export_pageSize]", tablect);
                if (sizes != null) {
                    var size = sizes.value;
                    sizes = null;
                    if (size.Trim() != "") {
                        size = parseInt(size);
                        if (size > 0 && size <= LEAP.table.maxShowSize) {
                            tablect.setAttribute(LEAP.table.p, size + "");
                            tablect[LEAP.table.p] = size;
                            LEAP.table.refreshPage(tablect);
                        } else {
                            LEAP.messagebox.alert("页面尺寸不允许超过" + LEAP.table.maxShowSize, 2);
                        }
                    } else {
                        tablect.setAttribute(LEAP.table.p, "12");
                        tablect[LEAP.table.p] = 12;
                        LEAP.table.refreshPage(tablect);
                    }
                }
                LEAP.stopEvent(arg.e);
                return;
                breakEvent: true;
            }
            if (ctf == "table_export_curPage" || ctf == "table_export_print" || ctf == "table_export_export" || ctf == "table_export_allPage") {
                LEAP.stopEvent(arg.e);
                if (LEAP.getElement("[ctf=table_export_cons]", tablect)) {
                    var ctid = LEAP.ctid(LEAP.getElement("[ctf=table_export_cons]", tablect));
                    LEAP.asyn(function() {
                        LEAP.getElement("[ctid=" + ctid + "]").style.display = "none";
                    }, null, 10);
                }
                var instance = tablect.getAttribute("instance");
                if (instance) {
                    var module = LEAP.getLoadedModule(instance);
                    var fields = null;
                    if (module) {
                        var pageCount = null;
                        var pageNum = null;
                        var isPrint = false;
                        if (ctf == "table_export_print" || ctf == "table_export_export") {
                            var mins = LEAP.getElement("[ctf=table_export_min]", tablect);
                            var maxs = LEAP.getElement("[ctf=table_export_max]", tablect);
                            if (!String.isEmpty(mins) && !String.isEmpty(maxs)) {
                                var min = mins.value * 1;
                                var max = maxs.value * 1 + 1;
                                var pageCount = max - min;
                                if (pageCount <= 0) {
                                    pageCount = null;
                                }
                                mins = maxs = null;
                                if (min != 0 && max != 0 && min <= max) {
                                    pageNum = min;
                                }
                            }
                        } else {
                            if (ctf == "table_export_allPage") {
                                if (module.isCanExportAll && module.isCanExportAll()) {
                                    pageNum = 1;
                                    pageCount = tablect.pageCount;
                                    if (pageCount == 0) {
                                        LEAP.messagebox.alert("当前数据总页数为0,请查询后再导出!", 2);
                                        return;
                                    }
                                } else {
                                    LEAP.messagebox.alert("当前模型不允许导出全部数据!", 2);
                                    return;
                                }
                            }
                        }
                        if (ctf == "table_export_print") {
                            isPrint = true;
                        }
                        module.exportExcel(pageCount, pageNum, null, null, null, isPrint);
                        module = null;
                    }
                }
            } else {
                if (ctf == "table_props_chk_md") {
                    LEAP.stopEvent(arg.e);
                    var headers = tablect[LEAP.table.a];
                    var chk = src.checked;
                    var md = src.getAttribute("md");
                    var datatype = src.getAttribute("datatype");
                    if (!chk) {
                        var code = src.getAttribute("code");
                        var idx = src.getAttribute("idx");
                        var ths = LEAP.getElements("input:checked[type=checkbox][ctf=table_props_chk_md]", tablect);
                        var nextmd = null;
                        if (ths != null) {
                            var l = ths.length;
                            for (var i = 0; i < l; i++) {
                                var tidx = ths[i].getAttribute("idx") * 1;
                                if (tidx > idx) {
                                    nextmd = ths[i].getAttribute("md");
                                    break;
                                }
                            }
                            ths = null;
                        }
                        var th = document.createElement("TH");
                        if (code != null && code != "null") {
                            th.setAttribute("code", code);
                        }
                        th.setAttribute("md", md);
                        if (datatype != 91 && datatype != 93) {
                            th.setAttribute("bt", "text");
                        } else {
                            if (LEAP.table.showDTs && LEAP.table.showDTs.contains(md)) {
                                th.setAttribute("bt", "datetime");
                            } else {
                                th.setAttribute("bt", "date");
                            }
                        }
                        th.setAttribute("ctf", "table_header");
                        th.innerText = src.getAttribute("cntext");
                        var hdef = LEAP.getBindDef(th);
                        hdef.text = th.innerText;
                        if (nextmd != null) {
                            var next = LEAP.getElement("th[ctf=table_header][md=" + nextmd + "]", tablect);
                            next.parentNode.insertBefore(th, next);
                            headers = headers.insert(hdef, next.cellIndex - 1);
                            tablect[LEAP.table.a] = headers;
                        } else {
                            var hs = LEAP.getElements("th[ctf=table_header]", tablect);
                            if (hs != null) {
                                var tpo = hs[hs.length - 1].getAttribute("tpo");
                                if (tpo != null && tpo.Trim() != "") {
                                    hs[hs.length - 1].parentNode.insertBefore(th, hs[hs.length - 1]);
                                    headers = headers.insert(hdef, hs[hs.length - 1].cellIndex - 1);
                                    tablect[LEAP.table.a] = headers;
                                } else {
                                    var tthread = LEAP.getElement("thead:last", tablect);
                                    var trows = LEAP.getElements("tr", tthread);
                                    trows[trows.length - 1].appendChild(th);
                                    headers.add(hdef);
                                    tablect[LEAP.table.a] = headers;
                                }
                            } else {
                                var tthread = LEAP.getElement("thead:last", tablect);
                                var trows = LEAP.getElements("tr", tthread);
                                trows[trows.length - 1].appendChild(th);
                                headers = [];
                                headers.add(hdef);
                                tablect[LEAP.table.a] = headers;
                            }
                        }
                        LEAP.table.refreshPage(tablect);
                        th = null;
                    } else {
                        var th = LEAP.getElement("th[ctf=table_header][md=" + md + "]", tablect);
                        var idx = th.cellIndex;
                        headers.remove(headers[idx]);
                        th.parentNode.removeChild(th);
                        th = null;
                        var rows = LEAP.getElements("tr[ctf=table_row]", tablect);
                        if (rows != null) {
                            var l = rows.length;
                            for (var i = 0; i < l; i++) {
                                var row = rows[i];
                                row.removeChild(row.cells[idx]);
                                row = null;
                            }
                            rows = null;
                        }
                    }
                    var cachename = tablect.getAttribute("cachename");
                    if (cachename != null && cachename.Trim().length > 0) {
                        var str = JSON.stringify(headers);
                        var userInfo = LEAP.getUserInfo();
                        if (userInfo != null && userInfo.userflag != null) {
                            Storage.set("table_headers_user_" + userInfo.userflag + "_" + cachename, str);
                        }
                    }
                } else {
                    if (ctf == "table_props") {
                        LEAP.stopEvent(arg.e);
                        var props = LEAP.getElement("[ctf=table_props_cons]", tablect);
                        if (props == null) {
                            var codeTypes = tablect.codeTypes;
                            var metaDatas = tablect.metaDatas;
                            var headers = tablect[LEAP.table.a];
                            if (codeTypes != null && metaDatas != null) {
                                if (LEAP.table.t == null) {
                                    LEAP.table.t = leapclient.load("LEAP/Resource/HTML/Control/tableProps.html");
                                }
                                var div = document.createElement("div");
                                div.innerHTML = LEAP.table.t;
                                props = LEAP.getElement("[ctf=table_props_cons]", div);
                                props.style.height = tablect.clientHeight * 0.6 + "px";
                                tablect.appendChild(props);
                                LEAP.removeElement(div);
                                div = null;
                                props = null;
                                var l = codeTypes.length;
                                var temp = new hashtable();
                                var temp2 = new array();
                                var ll = headers.length;
                                for (var i = 0; i < ll; i++) {
                                    var h = headers[i];
                                    if (h.md != null && h.sncol == false) {
                                        temp.add(h.md, {
                                            code: h.code,
                                            md: h.md,
                                            txt: null
                                        });
                                        temp2.add(h.md);
                                    }
                                }
                                for (var i = 0; i < l; i++) {
                                    var codeType = codeTypes[i];
                                    var metaData = metaDatas[i];
                                    var mdName = metaData.name;
                                    if (temp.contains(mdName)) {
                                        temp.getvalue(mdName).txt = metaData.cnName;
                                        temp.getvalue(mdName).datatype = metaData.type;
                                        continue;
                                    }
                                    var lmd = mdName.toLowerCase();
                                    if (lmd == "id" || lmd == "cloudappid" || lmd == "photo" || metaData.cnName == "照片" || metaData.cnName == "附件") {
                                        continue;
                                    }
                                    temp.add(lmd, {
                                        code: codeType,
                                        md: lmd,
                                        txt: metaData.cnName,
                                        datatype: metaData.type
                                    });
                                }
                                var str = "";
                                var index = 0;
                                for (var key in temp.keys) {
                                    var value = temp.getvalue(key);
                                    var md = value.md;
                                    var code = value.code;
                                    var txt = value.txt;
                                    var datatype = value.datatype;
                                    if (txt == null) {
                                        txt = md;
                                    }
                                    var _str = LEAP.table.z;
                                    if (!temp2.contains(md)) {
                                        _str = _str.replace("checked", "");
                                    }
                                    str += _str.replace("@text", txt).replace("@idx", index).replace("@cntext", txt).replace("@md", md).replace("@code", code).replace("@datatype", datatype);
                                    index++;
                                }
                                if (str != "") {
                                    LEAP.getElement("[ctf=table_props_list]", tablect).innerHTML = str;
                                }
                            }
                        } else {
                            props.style.height = tablect.clientHeight * 0.6 + "px";
                            if (props.style.display == "none") {
                                props.style.display = "block";
                            } else {
                                props.style.display = "none";
                            }
                            props = null;
                        }
                    }
                }
            }
            return;
        }
        table = LEAP.getElement(LEAP.table.d, tablect);
        if (table == null) {
            return;
        }
        var tpof = src.getAttribute(commfields.tpof);
        if (ctf == "table_header") {
            var header = LEAP.table.getHeaders(tablect, src.cellIndex);
            ElementEventManager.handleEvent(tablect, "headerClick", {
                cell: src,
                table: table,
                src: src,
                cellIndex: src.cellIndex,
                header: header,
                md: header.md
            });
            header = null;
            return;
        }
        var row = null;
        if (LEAP._match(src, "table_thead") != null) {} else {
            row = LEAP._match(src, "table_row", commfields.ctf);
        }
        if (row != null) {
            if (type == "dblclick") {
                if (tag == "TD") {
                    ElementEventManager.handleEvent(tablect, "doubleClick", {
                        row: row,
                        table: table,
                        data: row.data
                    });
                }
                return;
            }
            var cell = null;
            if (tag == "TD") {
                cell = src;
            } else {
                cell = LEAP._match(src, "table_cell", commfields.ctf);
            }
            if (cell != null) {
                var headers = LEAP.table.getHeaders(tablect);
                var header = null;
                if (headers != null) {
                    header = headers[cell.cellIndex];
                }
                var md = null;
                if (header != null) {
                    md = header.md;
                }
                if (header != null && !String.isEmpty(header.menuexp)) {
                    var elementFind = tablect.tagName + "[ctid=" + LEAP.ctid(tablect) + "]:first";
                    var tdFind = cell.tagName + "[ctid=" + LEAP.ctid(cell) + "]:first";
                    var items = [];
                    var str = header.menuexp;
                    var strs = str.split("|");
                    var l = strs.length;
                    for (var i = 0; i < l; i++) {
                        var item = {};
                        var temp = strs[i].split(":");
                        item.text = temp[0];
                        item.flag = temp[1];
                        items.add(item);
                    }
                    LEAP.table.showMenu(elementFind, tdFind, items, arg.e.clientX, arg.e.clientY);
                }
                ElementEventManager.handleEvent(tablect, "cellClick", {
                    row: row,
                    cell: cell,
                    srcst: header.st,
                    table: table,
                    src: src,
                    index: row.sectionRowIndex,
                    cellIndex: cell.cellIndex,
                    data: row.data,
                    selectedIndex: tablect[LEAP.table.b],
                    header: header,
                    md: md
                });
            }
            if (cell != null && tpof != null && tpof != "") {
                var roc = tablect.getAttribute("operationClick");
                if (roc != null && roc != "" && tablect._ioc == null) {
                    var rocfn = null;
                    try {
                        rocfn = eval("(" + roc + ")");
                    } catch (err) {}
                    LEAP.addEvent(tablect, "rowOperationClick", rocfn);
                    tablect._ioc = "true";
                }
                ElementEventManager.handleEvent(tablect, "rowOperationClick", {
                    row: row,
                    cell: cell,
                    srcst: header.st,
                    table: table,
                    flag: tpof,
                    src: src,
                    index: row.sectionRowIndex,
                    cellIndex: cell.cellIndex,
                    data: row.data,
                    selectedIndex: tablect[LEAP.table.b]
                });
                return;
            }
            if (ctf == "table_chk" || ctf == "table_img") {
                if (ctf == "table_chk") {
                    ElementEventManager.handleEvent(tablect, "chkClick", {
                        row: row,
                        cell: cell,
                        table: table,
                        flag: tpof,
                        src: src,
                        index: row.sectionRowIndex,
                        cellIndex: cell.cellIndex,
                        data: row.data,
                        selectedIndex: tablect[LEAP.table.b],
                        checked: src.checked
                    });
                }
                return;
            }
            if (ctf == "table_node_open") {
                LEAP.table.closeNode(tablect, row);
            }
            if (ctf == "table_node_close") {
                LEAP.table.expandNode(tablect, row);
            }
            if (tablect.getAttribute("enableedit") == "1") {
                if (ctf == "table_cell") {
                    if (LEAP.table.modifyCellValue != null) {
                        LEAP.table.modifyCellValue(tablect);
                    }
                    LEAP.check.hideTip();
                    var ee = src.getAttribute("enableedit");
                    if (LEAP.table.editCell != null) {
                        if (ee != null && ee == "0") {} else {
                            LEAP.table.editCell(src, tablect);
                        }
                    }
                }
            }
            if (cell != null && row.sectionRowIndex != tablect[LEAP.table.b]) {
                var iic = tablect.getAttribute("indexChange");
                if (iic != null && iic != "" && tablect._iic == null) {
                    var iicfn = null;
                    try {
                        iicfn = eval("(" + iic + ")");
                    } catch (err) {}
                    LEAP.addEvent(tablect, "selectedIndexChange", iicfn);
                    tablect._iic = "true";
                }
                var pindex = tablect[LEAP.table.b];
                LEAP.table.setSelectedIndex(tablect, row.sectionRowIndex);
            }
        } else {
            if (ctf == "table_page_info") {
                return;
            }
            if (ctf != null && ctf.indexOf("table_page_") == 0 && ctf != "table_page_in") {
                var pageCount = LEAP.tonum(tablect.pageCount);
                if (pageCount != null && pageCount == 0) {
                    pageCount = -1;
                }
                var gotoNumctl = LEAP.getElement("[ctf=table_page_in]", tablect);
                if (pageCount == 0 && gotoNumctl != null) {
                    gotoNumctl.value = "";
                    return;
                }
                var pageNum = LEAP.tonum(tablect.pageNum);
                var pageResultCount = LEAP.tonum(tablect.pageResultCount);
                var flag = LEAP.getElement("div[flag=orderflag]", tablect);
                if (ctf == "table_page_next") {
                    if (pageCount > pageNum || pageCount == -1) {
                        LEAP.table.gotoPage(tablect, pageNum + 1);
                    }
                    var table_page_body = LEAP.getElement("[ctf=table_page_body]", src.parentElement.parentElement);
                    if (table_page_body) {
                        LEAP.setStyle(table_page_body, {
                            display: "none"
                        });
                    }
                } else {
                    if (ctf == "table_page_pre") {
                        if (pageNum == 0) {
                            LEAP.table.gotoPage(tablect, 1);
                        } else {
                            if (pageNum > 1) {
                                LEAP.table.gotoPage(tablect, pageNum - 1);
                            }
                        }
                        var table_page_body = LEAP.getElement("[ctf=table_page_body]", src.parentElement.parentElement);
                        if (table_page_body) {
                            LEAP.setStyle(table_page_body, {
                                display: "none"
                            });
                        }
                    } else {
                        if (ctf == "table_page_first") {
                            if (pageNum != 1) {
                                LEAP.table.gotoPage(tablect, 1);
                            }
                        } else {
                            if (ctf == "table_page_last") {
                                if (pageNum != pageCount && pageCount != -1) {
                                    LEAP.table.gotoPage(tablect, pageCount);
                                }
                            } else {
                                if (ctf == "table_page_goto") {
                                    var gotoNum = LEAP.tonum(gotoNumctl.value);
                                    if (gotoNum > 0 && (gotoNum <= pageCount || pageCount == -1)) {
                                        LEAP.table.gotoPage(tablect, gotoNum);
                                    }
                                } else {
                                    if (ctf == "table_page_num") {
                                        var pc = tablect.pageCount;
                                        if (pc > 1) {
                                            var num = src.innerHTML;
                                            if (num != 0) {
                                                var table_page_body = LEAP.getElement("[ctf=table_page_body]", src.parentElement.parentElement);
                                                if (!table_page_body) {
                                                    var numdiv = document.createElement("div");
                                                    numdiv.setAttribute("ctf", "table_page_body");
                                                    numdiv.className = "LC_search_pagenum";
                                                    var numul = document.createElement("ul");
                                                    numul.setAttribute("ctf", "table_page_numsy");
                                                    for (var i = 0; i < pc; i++) {
                                                        var numli = document.createElement("li");
                                                        numli.setAttribute("ctf", "table_page_numsyrow");
                                                        var numa = document.createElement("a");
                                                        numa.setAttribute("ctf", "table_page_numsyrow_a");
                                                        numa.setAttribute("utf", "table_page");
                                                        numa.href = "javascript:";
                                                        numa.innerHTML = i + 1;
                                                        numli.appendChild(numa);
                                                        numul.appendChild(numli);
                                                    }
                                                    numdiv.appendChild(numul);
                                                    src.parentElement.parentElement.appendChild(numdiv);
                                                    LEAP.table.pagePz(pc, src.parentElement.parentElement, LEAP.tonum(num) - 1);
                                                    LEAP.table.table_page_body = numdiv;
                                                } else {
                                                    LEAP.table.table_page_body = table_page_body;
                                                    LEAP.setStyle(table_page_body, {
                                                        display: ""
                                                    });
                                                    var table_page_numsy = LEAP.getElement("[ctf=table_page_numsy]", table_page_body);
                                                    if (table_page_numsy) {
                                                        table_page_numsy.innerHTML = "";
                                                        var sb = new StringBuffer();
                                                        for (var i = 0; i < pc; i++) {
                                                            var str = LEAP.table.pageli.replace("@ctf", "table_page_numsyrow").replace("@c1", "table_page_numsyrow_a").replace("@utf", "table_page").replace("@ctfe", "").replace("@sy", i + 1);
                                                            sb.append(str);
                                                        }
                                                        table_page_numsy.innerHTML = sb.toString();
                                                    }
                                                    LEAP.table.pagePz(pc, src.parentElement.parentElement, LEAP.tonum(num) - 1);
                                                }
                                            }
                                        }
                                    } else {
                                        if (ctf == "table_page_numsyrow_a") {
                                            var num = src.innerHTML;
                                            var pc = tablect.pageCount;
                                            LEAP.table.pagePz(pc, src.parentElement.parentElement.parentElement.parentElement, LEAP.tonum(num) - 1);
                                            LEAP.table.gotoPage(tablect, LEAP.tonum(num));
                                        } else {
                                            if (ctf == "table_page_size") {
                                                var table_page_size_body = LEAP.getElement("[ctf=table_page_size_body]", src.parentElement.parentElement);
                                                if (!table_page_size_body) {
                                                    var numdiv = document.createElement("div");
                                                    numdiv.setAttribute("ctf", "table_page_size_body");
                                                    numdiv.className = "LC_search_pagesize";
                                                    var numul = document.createElement("ul");
                                                    numul.setAttribute("ctf", "table_page_size_numsy");
                                                    var nums = [15, 50, 100];
                                                    for (var i = 0; i < nums.length; i++) {
                                                        var numli = document.createElement("li");
                                                        numli.setAttribute("ctf", "table_page_size_numsyrow");
                                                        var numa = document.createElement("a");
                                                        numa.setAttribute("ctf", "table_page_size_numsyrow_a");
                                                        numa.setAttribute("utf", "table_page");
                                                        numa.href = "javascript:";
                                                        numa.innerHTML = nums[i];
                                                        numli.appendChild(numa);
                                                        numul.appendChild(numli);
                                                    }
                                                    numdiv.appendChild(numul);
                                                    var inputtext = document.createElement("input");
                                                    inputtext.type = "text";
                                                    inputtext.className = "LC_search_pagesize_size";
                                                    inputtext.setAttribute("ctf", "table_page_pagesize");
                                                    numdiv.appendChild(inputtext);
                                                    var font = document.createElement("font");
                                                    font.style.color = "#1e88e5";
                                                    font.innerHTML = "&nbsp;条";
                                                    numdiv.appendChild(font);
                                                    var inputsure = document.createElement("input");
                                                    inputsure.type = "button";
                                                    inputsure.title = "显示";
                                                    inputsure.className = "LC_button_img LC_button_img_blue_sure";
                                                    inputsure.setAttribute("ctf", "table_page_size_go");
                                                    inputsure.setAttribute("utf", "table_page");
                                                    numdiv.appendChild(inputsure);
                                                    var inputdc = document.createElement("input");
                                                    inputdc.type = "button";
                                                    inputdc.className = "LC_button_conner LC_botton_text";
                                                    inputdc.value = "导出当前页";
                                                    inputdc.setAttribute("ctf", "table_export_curPage");
                                                    inputdc.setAttribute("utf", "table_page");
                                                    numdiv.appendChild(inputdc);
                                                    src.parentElement.parentElement.appendChild(numdiv);
                                                    LEAP.table.table_page_size_body = numdiv;
                                                } else {
                                                    LEAP.table.table_page_size_body = table_page_size_body;
                                                    LEAP.setStyle(table_page_size_body, {
                                                        display: ""
                                                    });
                                                }
                                            } else {
                                                if (ctf == "table_page_size_numsyrow_a") {
                                                    var num = src.innerHTML;
                                                    num = parseInt(num);
                                                    if (num > 0 && num <= LEAP.table.maxShowSize) {
                                                        tablect.setAttribute(LEAP.table.p, num + "");
                                                        tablect[LEAP.table.p] = num;
                                                        LEAP.table.refreshPage(tablect);
                                                    } else {
                                                        LEAP.messagebox.alert("页面尺寸不允许超过" + LEAP.table.maxShowSize, 2);
                                                    }
                                                } else {
                                                    if (ctf == "table_page_size_go") {
                                                        var table_page_pagesize = LEAP.getElement("[ctf=table_page_pagesize]", src.parentElement.parentElement);
                                                        if (table_page_pagesize != null) {
                                                            var value = table_page_pagesize.value;
                                                            if (value != null && value != "") {
                                                                var num = value;
                                                                num = parseInt(num);
                                                                if (num > 0 && num <= LEAP.table.maxShowSize) {
                                                                    tablect.setAttribute(LEAP.table.p, num + "");
                                                                    tablect[LEAP.table.p] = num;
                                                                    LEAP.table.refreshPage(tablect);
                                                                } else {
                                                                    LEAP.messagebox.alert("页面尺寸不允许超过" + LEAP.table.maxShowSize, 2);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (gotoNumctl != null) {
                    gotoNumctl.value = "";
                }
                gotoNumctl = null;
            }
        }
    };
    LEAP.table.pagePz = function(p, d, n) {
        var u = document.createElement("div");
        LEAP.addCSS(u, "LC_hide");
        u.innerHTML = LEAP.table.pageli.replace("@ctf", "table_row_left").replace("@c1", "").replace("@utf", "").replace("@ctfe", "table_row_left").replace("@sy", "<img style='border:none;margin-top:3px' src='" + leapconfig.server + "LEAP/Resource/images/lcimages/LC_table/table_sy.png'/>");
        var g = u.children[0];
        var q = g.cloneNode(true);
        var o = p;
        var l = LEAP.getElement("[ctf=table_page_numsy]", d);
        var m = LEAP.getElements("[ctf=table_page_numsyrow]", l);
        LEAP.setStyle(m, {
            display: ""
        });
        LEAP.removeCSS(m, "LC_search_numactive", false);
        LEAP.addCSS(m[n], "LC_search_numactive");
        var r = LEAP.getElement("[ctf=table_row_left]", d);
        var v = LEAP.getElement("[ctf=table_row_right]", d);
        if (r) {
            l.removeChild(r);
        }
        if (v) {
            l.removeChild(v);
        }
        if (o > 7) {
            if (n > 2 && n <= o - 4) {
                for (var h = 1; h < n - 1; h++) {
                    LEAP.setStyle(m[h], {
                        display: "none"
                    });
                }
                for (var h = n + 2; h < o - 1; h++) {

                    LEAP.setStyle(m[h], {
                        display: "none"
                    });
                }
                l.insertBefore(q, m[n - 1]);
                var j = g.cloneNode(true);
                j.setAttribute("ctf", "table_row_right");
                j.children[0].setAttribute("ctfe", "table_row_right");
                l.insertBefore(j, m[o - 1]);
            } else {
                if (n >= o - 3) {
                    for (var h = 1; h < o - 5; h++) {
                        LEAP.setStyle(m[h], {
                            display: "none"
                        });
                    }
                    l.insertBefore(q, m[o - 5]);
                } else {
                    for (var h = 5; h < o - 1; h++) {
                        LEAP.setStyle(m[h], {
                            display: "none"
                        });
                    }
                    q.setAttribute("ctf", "table_row_right");
                    q.children[0].setAttribute("ctfe", "table_row_right");
                    l.insertBefore(q, m[o - 1]);
                }
            }
        }
    };
    LEAP.table.removeHeader = function(j, n) {
        if (j == null || n == null) {
            return;
        }
        j = LEAP._check(j, LEAP.table.d);
        if (j == null) {
            return;
        }
        var g = LEAP.table.getHeaders(j);
        if (g == null) {
            return;
        }
        var d = LEAP.getElement("th[ctf=table_header][md=" + n + "]", j);
        var o = d.cellIndex;
        g.remove(g[o]);
        d.parentNode.removeChild(d);
        d = null;
        var q = LEAP.getElements("tr[ctf=table_row]", j);
        if (q != null) {
            var h = q.length;
            for (var m = 0; m < h; m++) {
                var p = q[m];
                p.removeChild(p.cells[o]);
                p = null;
            }
            q = null;
        }
        j = n = g = d = null;
    };
    LEAP.table.removeHeader2 = function(j, m) {
        if (j == null || m == null) {
            return;
        }
        j = LEAP._check(j, LEAP.table.d);
        if (j == null) {
            return;
        }
        var p = LEAP.table.getHeaders(j);
        if (p == null) {
            return;
        }
        var d = m.cellIndex;
        p.remove(p[d]);
        m.parentNode.removeChild(m);
        m = null;
        var n = LEAP.getElements("tr[ctf=table_row]", j);
        if (n != null) {
            var g = n.length;
            for (var h = 0; h < g; h++) {
                var o = n[h];
                o.removeChild(o.cells[d]);
                o = null;
            }
            n = null;
        }
        j = p = m = null;
    };
    LEAP.table.focus = function(d) {
        d = LEAP._check(d, LEAP.table.d);
        if (d == null) {
            return;
        }
        var g = LEAP.getElement("td:first:visible", d);
        if (g != null) {
            g.focus();
        }
    };
    LEAP.table._getHeadCells = function(j, o) {
        if (o == null || o.length == 0) {
            return null;
        }
        var n = null;
        if (o.length == 1) {
            return o[0].cells;
        } else {
            var m = LEAP.getElement("table", j);
            var l = new LEAP.tableUtil().getTableDef(m);
            if (l == null || l.length < 1) {
                return null;
            }
            var h = l.tableArray[l.rowBound - 1];
            var d = null;
            n = [];
            n.length = l.cellBound;
            for (var g = 0; g < l.cellBound; g++) {
                d = h[g];
                n[g] = o[d.rowIndex].cells[d.cellIndex];
            }
        }
        return n;
    };
    LEAP.table.getHeaders = function(h, u) {
        h = LEAP._check(h, LEAP.table.d);
        if (h == null) {
            return;
        }
        var m = h[LEAP.table.a];
        if (m == null) {
            var B = h.getAttribute("cachename");
            var p = 0;
            var o = null;
            var r = LEAP.getUserInfo();
            m = [];
            var z = LEAP.getElement("thead:last", h);
            var d = null;
            if (z != null) {
                d = LEAP.getElements("tr", z);
                if (B != null && B.Trim().length > 0) {
                    var y = null;
                    if (r != null && r.userflag != null) {
                        y = Storage.get("table_headers_user_" + r.userflag + "_" + B);
                    }
                    if (y != null) {
                        o = JSON.parse(y);
                        if (o != null) {
                            var w = LEAP.getElements("th[ctf=table_header][tpo]", h);
                            p = o.length;
                            for (var F = p - 1; F > -1; F--) {
                                if (o[F].tpo != null && o[F].tpo.trim().length != 0) {
                                    o.removeindex(F);
                                }
                            }
                            if (w != null) {
                                for (var F = 0; F < w.length; F++) {
                                    o.add(LEAP.getBindDef(w[F]));
                                }
                            }
                            p = o.length;
                        }
                    }
                }
            }
            var q = null;
            var A = 0;
            if (d != null) {
                if (d.length == 1) {
                    q = d[d.length - 1].cells;
                } else {
                    q = LEAP.table._getHeadCells(h, d);
                }
                A = q.length;
            }
            if (q != null) {
                if (o == null) {
                    for (var F = 0; F < A; F++) {
                        var g = q[F];
                        if (g == null) {
                            continue;
                        }
                        var D = LEAP.getBindDef(g);
                        if (D.sncol) {
                            if (h.getAttribute("showcheck") == "1") {
                                D.btexp = commfields.sncel;
                            } else {
                                if (D.btexp == null || D.btexp.Trim() == "") {
                                    D.btexp = "@sn";
                                }
                            }
                        }
                        D.text = g.innerText;
                        m.add(D);
                    }
                } else {
                    var v = null;
                    for (var F = 0; F < p; F++) {
                        var n = o[F];
                        var g = null;
                        if (A > F) {
                            g = q[F];
                            if (g.getAttribute("tpo") != null) {
                                v = LEAP.getBindDef(g);
                            }
                        } else {
                            g = document.createElement("th");
                            d[d.length - 1].appendChild(g);
                        }
                        if (n.tpo != null) {
                            if (v == null) {
                                for (var C = F; C < A; C++) {
                                    if (q[C].getAttribute("tpo") != null) {
                                        v = LEAP.getBindDef(q[C]);
                                        break;
                                    }
                                }
                            }
                            n = v;
                        }
                        g.setAttribute("ctf", "table_header");
                        for (key in n) {
                            var x = n[key];
                            if (key == "sncol") {
                                if (x) {
                                    g.setAttribute("sncol", "1");
                                } else {
                                    g.removeAttribute("sncol");
                                }
                            } else {
                                if (key == "innerHTML") {
                                    g.innerHTML = x;
                                } else {
                                    if (key == "_width") {
                                        if (x != null) {
                                            g.style.width = x;
                                        }
                                    } else {
                                        if (key == "_height") {
                                            if (x != null) {
                                                g.style.height = x;
                                            }
                                        } else {
                                            if (x == null) {
                                                g.removeAttribute(key);
                                            } else {
                                                g.setAttribute(key, x);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    m = o;
                    if (A > p) {
                        for (var F = A - 1; F > p - 1; F--) {
                            d[d.length - 1].removeChild(q[F]);
                        }
                    }
                }
            }
            h[LEAP.table.a] = m;
            if (d != null) {
                q = d[d.length - 1].cells;
            }
            q = null;
        }
        if (u == null || u < 0) {
            return m;
        }
        if (u < m.length) {
            return m[u];
        }
    };
    LEAP.table.processExp = function(row, header, cell, data, element, isnew) {
        if (header != null && !String.isEmpty(header.menuexp)) {
            var exp = header.menuexp;
            cell.style.textDecoration = "underline";
            cell.style.cursor = "pointer";
            cell.style.color = "blue";
            cell.setAttribute("menuexp", exp);
            cell.setAttribute("hasmenuexp", "1");
        }
        if (header != null && !String.isEmpty(header.colorexp)) {
            cell.style.color = "black";
            var exp = header.colorexp;
            var ts = exp.split(";");
            var l = ts.length;
            for (var i = 0; i < l; i++) {
                var ce = ts[i];
                var ces = ce.split(":");
                ce = "(" + ces[0] + ")";
                var color = null;
                if (ces.length > 1) {
                    color = ces[1];
                } else {
                    continue;
                }
                var ret = false;
                try {
                    ret = eval(ce);
                } catch (e) {}
                if (ret == true) {
                    cell.style.color = color;
                    break;
                }
            }
        }
        if (header != null && !String.isEmpty(header.imgexp)) {
            var exp = header.imgexp;
            var ts = exp.split(";");
            var l = ts.length;
            for (var i = 0; i < l; i++) {
                var ce = ts[i];
                var ces = ce.split(":");
                ce = "(" + ces[0] + ")";
                var img = null;
                if (ces.length > 1) {
                    img = ces[1];
                    if (!img.toLowerCase().startWith("http://")) {
                        img = leapconfig.server + img;
                    }
                } else {
                    continue;
                }
                var ret = false;
                try {
                    ret = eval(ce);
                } catch (e) {}
                if (ret == true) {
                    cell.innerHTML = '<img ctf="table_cell_img" src=' + img + ' style="width:18px;height:18px;">' + cell.innerHTML;
                    break;
                }
            }
        }
        if (header != null && !String.isEmpty(header.oper) && header.tpo) {
            var exp = header.oper;
            var ts = exp.split(";");
            var l = ts.length;
            for (var i = 0; i < l; i++) {
                var ce = ts[i];
                var ces = ce.split("$");
                ce = "(" + ces[0] + ")";
                var operStr = null;
                if (ces.length > 1) {
                    operStr = ces[1];
                    if (!operStr || operStr.length < 0) {
                        continue;
                    }
                } else {
                    continue;
                }
                var ret = false;
                try {
                    ret = eval(ce);
                } catch (e) {}
                if (ret == true) {
                    var buff = new StringBuffer();
                    var ops = operStr.split("|");
                    if (!ops || ops.length == 0) {
                        continue;
                    }
                    for (var k = 0; k < ops.length; k++) {
                        var sinps = ops[k].split(":");
                        if (!sinps || sinps.length < 2) {
                            continue;
                        }
                        if (k > 0) {
                            buff.append("&nbsp;");
                        }
                        buff.append("<A href=javascript:void(0) ctf=table_tpo tpof=" + sinps[1] + ">" + sinps[0] + "</A>");
                    }
                    cell.innerHTML = buff.toString();
                    break;
                } else {
                    if (header.btdis == "1") {
                        cell.innerHTML = "";
                    }
                }
            }
        }
        row = header = cell = data = element = isnew = null;
    };
    LEAP.table.setCellValue = function(l, z, d, C, h, r) {
        var p = null;
        var j = null;
        if (z.tpo == null && C != null) {
            p = C[z.md];
            j = C[commfields.rsccv + z.md];
        }
        var m = null;
        if (j != null) {
            m = j;
        }
        if (j != null && (h.getAttribute("enableedit") != "1" || (h.getAttribute("enableedit") == "1" && (z != null && z.enableedit != null && z.enableedit == "0")))) {} else {
            var x = false;
            if (z.btfn) {
                var g = LEAP.getLoadedModule(h.getAttribute(commfields.instance));
                if (g && g[z.btfn] && typeof(g[z.btfn]) == "function") {
                    m = g[z.btfn].call(g, {
                        data: C,
                        value: p,
                        md: z.md
                    });
                    x = true;
                }
            }
            if (!x) {
                var o = d.getAttribute("modifyvalue");
                if (o != null) {
                    m = LEAP.getBindValue(z, o, C, LEAP.table.d, null, g);
                } else {
                    m = LEAP.getBindValue(z, p, C, LEAP.table.d, null, g);
                }
            }
        }
        d.setAttribute(commfields.ctf, "table_cell");
        if (z.bt == "date" || z.bt == "datetime") {
            d.setAttribute("sourcevalue", m);
        } else {
            d.setAttribute("sourcevalue", p);
        }
        if (m != null && z.sncol) {
            var A = h.pageNum;
            if (A == null || A == "") {
                A = 1;
            }
            A = A - 1;
            var w = h[LEAP.table.p] * 1;
            if (isNaN(w)) {
                w = 0;
            }
            if (w == null || w < 1) {
                w = 12;
            }
            var u = A * w + l.sectionRowIndex + 1;
            if (u == null || u < 1) {
                u = 1;
            }
            m = m.replace("@sn", u);
        }
        if (m == "" || m.Trim() == "") {
            m = "&nbsp";
        }
        var q = false;
        if (z.tpo == null && !(z.sncol != null && z.sncol) && !(z.bt && (z.bt == "datetime2" || z.bt == "datetime")) && m && m.length > LEAP.table.maxContentLength) {
            if (m.indexOf("<") == -1 && m.indexOf(">") == -1) {
                q = true;
                d.innerHTML = m.substring(0, LEAP.table.maxContentLength) + "...";
            }
        } else {
            d.innerHTML = m;
        }
        d.setAttribute("md", z.md);
        if (z._colspan) {
            d.setAttribute("colspan", z._colspan);
        }
        if (h.getAttribute("enableedit") == "1") {
            if (r == true && (z.tpo == null || z.tpo.Trim() == "") && z.sncol != "1") {
                d.setAttribute("isnew", "1");
                d.style.color = "red";
                d.ismodify = 1;
            }
            if (h.getAttribute("showtree") == "1" && z.md == "table_wbs") {
                if (C.table_wbs != C.wbs) {
                    d.style.color = "red";
                    d.setAttribute("wbsmodify", "1");
                } else {
                    d.style.color = "";
                    d.setAttribute("wbsmodify", "0");
                }
            }
        }
        if (z.sncol != "1" && (z.tpo == null || z.tpo.Trim() == "") && m != null && m.Trim() != "" && m != "&nbsp") {
            if (z.bt == "textarea") {
                d.setAttribute("title", m);
            } else {
                if (q) {
                    d.setAttribute("title", m);
                } else {
                    d.setAttribute("title", d.innerText);
                }
            }
        }
        if (h.getAttribute("hideoverflow") == "0") {
            d.style.height = "auto";
        } else {
            d.className = "ellipsis";
        }
        if (z.textalign != null) {
            d.style.textAlign = z.textalign;
        }
        LEAP.table.processExp(l, z, d, C, h, r);
        if (z.tpo != null) {
            if (d) {
                var n = d.children;
                if (n) {
                    if (z.btclass != null) {
                        for (var y = 0; y < n.length; y++) {
                            LEAP.addCSS(n[y], z.btclass);
                            if (z.fcolor != null && z.bcolor != null) {
                                LEAP.setStyle(n[y], {
                                    color: z.fcolor,
                                    backgroundColor: z.bcolor
                                });
                            } else {
                                if (z.fcolor != null) {
                                    LEAP.setStyle(n[y], {
                                        color: z.fcolor
                                    });
                                } else {
                                    if (z.bcolor != null) {
                                        LEAP.setStyle(n[y], {
                                            backgroundColor: z.bcolor
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (z.tipfn && !d.getAttribute("_inittipfn")) {
            d.setAttribute("_inittipfn", "1");
            LEAP.addEvent(d, "mouseenter", LEAP.table._onTipFN, null, null, true);
            d.setAttribute("tipfn", z.tipfn);
            d.setAttribute("tipoffset", z.tipoffset);
            d.setAttribute("title", "");
            try {
                d.removeAttribute("title");
            } catch (B) {}
        }
        d.setAttribute("md", z.md);
        h = l = z = d = C = null;
    };
    LEAP.table._onTipFN = function(p) {
        var d = p.caller;
        if (d.tagName != "TD") {
            d = LEAP._match(d, "TR", "nodeName");
        }
        var j = LEAP._match(d, LEAP.table.d);
        if (j) {
            var o = j.getAttribute(commfields.instance);
            if (o) {
                var g = LEAP.getLoadedModule(o);
                if (g && g[d.getAttribute("tipfn")]) {
                    var h = d.parentElement.data;
                    try {
                        var l = g[d.getAttribute("tipfn")].apply(g, [{
                            md: d.getAttribute("md"),
                            data: h,
                            element: d
                        }]);
                        if (l) {
                            var n = d.getAttribute("tipoffset");
                            if (n) {
                                n = n * 1;
                                LEAP.tip.alert(l, null, null, p.e.clientX + n, p.e.clientY + n, 3000);
                            } else {
                                LEAP.tip.alert(l, null, null, null, null, 3000);
                            }
                        }
                    } catch (m) {}
                }
            }
        }
        p = d = null;
    };
    LEAP.table.addHeader = function(g, l, p, m, n, d) {
        g = LEAP._check(g, LEAP.table.d);
        if (g == null) {
            return;
        }
        var j = LEAP.getElement("thead:last", g);
        var o = LEAP.getElements("tr", j);
        var h = document.createElement("th");
        var q = o[o.length - 1];
        h.setAttribute("ctf", "table_header");
        h.setAttribute("md", l);
        h.innerHTML = p;
        if (n != null) {
            h.setAttribute("bt", n);
        } else {
            h.setAttribute("bt", "text");
        }
        if (m != null) {
            h.setAttribute("code", m);
        }
        if (d != null) {
            h.style.width = d;
        }
        if (q.cells && q.cells.lenght > 0 && q.cells[q.cells.length - 1].getAttribute("tpo") != null) {
            q.insertBefore(h, q.cells[q.cells.length - 1]);
        } else {
            q.appendChild(h);
        }
        g[LEAP.table.a] = null;
        g = j = o = q = null;
        try {
            return h;
        } finally {
            h = null;
        }
    };
    LEAP.table.setHeaderWidth = function(m, o, d) {
        m = LEAP._check(m, LEAP.table.d);
        if (m == null) {
            return;
        }
        var n = LEAP.getElement("thead:last", m);
        var q = LEAP.getElements("tr", n);
        var r = q[q.length - 1];
        var u = r.cells;
        if (u != null) {
            var h = u.length;
            for (var j = 0; j < h; j++) {
                var p = u[j];
                var g = p.getAttribute("md");
                if (g != null && g == o) {
                    if (d != null) {
                        p.style.widht = d;
                    } else {
                        p.style.width = "";
                    }
                    break;
                }
            }
        }
        m = n = q = u = r = null;
    };
    LEAP.table.reBindData = function(d) {
        d = LEAP._check(d, LEAP.table.d);
        if (d == null) {
            return;
        }
        LEAP.table.bindData(d, d.pageResult);
        d = null;
    };
    LEAP.table.addRow = function(n, M, u, v, z) {
        n = LEAP._check(n, LEAP.table.d);
        if (n == null) {
            return;
        }
        var o = LEAP.table.getHeaders(n);
        if (o == null) {
            return;
        }
        if (M == null) {
            M = new Object();
        }
        var q = document.createElement("tr");
        var y = n.getAttribute("rowheight");
        if (y) {
            q.style.height = y;
        }
        var A = n.getAttribute("rowfont");
        if (A) {
            q.style.fontSize = A;
        }
        q.setAttribute(commfields.ctf, "table_row");
        q.data = M;
        var g = LEAP.getElement("tbody:last", n);
        if (g == null) {
            return;
        }
        g.appendChild(q);
        g = null;
        var r = q.sectionRowIndex;
        if (n.className.indexOf("LC_table") == -1) {
            if ((r % 2) == 0) {
                LEAP.setStyle(q, {
                    background: LEAP.table.spcolor
                });
            } else {
                LEAP.setStyle(q, {
                    background: LEAP.table.scolor
                });
            }
        }
        var C = o.length;
        for (var I = 0; I < C; I++) {
            var H = o[I];
            if (H._rowspan != null && (H._rowspan == "1" || H._rowspan == "true")) {
                var G = 1;
                var w = H.md;
                var J = r - 1;
                var x = null;
                var F = null;
                while (J > -1) {
                    F = LEAP.table.getRow(n, J);
                    x = F.data;
                    if (x[w] == M[w]) {
                        J = J - 1;
                        G = G + 1;
                    } else {
                        F = LEAP.table.getRow(n, J + 1);
                        break;
                    }
                }
                if (F != null && G > 1) {
                    var B = LEAP.getElement("[md=" + w + "]", F);
                    if (B != null) {
                        B.setAttribute("rowSpan", G);
                    }
                    continue;
                }
            }
            var j = document.createElement("td");
            LEAP.table.setCellValue(q, H, j, M, n, z);
            if (I == C - 1) {
                j.style.borderRightWidth = "0px";
            }
            if (H.btstyle) {
                var L = H.btstyle.split(";");
                var d = L.length;
                for (var m = 0; m < d; m++) {
                    var p = L[m].split(":");
                    var N = p[0];
                    var K = p[1];
                    var D = -1;
                    while ((D = N.indexOf("-")) > -1) {
                        N = N.substring(0, D) + N.charAt(D + 1).toUpperCase() + N.substring(D + 2);
                    }
                    j.style[N] = K;
                }
            }
            q.appendChild(j);
        }
        if (u != null) {
            q.setAttribute("cttag", u);
        }
        if (n.getAttribute("hideoverflow") == "0") {
            q.style.height = "auto";
        }
        LEAP.table.setRowColor(n, q, M);
        try {
            var h = LEAP.getLoadedModule(n.getAttribute("instance"));
            if (h) {
                if (h.onTableAddRow) {
                    h.onTableAddRow.apply(h, [{
                        element: n,
                        row: q,
                        data: M,
                        headers: o,
                        index: r
                    }]);
                }
            }
            return q;
        } finally {
            q = null;
        }
    };
    LEAP.table.getCellByMD = function(n, m) {
        try {
            if (n && m) {
                if (n.cells) {
                    var h = n.cells;
                    var g = h.length;
                    for (var j = 0; j < g; j++) {
                        var d = h[j];
                        if (d.getAttribute("md") == m) {
                            return d;
                        }
                    }
                }
            }
        } finally {
            n = null;
        }
    };
    LEAP.contrast = function(g, d) {
        if (g == null || g.trim().length == 0) {
            g = 0;
        }
        if (d == null || d.trim().length == 0) {
            d = 0;
        }
        var h = /^((-|\+)?\d{1,2}(\.\d+)?|100)%$/;
        if (h.test(g)) {
            g = parseFloat(g) / 100;
        } else {
            g = parseFloat(g);
        }
        if (h.test(d)) {
            d = parseFloat(d) / 100;
        } else {
            d = parseFloat(d);
        }
        return g - d;
    };
    LEAP.table.setRowColor = function(element, row, data) {
        element = LEAP._check(element, LEAP.table.d);
        if (element == null) {
            return;
        }
        var exp = element.getAttribute("rowcolorexp");
        if (exp == null) {
            return;
        }
        var ts = exp.split(";");
        var l = ts.length;
        var color = null;
        for (var i = 0; i < l; i++) {
            var ce = ts[i];
            var ces = ce.split(":");
            ce = "(" + ces[0] + ")";
            if (ces.length > 1) {
                color = ces[1];
            } else {
                color = null;
                continue;
            }
            var ret = false;
            try {
                ret = eval(ce);
            } catch (e) {}
            if (ret == true) {
                break;
            }
        }
        if (color != null && color.trim().length > 0) {
            LEAP.setStyle(row, {
                background: color
            });
        }
    };
    LEAP.table.removeRow = function(m, r) {
        try {
            m = LEAP._check(m, LEAP.table.d);
            if (m == null) {
                return;
            }
            var n = LEAP.getElement("tbody:last", m);
            if (n == null) {
                return;
            }
            if (r > -1 && r < n.rows.length) {
                var o = m[LEAP.table.b];
                if (r == o) {
                    m[LEAP.table.b] = null;
                }
                if (r < o) {
                    m[LEAP.table.b] = null;
                }
                var l = n.rows[r]["data"];
                n.deleteRow(r);
                var q = null;
                var p = null;
                var d = LEAP.table.getHeaders(m);
                for (var j = 0; j < d.length; j++) {
                    if (d[j].sncol == true) {
                        q = d[j];
                        p = j;
                        break;
                    }
                }
                var h = false;
                if (m.getAttribute("showtree") != "1") {
                    h = true;
                }
                for (var j = r; j < n.rows.length; j++) {
                    var u = n.rows[j];
                    if (!h && u.data.levels > l.levels) {
                        u.data.levels = u.data.levels - 1;
                    } else {
                        h = true;
                    }
                    if ((j % 2) == 0) {
                        LEAP.setStyle(u, {
                            background: LEAP.table.spcolor
                        });
                    } else {
                        LEAP.setStyle(u, {
                            background: LEAP.table.scolor
                        });
                    }
                    if (q != null) {
                        LEAP.table.setCellValue(u, q, u.cells[p], u.data, m);
                    }
                    u = null;
                }
                if (r != n.rows.length && m.getAttribute("showtree") == "1" && LEAP.table.rebuildTree != null) {
                    LEAP.table.rebuildTree(m);
                }
            }
            n = m = null;
        } catch (g) {}
    };
    LEAP.table.updateRow = function(j, o, h) {
        if (h == null) {
            return;
        }
        var d = LEAP.table.getHeaders(j);
        if (d == null) {
            return;
        }
        var q = LEAP.table.getRow(j, o);
        q.data = h;
        var g = d.length;
        for (var m = 0; m < g; m++) {
            var n = d[m];
            var p = q.cells[m];
            LEAP.table.setCellValue(q, n, p, h, j);
        }
        j = h = d = q = null;
    };
    LEAP.table.clearRow = function(h) {
        h[LEAP.table.b] = null;
        h = LEAP._check(h, LEAP.table.d);
        if (h == null) {
            return;
        }
        var g = LEAP.getElement("tbody:last", h);
        if (g == null) {
            return;
        }
        var d = g.childNodes.length;
        if (!LEAP.isIE) {
            d = d - 1;
        }
        LEAP.removeElement(g.rows, true);
        LEAP.table.setSelectedIndex(h, -1);
        var j = LEAP.getElement("TR[ctf=table_thead_tr]:first", h);
        if (j != null) {
            j.style.top = "0px";
            j = null;
        }
    };
    LEAP.table.getRow = function(h, g) {
        if (g == null || g < 0) {
            return null;
        }
        h = LEAP._check(h, LEAP.table.d);
        if (h == null) {
            return;
        }
        var d = LEAP.getElement("tbody:last", h);
        var j = LEAP.getElements("tr", d);
        var l = j[g];
        try {
            return l;
        } finally {
            h = d = j = l = null;
        }
    };
    LEAP.table.getRows = function(g) {
        if (g == null) {
            return null;
        }
        g = LEAP._check(g, LEAP.table.d);
        if (g == null) {
            return;
        }
        var d = LEAP.getElement("tbody:last", g);
        var h = LEAP.getElements("tr", d);
        try {
            return h;
        } finally {
            g = d = h = null;
        }
    };
    LEAP.table.setSelectedIndex = function(j, h) {
        if (h == null || h < 0) {
            return null;
        }
        j = LEAP._check(j, LEAP.table.d);
        if (j == null) {
            return;
        }
        if (h == -1) {
            j[LEAP.table.b] = null;
            return;
        }
        var o = LEAP.table.getSelectedIndex(j);
        var l = j[LEAP.table.b];
        var g = l;
        if (l == null) {
            l = 0;
        }
        var d = LEAP.getElement("tbody:last", j);
        var m = LEAP.getElements("tr", d);
        if (m == null) {
            return;
        }
        m[h]["background"] = m[h].style.background;
        if (j.className.indexOf("LC_table") == -1) {
            if (l != null && l > -1 && (l % 2) == 0) {
                LEAP.setStyle(m[l], {
                    background: LEAP.table.spcolor
                });
            } else {
                LEAP.setStyle(m[l], {
                    background: LEAP.table.scolor
                });
            }
        } else {
            LEAP.addCSS(m[l], "LC_bgc");
        }
        if (h >= m.length) {
            j[LEAP.table.b] = null;
            return;
        }
        if (j.className.indexOf("LC_table") == -1) {
            LEAP.setStyle(m[h], {
                background: LEAP.table.movecolor
            });
        } else {
            LEAP.removeCSS(m[h], "LC_bgc", false);
            LEAP.addCSS(m[h], "LC_disbgc");
        }
        j[LEAP.table.b] = h;
        if (o != null && o > -1) {
            var n = LEAP.table.getRow(j, o);
            if (n.background != null && n.background.trim().length > 0) {
                LEAP.setStyle(n, {
                    background: n.background
                });
                n.background = null;
            }
        }
        if (g != h) {
            ElementEventManager.handleEvent(j, "selectedIndexChange", {
                pindex: l,
                row: m[h],
                table: j,
                index: m[h].sectionRowIndex,
                data: m[h]["data"]
            });
        }
    };
    LEAP.table.getSelectedIndex = function(g) {
        g = LEAP._check(g, LEAP.table.d);
        if (g == null) {
            return;
        }
        var d = g[LEAP.table.b];
        g = null;
        if (d == null) {
            return -1;
        }
        return d;
    };
    LEAP.table.setSearchMethod = function(d, g, h) {
        if (typeof(g) != "function") {
            return;
        }
        d = LEAP._check(d, LEAP.table.d);
        if (d == null) {
            return;
        }
        d[LEAP.table.m] = g;
        if (h != null) {
            d[LEAP.table.md] = h;
        } else {
            d[LEAP.table.md] = this;
        }
    };
    LEAP.table.bindData = function(g, C, u, w) {
        var A = g.getAttribute("showtree");
        var h = g.getAttribute("rowheight");
        var d = g.getAttribute("closenode");
        var o = g.getAttribute("closelevel");
        var m = LEAP.convertResult(C);
        if (m != null) {
            if (u != null && w != null) {
                for (var x = 1; x < m.length; x++) {
                    for (var v = m.length - 1; v > 0; v--) {
                        var r = m[v][w];
                        var p = m[v - 1][w];
                        if (r == null) {
                            r = -99999;
                        }
                        if (p == null) {
                            r = -99999;
                        }
                        if (u == 1) {
                            if (r < p) {
                                var B = m[v];
                                m[v] = m[v - 1];
                                m[v - 1] = B;
                            }
                        } else {
                            if (u == 0) {
                                if (r > p) {
                                    var B = m[v];
                                    m[v] = m[v - 1];
                                    m[v - 1] = B;
                                }
                            }
                        }
                    }
                }
            }
            if (A == "1") {
                var l = 10;
                var z = m.length;
                if (z <= l) {
                    for (var y = 0; y < z; y++) {
                        LEAP.table.addRow(g, m[y]);
                    }
                } else {
                    for (var y = 0; y < l; y++) {
                        LEAP.table.addRow(g, m[y]);
                    }
                    var n = z % l == 0 ? parseInt(z / l) : parseInt(z / l + 1);
                    if (n > 1) {
                        LEAP.asyn(LEAP.table.asynAddRow, null, 10, g, m, n, 1, l);
                    }
                }
            } else {
                for (var y = 0; y < m.length; y++) {
                    var q = null;
                    if (C.codeValues != null) {
                        q = C.codeValues[y];
                    }
                    LEAP.table.addRow(g, m[y]);
                }
            }
        }
        if (A == "1" && LEAP.table.rebuildTree != null) {
            LEAP.table.rebuildTree(g);
        }
    };
    LEAP.table.asynAddRow = function(m, l, n, u, p) {
        if (!l) {
            return;
        }
        var h = m.getAttribute("showtree");
        var g = m.getAttribute("closenode");
        var d = m.getAttribute("closelevel");
        var r = 0;
        var q = 0;
        var o = false;
        if (u == n - 1) {
            r = u * p;
            q = l.length;
            o = true;
        } else {
            r = u * p;
            q = u * p + p;
        }
        for (var j = r; j < q; j++) {
            LEAP.table.addRow(m, l[j]);
        }
        LEAP.table.rebuildTree(m);
        if (h == "1" && g == "1") {
            LEAP.table.closeAllNode(m, d);
        }
        if (o == false) {
            LEAP.asyn(LEAP.table.asynAddRow, null, 10, m, l, n, u + 1, p);
        }
    };
    LEAP.table.getCheckedRows = function(m) {
        var h = null;
        try {
            m = LEAP._check(m, LEAP.table.d);
            if (m == null) {
                return;
            }
            if (m.getAttribute("showcheck") != "1") {
                return;
            }
            var g = LEAP.getElements("[ctf=table_chk]:checked", m);
            if (g != null) {
                h = [];
                var d = g.length;
                for (var j = 0; j < d; j++) {
                    h[j] = g[j].parentNode.parentNode;
                }
                g = null;
                return h;
            }
        } finally {
            h = m = null;
        }
    };
    LEAP.table.setCheckedRow = function(g, j, p) {
        var n = null;
        try {
            g = LEAP._check(g, LEAP.table.d);
            if (g == null) {
                return;
            }
            if (g.getAttribute("showcheck") != "1") {
                return;
            }
            if (j == null) {
                var m = LEAP.getElements("[ctf=table_chk]", g);
                if (m != null) {
                    n = [];
                    var d = m.length;
                    for (var h = 0; h < d; h++) {
                        var o = m[h];
                        if (p != false) {
                            o.setAttribute("checked", true);
                            if (o.checked != null) {
                                o.checked = true;
                            }
                        } else {
                            o.setAttribute("checked", false);
                            if (o.checked != null) {
                                o.checked = false;
                            }
                            o.removeAttribute("checked");
                        }
                    }
                    m = null;
                }
            } else {
                var q = LEAP.table.getRow(g, j);
                if (q != null) {
                    var o = LEAP.getElement("[ctf=table_chk]", q);
                    if (p != false) {
                        o.setAttribute("checked", true);
                        if (o.checked != null) {
                            o.checked = true;
                        }
                    } else {
                        o.setAttribute("checked", false);
                        if (o.checked != null) {
                            o.checked = false;
                        }
                        o.removeAttribute("checked");
                    }
                    q = null;
                }
            }
        } finally {
            n = g = null;
        }
    };
    LEAP.table.gotoPage = function(h, B, j, m, q) {
        h = LEAP._check(h, LEAP.table.d);
        if (h == null) {
            return;
        }
        var n = LEAP.getElement("[ctf=table_page_in]", h);
        if (n != null) {
            n.value = "";
            n = null;
        }
        var d = h.getAttribute("asyncount");
        if (String.isEmpty(h.getAttribute("sort"))) {
            h.setAttribute("sort", LEAP.table.defaultSortMode);
        }
        if (m == null && h.getAttribute("sort") == "client") {
            var u = LEAP.getElement("div[flag=orderflag]", h);
            if (u != null) {
                var w = u.parentNode;
                w.removeChild(u);
                u = w = null;
            }
        }
        if (h.getAttribute("scrollmode") && !h.getAttribute("_inittablescrol")) {
            h.setAttribute("_inittablescrol", "1");
            var z = LEAP.getElement("table:last", h);
            var l = LEAP.getElements("th", h);
            if (l) {
                for (var v = 0; v < l.length; v++) {
                    l[v].setAttribute("_thid_", UUID.randomUUID());
                }
            }
            var A = document.createElement("div");
            A.innerHTML = z.outerHTML;
            var r = LEAP.getElement("table", A);
            r.removeChild(LEAP.getElement("tbody", r));
            r.style.zIndex = "2";
            r.setAttribute("table_scrtarget", "1");
            r.style.position = "absolute";
            A.removeChild(r);
            A = null;
            z.parentElement.insertBefore(r, z);
            try {
                var p = LEAP.getElement("input[type=checkbox]", z);
                if (p) {
                    LEAP.getElement("input[type=checkbox]", r)[DelegateUIEventManager.e] = p[DelegateUIEventManager.e];
                    if (p.getAttribute("ut")) {
                        var g = LEAP.getLoadedModule(h.getAttribute("instance"));
                        if (g != null) {
                            g.removeUTCache(p.getAttribute("ut"));
                        }
                        p.removeAttribute("ut");
                    }
                    p = null;
                }
            } catch (x) {}
        }
        if (d != "1") {
            var o = LEAP.getElement("[ctf=table_page_num]", h.parentElement.parentElement);
            if (o) {
                o.innerHTML = B;
            }
            var y = LEAP.getElement("[ctf=table_page_info]", h);
            if (y != null) {
                y.innerHTML = "&nbsp&nbsp&nbsp&nbsp<B><font style='color:red;font-size:14px'>正在查询...<font><B>&nbsp&nbsp&nbsp&nbsp";
            }
            y = null;
        }
        LEAP.asyn(LEAP.table._gotoPage, null, null, h, B, j, m, q);
    };
    LEAP.table.setCodeType = function(j, n, g) {
        if (j == null) {
            return false;
        }
        if (n == null) {
            return false;
        }
        var m = LEAP.getElement("th[md=" + n + "]", j);
        if (m != null && m.setAttribute) {
            m.setAttribute("code", g);
            var o = LEAP.table.getHeaders(j);
            var d = o.length;
            for (var h = 0; h < d; h++) {
                var p = o[h];
                if (p.md == n) {
                    p.code = g;
                }
            }
            return true;
        }
        return false;
    };
    LEAP.table.getPageText = function(d) {
        var g = d.getAttribute("pge");
        if (String.isEmpty(g)) {
            g = commfields.pge;
        }
        return g;
    };
    LEAP.table.clearPage = function(g) {
        g = LEAP._check(g, LEAP.table.d);
        if (g == null) {
            return;
        }
        var d = LEAP.getElement("[ctf=table_page_countdiv]", g.parentElement.parentElement);
        var j = LEAP.getElement("[ctf=table_page_num]", g.parentElement.parentElement);
        var h = LEAP.getElement("[ctf=table_page_info]", g);
        if (h != null) {
            h.innerHTML = LEAP.table.getPageText(g).replace("@pageNum", 0).replace("@endNum", 0).replace("@beginNum", 0).replace("@pageCount", 0).replace("@size", 0).replace("@count", 0).replaceall("@pageSize", 0);
        }
        if (d != null) {
            d.style.display = "none";
        }
        if (j) {
            j.innerHTML = "0";
        }
        g = h = null;
    };
    LEAP.table._gotoPage = function(element, gotoPageNum, resultset, clientsortmode, sortmd) {
        if (typeof(gotoPageNum) != "number" || gotoPageNum < 1) {
            return;
        }
        element = LEAP._check(element, LEAP.table.d);
        if (element == null) {
            return;
        }
        var asyncount = element.getAttribute("asyncount");
        var showtree = element.getAttribute("showtree");
        var closenode = element.getAttribute("closenode");
        var closelevel = element.getAttribute("closelevel");
        LEAPLG.table_scrl(LEAP.getElement("table:first", element).parentElement, true);
        var fn = element[LEAP.table.m];
        var sm = element.getAttribute("searchMethod");
        if (fn == null && sm != null) {
            try {
                element[LEAP.table.m] = fn = eval("(" + sm + ")");
            } catch (err) {}
        }
        if (fn == null) {
            return;
        }
        if ((element[LEAP.table.p] == null || element[LEAP.table.p] == 0) && element.children && element.children.length) {
            if (element.children[0].clientHeight == 0) {
                var fn1 = function() {
                    LEAP.table._gotoPage(element, gotoPageNum);
                    src = null;
                };
                setTimeout(fn1, 50);
                return;
            }
            var as = element.getAttribute("autosize");
            if (as != null && as == 1 || as == "true") {
                var rh = element.getAttribute("rowheight");
                var b = false;
                if (rh) {
                    rh = rh * 1;
                    if (rh) {
                        element[LEAP.table.p] = parseInt((element.children[0].clientHeight - rh) / rh);
                        b = true;
                    }
                }
                if (element.children[0].clientHeight > 150) {
                    var tp = null;
                    if (!b) {
                        tp = parseInt((element.children[0].clientHeight - 24) / 24);
                    } else {
                        tp = parseInt((element.children[0].clientHeight - rh) / rh);
                    }
                    element[LEAP.table.p] = tp;
                } else {
                    element[LEAP.table.p] = LEAP.tonum(element.getAttribute(LEAP.table.p));
                }
            } else {
                element[LEAP.table.p] = LEAP.tonum(element.getAttribute(LEAP.table.p));
            }
        }
        var pageSize = element[LEAP.table.p];
        if (!pageSize) {
            pageSize = 12;
        }
        var d = element[LEAP.table.md];
        if (d == null) {
            d = element;
        }
        if (d != null && d.moduleDisposed) {
            return;
        }
        var table_page_countdiv = LEAP.getElement("[ctf=table_page_countdiv]", element.parentElement.parentElement);
        var result = null;
        var isasyn = false;
        if (resultset != null) {
            result = resultset;
        } else {
            result = fn.call(d, element, gotoPageNum, pageSize);
            if (result != null && result.breakResult != null && result.breakResult == false) {
                return;
            }
            if (result != null && result.leapclient_asynwait != null && result.leapclient_asynwait == 1) {
                if (asyncount != "1") {
                    var info = LEAP.getElement("[ctf=table_page_info]", element);
                    if (info != null) {
                        info.innerHTML = "&nbsp&nbsp&nbsp&nbsp<B><font style='color:red;font-size:14px'>正在查询...<font><B>&nbsp&nbsp&nbsp&nbsp";
                    }
                    if (table_page_countdiv != null) {
                        table_page_countdiv.style.display = "none";
                    }
                    info = null;
                }
                return;
            }
            if (result != null && result.leapclient_isasyn != null && result.leapclient_isasyn == 1) {
                result = null;
                isasyn = true;
            }
        }
        d = null;
        if (result != null) {
            element.codeTypes = result.codeTypes;
            element.metaDatas = result.metaData;
        }
        if (asyncount != "1") {
            element.pageCount = 0;
            element.pageNum = 0;
            element.pageResultCount = 0;
        }
        element.pageResult = null;
        var info = LEAP.getElement("[ctf=table_page_info]", element);
        LEAP.table.clearRow(element);
        if (result == null || result.result == null) {
            if (!isasyn) {
                if (info != null) {
                    if (asyncount != "1") {
                        info.innerHTML = LEAP.table.getPageText(element).replace("@pageNum", 0).replace("@endNum", 0).replace("@beginNum", 0).replace("@pageCount", 0).replace("@size", 0).replace("@count", 0).replace("@pageSize", pageSize);
                        info = null;
                        if (table_page_countdiv != null) {
                            table_page_countdiv.style.display = "none";
                        }
                    }
                } else {}
            }
            return;
        }
        var pc = result.pageCount;
        if (asyncount != "1") {
            element.pageCount = pc;
            element.pageNum = result.pageNum;
            element.pageResultCount = result.count;
        }
        if (element.getAttribute("sort") == "client") {
            element.pageResult = result;
        }
        LEAP.table.bindData(element, result, clientsortmode, sortmd);
        if (info != null) {
            if (asyncount != "1") {
                if (element.getAttribute("showselsize") && !element.getAttribute("_initshowselsize")) {
                    element.setAttribute("_initshowselsize", "1");
                    var selstr = "<font style='margin-left:50px'></font><div value='@pagesizevalue' class='select' ct='select' style='position:absolute;right:168px;height:25px;top:0px;border:1px solid #d4d4d4;margin-top:3px;width=60px;' _table_sel_top='-66px' _istabledynasize='1'><div class='lg_p_lr_right select_drop' ctf='select_drop'></div><div class='lg_p_lr_fill'><div class='lg_p_lr_fill_c '><input value='@pagesizevalue' ctf='selectbtn' type=button class='selectbtn ellipsis' style='vertical-align:super'></div></div><div class='select_items' ctf='select_items' style='top:-66px;width:30px;min-width:30px;height:70px;overflow:hidden'>";
                    var tmps = [10, 20, 50];
                    if (!tmps.contains(pageSize)) {
                        for (var i = 0; i < 2; i++) {
                            if (tmps[i] < pageSize && tmps[i + 1] > pageSize) {
                                tmps = tmps.insert(pageSize, i + 1);
                                break;
                            }
                        }
                    }
                    for (var i = 0; i < tmps.length; i++) {
                        selstr += "<div><a value='" + tmps[i] + "' href='javascript:void(0)' ctf='select_item'>" + tmps[i] + "</a></div>";
                    }
                    selstr += "</div></div>";
                    LEAP.getElement("[ctf=table_page_info]", element).parentElement.parentElement.style.overflow = "visible";
                    element.setAttribute("_selsizestr", selstr);
                }
                var table_page_count = LEAP.getElement("[ctf=table_page_count]", element.parentElement.parentElement);
                var table_page_size = LEAP.getElement("[ctf=table_page_size]", element.parentElement.parentElement);
                var as = element.getAttribute("_selsizestr");
                var psstr = pageSize;
                if (as) {
                    psstr = as.replaceall("@pagesizevalue", pageSize);
                }
                if (pc != -1) {
                    info.innerHTML = LEAP.table.getPageText(element).replace("@pageNum", element.pageNum).replace("@endNum", result.endNum).replace("@beginNum", result.beginNum).replace("@pageCount", element.pageCount).replace("@size", result.size).replace("@count", element.pageResultCount).replace("@pageSize", psstr);
                    if (table_page_count != null) {
                        table_page_count.innerHTML = element.pageResultCount;
                    }
                    if (table_page_size != null) {
                        table_page_size.innerHTML = pageSize;
                    }
                    if (table_page_countdiv != null) {
                        table_page_countdiv.style.display = "block";
                    }
                } else {
                    info.innerHTML = "第@pageNum页 @size条 @pageSize条<font style='color: #001693;font-weight: bold;text-align:center;width:8px;'>/</font>页".replace("@pageNum", element.pageNum).replace("@endNum", result.endNum).replace("@beginNum", result.beginNum).replace("@pageCount", element.pageCount).replace("@size", result.size).replace("@count", element.pageResultCount).replaceall("@pageSize", psstr);
                    if (table_page_count != null) {
                        table_page_count.innerHTML = element.pageResultCount;
                    }
                    if (table_page_size != null) {
                        table_page_size.innerHTML = pageSize;
                    }
                    if (table_page_countdiv != null) {
                        table_page_countdiv.style.display = "block";
                    }
                }
            }
        }
        info = null;
        if (showtree == "1" && closenode == "1") {
            LEAP.table.closeAllNode(element, closelevel);
        }
        ElementEventManager.handleEvent(element, "dataLoaded", {
            table: element
        });
    };
    LEAP.table.asynCountPage = function(d, l, j) {
        d = LEAP._check(d, LEAP.table.d);
        if (d == null) {
            return;
        }
        var h = LEAP.getElement("[ctf=table_page_num]", d.parentElement.parentElement);
        if (h) {
            h.innerHTML = l;
        }
        var g = LEAP.getElement("[ctf=table_page_info]", d);
        if (g != null) {
            g.innerHTML = "&nbsp&nbsp&nbsp&nbsp<img src='" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/progressbar.gif' style='border:none'>&nbsp&nbsp&nbsp&nbsp";
        }
        g = null;
        LEAP.asyn(LEAP.table._asynCountPage, null, null, d, l, j);
    };
    LEAP.table._asynCountPage = function(n, j, v) {
        n = LEAP._check(n, LEAP.table.d);
        if (n == null) {
            return;
        }
        var y = v;
        var d = false;
        var l = LEAP.getElement("[ctf=table_page_countdiv]", n.parentElement.parentElement);
        var g = LEAP.getElement("[ctf=table_page_info]", n);
        if (y != null && y.leapclient_asynwait != null && y.leapclient_asynwait == 1) {
            if (g != null) {
                g.innerHTML = "&nbsp&nbsp&nbsp&nbsp<img src='" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/progressbar.gif' style='border:none'>&nbsp&nbsp&nbsp&nbsp";
            }
            if (l != null) {
                l.style.display = "none";
            }
            g = null;
            return;
        }
        if (y != null && y.leapclient_isasyn != null && y.leapclient_isasyn == 1) {
            y = null;
            d = true;
        }
        n.pageCount = 0;
        n.pageNum = 0;
        n.pageResultCount = 0;
        if (y == null) {
            if (!d) {
                if (g != null) {
                    g.innerHTML = LEAP.table.getPageText(n).replace("@pageNum", 0).replace("@endNum", 0).replace("@beginNum", 0).replace("@pageCount", 0).replace("@size", 0).replace("@count", 0).replace("@pageSize", 0);
                    g = null;
                    if (l != null) {
                        l.style.display = "none";
                    }
                } else {}
            }
            return;
        }
        var r = y.size;
        var u = y.pageCount;
        n.pageCount = u;
        n.pageNum = y.pageNum;
        n.pageResultCount = y.count;
        if (g != null) {
            if (n.getAttribute("showselsize") && !n.getAttribute("_initshowselsize")) {
                n.setAttribute("_initshowselsize", "1");
                var x = "<font style='margin-left:50px'></font><div value='@pagesizevalue' class='select' ct='select' style='position:absolute;right:168px;height:25px;top:0px;border:1px solid #d4d4d4;margin-top:3px;width=60px;' _table_sel_top='-66px' _istabledynasize='1'><div class='lg_p_lr_right select_drop' ctf='select_drop'></div><div class='lg_p_lr_fill'><div class='lg_p_lr_fill_c '><input value='@pagesizevalue' ctf='selectbtn' type=button class='selectbtn ellipsis' style='vertical-align:super'></div></div><div class='select_items' ctf='select_items' style='top:-66px;width:30px;min-width:30px;height:70px;overflow:hidden'>";
                var p = [10, 20, 50];
                if (!p.contains(r)) {
                    for (var m = 0; m < 2; m++) {
                        if (p[m] < r && p[m + 1] > r) {
                            p = p.insert(r, m + 1);
                            break;
                        }
                    }
                }
                for (var m = 0; m < p.length; m++) {
                    x += "<div><a value='" + p[m] + "' href='javascript:void(0)' ctf='select_item'>" + p[m] + "</a></div>";
                }
                x += "</div></div>";
                LEAP.getElement("[ctf=table_page_info]", n).parentElement.parentElement.style.overflow = "visible";
                n.setAttribute("_selsizestr", x);
            }
            var q = LEAP.getElement("[ctf=table_page_count]", n.parentElement.parentElement);
            var o = LEAP.getElement("[ctf=table_page_size]", n.parentElement.parentElement);
            var h = n.getAttribute("_selsizestr");
            var w = r;
            if (h) {
                w = h.replaceall("@pagesizevalue", r);
            }
            if (u != -1) {
                g.innerHTML = LEAP.table.getPageText(n).replace("@pageNum", n.pageNum).replace("@endNum", y.endNum).replace("@beginNum", y.beginNum).replace("@pageCount", n.pageCount).replace("@size", y.size).replace("@count", n.pageResultCount).replace("@pageSize", w);
                if (q != null) {
                    q.innerHTML = n.pageResultCount;
                }
                if (o != null) {
                    o.innerHTML = r;
                }
                if (l != null) {
                    l.style.display = "block";
                }
            } else {
                g.innerHTML = "第@pageNum页 @size条 @pageSize条<font style='color: #001693;font-weight: bold;text-align:center;width:8px;'>/</font>页".replace("@pageNum", n.pageNum).replace("@endNum", y.endNum).replace("@beginNum", y.beginNum).replace("@pageCount", n.pageCount).replace("@size", y.size).replace("@count", n.pageResultCount).replaceall("@pageSize", w);
                if (q != null) {
                    q.innerHTML = n.pageResultCount;
                }
                if (o != null) {
                    o.innerHTML = r;
                }
                if (l != null) {
                    l.style.display = "block";
                }
            }
        }
        g = null;
    };
    LEAP.table.refreshPage = function(d) {
        d = LEAP._check(d, LEAP.table.d);
        if (d == null) {
            return;
        }
        var g = d.pageNum;
        if (g == null || g < 1) {
            g = 1;
        }
        LEAP.table.gotoPage(d, g);
    };
    LEAP.table.getOperationList = function(p) {
        p = LEAP._check(p, LEAP.table.d);
        if (p == null) {
            return;
        }
        try {
            var h = LEAP.table.getHeaders(p);
            if (h != null) {
                var m = h.length;
                for (var q = 0; q < m; q++) {
                    var r = h[q];
                    if (r.tpo != null && r.tpo.Trim() != "") {
                        var u = r.tpo.split(commfields.tpos);
                        var v = [];
                        var x = u.length;
                        for (var n = 0; n < x; n++) {
                            var g = u[n];
                            if (g != null && g.Trim() != "") {
                                var y = g.split(commfields.tpos2);
                                if (y.length == 2) {
                                    var w = {
                                        name: y[0],
                                        flag: y[1]
                                    };
                                    v.add(w);
                                }
                            }
                        }
                        if (v.length == 0) {
                            return null;
                        }
                        return v;
                        r = null;
                    }
                }
            }
            h = null;
        } finally {
            p = null;
        }
    };
    LEAP.table.beginCopyFromClipboard = function(o) {
        if (LEAP.table.cf == null) {
            LEAP.table.cf = LEAP.form.create(null, "复制Excel表格", 500, 500).form;
            LEAP.form.setContent(LEAP.table.cf, leapclient.load("LEAP/Resource/HTML/Control/copyTable.html"));
        }
        LEAP.table.cfun = null;
        LEAP.table.cfun = o;
        LEAP.table.cr = null;
        var l = new StringBuffer();
        try {
            var n = window.clipboardData.getData("text");
            if (n == null || n.length == 0) {
                return;
            }
            l.append('<table cellspacing=0 style="height:auto;');
            var v = n.split("\n");
            var g = v.length;
            LEAP.table.cr = [];
            for (var m = 0; m < g; m++) {
                var w = v[m];
                if (w != null && w.length != 0 && w.Trim().length != 0) {
                    var r = w.split("\t");
                    var q = r.length;
                    var u = [];
                    if (m == 0) {
                        l.append("width:");
                        l.append(q * 90);
                        l.append('px">');
                    }
                    l.append("<tr>");
                    for (var h = 0; h < q; h++) {
                        var p = r[h];
                        u.add(p);
                        l.append('<td title="');
                        l.append(p);
                        l.append('">');
                        if (p == null || p.Trim() == "") {
                            p = "&nbsp";
                        }
                        l.append(p);
                        l.append("</td>");
                    }
                    LEAP.table.cr.add(u);
                    l.append("</tr>");
                }
            }
            l.append("</table>");
        } finally {
            var d = LEAP.getElement("div[ctf=table_copycons]", "div" + LEAP.table.cf);
            d.innerHTML = "";
            d.innerHTML = l.toString();
            LEAP.form.show(LEAP.table.cf);
        }
    };
    LEAP.table.init();
    LEAP.dynamodule = {};
    LEAP.dynamodule.itemflag = "<!--values-->";
    LEAP.dynamodule.radioitem = "<div ctf='radio_item'><label ctf='radio_label' value='@value' class='radio_unchecked'>@name</label></div>";
    LEAP.dynamodule.selectitem = "<DIV><A href='javascript:void(0)' ctf='select_item' value=@value>@name</A></DIV>";
    LEAP.dynamodule.z = '<TABLE class="devtable devtableext" style="WIDTH: 100%" cellSpacing=0 cellPadding=0 border=0 ct="devtable" devtable="lg"><TR class=devtablexrow><TD class=devtablexycell style="WIDTH: 20px"></TD><TD class=devtablexcell style="WIDTH: 120px">A</TD><TD class=devtablexcell>B</TD><TD class=devtablexcell style="WIDTH: 120px">C</TD><TD class=devtablexcell>D</TD></TR>@tbody<TBODY></TBODY></TABLE>';
    LEAP.dynamodule.y = '<TR><TD style="height:@rowheight" class=devtableycell>@rowsn</TD>@row</TR>';
    LEAP.dynamodule.x = '<TD class="devtableleftcell" title=@name>@name</TD><TD colSpan=@colspan class=devtablerightcell><DIV class=devtablecon>@control</DIV></TD>';
    LEAP.dynamodule._x = '<TD class="devtableleftcell" title=@name>@name</TD><TD colSpan=@colspan class=devtablerightcell>@control</TD>';
    LEAP.dynamodule.v = '<TD class="devtableleftcell" title=@name>@name</TD><TD class="devtablerightcell " style="TEXT-ALIGN: left"><LABEL class=devtablecontrol bt="text" md="@md" code="@code" ht="input" type="text"></LABEL></TD>';
    LEAP.controls = {};
    LEAP.controls.area = '<DIV style="OVERFLOW: visible; WIDTH: auto; HEIGHT: 26px" ut="System_AreaControl" ct="areagroup" md="areaid" group="area" class="devtablecontrol">区域联动选择控件</DIV>';
    LEAP.controls.date = '<DIV class="date devtablecontrol" ct="date" bt="date" md="@md" check="@check"><INPUT class=date_y maxLength=4 ctf="date_1"> <A>-</A> <INPUT class=date_i maxLength=2 ctf="date_2"> <A>-</A> <INPUT class=date_i maxLength=2 ctf="date_3"> <DIV class=date_img ctf="date_show"></DIV></DIV>';
    LEAP.controls.radio = '<DIV class="radio_frame devtablecontrol" style="OVERFLOW: visible; HEIGHT: 100%" ct="radio" bt="text" md="@md" check="@check" code="@code"><!--values--></DIV>';
    LEAP.controls.select = '<DIV class="select devtablecontrol" style="WIDTH: 100%" bt="text" ct="select" md="@md" check="@check" code="@code"><DIV class="lg_p_lr_right select_drop selectdropout" ctf="select_drop"></DIV><DIV class=lg_p_lr_fill><DIV class="lg_p_lr_fill_c "><INPUT class="selectbtn ellipsis " type=button ctf="selectbtn"> </INPUT></DIV></DIV><DIV class=select_items style="WIDTH: 392px" ctf="select_items"><DIV><A href="javascript:void(0)" value="" ctf="select_item"></A></DIV><!--values--></DIV></DIV>';
    LEAP.controls.select2 = '<DIV value="@selectvalue" class="select devtablecontrol" style="WIDTH: 100%" bt="text" ct="select" md="@md" check="@check" code="@code"><DIV class="lg_p_lr_right select_drop selectdropout" ctf="select_drop"></DIV><DIV class=lg_p_lr_fill><DIV class="lg_p_lr_fill_c "><INPUT class="selectbtn ellipsis " type=button ctf="selectbtn" value="@value"> </INPUT></DIV></DIV><DIV class=select_items style="WIDTH: 392px" ctf="select_items"><!--values--></DIV></DIV>';
    LEAP.controls.textarea = '<TEXTAREA style="FLOAT: left; OVERFLOW: auto; WIDTH: 98%; HEIGHT: 52px" md="@md" check="@check" wrap=on bt="text" ht="textarea" class="devtablecontrol"></TEXTAREA>';
    LEAP.controls.text = '<INPUT style="WIDTH: 99%" bt="text" md="@md" check="@check" ht="input" class="devtablecontrol">';
    LEAP.controls.textutil = LEAP.controls.text + '<div class="devtableutil">@unit</div>';
    LEAP.controls.view = "<label style='height:@height' md='@md' code='' type='@bt'  ht='label' bt='text' class='devtablecontrol'></label>";
    LEAP.controls.viewutil = LEAP.controls.view + '<div class="devtableutil">单位</div>';
    LEAP.controls.pohots = '<DIV class="main_content upload_photolist" style="WIDTH: 100%; HEIGHT: 240px" ct="upload_control_photolist" dev="lg" bt="text" md="@md"><DIV class="upload_btn upload_btn_upload" title=上传 style="RIGHT: 0px; POSITION: absolute; TOP: 0px" ctf="upload_btn_upload" ctt="upload_control_photolist"></DIV></DIV>';
    LEAP.dynamodule.moduleheader = "<head>\n		<!--@ \n		module = @showmodulename\n	-->\n</head>\n";
    LEAP.dynamodule.module = '<DIV style="WIDTH: 99%; POSITION: relative; HEIGHT: 100%" dev="lg">    <DIV class="lg_p_bct_top" style="DISPLAY: none; HEIGHT: 0px" dev="lg">    </DIV>    <DIV class="lg_p_bct_center" style="BOTTOM: 25px; TOP: 0px;overflow:auto;" dev="lg"> @content   </DIV>    <DIV class="lg_p_bct_bottom submitBtn" style="HEIGHT: 25px;" dev="lg">    	<DIV class=button_frame style="FLOAT: right">            <A class=button href="javascript:void(0)">                <P>                </P>                <SPAN al="@al" ut="submit" ctf="button" ht="button">                   	 确定                </SPAN>            </A>        </DIV>    </DIV></DIV>';
    LEAP.dynamodule.viewmodule = '<DIV ht="viewModule" al="@al" style="WIDTH: 99%; POSITION: relative; HEIGHT: 100%;overflow:auto;" dev="lg">@content<DIV>';
    LEAP.dynamodule.cache = new hashtable();
    LEAP.dynamodule.build = function(modulename, fields, parent, buildType) {
        if (modulename == null || modulename.Trim() == "") {
            return;
        }
        var showmodulename = "dynamodule_" + modulename;
        var datamodulename = modulename;
        var def = null;
        if (LEAP.dynamodule.cache.contains(showmodulename)) {
            def = LEAP.dynamodule.cache.getvalue(showmodulename);
        } else {
            var content = LEAP.dynamodule.innerBuild(fields, buildType);
            var html = null;
            var js = null;
            if (buildType == 1) {
                html = LEAP.dynamodule.module;
                html = html.replace("@al", "create");
                js = leapclient.load("LEAP/Studio/Template/JavaScript/create.js");
                js = js.replace("DynaCreate", "DynaCreate2").replace("this.fireEvent('onSubmit');", "this.fireEvent('onSubmit',result);").replace("if (result == true)", "if (result != null)");
            } else {
                if (buildType == 2) {
                    html = LEAP.dynamodule.module;
                    html = html.replace("@al", "modify");
                    js = leapclient.load("LEAP/Studio/Template/JavaScript/modify.js");
                } else {
                    if (buildType == 3) {
                        html = LEAP.dynamodule.viewmodule;
                        html = html.replace("@al", "view");
                        js = leapclient.load("LEAP/Studio/Template/JavaScript/view.js");
                    }
                }
            }
            js = " " + showmodulename + " = " + js.replace("@showmodulename", "").replace("@datamodulename", datamodulename);
            html = html.replace("@content", content);
            html = LEAP.dynamodule.moduleheader.replace("@showmodulename", showmodulename) + html;
            def = {
                js: js,
                html: html
            };
            with(window) {
                eval(js);
            }
            LEAP.dynamodule.cache.add(showmodulename, def);
        }
        var ret = LEAP.loadModule(null, parent, null, null, def.html);
        return ret;
    };
    LEAP.dynamodule.innerBuild = function(B, A) {
        if (B == null || B.length == 0) {
            return;
        }
        var C = B.length;
        var n = new StringBuffer();
        var x = [];
        for (var D = 0; D < C; D++) {
            var I = B[D];
            var J = I.name.toLowerCase().Trim();
            if (J == "id" || J == "gispid" || J == "shape" || J == "objectid") {
                continue;
            }
            var H = I.cnname;
            var u = I.field.isnullable;
            var m = I.field.minsize;
            var G = I.field.maxsize;
            var y = I.field.measuerunit;
            var w = I.field.remarks;
            var q = I.field.datatype;
            var d = I.field.codetype;
            var g = false;
            var z = "";
            var r = null;
            var v = H;
            if (v == null || v.Trim() == "") {
                v = J;
            }
            var o = null;
            if (A == 1 || A == 2) {
                if (J == "areaid") {
                    o = LEAP.controls.area;
                    g = true;
                } else {
                    if (J == "照片" || J == "photos" || J == "photos") {
                        o = LEAP.controls.pohots.replace("@md", J);
                        z = "230px";
                        g = true;
                    } else {
                        if (q == 91 || q == 93 || q == 92) {
                            o = LEAP.controls.date.replace("@md", J);
                        } else {
                            if (d != null) {
                                r = LEAP.getCodeValue(d);
                                if (r != null) {
                                    if (r.length < 3) {
                                        o = LEAP.controls.radio.replace("@md", J).replace("@code", d);
                                        o = LEAP.dynamodule.buildRadioItem(o, r);
                                    } else {
                                        if (r.length < 7) {
                                            o = LEAP.controls.radio.replace("@md", J).replace("@code", d);
                                            o = LEAP.dynamodule.buildRadioItem(o, r);
                                            g = true;
                                        } else {
                                            o = LEAP.controls.select.replace("@md", J).replace("@code", d);
                                            o = LEAP.dynamodule.buildSelectItem(o, r);
                                        }
                                    }

                                } else {
                                    o = LEAP.controls.text.replace("@md", J).replace("@code", d);
                                }
                            } else {
                                if (G > 300) {
                                    o = LEAP.controls.textarea.replace("@md", J).replace("@code", d);
                                    g = true;
                                    z = "52px";
                                } else {
                                    if (y == null || y.Trim() == "") {
                                        o = LEAP.controls.text.replace("@md", J).replace("@code", d);
                                    } else {
                                        o = LEAP.controls.textunit.replace("@md", J).replace("@unit", y);
                                    }
                                }
                            }
                        }
                    }
                }
                var F = new StringBuffer();
                if (m != null && r == null) {
                    F.append("minlen:" + m.toString(10));
                }
                if (G != null && r == null) {
                    F.append("maxlen:" + G.toString(10));
                }
                if (u != null && u == 0) {
                    F.append("notnull:true");
                }
                if (q == 2 || q == 3 || q == 6 || q == 7 || q == 8) {
                    F.append("isnumber:true");
                }
                if (q == 4 || q == 5 || q == -6 || q == -5) {
                    F.append("isint:true");
                }
                o = o.replace("@check", F.toString());
            } else {
                if (A == 3) {
                    if (J == "areaid") {
                        o = LEAP.controls.area;
                        g = true;
                    } else {
                        if (J == "照片" || J == "photos" || J == "photos") {
                            o = LEAP.controls.pohots.replace("@md", J);
                            z = "230px";
                            g = true;
                        } else {
                            if (G > 300) {
                                g = true;
                                z = "52px";
                            }
                            if (y == null || y.Trim() == "") {
                                o = LEAP.controls.view.replace("@md", J);
                            } else {
                                o = LEAP.controls.viewunit.replace("@md", J).replace("@unit", y);
                            }
                            if (q == 91 || q == 92 || q == 93) {
                                o = o.replace("@bt", "date");
                            } else {
                                o = o.replace("@bt", "text");
                            }
                            o = o.replace("@height", z);
                            o = o.replace("@check", "");
                        }
                    }
                }
            }
            x.add({
                control: o,
                def: I,
                text: v,
                oneline: g,
                height: z
            });
        }
        var C = x.length;
        var p = [];
        for (var D = 0; D < C; D++) {
            var o = x[D];
            if (A < 4) {
                if (o.oneline) {
                    p.add([o]);
                } else {
                    if (p.length == 0) {
                        p.add([o]);
                    } else {
                        if (p[p.length - 1].length == 2) {
                            p.add([o]);
                        } else {
                            if (p[p.length - 1].length == 1 && p[p.length - 1][0].oneline) {
                                p.add([o]);
                            } else {
                                p[p.length - 1].add(o);
                            }
                        }
                    }
                }
            }
        }
        var C = p.length;
        for (var D = 0; D < C; D++) {
            var j = p[D];
            var h = "";
            if (j.length == 2) {
                if (A == 1 || A == 2) {
                    h = LEAP.dynamodule.x.replace("@control", j[0].control).replaceall("@name", j[0].text).replace("@colspan", 1);
                    h += LEAP.dynamodule.x.replace("@control", j[1].control).replaceall("@name", j[1].text).replace("@colspan", 1);
                } else {
                    if (A == 3) {
                        h = LEAP.dynamodule._x.replace("@control", j[0].control).replaceall("@name", j[0].text).replace("@colspan", 1);
                        h += LEAP.dynamodule._x.replace("@control", j[1].control).replaceall("@name", j[1].text).replace("@colspan", 1);
                    }
                }
            } else {
                h = LEAP.dynamodule.x.replace("@control", j[0].control).replaceall("@name", j[0].text).replace("@colspan", 3);
            }
            h = LEAP.dynamodule.y.replace("@rowsn", D + 1).replace("@rowheight", j[0].height).replace("@row", h);
            n.append(h);
        }
        return LEAP.dynamodule.z.replace("@tbody", n.toString("\n"));
    };
    LEAP.dynamodule.buildRadioItem = function(m, g) {
        if (g == null) {
            return m;
        }
        var d = g.length;
        var o = new StringBuffer();
        var j = 0;
        for (var h = 0; h < d; h++) {
            var n = g[h];
            o.append(LEAP.dynamodule.radioitem.replace("@value", n.codeid).replace("@name", n.codevalue));
            if (n.codevalue != null) {
                j += n.codevalue.length;
            }
        }
        if (j > 14) {
            m = m.replace("cell2", "cell1");
        }
        g = null;
        return m.replace(LEAP.dynamodule.itemflag, o.toString());
    };
    LEAP.dynamodule.buildSelectItem = function(j, g) {
        if (g == null) {
            return j;
        }
        var d = g.length;
        var n = new StringBuffer();
        for (var h = 0; h < d; h++) {
            var m = g[h];
            n.append(LEAP.dynamodule.selectitem.replace("@value", m.codeid).replace("@name", m.codevalue));
        }
        g = null;
        return j.replace(LEAP.dynamodule.itemflag, n.toString());
    };
    LEAP.dynamodule.S_z = '<TABLE class="devtable devtableext " style="WIDTH: 100%; HEIGHT: 100%" cellSpacing=0 cellPadding=0 border=0 ct="devtable" devtable="lg"><TBODY class=""><TR class="devtablexrow "><TD class="devtablexycell " style="WIDTH: 20px"></TD><TD class="devtablexcell " style="WIDTH: 100px">A</TD><TD class="devtablexcell " style="WIDTH: 25px">B</TD><TD class=devtablexcell>C</TD></TR><TR><TD class="devtableycell " style="HEIGHT: 70%">1</TD><TD class="" style="OVERFLOW: auto" rowSpan=2><DIV class=studio_selected style="OVERFLOW: auto; WIDTH: 100%; HEIGHT: 100%" ut="props" dev="lg">@props</DIV></TD><TD class="" style="VERTICAL-ALIGN: middle; TEXT-ALIGN: center" rowSpan=2 ut="btns"><DIV class="table_project_menu_new table_project_menuicon " title=新增查询条件 ut="btnnew" dev="lg"></DIV><DIV class="table_project_menu_newbefore table_project_menuicon " title=新增排序条件 ut="btnsort" dev="lg"></DIV><DIV class="table_project_menu_refresh table_project_menuicon " title=刷新,删除所有条件 ut="btnref" dev="lg"></DIV></TD><TD class="" style="VERTICAL-ALIGN: top; OVERFLOW: auto; TEXT-ALIGN: left"><DIV class="" style="OVERFLOW: auto; WIDTH: 100%; HEIGHT: 100%" ut="pars" dev="lg"><TABLE class="devtable devtableext" style="WIDTH: 100%" cellSpacing=0 cellPadding=0 border=0 ct="devtable" devtable="lg"><TBODY><TR class=devtablexrow><TD class="devtablexcell " style="WIDTH: 70px">A</TD><TD class="devtablexcell " style="WIDTH: 100px">B</TD><TD class="devtablexcell " style="WIDTH: 70px">C</TD><TD class="devtablexcell ">D</TD><TD class="devtablexcell " style="WIDTH: 25px">E</TD></TR><TR><TD class="">和/或</TD><TD class="">字段</TD><TD class="">运算符</TD><TD class="">值</TD><TD>删除</TD></TR></TBODY></TABLE></DIV></TD></TR><TR><TD class="devtableycell " style="HEIGHT: 30%">2</TD><TD class="" style="VERTICAL-ALIGN: top; OVERFLOW: auto; TEXT-ALIGN: left"><DIV class="" style="OVERFLOW: auto; WIDTH: 100%; HEIGHT: 100%" ut="shorts" dev="lg"><TABLE class="devtable devtableext" style="WIDTH: 100%" cellSpacing=0 cellPadding=0 border=0 ct="devtable" devtable="lg"><TBODY><TR class=devtablexrow><TD class="devtablexcell " style="WIDTH: 100px">A</TD><TD class="devtablexcell ">B</TD><TD class="devtablexcell " style="WIDTH: 25px">C</TD></TR><TR><TD class="">顺序</TD><TD class=studio_selected>字段</TD><TD>删除</TD></TR></TBODY></TABLE></DIV></TD></TR><TR><TD class="devtableycell " style="HEIGHT: 18px">3</TD><TD class="" style="VERTICAL-ALIGN: bottom; TEXT-ALIGN: right" colSpan=3><DIV class=button_frame style="FLOAT: right" ct="button"><A class=button href="javascript:void(0)"><P></P><SPAN class="" ut="submit" ctf="button" ht="button">确定</SPAN> </A></DIV><DIV class=button_frame style="FLOAT: right" ct="button"><A class=button href="javascript:void(0)"><P></P><SPAN class="" ut="btnclose" ctf="button" ht="button">关闭</SPAN> </A></DIV><DIV class="button_frame " style="FLOAT: right" ct="button"><A class="button " href="javascript:void(0)"></A></DIV><DIV class=button_frame style="FLOAT: right" ct="button"><A class=button href="javascript:void(0)"><P></P><SPAN class="" ut="gissearch" ctf="button" ht="button">地图搜索</SPAN></A></DIV></TD></TR></TBODY></TABLE>';
    LEAP.dynamodule.S_y = '<div class="advancesearch" style="height:20px;width:100%;cursor:pointer;margin-top:5px;border-width:1px;border-color:green;" text="@text" mdname="@md" datatype="@datatype" codetype="@code">@text</div>';
    LEAP.dynamodule.S_cache = new hashtable();
    LEAP.dynamodule.buildAdvanceSearch = function(modulename, fields, parent) {
        if (modulename == null || modulename.Trim() == "") {
            return;
        }
        var showmodulename = "dynaadvancesearchmodule_" + modulename;
        var datamodulename = modulename;
        var def = null;
        if (LEAP.dynamodule.S_cache.contains(showmodulename)) {
            def = LEAP.dynamodule.S_cache.getvalue(showmodulename);
        } else {
            var content = LEAP.dynamodule.innerBuildAdvanceSearch(modulename, fields);
            var html = null;
            html = LEAP.dynamodule.moduleheader.replace("@showmodulename", showmodulename) + content;
            def = {
                html: html
            };
            with(window) {
                eval(showmodulename + " = LEAP.advanceSearch;");
            }
            LEAP.dynamodule.S_cache.add(showmodulename, def);
        }
        var ret = LEAP.loadModule(null, parent, null, null, def.html);
        ret.moduleName = modulename;
        return ret;
    };
    LEAP.dynamodule.innerBuildAdvanceSearch = function(r, o) {
        if (r == null || r.Trim() == "") {
            return;
        }
        var j = o.length;
        var h = new StringBuffer();
        var v = [];
        var h = new StringBuffer();
        for (var n = 0; n < j; n++) {
            var q = o[n];
            var d = q.name.toLowerCase();
            var x = q.cnname;
            var u = q.field.measuerunit;
            var m = q.field.datatype;
            var g = q.field.codetype;
            var y = null;
            var p = LEAP.dynamodule.S_y;
            var w = x;
            if (w == null || w.Trim() == "") {
                w = d;
            }
            if (g != null) {
                y = LEAP.getCodeValue(g);
                if (y != null) {
                    p = p.replace("@code", g);
                } else {
                    p = p.replace('codetype="@code"', "");
                }
            } else {
                p = p.replace('codetype="@code"', "");
            }
            p = p.replace("@datatype", m).replace("@md", d).replaceall("@text", w);
            h.append(p);
        }
        return LEAP.dynamodule.S_z.replace("@props", h.toString());
    };
    LEAP.advanceSearch = function() {
        this.z = '<DIV ctf="radio_item"><LABEL class=radio_checked ischecked=true ctf="radio_label" value="0">顺序</LABEL></DIV><DIV ctf="radio_item"><LABEL class=radio_unchecked ctf="radio_label" value="1">倒序</LABEL></DIV>';
        this.y = '<DIV ctf="radio_item"><LABEL class=radio_checked ischecked=true ctf="radio_label" value="0">和</LABEL></DIV><DIV ctf="radio_item"><LABEL class=radio_unchecked ctf="radio_label" value="1">或</LABEL></DIV>';
        this.x = '<DIV><A href="javascript:void(0)" ctf="select_item" value="2">包含</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="1">=</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="4">&gt;</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="5">&lt;</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="6">&ge;</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="7">&le;</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="8">&ne;</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="11">不包含</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="13">空</A></DIV><DIV><A href="javascript:void(0)" ctf="select_item" value="14">非空</A></DIV>';
        this.w = '<div class="table_project_menu_del table_project_menuicon" title="删除条件"></div>';
        this.moduleName = null;
        this.propclick = function(d) {
            var g = LEAP.getElements(">div", this.getUT("props"));
            LEAP.setStyle(g, {
                border: ""
            });
            LEAP.setStyle(d.caller, {
                border: "solid"
            });
            LEAP.setAttribute(g, "selected", "0");
            LEAP.setAttribute(d.caller, "selected", "1");
            d = g = null;
        };
        this.getSelectedProps = function() {
            var j = LEAP.getElement(">div[selected=1]", this.getUT("props"));
            if (j != null) {
                var h = j.getAttribute("datatype");
                var d = j.getAttribute("mdname");
                var l = j.getAttribute("codetype");
                var m = j.getAttribute("text");
                j = null;
                var g = {
                    datatype: h,
                    md: d,
                    code: l,
                    text: m
                };
                return g;
            }
        };
        this.btnnew = function() {
            var g = this.getSelectedProps();
            if (g != null) {
                var j = LEAP.getElement(">table:first", this.getUT("pars"));
                var v = document.createElement("tr");
                var l = LEAP.getElement("tbody", j);
                if (l == null) {
                    return;
                }
                l.appendChild(v);
                var r = document.createElement("td");
                var q = document.createElement("td");
                var p = document.createElement("td");
                var n = document.createElement("td");
                var m = document.createElement("td");
                var h = g.datatype;
                var d = g.code;
                var o = g.md;
                v.setAttribute("md", o);
                q.innerHTML = g.text;
                r.innerHTML = LEAP.controls.radio.replace("@md", "").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.y);
                if (h == 91 || h == 92 || h == 93) {
                    n.innerHTML = LEAP.controls.date;
                    p.innerHTML = LEAP.controls.select2.replace("@selectvalue", "6").replace("@md", "").replace("@value", ">=").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.x);
                    v.setAttribute("controltype", "date");
                } else {
                    if (d != null && d.Trim() != "") {
                        var u = LEAP.getCodeValue(d);
                        if (u != null) {
                            v.setAttribute("controltype", "select");
                            n.innerHTML = LEAP.dynamodule.buildSelectItem(LEAP.controls.select, u);
                            p.innerHTML = LEAP.controls.select2.replace("@selectvalue", "1").replace("@md", "").replace("@value", "=").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.x);
                        } else {
                            if ((h >= 2 && h <= 8) || h == -6 || h == -5) {
                                p.innerHTML = LEAP.controls.select2.replace("@selectvalue", "6").replace("@md", "").replace("@value", ">=").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.x);
                            } else {
                                p.innerHTML = LEAP.controls.select2.replace("@selectvalue", "2").replace("@md", "").replace("@value", "包含").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.x);
                            }
                            n.innerHTML = LEAP.controls.text;
                            v.setAttribute("controltype", "text");
                        }
                    } else {
                        if ((h >= 2 && h <= 8) || h == -6 || h == -5) {
                            p.innerHTML = LEAP.controls.select2.replace("@selectvalue", "6").replace("@md", "").replace("@value", ">=").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.x);
                        } else {
                            p.innerHTML = LEAP.controls.select2.replace("@selectvalue", "2").replace("@md", "").replace("@value", "包含").replace("@code", "").replace(LEAP.dynamodule.itemflag, this.x);
                        }
                        n.innerHTML = LEAP.controls.text;
                        v.setAttribute("controltype", "text");
                    }
                }
                m.innerHTML = this.w;
                v.appendChild(r);
                v.appendChild(q);
                v.appendChild(p);
                v.appendChild(n);
                v.appendChild(m);
                this.addEvent(LEAP.getElement(">div:first", m), "click", this.btndel);
                m = r = q = p = n = v = j = l = g = null;
            }
        };
        this.btnsort = function() {
            var n = this.getSelectedProps();
            if (n != null) {
                var l = LEAP.getElement(">table:first", this.getUT("shorts"));
                var o = document.createElement("tr");
                var j = LEAP.getElement("tbody", l);
                if (j == null) {
                    return;
                }
                j.appendChild(o);
                var h = document.createElement("td");
                var d = document.createElement("td");
                var g = document.createElement("td");
                var m = n.md;
                o.setAttribute("md", m);
                d.innerHTML = this.w;
                g.innerHTML = n.text;
                h.innerHTML = LEAP.controls.radio.replace("@md", n.name).replace("@code", n.code).replace(LEAP.dynamodule.itemflag, this.z);
                o.appendChild(h);
                o.appendChild(g);
                o.appendChild(d);
                this.addEvent(LEAP.getElement(">div:first", d), "click", this.btndel);
                h = g = o = l = j = n = null;
            }
        };
        this.btndel = function(d) {
            d.caller.parentNode.parentNode.parentNode.deleteRow(d.caller.parentNode.parentNode.rowIndex);
        };
        this.btnref = function(d) {
            LEAP.removeElement(LEAP.getElements(">table:first >tbody >tr:gt(1)", this.getUT("shorts")), true);
            LEAP.removeElement(LEAP.getElements(">table:first >tbody >tr:gt(1)", this.getUT("pars")), true);
        };
        this.submit = function(y) {
            var m = LEAP.getElements(">table:first >tbody >tr:gt(1)", this.getUT("shorts"));
            var p = LEAP.getElements(">table:first >tbody >tr:gt(1)", this.getUT("pars"));
            var n = new StringBuffer();
            if (m != null && m.length > 0) {
                var j = m.length;
                for (var o = 0; o < j; o++) {
                    var x = m[o];
                    var u = x.getAttribute("md");
                    var v = LEAP.radio.getValue(LEAP.getElement(">div", x.cells[0]));
                    if (v != 1) {
                        n.append(u + " asc");
                    } else {
                        n.append(u + " desc");
                    }
                }
            }
            var h = new StringBuffer();
            var q = new SearchParameters();
            if (p != null && p.length > 0) {
                var j = p.length;
                for (var o = 0; o < j; o++) {
                    var x = p[o];
                    var w = LEAP.getValue(LEAP.getElement(">[ht] >[ct]", x.cells[3]));
                    if (w == null || w.Trim() == "") {
                        continue;
                    }
                    var u = x.getAttribute("md");
                    var r = null;
                    var d = LEAP.getValue(LEAP.getElement(">div", x.cells[0]));
                    if (d != 1) {
                        r = "1";
                    } else {
                        r = "2";
                    }
                    var g = LEAP.getValue(LEAP.getElement(">div", x.cells[2]));
                    if (g == null || g.Trim() == "") {
                        g = "1";
                    }
                    r += g;
                    q.addParameter(u, w, r);
                }
            }
            q.setOrder(n.toString());
            if ((q.parameters == null || q.parameters.length == 0) && (q.order == null || q.order.Trim() == "")) {
                return;
            }
            q.name = this.moduleName;
            if (y == true) {
                return q;
            }
            this.fireEvent("onSubmit", q);
            this.hideForm();
        };
        this.gissearch = function() {
            var d = this.submit(true);
            this.fireEvent("onGisSubmit", d);
            this.hideForm();
        };
        this.showGisSearch = function() {
            this.getUT("gissearch").parentNode.style.display = "block";
        };
        this.btnclose = function() {
            this.hideForm();
        };
        this.pageLoad = function() {
            this.addEvent(LEAP.getElements(">div", this.getUT("props")), "click", this.propclick);
            this.addEvent(this.getUT("btnnew"), "click", this.btnnew);
            this.addEvent(this.getUT("btnsort"), "click", this.btnsort);
            this.addEvent(this.getUT("btnref"), "click", this.btnref);
            this.addEvent(this.getUT("btnclose"), "click", this.btnclose);
            this.addEvent(this.getUT("submit"), "click", this.submit);
            this.addEvent(this.getUT("gissearch"), "click", this.gissearch);
        };
    };
    LEAP.partIndex = new Object();
    LEAP.partIndex.d2 = "partindex";
    LEAP.partIndex.split_middle = 10;
    LEAP.partIndex.split_left = 20;
    LEAP.partIndex.split_right = 20;
    LEAP.partIndex.split_top = 20;
    LEAP.partIndex.split_grid = 10;
    LEAP.partIndex.split_grid_top = 10;
    LEAP.partIndex.width_modulecon_margin = 5;
    LEAP.partIndex.width_modulecon_border = 1;
    LEAP.partIndex.width_modulecon_border_top = 5;
    LEAP.partIndex.width_modulecon_border_bottom = 1;
    LEAP.partIndex.height_modulecon = 300;
    LEAP.partIndex.autoRefreshModules = new Array();
    LEAP.partIndex.f = function() {
        var g = LEAP.partIndex.autoRefreshModules.length;
        for (var j = g - 1; j > -1; j--) {
            var o = LEAP.partIndex.autoRefreshModules[j];
            if (o && o.module && o.module.refreshModule) {
                var h = new Date().getTime();
                var m = o.last;
                if (m == null) {
                    o.last = h;
                } else {
                    var d = o.module.refreshTime;
                    if (d == null) {
                        d = o.module.refreshTime = 1 * 30;
                    }
                    if (h - o.last >= d * 1000) {
                        o.last = h;
                        try {
                            LEAP.asyn(o.module.refreshModule, o.module, 100);
                        } catch (n) {}
                    }
                }
            } else {
                LEAP.partIndex.autoRefreshModules[j] = null;
            }
        }
    };
    LEAP.partIndex.timer = window.setInterval(LEAP.partIndex.f, 1000);
    LEAP.partIndex.i = function(j, l) {
        if (!l) {
            if (!event) {
                return;
            }
            l = event.srcElement;
        }
        if (!l) {
            return;
        }
        if (j != null) {
            var g = function() {
                LEAP.partIndex.i(null, l);
                l = null;
            };
            setTimeout(g, j);
            return;
        }
        try {
            var d = l.parentElement;
            var h = null;
            if (d != null) {
                h = LEAP.ctid(d);
            } else {
                return;
            }
            d.removeChild(l);
            LEAP.partIndex.initTemplat("[ctid=" + h + "]");
        } finally {
            d = null;
        }
    };
    LEAP.partIndex.initTemplat = function(g) {
        try {
            if (g == null) {
                return;
            }
            if (typeof(g) == "string") {
                g = LEAP.getElement(g);
            }
            if (g == null) {
                return;
            }
            var d = g.getAttribute("ct");
            if (d == null) {
                return;
            }
            if (d == LEAP.partIndex.d2) {
                var h = g.getAttribute("template");
                var j = null;
                if (!String.isEmpty(g.getAttribute("templatename"))) {
                    LEAP.request2({
                        name: "partindex_getResource",
                        par: {
                            name: g.getAttribute("templatename")
                        },
                        callback: LEAP.partIndex._r2,
                        arg: LEAP.ctid(g)
                    });
                } else {
                    if (!String.isEmpty(h)) {
                        j = g.getAttribute("parts");
                        LEAP.partIndex._initTemplatStep2(LEAP.ctid(g), h, j, null);
                    }
                }
            }
        } finally {
            g = null;
        }
    };
    LEAP.partIndex._r2 = function(v, r) {
        if (v) {
            var w = v[0];
            var m = [];
            var n = new Object();
            var o = new Array();
            var g = new hashtable();
            for (var q = 1; q < v.length; q++) {
                var x = v[q];
                x.grid = x.gridindex;
                var j = x.grid;
                if (j != null) {
                    try {
                        j = Number(j);
                    } catch (u) {
                        j = 1;
                    }
                } else {
                    j = 1;
                }
                if (j < 1) {
                    j = 1;
                }
                x.grid = j - 1;
                var l = LEAP.getRealSyscode(x.syscode);
                g.add(l, x);
                if (x.nodelevel > 5) {
                    var d = LEAP.getParentSyscode(l);
                    var h = g.getvalue(d);
                    if (h.childs) {
                        h.childs.add(x);
                    } else {
                        h.childs = [x];
                    }
                    continue;
                }
                if (n.hasOwnProperty("_" + j)) {
                    n["_" + j].add(x);
                } else {
                    n["_" + j] = [x];
                    o.add(j);
                }
            }
            for (var q = 0; q < o[o.length - 1]; q++) {
                m[q] = [];
            }
            for (var q = 0; q < o.length; q++) {
                m[o[q] - 1] = n["_" + o[q]];
            }
            LEAP.partIndex._initTemplatStep2(r, w.pagemoduledefine, null, m);
        }
    };
    LEAP.partIndex._initTemplatStep2 = function(w, h, y, C) {
        if (!h) {
            h = "1:2:1";
        }
        if (h) {
            var l = LEAP.getElement("[ctid=" + w + "]");
            try {
                if (l) {
                    var B = h.split(":");
                    var p = 0;
                    var g = [];
                    if (C == null) {
                        if (y) {
                            try {
                                C = JSON.parse("[" + y + "]");
                            } catch (I) {}
                        }
                    }
                    for (var G = 0; G < B.length; G++) {
                        var m = B[G];
                        var D = Number(m);
                        var K = null;
                        if (C && C.length > G) {
                            K = C[G];
                        }
                        g.add({
                            width: D,
                            sn: G + 1,
                            parts: K
                        });
                        p += D;
                    }
                    var v = Math.floor((l.offsetWidth - LEAP.partIndex.split_left - LEAP.partIndex.split_right - (g.length - 1) * LEAP.partIndex.split_middle) / p);
                    for (var G = 0; G < g.length; G++) {
                        var x = g[G];
                        var z = document.createElement("div");
                        z.style.width = v * x.width + "px";
                        z.style.marginTop = LEAP.partIndex.split_top + "px";
                        z.className = "lg_partcon";
                        if (G == 0) {
                            z.style.marginLeft = LEAP.partIndex.split_right + "px";
                        } else {
                            z.style.marginLeft = LEAP.partIndex.split_middle + "px";
                        }
                        l.appendChild(z);
                        var d = (v * x.width) / x.width;
                        if (x.parts) {
                            var r = 0;
                            var o = 0;
                            var q = 0;
                            for (var F = 0; F < x.parts.length; F++) {
                                var H = x.parts[F];
                                if (H.width) {
                                    H.width *= 1;
                                } else {
                                    H.width = 1;
                                }
                                if (H.width > x.width) {
                                    H.width = x.width;
                                }
                                var u = H.url;
                                var n = document.createElement("div");
                                n.className = "lg_partmodule_con";
                                var D = null;
                                if (H.width && x.width > 1) {
                                    o += H.width;
                                    D = d * H.width;
                                } else {
                                    o += 1;
                                    D = d;
                                }
                                n.style.margin = "5px";
                                n.style.width = D - (LEAP.partIndex.width_modulecon_border + LEAP.partIndex.width_modulecon_margin) * 2 + "px";
                                var A = null;
                                if (H.height) {
                                    A = Number(H.height);
                                } else {
                                    A = LEAP.partIndex.height_modulecon;
                                }
                                A = A - (LEAP.partIndex.width_modulecon_margin) * 2 - LEAP.partIndex.width_modulecon_border_top - LEAP.partIndex.width_modulecon_border_bottom + "px";
                                LEAP.setStyle(n, {
                                    height: A
                                }, false);
                                if (x.width > 1) {
                                    if (o > x.width) {
                                        r = 0;
                                        q++;
                                        if (H.grid) {
                                            o = H.grid;
                                        } else {
                                            o = 1;
                                        }
                                    }
                                    r++;
                                } else {
                                    if (x.width == 1) {
                                        q = o - 1;
                                    }
                                }
                                n.innerHTML = "";
                                var J = document.createElement("img");
                                J.src = leapconfig.server + "LEAP/Resource/images/loading.gif";
                                J.style.top = "84px";
                                J.style.left = D / 2 - 16 + "px";
                                J.style.width = "32px";
                                J.style.height = "32px";
                                J.style.position = "absolute";
                                n.appendChild(J);
                                J = null;
                                z.appendChild(n);
                                if (!String.isEmpty(H.rescolor)) {
                                    n.style.borderTopColor = H.rescolor;
                                }
                                LEAP.partIndex._loadmodule(l, H, LEAP.ctid(n), G, q, r);
                                n = null;
                            }
                        }
                        z = null;
                    }
                }
            } finally {
                l = null;
            }
        }
    };
    LEAP.partIndex._ts = '<div ct="lg_part" ctid="@ctid" instance="@instance" class="lg_partmodule"><div class="lg_p2_tb " onresize="LEAPLG.tb();"><div class="lg_p2_tb_top lg_partmodule_title" onresize="LEAPLG.tb_layout(0);"><a ctf="lg_part_title" class="lg_partmodule_title_sub"><img src="@img1">@title</a>@subtitles</div><div class="lg_p2_tb_bottom"><div class="lg_partmodule_content"><img style="position:absolute;top:35%;left:40%" width=32 height=32 src="@serverLEAP/Resource/images/loading.gif"></div></div><img style="display: none" src="data:image:png,base64" onerror="LEAPLG.tb_img(0);"></div></div>';
    LEAP.partIndex._loadmodule2 = function(m, u, n, d) {
        var l = LEAP.getElement("DIV[ctid=" + m + "]");
        try {
            if (l) {
                var o = LEAP.getElement("DIV[ctid=" + n + "]", l);
                if (d.childs) {
                    var j = new hashtable();
                    o._datas = j;
                    var q = new StringBuffer('<ul class="lg_partmodule_title_child">');
                    for (var h = 0; h < d.childs.length; h++) {
                        var r = d.childs[h];
                        j.add(r.id, r);
                        q.append('<li ctf="lg_part_subtitle" class="lg_partmodule_title_child_item');
                        if (h == 0) {
                            q.append(" lg_child_current");
                        }
                        q.append('"');
                        q.append(" _id=").append('"' + r.id + '"');
                        if (!String.isEmpty(r.icon)) {
                            q.append(' style="padding-left:20px;"');
                        }
                        q.append(">");
                        if (!String.isEmpty(r.icon)) {
                            q.append('<img src="').append(leapconfig.server + r.icon).append('">');
                        }
                        q.append(r.text);
                        q.append("</li>");
                    }
                    q.append("</ul>");
                    if (d.childs.length < 2) {
                        q = new StringBuffer();
                    }
                    var p = UUID.cID();
                    var g = leapconfig.server + "LEAP/Resource/images/itemstyle/partindex/2.png";
                    if (!String.isEmpty(d.icon)) {
                        g = leapconfig.server + d.icon;
                    }
                    o.innerHTML = LEAP.partIndex._ts.replace("@img1", g).replace("@ctid", p).replace("@instance", u).replace("@server", leapconfig.server).replace("@title", d.text).replace("@subtitles", q.toString());
                    LEAP.asyn(LEAP.partIndex._loadmodule3, null, 250, p, d.childs[0].id);
                } else {
                    LEAP.partIndex._loadmodule4(d, o, u);
                }
            }
        } finally {
            l = o = null;
        }
    };
    LEAP.partIndex._loadmodule4 = function(h, n, r) {
        try {
            if (h.url && h.url.indexOf("http://") == 0 || h.url.indexOf("https") == 0 || h.url.indexOf("@server") == 0) {
                n.innerHTML = '<iframe sandbox="allow-same-origin allow-scripts allow-top-navigation allow-forms" frameborder=0 style="width:100%;height:100%;border:0;" src="' + h.url.replace("@server", leapconfig.server) + '"></iframe>';
            } else {
                if (h.resourcetype == 4 || h.resourcetype == 3) {
                    var o = h.resourcetype == 4 ? h.name : h.url;
                    var q = LEAP.getLoadedModule(r);
                    if (LEAP.hasCSS(n, "lg_partmodule_con")) {
                        LEAP.removeElement(n.getElementsByTagName("IMG"), true);
                        var g = document.createElement("div");
                        n.appendChild(g);
                        g.className = "lg_partmodule_content";
                        g.style.width = "100%";
                        g.style.height = "100%";
                        n = g;
                        g = null;
                    }
                    var v = {
                        custom: h.customize,
                        height: n.clientHeight,
                        width: n.clientWidth,
                        def: h
                    };
                    var j = null;
                    if (q) {
                        j = q.loadModule2({
                            name: o,
                            parent: n,
                            moduleLoadArg: v
                        });
                        if (j && j.refreshModule) {
                            LEAP.partIndex.autoRefreshModules.add({
                                module: j
                            });
                        }
                    } else {
                        j = LEAP.loadModule2({
                            name: o,
                            parent: n,
                            moduleLoadArg: v
                        });
                        if (j && j.refreshModule) {
                            LEAP.partIndex.autoRefreshModules.add({
                                module: j
                            });
                        }
                    }
                    if (j) {
                        n.setAttribute("lastmodule", j.instance);
                        try {
                            var d = j.getElements(".lg_partmodule");
                            if (d && d.length == 1) {
                                var p = d[0];
                                d = null;
                                var u = LEAP.getElement(".lg_partmodule_title_sub", p);
                                p = null;
                                if (u) {
                                    if (!LEAP.getElements("IMG", u)) {
                                        var m = document.createElement("IMG");
                                        var l = leapconfig.server + "LEAP/Resource/images/itemstyle/partindex/2.png";
                                        if (!String.isEmpty(h.icon)) {
                                            l = leapconfig.server + h.icon;
                                        }
                                        m.src = l;
                                        u.appendChild(m);
                                    }
                                    u = null;
                                }
                            }
                        } catch (w) {}
                    }
                }
            }
        } finally {
            h = n = null;
        }
    };
    LEAP.partIndex._loadmodule3 = function(o, d) {
        if (!o || !d) {
            return;
        }
        var n = LEAP.getElement("DIV[ctid=" + o + "]");
        var p = null;
        try {
            var m = n.parentElement._datas;
            if (!m) {
                return;
            }
            var g = m.getvalue(d);
            var u = n.getAttribute(commfields.instance);
            if (g) {
                p = LEAP.getElement(".lg_partmodule_content", n);
                if (g.childs) {
                    var h = g.childs.length;
                    var q = new StringBuffer('<div class="lg_partmodule_resource"><div class="lg_partmodule_resource_short">');
                    for (var j = 0; j < h; j++) {
                        var r = g.childs[j];
                        if (!m.contains(r.id)) {
                            m.add(r.id, r);
                        }
                        q.append('<a _id="' + r.id + '" ctf="lg_part_module_short" href="javascript:void(0)" class="lg_partmodule_resource_left">');
                        if (String.isEmpty(r.icon)) {
                            r.icon = "LEAP/Resource/images/partindex/datubiao.png";
                        }
                        q.append('<img _id="' + r.id + '" ctf="lg_part_module_short" src="' + leapconfig.server + r.icon + '"/>');
                        q.append(r.text);
                        q.append("</a>");
                    }
                    q.append("</div></div>");
                    p.innerHTML = q.toString();
                } else {
                    if (g.indexpagemenustyle == "3") {
                        LEAP.request2({
                            name: "getPartLinksBeans",
                            par: {
                                userid: LEAP.getUserInfo().userid,
                                type: LEAP.getUserInfo().applicationname
                            },
                            callback: LEAP.partIndex._sc,
                            arg: n
                        });
                    } else {
                        LEAP.partIndex._loadmodule4(g, p, u);
                    }
                }
            }
        } finally {
            p = n = null;
        }
    };
    LEAP.partIndex.add = '<div class="lg_module_add"><div class="lg_module_add_title">添加收藏<img _id="del" ctf="lg_part_module_link" src="' + leapconfig.server + 'LEAP/Resource/images/partindex/del.png"></div><div class="lg_module_add_input"><font>名称</font><input type="text" ctf="lg_part_module_mingc"></div><div class="lg_module_add_input"><font>地址</font><input type="text" value="http://" ctf="lg_part_module_luj"></div><div class="lg_module_add_button"><input type="button" value="确定" _id="submit" ctf="lg_part_module_link"></div></div>';
    LEAP.partIndex._sc = function(h, j) {
        var o = LEAP.getElement(".lg_partmodule_content", j);
        var p = new StringBuffer('<div class="lg_partmodule_resource"><div class="lg_partmodule_resource_short">');
        p.append('<a _id="baidu" ctf="lg_part_module_link" href="javascript:void(0)" class="lg_partmodule_resource_left">');
        p.append('<img _id="baidu" ctf="lg_part_module_link" src="' + leapconfig.server + 'LEAP/Resource/images/partindex/datubiao.png"/>百度</a>');
        p.append('<a _id="google" ctf="lg_part_module_link" href="javascript:void(0)" class="lg_partmodule_resource_left">');
        p.append('<img _id="google" ctf="lg_part_module_link" src="' + leapconfig.server + 'LEAP/Resource/images/partindex/datubiao.png"/>谷歌</a>');
        if (h) {
            var g = j.parentElement._datas;
            var n = LEAP.convertResult(h);
            var d = n.length;
            for (var m = 0; m < d; m++) {
                var q = n[m];
                if (!g.contains(q.id)) {
                    g.add(q.id, q);
                }
                p.append('<a _id="' + q.id + '" ctf="lg_part_module_link" href="javascript:void(0)" class="lg_partmodule_resource_left">');
                if (String.isEmpty(q.linkimg)) {
                    q.linkimg = "LEAP/Resource/images/partindex/datubiao.png";
                }
                p.append('<img _id="' + q.id + '" ctf="lg_part_module_link" src="' + leapconfig.server + q.linkimg + '"/>');
                p.append('<img _id="delt" style="width:10px;height:10px;position: absolute;top:0px;right:0px;display:none" ctf="lg_part_module_link" src="' + leapconfig.server + 'LEAP/Resource/images/partindex/del.png"/>');
                p.append(q.linkname);
                p.append("</a>");
            }
        }
        p.append('<a _id="add" ctf="lg_part_module_link" href="javascript:void(0)" class="lg_partmodule_resource_left">');
        p.append('<img _id="add" ctf="lg_part_module_link" src="' + leapconfig.server + 'LEAP/Resource/images/partindex/add.png"/></a>');
        p.append("</div></div>");
        p.append(LEAP.partIndex.add);
        o.innerHTML = p.toString();
    };
    LEAP.partIndex._mouseoversc = function(g) {
        if (g == null) {
            return;
        }
        var m = g.e.srcElement;
        if (m == null) {
            return;
        }
        var j = g.e.type;
        if (j == null) {
            return;
        }
        var d = m.tagName;
        if (d == null) {
            return;
        }
        try {
            var l = m.getAttribute(commfields.ctf);
            var h = null;
            if (l && m && j == "mouseover") {
                if (l == "lg_part_module_link") {
                    LEAP.stopEvent(g.e);
                    h = LEAP._match(m, LEAP.partIndex.d);
                    var n = m.getAttribute("_id");
                    if (n != "add" && n != "baidu" && n != "google" && n != "submit") {
                        if (m.childNodes[1] != null) {
                            m.childNodes[1].style.display = "block";
                        } else {
                            m.parentNode.childNodes[1].style.display = "block";
                        }
                    }
                }
            }
        } finally {
            h = null;
        }
    };
    LEAP.partIndex._mouseoutsc = function(g) {
        if (g == null) {
            return;
        }
        var m = g.e.srcElement;
        if (m == null) {
            return;
        }
        var j = g.e.type;
        if (j == null) {
            return;
        }
        var d = m.tagName;
        if (d == null) {
            return;
        }
        try {
            var l = m.getAttribute(commfields.ctf);
            var h = null;
            if (l && m && j == "mouseout") {
                if (l == "lg_part_module_link") {
                    LEAP.stopEvent(g.e);
                    h = LEAP._match(m, LEAP.partIndex.d);
                    var n = m.getAttribute("_id");
                    if (n != "add" && n != "baidu" && n != "google" && n != "submit") {
                        if (m.childNodes[1] != null) {
                            m.childNodes[1].style.display = "none";
                        } else {
                            m.parentNode.childNodes[1].style.display = "none";
                        }
                    }
                }
            }
        } finally {
            h = null;
        }
    };
    LEAP.partIndex.uiProcess = function(p) {
        if (p == null) {
            return;
        }
        var u = p.e.srcElement;
        if (u == null) {
            return;
        }
        var m = p.e.type;
        if (m == null) {
            return;
        }
        var I = u.tagName;
        if (I == null) {
            return;
        }
        try {
            var g = u.getAttribute(commfields.ctf);
            var l = null;
            if (g && u && m == "click") {
                if (g == "lg_part_title") {} else {
                    if (g == "lg_part_module_short") {
                        LEAP.stopEvent(p.e);
                        l = LEAP._match(u, LEAP.partIndex.d);
                        var A = u.getAttribute("_id");
                        var x = LEAP.ctid(l);
                        var A = u.getAttribute("_id");
                        var h = l.parentElement._datas;
                        if (!h) {
                            return;
                        }
                        var y = h.getvalue(A);
                        LEAP.openResource(y, LEAP.getLoadedModule(l.getAttribute(commfields.instance)));
                        h = y = null;
                    } else {
                        if (g == "lg_part_subtitle") {
                            if (LEAP.hasCSS(u, "lg_child_current")) {
                                return;
                            }
                            l = LEAP._match(u, LEAP.partIndex.d);
                            var r = -1;
                            var G = false;
                            var o = LEAP.getElements(".lg_partmodule_title_child_item", u.parentElement);
                            for (var C = 0; C < o.length; C++) {
                                if (r == 1 && o[C] == cur) {
                                    r = C;
                                }
                                if (LEAP.hasCSS(o[C], "lg_child_current")) {
                                    LEAP.removeCSS(o[C], "lg_child_current", false);
                                    G = true;
                                }
                                if (r > -1 && G) {
                                    break;
                                }
                            }
                            var x = LEAP.ctid(l);
                            var A = u.getAttribute("_id");
                            o = null;
                            LEAP.addCSS(u, "lg_child_current", false);
                            ElementEventManager.handleEvent(l, "selectedIndexChange", {
                                element: l,
                                index: r,
                                src: u
                            });
                            u = null;
                            var j = LEAP.getElement(".lg_partmodule_content", l);
                            if (j) {
                                var v = j.getAttribute("lastmodule");
                                if (v) {
                                    try {
                                        LEAP.getLoadedModule(v).dispose();
                                    } catch (D) {}
                                    j.removeAttribute("lastmodule");
                                }
                                j.innerHTML = '<img style="position:absolute;top:35%;left:40%" width=32 height=32 src="' + leapconfig.server + 'LEAP/Resource/images/loading.gif">';
                                LEAP.asyn(LEAP.partIndex._loadmodule3, null, 250, x, A);
                            }
                        } else {
                            if (g == "lg_part_listtitle") {
                                if (LEAP.hasCSS(u, "lg_partmodule_table_ul")) {
                                    return;
                                }
                                l = LEAP._match(u, LEAP.partIndex.d3);
                                var H = u.parentElement._datas;
                                ElementEventManager.handleEvent(l, "click", {
                                    element: l,
                                    data: H,
                                    src: u
                                });
                            } else {
                                if (g == "lg_part_module_link") {
                                    LEAP.stopEvent(p.e);
                                    l = LEAP._match(u, LEAP.partIndex.d);
                                    var A = u.getAttribute("_id");
                                    var x = LEAP.ctid(l);
                                    var A = u.getAttribute("_id");
                                    var h = l.parentElement._datas;
                                    if (!h) {
                                        return;
                                    }
                                    var n = LEAP.getElement(".lg_module_add", l);
                                    var B = LEAP.getElement("[ctf=lg_part_module_mingc]", l);
                                    var q = LEAP.getElement("[ctf=lg_part_module_luj]", l);
                                    if (A == "baidu") {
                                        window.open("http://www.baidu.com", "_blank");
                                    } else {
                                        if (A == "google") {
                                            window.open("http://www.google.com", "_blank");
                                        } else {
                                            if (A == "add") {
                                                B.value = "";
                                                q.value = "http://";
                                                n.style.display = "block";
                                            } else {
                                                if (A == "del") {
                                                    n.style.display = "none";
                                                } else {
                                                    if (A == "delt") {
                                                        var z = u.parentNode.getAttribute("_id");
                                                        var y = h.getvalue(z);
                                                        var w = LEAP.request("partLinkDelete", {
                                                            def: y
                                                        });
                                                        if (w) {
                                                            LEAP.request2({
                                                                name: "getPartLinksBeans",
                                                                par: {
                                                                    userid: LEAP.getUserInfo().userid,
                                                                    type: LEAP.getUserInfo().applicationname
                                                                },
                                                                callback: LEAP.partIndex._sc,
                                                                arg: l
                                                            });
                                                        }
                                                    } else {
                                                        if (A == "submit") {
                                                            if (B.value == "") {
                                                                LEAP.messagebox.alert("输入名称", 2);
                                                                return;
                                                            }
                                                            if (q.value == "") {
                                                                LEAP.messagebox.alert("输入路径", 2);
                                                                return;
                                                            }
                                                            if (q.value.indexOf("http://") == -1 && q.value.indexOf("https://") == -1) {
                                                                LEAP.messagebox.alert("输入正确的路径,以http://或https://开头", 2);
                                                                return;
                                                            }
                                                            var F = {};
                                                            F.linkname = B.value;
                                                            F.linkpath = q.value;
                                                            F.userid = LEAP.getUserInfo().userid;
                                                            F.systemtype = LEAP.getUserInfo().applicationname;
                                                            F.beanname = "LEAPLinkConfig";
                                                            var w = LEAP.request("partLinkInsert", {
                                                                def: F
                                                            });
                                                            if (w) {
                                                                n.style.display = "none";
                                                                LEAP.request2({
                                                                    name: "getPartLinksBeans",
                                                                    par: {
                                                                        userid: LEAP.getUserInfo().userid,
                                                                        type: LEAP.getUserInfo().applicationname
                                                                    },
                                                                    callback: LEAP.partIndex._sc,
                                                                    arg: l
                                                                });
                                                            }
                                                        } else {
                                                            var y = h.getvalue(A);
                                                            window.open(y.linkpath, "_blank");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    h = y = null;
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            l = null;
        }
    };
    LEAP.partIndex.d = "lg_part";
    LEAP.partIndex._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.partIndex.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "mouseover", LEAP.partIndex._mouseoversc, null, null, true);
        LEAP.addEvent(document.body, "mouseout", LEAP.partIndex._mouseoutsc, null, null, true);
    };
    LEAP.partIndex.d3 = "lg_part_list";
    LEAP.partIndex.n = "_datas";
    LEAP.partIndex.listIcon = function(d, g) {
        d.style.backgroundImage = "url(" + leapconfig.server + g + ")";
    };
    LEAP.partIndex.listBindData = function(g, d) {
        try {
            if (g == null || d == null) {
                return;
            }
            var n = LEAP.getElement("[ctf=list_container]", g);
            var x = n.childNodes;
            var m = x.length;
            for (var h = m - 1; h >= 0; h--) {
                var l = x[h];
                if (l.nodeType == 3 && /\s/.test(l.nodeValue)) {
                    l.parentNode.removeChild(l);
                }
            }
            if (x.length != 1) {
                var q = x.length;
                for (var h = q - 1; h > 0; h--) {
                    if (h != 0) {
                        var l = x[h];
                        n.removeChild(l);
                    }
                }
            }
            var w = LEAP.getElement("[ctf=list_template]", g);
            w.style.display = "";
            var r = w.childNodes;
            m = r.length;
            for (var h = m - 1; h >= 0; h--) {
                var o = r[h];
                if (o.nodeType == 3 && /\s/.test(o.nodeValue)) {
                    o.parentNode.removeChild(o);
                }
            }
            var j = LEAP.convertResult(d);
            for (var h = 0; h < j.length; h++) {
                var p = null;
                var v = j[h];
                var u = {};
                u = w.cloneNode(true);
                u.removeAttribute("ctf");
                LEAP.partIndex.listAddRow(g, n, u, v);
            }
            w.style.display = "none";
        } finally {
            n = x = l = h = w = r = o = h = j = p = v = u = null;
        }
    };
    LEAP.partIndex.listAddRow = function(j, n, u, h) {
        try {
            var p = j.getAttribute("instance");
            var d = LEAP.getLoadedModule(p);
            var l = u.childNodes;
            var o = l.length;
            for (var g = 0; g < o; g++) {
                var m = l[g];
                var r = m.getAttribute("md");
                if (r != null) {
                    m.innerHTML = h[r];
                    var q = m.getAttribute("showtitle");
                    if (q != null && q == "1") {
                        m.title = h[r];
                    }
                }
            }
            u._datas = h;
            n.appendChild(u);
            if (d && d.partlistOnAddRow) {
                d.partlistOnAddRow.call(d, u, h);
            }
        } finally {
            p = d = l = m = o = g = r = q = null;
        }
    };
    LEAP.partIndex._loadmodule = function(j, m, g, l, o, h) {
        var n = LEAP.ctid(j);
        try {
            var d = j.getAttribute(commfields.instance);
            LEAP.asyn(LEAP.partIndex._loadmodule2, null, 500 + (o) * 1000, n, d, g, m);
        } finally {
            j = n = null;
        }
    };
    LEAP.partIndex.init = function() {
        if (document != null && document.body != null) {
            LEAP.partIndex._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.partIndex._init);
        }
        ElementEventManager.addManagedEventType(LEAP.partIndex.d, "selectedIndexChange");
        ElementEventManager.addManagedEventType(LEAP.partIndex.d3, "click");
        ElementEventManager.addManagedEventType(LEAP.partIndex.d3, "partlistRow");
    }();
    var pageObject = {};
    var pageObjectExtend = new Object();
    pageObject._isPageObject = true;
    pageObject.bindData = function(j) {
        var n = new StringBuffer();
        var o = null;
        if (arguments.length > 1) {
            var g = arguments.length;
            var m = {};
            for (var h = 1; h < g; h++) {
                m[arguments[h]] = j[arguments[h]];
                if (h != 1) {
                    n.append(",");
                }
                n.append("[md=").append(arguments[h]).append("][instance=" + this.instance + "]");
            }
            o = LEAP.getElements(n.toString(), this.parentElement);
        }
        LEAP.bindData(j, this.instance, null, null, this.parentElement, o, true);
        o = j = null;
    };
    pageObject.loadWFForm = function(h, g, l, j, d, m) {
        var n = null;
        try {
            n = LWFP.loadWFForm(h, g, l, j, d, m, this);
            return n;
        } finally {
            n = null;
        }
    };
    pageObject.getParentModule = function() {
        if (this.pom) {
            return this.pom.getParent(this);
        }
    };
    pageObject.loadModule2 = function(g) {
        var d = null;
        try {
            if (this.pom) {
                if (!g.moduleParameter) {
                    g.moduleParameter = {};
                }
                g.moduleParameter.___pageObjectModel = this.pom;
                g.moduleParameter.___parentModule = this;
            }
            var h = g.path;
            if (h == null) {
                h = g.name;
            }
            d = LEAP.loadModule(h, g.parent, g.type, g.d, g.htmlsource, g.distributeFlag, g.moduleParameter, g.moduleLoadArg, g.pageMode, null, null, g.authority);
            if (d) {
                d.parentPageModule = this;
            }
            return d;
        } finally {
            g = g.moduleParameter = d = null;
        }
    };
    pageObjectExtend.loadSimpleModule = function(g) {
        var d = null;
        try {
            if (this.pom) {
                if (!g.moduleParameter) {
                    g.moduleParameter = {};
                }
                g.moduleParameter.___pageObjectModel = this.pom;
                g.moduleParameter.___parentModule = this;
            }
            var h = g.path;
            if (h == null) {
                h = g.name;
            }
            d = LEAP.loadSimpleModule(g);
            if (d) {
                d.parentPageModule = this;
            }
            return d;
        } finally {
            g = g.moduleParameter = d = null;
        }
    };
    pageObjectExtend.simpleModules = function(d) {
        d = d.toLowerCase();
        var h = this.____formdefs.getvalue(d);
        if (h) {
            if (this.__simplemodules == null) {
                this.__simplemodules = new hashtable();
            }
            if (this.__simplemodules.contains(d)) {
                return this.__simplemodules.getvalue(d);
            }
            h.autodispose = false;
            var g = this.loadSimpleModule(h);
            this.__simplemodules.add(d, g);
            return g;
        }
    };
    pageObject.loadModule = function(d, h, l, n, j, m) {
        var g = null;
        try {
            if (this.pom) {
                if (!l) {
                    l = {};
                }
                l.___pageObjectModel = this.pom;
                l.___parentModule = this;
            }
            g = LEAP.loadModule(d, h, null, null, null, null, l, n, j, null, null, m);
            if (g) {
                g.parentPageModule = this;
            }
            return g;
        } finally {
            l = g = null;
        }
    };
    pageObject.loadNoneUIModule = function(name, URI, moduleParameter, moduleLoadArg) {
        if (URI) {
            leapclient.loadjs(URI);
        }
        var module = null;
        try {
            module = eval("(new " + name + "())");
            if (this.pom) {
                if (!moduleParameter) {
                    moduleParameter = {};
                }
                moduleParameter.___pageObjectModel = this.pom;
                moduleParameter.___parentModule = this;
            }
            module = LEAP.newPageObjectInstance(name, module, null, moduleParameter, moduleLoadArg);
            if (module) {
                module.parentPageModule = this;
            }
            module.isNoneUI = true;
            return module;
        } finally {
            moduleParameter = module = null;
        }
    };
    pageObject.loadForm3 = function(o) {
        if (o == null) {
            return null;
        }
        var m = null;
        try {
            if (this.pom) {
                var n = o.moduleParameter;
                if (!n) {
                    n = {};
                }
                n.___pageObjectModel = this.pom;
                n.___parentModule = this;
                o.moduleParameter = n;
            }
            if (!o.cover) {
                m = LEAP.form.create3(o);
            } else {
                o.module = this;
                m = LEAP.form.coverModule(o);
            }
            var l = m.module;
            if (l != null) {
                l.parentPageModule = this;
                l.pom = this.pom;
                this.pom.addObject(l, this);
            }
            if (!this.___forms) {
                this.___forms = [];
            }
            this.___forms.add(m.form);
            if (this.delayModuleEvents) {
                var h = o.name;
                if (String.isEmpty(h)) {
                    h = o.path;
                }
                if (this.delayModuleEvents.contains(h)) {
                    var d = this.delayModuleEvents.getvalue(h);
                    for (var j = 0; j < d.length; j++) {
                        var o = d[j];
                        var g = o.type + "_" + o.event + "_" + o.name;
                        if (this[g] != null) {
                            if (o.type == "form") {
                                this.addEvent(m.form, o.event, this[g]);
                            } else {
                                m.module.regEvent(o.event, this[g], this);
                            }
                        }
                    }
                }
            }
            return m;
        } finally {
            m = null;
        }
    };
    pageObject.loadForm = function(A, p, g, u, q, o, m, r, w, v, j, l, n) {
        var d = null;
        try {
            var z = null;
            if (this.pom) {
                z = {};
                z.___pageObjectModel = this.pom;
                z.___parentModule = this;
            }
            d = LEAP.form.create(A, p, g, u, q, o, m, r, w, v, j, l, null, null, null, z, n, this.moduleVersion);
            var h = d.module;
            if (h != null) {
                h.parentPageModule = this;
                h.pom = this.pom;
                this.pom.addObject(h, this);
            }
            if (!this.___forms) {
                this.___forms = [];
            }
            this.___forms.add(d.form);
            return d;
        } finally {
            d = null;
        }
    };
    pageObject.loadForm2 = function(u, m, d, p, n, l, h, o, r, q, g, j) {
        return this.loadForm(u, m, d, p, n, l, h, o, r, q, g, 2, j);
    };
    pageObject.getValue = function(d) {
        return LEAP.getValue(d, this.parentElement);
    };
    pageObject.setValue = function(g, d) {
        LEAP.setValue(g, d, this.parentElement);
    };
    pageObject.addEvent = function(n, j, h, d, g, m) {
        if (h == null) {
            return;
        }
        if (typeof(n) == commfields.string) {
            if (n.indexOf("instance") == -1) {
                n = LEAP.getElements(n + "[instance=" + this.instance + "]", this.parentElement);
            } else {
                n = LEAP.getElements(n);
            }
        }
        if (g == null || (g != true && g != false)) {
            g = null;
        }
        if (m == null) {
            m = this;
        }
        LEAP.addEvent(n, j, h, d, m, g);
        if (this.__aes == null) {
            this.__aes = [];
        }
        var l = {
            elements: n,
            type: j,
            fn: h,
            useBrowEvent: g
        };
        this.__aes.add(l);
    };
    pageObject.removeEvent = function(h, g, d) {
        if (typeof(h) == commfields.string) {
            h = LEAP.getElements(h + "[instance=" + this.instance + "]", this.parentElement);
        }
        LEAP.removeEvent(h, g, d);
    };
    pageObject.validateUI = function(d, r) {
        if (r == null) {
            r = this.parentElement;
        }
        if (d != null) {
            if (typeof(d) == commfields.string) {
                d = LEAP.getElements(d + "[instance=" + this.instance + "]", r);
            }
        } else {
            if (r instanceof Array) {
                d = [];
                var h = r.length;
                for (var j = 0; j < h; j++) {
                    var q = r[j];
                    var m = LEAP.getElements("[check][instance=" + this.instance + "]", q);
                    if (m != null) {
                        d.addall(m);
                    }
                    q = null;
                }
                if (d.length == 0) {
                    d = null;
                }
            } else {
                d = LEAP.getElements("[check][instance=" + this.instance + "]", r);
            }
        }
        if (d != null) {
            var o = [];
            var h = d.length;
            for (var j = 0; j < h; j++) {
                var n = d[j];
                var p = n.getAttribute("___isoparea");
                var g = n.getAttribute("___isoparea_status");
                if (String.isEmpty(p) || (p != null && g != null && p == "1" && g != "110" && g != "120")) {
                    g = n.getAttribute("_sys_opareastatus");
                    if (String.isEmpty(g) || (g != "110" && g != "120")) {
                        o.push(n);
                    }
                }
                n = null;
            }
            d = null;
            if (o.length > 0) {
                try {
                    return LEAP.check.validate(o);
                } finally {
                    o = null;
                }
            }
        }
        d = null;
    };
    pageObject.request = function(d, o, q, n, j, l, g, p, h) {
        var m = LEAP.request(d, o, this.extendPar, q, n, j, l, g, p, this, h);
        if (m != null && q != null) {
            if (this.asynreqs == null) {
                this.asynreqs = [];
            }
            this.asynreqs.add(m);
        }
        return m;
    };
    pageObject.asynrequest = function(h, j, l, g) {
        var d = LEAP.request(h, j, this.extendPar, l, null, null, null, null, null, this, g);
        if (d != null && l != null) {
            if (this.asynreqs == null) {
                this.asynreqs = [];
            }
            this.asynreqs.add(d);
        }
        return d;
    };
    pageObject.getLastWarring = function() {
        return leapclient.getLastWarring();
    };
    pageObject.getLastExtendResult = function() {
        return leapclient.getLastExtendResult();
    };
    pageObject.setLastExtendResult = function(d) {
        return leapclient.setLastExtendResult(d);
    };
    pageObject.getLastError = function() {
        return leapclient.getLastError();
    };
    pageObject.getElements = function(h, g) {
        if (!g) {
            g = this.parentElement;
        }
        var d = LEAP.getElements(h, g);
        try {
            return d;
        } finally {
            d = null;
        }
    };
    pageObject.getElement = function(h, g) {
        if (!g) {
            g = this.parentElement;
        }
        var d = LEAP.getElement(h, g);
        h = g = null;
        try {
            return d;
        } finally {
            d = null;
        }
    };
    pageObject.setPageData = function(h, d, o, j, p, n) {
        if (j == null) {
            j = true;
        }
        if (j) {
            this.data = h;
        }
        var g = null;
        if (d != null) {
            g = "[ds=" + d + "]";
        }
        if (o == null) {
            o = true;
        }
        if (o == true) {
            var m = n;
            if (m == null) {
                m = this.parentElement;
            }
            if (this._WF_ModuleProcess_beforeSetPageData) {
                var l = this._WF_ModuleProcess_beforeSetPageData(h);
                if (l == false) {
                    return;
                }
            }
            if (this.beforeSetPageData) {
                this.beforeSetPageData(h);
            }
            LEAP.bindData(h, this.instance, g, p, m);
            this.___afterSetData();
            if (this.afterSetPageData) {
                this.afterSetPageData(h);
            }
            this.fireEvent("onsetpagedata", h);
        } else {
            LEAP.asyn(this.__asynSetPageData, this, null, h, d, j, p, n);
        }
        h = null;
    };
    pageObject.setPageDataByPK = function(m, l, n, h) {
        if (this.moduleName == null) {
            return;
        }
        var g = this.request("SearchByPK", {
            name: this.moduleName,
            pk: m
        });
        if (g != null) {
            this.pks = g.pks;
            var j = LEAP.convertResult(g);
            if (j != null) {
                this.setPageData(j[0], l, n, h);
            }
        }
    };
    pageObject.getPageData = function(j, d) {
        var h = null;
        if (j != null) {
            h = "[ds=" + j + "]";
        }
        if (d == null) {
            d = this.parentElement;
        }
        var g = LEAP.getData(this.data, this.instance, h, null, d);
        if (this.onGetPageData != null) {
            g = this.onGetPageData(g);
        }
        try {
            return g;
        } finally {
            g = null;
        }
    };
    pageObject.clearPageData = function(d) {
        this.exdata = null;
        this.data = null;
        this.exSubmitParam = null;
        if (d == null) {
            d = true;
        }
        if (d == true) {
            this.___clearData2();
        } else {
            LEAP.asyn(this.___clearData2, this);
        }
    };
    pageObject.clearValidateUI = function() {
        LEAP.asyn(LEAP.check.clearValidate, null, null, LEAP.getElements("[check][instance=" + this.instance + "]", this.parentElement));
    };
    pageObject.getQueryParameter = function(n, p, j) {
        if (n == null) {
            n = new SearchParameters();
        }
        if (this.isNoneUI != null && this.isNoneUI == true) {
            return n;
        }
        var M = this.getElement("[ct=newsearch]");
        if (M) {
            if (!(this.__sys_src_ctf && this.__sys_src_ctf == "search_submit")) {
                n = LEAP.newsearch.getValue(M, n);
                M = null;
                if (this.moduleVersion > 1) {
                    var d = this.createSearchBuilder(n);
                    d.parameter = n;
                    return d;
                }
                return par;
            }
        }
        var L = LEAP.getData(null, this.instance, p, true, this.parentElement, j);
        try {
            if (L != null && L.data != null) {
                for (var G in L.data) {
                    var r = L.data[G];
                    if (r == null || (typeof(r) == "string" && r.Trim() == "")) {
                        continue;
                    }
                    var g = L.searchtype[G];
                    var A = L.group[G];
                    var z = L.skipsearch[G];
                    if (z != null && (z == "1" || z == "true")) {
                        continue;
                    }
                    var I = G.lastIndexOf("___");
                    if (I != -1 && I == G.length - 3) {
                        G = G.substr(0, I - 4);
                    }
                    var m = false;
                    if (G.toLowerCase() == "areaid" || G.toLowerCase() == "areacode" || G.toLowerCase() == "qhareaid") {
                        n.addParameter(G, r, 16).setGroup("system." + G + ".client");
                        var x = null;
                        if (r.length == 18) {
                            if (r.substring(0, 2) == "00") {
                                x = "";
                            } else {
                                if (r.substring(2, 4) == "00") {
                                    x = r.substring(0, 2);
                                } else {
                                    if (r.substring(4, 6) == "00") {
                                        x = r.substring(0, 4);
                                    } else {
                                        if (r.substring(6, 9) == "000") {
                                            x = r.substring(0, 6);
                                        } else {
                                            if (r.substring(9, 12) == "000") {
                                                x = r.substring(0, 9);
                                            } else {
                                                if (r.substring(12, 15) == "000") {
                                                    x = r.substring(0, 12);
                                                } else {
                                                    if (r.substring(15, 18) == "000") {
                                                        x = r.substring(0, 15);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            while (x.length != 18) {
                                x += "9";
                            }
                        }
                        n.addParameter(G, x, 17).setGroup("system." + G + ".client");
                    } else {
                        if (g == 120 && L.extend && L.extend[G]) {
                            var u = L.extend[G];
                            if (u) {
                                var o = u.count * 1;
                                if (window.isNaN(o)) {
                                    o = 0;
                                }
                                if (o != 0) {
                                    if (u.sizes) {
                                        var D = u.sizes.length;
                                        var K = null;
                                        var C = 0;
                                        var B = -1;
                                        for (var H = 0; H < D; H++) {
                                            var w = u.sizes[H];
                                            var h = r.substring(C, w);
                                            if (h * 1 == 0) {
                                                break;
                                            }
                                            B = H;
                                            C = w;
                                        }
                                        var y = null;
                                        if (B == 0) {
                                            y = r.substring(0, u.sizes[0]);
                                            y = (y * 1 + 1) + "";
                                            while (y.length < u.sizes[0]) {
                                                y = "0" + y;
                                            }
                                        } else {
                                            var q = r.substring(u.sizes[B - 1], u.sizes[B]);
                                            q = (q * 1 + 1) + "";
                                            while (q.length < u.sizes[B] - u.sizes[B - 1]) {
                                                q = "0" + q;
                                            }
                                            y = r.substring(0, u.sizes[B - 1]) + q;
                                        }
                                        while (y.length < o) {
                                            y += "0";
                                        }
                                        n.addParameter(G, r, 16).setGroup("system.linkselect." + G);
                                        n.addParameter(G, y, 15).setGroup("system.linkselect." + G);
                                    }
                                }
                            }
                        } else {
                            if (L.change[G] != null && L.change[G].controltype != null) {
                                if (L.change[G].controltype == "checkbox") {
                                    m = true;
                                    var F = r.split(",");
                                    for (var H = 0; H < F.length; H++) {
                                        var J = F[H];
                                        if (J != null && J.Trim() != "") {
                                            if (A != null && A.trim().length > 0) {
                                                n.addParameter(G, J, 12).setGroup(A);
                                            } else {
                                                n.addParameter(G, J, 12);
                                            }
                                        }
                                    }
                                }
                            }
                            if (!m) {
                                if (A != null && A.trim().length > 0) {
                                    n.addParameter(G, r, g).setGroup(A);
                                } else {
                                    n.addParameter(G, r, g);
                                }
                            }
                        }
                    }
                }
            }
            pageObject.getMultiParameter(n);
            if (this.moduleVersion > 1) {
                var d = this.createSearchBuilder(n);
                d.parameter = n;
                return d;
            }
            return n;
        } finally {
            n = L = null;
        }
    };
    pageObject.getMultiParameter = function(searchParameters) {
        if (searchParameters) {
            var pars = LEAP.getElements("[multipar]", this.parentElement);
            if (pars != null) {
                for (var i = 0; i < pars.length; i++) {
                    var multis = pars[i].getAttribute("multipar");
                    multis = eval(multis);
                    var vs = LEAP.getValue(pars[i]);
                    if (vs != null) {
                        for (var j = 0; j < multis.length; j++) {
                            if (multis[j].v == vs) {
                                var ex = multis[j].p;
                                if (searchParameters.extendQuery) {
                                    ex = ex + "and" + searchParameters.extendQuery;
                                }
                                searchParameters.setExtendQuery(ex);
                            }
                        }
                    }
                }
            }
        }
    };
    pageObject.getUpdateParameter = function(n, g) {
        if (g == null) {
            g = this.parentElement;
        }
        if (this.pks == null) {
            if (this.parentPageModule && this.parentPageModule.pks) {
                if (this.parentPageModule.pageMode == "search") {
                    this.pks = this.parentPageModule.pks;
                }
            }
            if (this.pks == null) {
                this.pks = ["id"];
            }
        }
        var d = null;
        var h = null;
        try {
            var m = null;
            if (n != null) {
                m = "[ds=" + n + "]";
            }
            h = LEAP.getData(this.data, this.instance, m, null, g);
            if (h == null || h.change == null) {
                return null;
            }
            if (this.moduleVersion > 1) {
                d = {};
                for (var l in h.change) {
                    if (h.change[l].hashide) {
                        continue;
                    }
                    d[l] = h.change[l].value;
                }
                for (var j = 0; j < this.pks.length; j++) {
                    var l = this.data[this.pks[j]];
                    if (l == null) {
                        if (this.submitMode != null && this.submitMode == 2) {} else {
                            if (this.submitMode != null && this.submitMode == 3) {} else {
                                return null;
                            }
                        }
                    } else {
                        d[this.pks[j]] = l;
                    }
                }
                if (this.moduleName && d) {
                    d.beanname = this.moduleName;
                }
            } else {
                d = LEAP.convertChangeResult(h.change);
                for (var j = 0; j < this.pks.length; j++) {
                    var l = this.data[this.pks[j]];
                    if (l == null) {
                        if (this.submitMode != null && this.submitMode == 2) {} else {
                            if (this.submitMode != null && this.submitMode == 3) {} else {
                                return null;
                            }
                        }
                    } else {
                        d.addparameter(this.pks[j], l, null);
                    }
                }
                if (this.moduleName && d) {
                    d.name = this.moduleName;
                }
            }
            return d;
        } finally {
            d = h = null;
        }
    };
    pageObject.deleteResult = function(g, l, d) {
        if (d == null || g == null || l == null || !(d instanceof Array)) {
            return;
        }
        var m = new DataResult();
        m.name = g;
        if (typeof(d) == "string") {
            d = [d];
        }
        for (var j = 0; j < d.length; j++) {
            var h = l[d[j]];
            if (h == null) {
                return;
            }
            m.addparameter(d[j], h);
        }
        return this.request("DynaDelete", {
            par: m
        });
    };
    pageObject.getCreateParameter = function(d, y) {
        if (y == null) {
            y = this.parentElement;
        }
        var p = null;
        var q = null;
        try {
            var j = null;
            if (d != null) {
                j = "[ds=" + d + "]";
            }
            q = LEAP.getData(null, this.instance, j, null, y);
            if (q != null && q.data != null) {
                var g = q.hides;
                if (this.moduleVersion > 1) {
                    for (var m in q.data) {
                        if (g && g.contains(m)) {
                            continue;
                        }
                        var x = q.data[m];
                        if (x == null || (typeof(x) == "string" && x.Trim() == "")) {
                            continue;
                        }
                        if (p == null) {
                            p = {};
                        }
                        p[m] = x;
                    }
                    if (this.moduleName && p) {
                        p.beanname = this.moduleName;
                    }
                    if (this.isp_out_inset && p) {
                        var o = p;
                        for (var w in this.isp_out_inset) {
                            var u = this.isp_out_inset[w];
                            if (u) {
                                p[w] = u;
                            }
                        }
                    }
                    if (this.defvalue && p) {
                        var h = this.defvalue.length;
                        for (var n = 0; n < h; n++) {
                            var r = this.defvalue[n];
                            if (r && r.f && r.v) {
                                p[r.f] = r.v;
                            }
                        }
                    }
                } else {
                    for (var m in q.data) {
                        if (g && g.contains(m)) {
                            continue;
                        }
                        var x = q.data[m];
                        if (x == null || (typeof(x) == "string" && x.Trim() == "")) {
                            continue;
                        }
                        if (p == null) {
                            p = new DataResult();
                        }
                        p.addparameter(m, x);
                    }
                    if (this.moduleName && p) {
                        p.name = this.moduleName;
                    }
                }
            }
            return p;
        } finally {
            p = q = null;
        }
    };
    pageObject.regEvent = function(h, g, j, d) {
        if (h == null || g == null) {
            return;
        }
        if (this.___es == null) {
            this.___es = new hashtable();
        }
        var l = this.___es.getvalue(h);
        if (j == null) {
            j = this;
        }
        if (l == null) {
            l = [{
                fn: g,
                domain: j,
                arg2: d
            }];
            this.___es.add(h, l);
        } else {
            l.push({
                fn: g,
                domain: j,
                arg2: d
            });
        }
        h = l = g = null;
    };
    pageObject.fireEvent = function(j, d) {
        if (this.___es == null) {
            return;
        }
        var n = this.___es.getvalue(j);
        if (n == null) {
            return;
        }
        var g = n.length;
        for (var h = g - 1; h > -1; h--) {
            var m = n[h];
            m.fn.call(m.domain, d, m.arg2, this);
            m = null;
        }
        n = null;
    };
    pageObject.unRegEvent = function(j, h) {
        if (j == null) {
            return;
        }
        if (this.___es == null) {
            return;
        }
        var n = this.___es.getvalue(j);
        if (n == null) {
            return;
        }
        if (h == null) {
            this.___es.remove(j);
        } else {
            var d = n.length;
            for (var g = d - 1; g > -1; g--) {
                var m = n[g];
                if (m.fn == h) {
                    n.remove(m);
                }
            }
            n = null;
        }
    };
    pageObject._pageLoad = function(d) {};
    pageObject.innerPageLoad = function(arg) {
        this.listmode = "table";
        var list = this.getUT("list");
        if (list) {
            var listct = list.getAttribute("ct");
            if (listct && listct == "eachlist") {
                this.listmode = "eachlist";
            }
        }
        this.moduleVersion = 1;
        var moduleElement = this.moduleElement;
        if (moduleElement) {
            this.supportAsynCount = false;
            var sacstr = moduleElement.getAttribute("asyncount");
            if (sacstr != null && sacstr == "1" || sacstr == "true") {
                this.supportAsynCount = true;
            }
            this.moduleName = moduleElement.getAttribute("module");
            this.moduleCNName = moduleElement.getAttribute("modulecn");
            this.pageModuleName = moduleElement.getAttribute("pagemodule");
            this.pageModuleCNName = moduleElement.getAttribute("pagemodulecn");
            this.pageModulePath = moduleElement.getAttribute("pagemodulepath");
            this.pageModuleType = moduleElement.getAttribute("moduletype");
            this.pageModuleHeight = moduleElement.getAttribute("moduleheight");
            this.pageModuleWidth = moduleElement.getAttribute("modulewidth");
            this.moduleElement = moduleElement;
            this.moduleVersion = moduleElement.getAttribute("moduleversion");
            this.formType = moduleElement.getAttribute("formtype");
            this.reportTitle = moduleElement.getAttribute("reporttitle");
            this.isGisMode = moduleElement.getAttribute("isgismode");
            this.isstat = null;
            var isptmp = moduleElement.getAttribute("isp");
            if (!String.isEmpty(isptmp)) {
                this.isp = JSON.parse(isptmp);
            }
            var _order = moduleElement.getAttribute("order");
            if (!String.isEmpty(_order)) {
                this.searchorder = _order;
            }
            var _defvalue = moduleElement.getAttribute("defvalue");
            if (!String.isEmpty(_defvalue)) {
                this.defvalue = JSON.parse(_defvalue);
            }
            if (!String.isEmpty(this.isGisMode) && this.isGisMode == "1") {
                this.isGisMode = true;
            } else {
                this.isGisMode = false;
            }
            if (!String.isEmpty(this.pageModuleType) && this.pageModuleType == "stat") {
                this.isstat = true;
            } else {
                this.istat = false;
            }
            this.autoRefreshParentModule = moduleElement.getAttribute("autoRefreshParentModule");
            if (this.autoRefreshParentModule == null || this.autoRefreshParentModule == "1") {
                this.autoRefreshParentModule = true;
            } else {
                this.autoRefreshParentModule = false;
            }
            this.autoRefreshOnPageLoad = moduleElement.getAttribute("autoRefreshOnPageLoad");
            if (this.autoRefreshOnPageLoad == null || this.autoRefreshOnPageLoad == "1") {
                this.autoRefreshOnPageLoad = true;
            } else {
                this.autoRefreshOnPageLoad = false;
            }
            if (!String.isEmpty(this.pageModuleType) && this.pageModuleType == "chartmodule") {
                this.autoStatOnPageLoad = true;
            }
            if (arg && arg.arg && arg.arg.refreshonpageload != null) {
                this.autoRefreshOnPageLoad = arg.arg.refreshonpageload;
            }
            if (arg && arg.arg && arg.arg.autosearch != null) {
                this.autoRefreshOnPageLoad = arg.arg.autosearch;
            }
            this.service_insert = moduleElement.getAttribute("service_insert");
            this.service_modify = moduleElement.getAttribute("service_modify");
            this.service_search = moduleElement.getAttribute("service_search");
            this.service_delete = moduleElement.getAttribute("service_delete");
            var arrti = moduleElement.getAttribute("lwfp_searchatt");
            if (arrti != null && arrti.trim().length > 0) {
                this.lwfp_searchatt = eval(arrti);
            }
            var group = moduleElement.getAttribute("search_group");
            if (group != null && group.trim().length > 0) {
                this.searchgroup = eval(group);
            }
            this.search_fields = moduleElement.getAttribute("search_fields");
            if (!String.isEmpty(this.search_fields)) {
                this.search_fields = this.search_fields.split(",");
            } else {
                this.search_fields = null;
            }
            if (!String.isEmpty(this.moduleVersion)) {
                this.moduleVersion = this.moduleVersion * 1;
                if (window.isNaN(this.moduleVersion) || this.moduleVersion < 1) {
                    this.moduleVersion = 1;
                }
            }
            if (!String.isEmpty(this.formType)) {
                this.formType = this.formType * 1;
                if (window.isNaN(this.formType) || this.formType < 1) {
                    this.formType = 1;
                }
            }
            var lsm = moduleElement.getAttribute("lsm");
            if (!String.isEmpty(lsm)) {
                lsm = lsm.trim();
                lsm = lsm.substring(1);
                lsm = lsm.substring(0, lsm.length - 1);
                var es = lsm.split(",");
                if (es.length > 0) {
                    var l = es.length;
                    for (var i = 0; i < l; i++) {
                        var cur = es[i].trim();
                        if (cur.length > 0) {
                            var def = cur.split("_");
                            if (def.length == 4) {
                                var event = def[0];
                                var type = def[1];
                                var ct = def[2];
                                var sn = def[3];
                                var st = type + "_" + ct + "_" + sn;
                                var element = this.getElement("[st=" + st + "]", this.parentElement);
                                if (element) {
                                    var fn = this[cur];
                                    if (fn != null) {
                                        this.addEvent(element, event, fn);
                                    }
                                    element = null;
                                }
                            } else {
                                if (def.length == 3) {
                                    var type = def[0];
                                    var eventName = def[1];
                                    var __name = def[2];
                                    if (__name) {
                                        if (this.delayModuleEvents == null) {
                                            this.delayModuleEvents = new hashtable();
                                        }
                                        var def = {
                                            type: type,
                                            event: eventName,
                                            name: __name
                                        };
                                        var defs = null;
                                        if (this.delayModuleEvents.contains(__name)) {
                                            defs = this.delayModuleEvents.getvalue(__name);
                                        } else {
                                            defs = [];
                                            this.delayModuleEvents.add(__name, defs);
                                        }
                                        defs.add(def);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            moduleElement = null;
        }
        var binds = null;
        if (this.______binds == null) {
            binds = this.______binds;
        } else {
            binds = this.getElements("[bindevents]", this.parentElement);
        }
        if (binds != null) {
            var l = binds.length;
            for (var i = 0; i < l; i++) {
                var control = binds[i];
                var events = control.getAttribute("bindevents");
                if (events.length > 0) {
                    events = events.split(";");
                    var el = events.length;
                    for (var j = 0; j < el; j++) {
                        var exp = events[j];
                        var exps = exp.split("=");
                        if (exps.length == 2) {
                            var name = exps[0].Trim();
                            var fnname = exps[1].Trim();
                            if (name.length > 0 && fnname.length > 0) {
                                var fn = this[exps[1].Trim()];
                                if (fn != null) {
                                    if (name == "searchMethod") {
                                        LEAP[this.listmode].setSearchMethod(control, fn, this);
                                    } else {
                                        this.addEvent(control, exps[0].Trim(), fn);
                                    }
                                }
                                fn = null;
                            }
                        }
                    }
                    events = null;
                }
                control = null;
            }
        }
        this.______binds = binds = null;
        if (arg != null && arg.moduleOperationType != null) {
            if (arg.moduleOperationType == "view") {
                var sb = this.___btnSubmit;
                if (sb != null) {
                    sb.style.display = "none";
                    sb = null;
                }
            }
        }
    };
    pageObject.pageLoad = function(d) {
        this.exdata = null;
        this.moduleLoadArg = d;
        if (this.moduleLoadArg && this.moduleLoadArg.arg && this.moduleLoadArg.arg.workflow) {
            this.workflow = this.moduleLoadArg.arg.workflow;
        }
        if (this.moduleElement && "1" == this.moduleElement.getAttribute("workflowmodule")) {
            this.isworkflow = true;
        } else {
            this.isworkflow = false;
        }
        if (this.pom) {
            if (this.___parentModule) {
                this.pom.addObject(this, this.___parentModule);
                this.___parentModule = null;
            }
        } else {
            this.pom = new PageObjectModel();
            this.pom.addObject(this);
        }
        var g = LEAP.getData(null, this.instance, this.parentElement, null, null, this.___initBTMDS);
        if (g != null) {
            this.defaultData = g.data;
        }
        this.innerPageLoad(d);
        this.___innerPageLoad2(d);
        if (this._pageLoad != null) {
            this._pageLoad(d);
        }
        this.___innerPageLoad3(d);
        if (this.setDefaultPageData) {
            this.setDefaultPageData(this.defaultData);
        }
        if (this.pageMode == "search") {
            var j = false;
            if (d.arg && d.arg.unitesave) {
                if (d.arg.unitesave == "1") {
                    j = true;
                }
            }
            if (!j) {
                if (!LEAP.isIE && this.moduleElement != null) {
                    LEAP.asyn(this.setModulePorps, this, 500);
                }
                if (LEAP.getElement("div.lgsearchmore:first", this.moduleElement) != null) {
                    this.searchMore();
                }
                if (this.autoRefreshOnPageLoad) {
                    if (d && d.arg && d.arg.autosearch == false) {} else {
                        this.innerSearch();
                    }
                }
            }
        }
        if (this.autoStatOnPageLoad) {
            var h = LEAP.getElements("[ct=olapchat]", this.moduleElement);
            if (h && h.length > 0) {
                for (var l = 0; l < h.length; l++) {
                    LEAP.olapchat.setValue(h[l], null);
                }
            }
        }
        if (this.moduleElement && ((LEAPBrowser.IEVersion && LEAPBrowser.IEVersion > 9) || LEAPBrowser.isWebKit)) {
            LEAP.asyn(this.setBrowserPorps, this, 500);
        }
        this._initphs();
        this._initpes();
        this._initpls();
        if (this.isworkflow == true) {
            LWFP.API.ModuleProcess.process(this);
        }
    };
    pageObjectExtend.setModulePorps = function() {
        var g = LEAP.getElement("div.lgsearchpanel:first", this.moduleElement);
        var m = LEAP.getElement("div.lgsearchcon:first", this.moduleElement);
        var d = LEAP.getElement("div.lgsearchmore:first", this.moduleElement);
        var l = LEAP.getElement("div.lgbtncon:first", this.moduleElement);
        if (m != null) {
            m.style.height = m.offsetHeight + "px";
            m.style.paddingLeft = "0px";
        }
        if (d != null) {
            m.style.height = "auto";
            d.style.paddingLeft = "0px";
        }
        if (g != null && m) {
            var h = m.scrollHeight;
            var j = l.scrollHeight;
            g.style.height = h + j + "px";
            g.nextElementSibling.style.top = g.style.height;
            g = null;
        }
    };
    pageObjectExtend.setBrowserPorps = function() {
        if (this && this.setBrowserPorps && this.moduleElement) {
            var d = LEAP.getElement(".wfui_workarea_c", this.moduleElement);
            if (d) {
                if (d.scrollWidth > d.offsetWidth) {
                    d.style.width = d.scrollWidth + "px";
                }
                d = null;
            }
        }
    };
    pageObject.dispose = function() {
        if (this.moduleDisposing || this.moduleDisposed) {
            return;
        }
        try {
            if (this.__aes) {
                var d = this.__aes.length;
                for (var g = 0; g < d; g++) {
                    try {
                        var o = this.__aes[g];
                        LEAP.removeEvent(o.elements, o.type, o.fn, o.useBrowEvent);
                    } catch (m) {}
                }
                this.__aes.clear();
            }
        } catch (n) {}
        if (LEAP.echarts) {
            var p = this.getElements("[ct=" + LEAP.echarts.d + "]");
            if (p) {
                for (var g = 0; g < p.length; g++) {
                    LEAP.echarts.clear(p[g]);
                    p[g] = null;
                }
                p = null;
            }
        }
        if (this.disposeList && this.disposeList.length > 0) {
            var d = this.disposeList.length;
            for (var g = d - 1; g > -1; g--) {
                try {
                    if (LEAP.echarts) {
                        LEAP.echarts.loads.remove(this.disposeList[g]);
                    }
                    if (this.disposeList[g].dispose) {
                        this.disposeList[g].dispose();
                    }
                } catch (m) {}
            }
        }
        this.moduleDisposing = true;
        PageObjectModel.___allObjects.remove(this.instance);
        this.parentElement = null;
        if (this.__simpleForm_imgshow) {
            document.body.removeChild(this.__simpleForm_imgshow);
            this.__simpleForm_imgshow = null;
        }
        if (this.pom) {
            this.pom.removeObject(this);
            this.pom = null;
        }
        this.defaultData = null;
        this.___es = null;
        if (this.innerDispose) {
            try {
                this.innerDispose();
            } catch (m) {
                LEAP.messagebox.alert("dispose error : [" + this.name + "]" + m.message, 3);
            }
        }
        if (this.___forms) {
            var d = this.___forms.length;
            for (var g = 0; g < d; g++) {
                LEAP.form.close(this.___forms[g]);
            }
        }
        if (this._simplemodules) {
            for (var q in this.__simplemodules) {
                if (this.__simplemodules[q]) {
                    this.__simplemodules[q].dispose();
                }
            }
        }
        if (this.moduleElement) {
            var h = LEAP.getElements("iframe", this.moduleElement);
            if (h) {
                for (var g = 0; g < h.length; g++) {
                    var o = h[g];
                    if (o && o.contentWindow) {
                        try {
                            o.contentWindow.__unloadFlash();
                        } catch (m) {}
                    }
                    o = null;
                }
            }
            h = null;
        }
        if (this.form) {
            LEAP.form.close(this.form);
        }
        if (this.asynreqs) {
            var d = this.asynreqs.length;
            for (g = 0; g < d; g++) {
                leaprpcclientasyncactivelist.remove(this.asynreqs[g]);
            }
        }
        if (this.simpleForm) {
            LEAP.removeElement(this.simpleForm);
        }
        for (var j in this) {
            this[j] = null;
        }
        this.moduleDisposed = true;
    };
    pageObject.showForm = function() {
        if (this.form != null) {
            LEAP.form.show(this.form);
        } else {
            if (this.simpleForm != null) {
                this.simpleForm.style.zIndex = LEAP.form.z++;
                this.simpleForm.style.display = "block";
                if (this.__simpleForm_imgshow) {
                    document.body.removeChild(this.__simpleForm_imgshow);
                    this.__simpleForm_imgshow = null;
                }
            }
        }
        if (this.formShowed) {
            this.formShowed();
        }
    };
    pageObject.hideForm = function() {
        if (this.form != null) {
            LEAP.form.hide(this.form);
        } else {
            if (this.simpleForm != null) {
                this.simpleForm.style.display = "none";
                var d = document.createElement("IMG");
                d.style.position = "absolute";
                d.style.top = this.simpleForm.style.top;
                d.style.right = "0px";
                d.style.cursor = "pointer";
                d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/pop_label_bg02.png";
                d.style.zIndex = "999";
                d.style.filter = "alpha(opacity = 70)";
                d.style.opacity = "0.7";
                document.body.appendChild(d);
                this.addEvent(d, "click", this.showForm);
                this.__simpleForm_imgshow = d;
            }
        }
        if (this.formHided) {
            this.formHided();
        }
    };
    pageObjectExtend.hideModule = function() {
        if (this.parentElement != null) {
            this.parentElement.style.display = "none";
        }
    };
    pageObjectExtend.showModule = function() {
        if (this.parentElement != null) {
            this.parentElement.style.display = "";
        }
    };
    pageObject.getMD = function(d, j) {
        if (String.isEmpty(d)) {
            return;
        }
        if (this.__cacheMD.contains(d)) {
            return this.__cacheMD.getvalue(d);
        }
        var h = "[md=" + d + "][instance=" + this.instance + "]";
        if (j != null) {
            h += "[ds=" + j + "]";
        }
        var g = LEAP.getElement(h, this.parentElement);
        this.__cacheMD.add(d, g);
        try {
            return g;
        } finally {
            g = null;
        }
    };
    pageObject.getUT = function(g, h) {
        if (String.isEmpty(g)) {
            return;
        }
        if (this.__cacheUT.contains(g)) {
            var d = this.__cacheUT.getvalue(g);
            if (d) {
                try {
                    return d;
                } finally {
                    d = null;
                }
            }
        }
        if (!h) {
            h = this.parentElement;
        }
        var d = LEAP.getElement("[ut=" + g + "][instance=" + this.instance + "]", h);
        this.__cacheUT.add(g, d);
        try {
            return d;
        } finally {
            d = null;
        }
    };
    pageObjectExtend.removeUTCache = function(g) {
        if (String.isEmpty(g)) {
            return;
        }
        if (this.__cacheUT.contains(g)) {
            var d = this.__cacheUT.remove(g);
            if (d != false) {
                this.__cacheUT = d;
                return true;
            } else {
                return false;
            }
        }
    };
    pageObject.getST = function(g, h) {
        if (String.isEmpty(g)) {
            return;
        }
        if (this.__cacheST.contains(g)) {
            return this.__cacheST.getvalue(g);
        }
        if (!h) {
            h = this.parentElement;
        }
        var d = LEAP.getElement("[st=" + g + "][instance=" + this.instance + "]", h);
        this.__cacheST.add(g, d);
        try {
            return d;
        } finally {
            d = null;
        }
    };
    pageObject.getControl = function(d) {
        return LEAP.getElement("[instance=" + this.instance + "]" + d, this.parentElement);
    };
    pageObject.addShortKeyEvent = function(d, j, g, h) {
        LEAP.addShortKeyEvent(d, j, g, h, this);
    };
    pageObject.ut = function(d) {
        var g = this.getUT(d);
        if (g) {
            return LEAP.wrap(g, this);
        }
    };
    pageObject.md = function(d) {
        var g = this.getMD(d);
        if (g) {
            return LEAP.wrap(g, this);
        }
    };
    pageObject.st = function(d) {
        var g = this.getST(d);
        if (g) {
            return LEAP.wrap(g, this);
        }
    };
    pageObject.innerViewPageLoad = function(d) {
        this.clearValidateUI();
        this.setReadonly(true);
        if (this._viewPageLoad_ != null) {
            this._viewPageLoad_(d);
        }
        this.lastLoadStatus = "view";
        LEAP.asyn(this.setBackcolor, this, 100);
    };
    pageObject.innerInsertPageLoad = function(d) {
        this.clearValidateUI();
        this.setReadonly(false);
        if (this._insertPageLoad_ != null) {
            this._insertPageLoad_(d);
        }
        this.lastLoadStatus = "insert";
        LEAP.asyn(this.setBackcolor, this, 100);
    };
    pageObject.innerModifyPageLoad = function(d) {
        this.setReadonly(false);
        this.clearValidateUI();
        if (this._modifyPageLoad_ != null) {
            this._modifyPageLoad_(d);
        }
        this.lastLoadStatus = "modify";
        LEAP.asyn(this.setBackcolor, this, 100);
    };
    pageObject.innerSearchPageLoad = function(d) {
        this.setReadonly(false);
        if (this._searchPageLoad_ != null) {
            this._searchPageLoad_(d);
        }
        this.lastLoadStatus = "search";
        LEAP.asyn(this.setBackcolor, this, 100);
        if (this._searchPageLoadCount == null) {
            this._searchPageLoadCount = 1;
        } else {
            this._searchPageLoadCount += 1;
        }
        if (this._searchPageLoadCount > 1 && this.autoRefreshOnPageLoad) {
            this.innerSearch();
        }
    };
    pageObjectExtend.setBackcolor = function() {
        if (this._allcontrols == null) {
            return;
        }
        if (this.pageMode == "view") {
            if (!LEAP.hasCSS(this.moduleElement, "modulestyle_readonly")) {
                LEAP.addCSS(this.moduleElement, "modulestyle_readonly");
            }
        } else {
            LEAP.removeCSS(this.moduleElement, "modulestyle_readonly");
        }
        var d = this._allcontrols.length;
        for (var g = 0; g < d; g++) {
            var j = this._allcontrols[g];
            if (((j.tagName == "INPUT" && j.type == "text") || j.tagName == "TEXTAREA") && j.checktype == null) {
                var m = j.getAttribute("lcv");
                if (m && m == "2") {
                    continue;
                }
                var h = j.style.backgroundColor;
                if (h == null || h.length == 0) {
                    if (this.pageMode == "view") {
                        j.style.backgroundColor = "";
                    } else {
                        if (this.moduleVersion > 2) {
                            j.style.backgroundColor = "";
                        } else {
                            j.style.backgroundColor = "#FAFAFA";
                        }
                    }
                }
            }
            j = null;
        }
    };
    pageObjectExtend.setReadonly = function(j) {
        if (j != null) {
            if (j != "true" && j != true && j != "1") {
                j = false;
            } else {
                j = true;
            }
        }
        if (this.lastLoadStatus != null) {
            if (!j && this.lastLoadStatus != "view") {
                return;
            }
            if (j && this.lastLoadStatus == "view") {
                return;
            }
        } else {
            if (!j) {
                return;
            }
        }
        if (this._allcontrols == null) {
            return;
        }
        var h = this._allcontrols.length;
        for (var o = 0; o < h; o++) {
            var p = this._allcontrols[o];
            var n = p.getAttribute("ct");
            var g = null;
            if (n == null) {
                g = p.getAttribute("readOnly");
                if (g == null) {
                    g = false;
                }
            } else {
                if (n == "simplecheck") {
                    g = p.getAttribute("disabled");
                } else {
                    g = p.getAttribute("readonly");
                    if (g == null) {
                        g = 0;
                    }
                }
            }
            var d = p.getAttribute("_mro_");
            if (d != null) {
                if (d != "true" && d != true && d != "1") {
                    d = false;
                } else {
                    d = true;
                }
            }
            var m = j;
            if (m) {
                LEAP.setReadonly(p, m);
                p.setAttribute("_mro_", g);
            } else {
                LEAP.setReadonly(p, d);
                p.removeAttribute("_mro_");
            }
        }
    };
    pageObjectExtend.request2 = function(g) {
        var d = LEAP.request(g.name, g.par, this.extendPar, g.callback, g.service, g.callService, g.requestType, g.isreturnjson, g.useGet, this, g.arg);
        if (d != null && g.callback != null) {
            if (this.asynreqs == null) {
                this.asynreqs = [];
            }
            this.asynreqs.add(d);
        }
        return d;
    };
    pageObject.innerBuildQuery = function(h, u) {
        var r = null;
        var v = this.getUT("searchMore");
        if (v && v.style.display == "none") {
            var m = '[bt][instance="' + this.instance + '"][md]';
            var n = null;
            var d = LEAP.getElements(m, v);
            var q = LEAP.getElements(m, this.parentElement);
            if (d && q) {
                var j = q.length;
                var g = d.length;
                for (var o = 0; o < j; o++) {
                    for (var l = 0; l < g; l++) {
                        if (d[l] == null) {
                            continue;
                        }
                        if (q[o] == d[l]) {
                            q[o] = null;
                            d[l] = null;
                        }
                    }
                }
                n = [];
                for (var o = 0; o < j; o++) {
                    if (q[o] != null) {
                        n.add(q[o]);
                    }
                }
            }
            v = d = q = null;
            r = this.getQueryParameter(null, null, n);
            n = null;
        } else {
            r = this.getQueryParameter();
        }
        r.name = this.moduleName;
        r.pageNum = h;
        r.pageSize = u;
        r.getCodeValue = true;
        r.isgis = this.isGisMode;
        r = pageObject.innerBuildQuery_WF(r, this.lwfp_searchatt, this.instance, this.parentElement);
        r = pageObject.innerBuildQuery_WFGroup(r, this.searchgroup);
        if (this.parentPKValue && this.linkedfield) {
            r.addParameter(this.linkedfield, this.parentPKValue, 11);
        }
        if (this.buildSearchQuery != null) {
            var p = this.buildSearchQuery(r);
            if (p != null && p == false) {
                return null;
            }
        }
        return r;
    };
    pageObject.innerBuildQuery_WF = function(n, d, p, o) {
        if (d != null) {
            for (var m = 0; m < d.length; m++) {
                var l = d[m];
                if (l == null) {
                    continue;
                }
                if (l.islwfp != "1") {
                    n.addParameter(l.name, l.value, l.flag, l.type);
                    if (l.group != null && l.group.trim().length > 0) {
                        n.setGroup(l.group);
                    }
                } else {
                    var h = l.cwid;
                    if (h != null && h.trim().length > 0) {
                        var j = '[bt][instance="' + p + '"][cwid="' + h + '"]';
                        var g = LEAP.getElement(j, o);
                        if (g == null) {
                            continue;
                        }
                        var q = LEAP.getValue(g);
                        if (q != null && q.trim().length > 0) {
                            n.addParameter(l.name, q, l.flag, l.type);
                        }
                    }
                }
            }
        }
        return n;
    };
    pageObject.innerBuildQuery_WFGroup = function(g, j) {
        if (j != null) {
            for (var d = 0; d < j.length; d++) {
                var h = j[d];
                if (h == null) {
                    continue;
                }
                g.setGroupLogic(h.name, h.logic);
            }
        }
        return g;
    };
    pageObjectExtend.beanDelete = function(d, l, g) {
        if (d == null) {
            return false;
        }
        var j = this.getDeleteBean(d, l, g);
        if (j == null) {
            return false;
        }
        var h = this.service_delete;
        if (String.isEmpty(h)) {
            h = "beanDelete";
        }
        return this.request(h, {
            par: j
        });
    };
    pageObjectExtend.getDeleteBean = function(d, g, h) {
        if (d == null) {
            return null;
        }
        var m = new Object();
        if (h != null) {
            m.beanname = h;
        }
        if (m.beanname == null) {
            m.beanname = d.beanname;
        }
        if (m.beanname == null) {
            m.beanname = this.moduleName;
        }
        if (g == null) {
            g = this.pks;
        }
        if (g == null) {
            g = ["id"];
        }
        if (typeof(g) == "string") {
            g = [g];
        }
        for (var l = 0; l < g.length; l++) {
            var j = d[g[l]];
            if (j == null) {
                return;
            }
            m[g[l]] = j;
        }
        return m;
    };
    pageObjectExtend._innerGetQuery = function(g, q, n) {
        var p = this.innerBuildQuery(g, q);
        if (p == null) {
            return;
        }
        if (!(p.pageNum != null && p.pageNum > 0)) {
            p.pageNum = g;
        }
        if (!(p.pageSize != null && p.pageSize > 0)) {
            p.pageSize = q;
        }
        if (this.search_fields != null) {
            var r = this.search_fields.length;
            for (var m = 0; m < r; m++) {
                var d = this.search_fields[m];
                if (!String.isEmpty(d)) {
                    d = d.trim();
                    p.addField(d);
                }
            }
        }
        if (this._innerGetSearchService().toLowerCase().startWith("lwfp")) {
            p = [p];
        }
        if (this.onGetSearchParameter) {
            var o = this.onGetSearchParameter(p);
            if (o != null) {
                p = o;
            }
        }
        if (n) {
            for (var w in n) {
                var v = n[w];
                if (v) {
                    p.addParameter(w, v, 11);
                }
            }
        }
        if (this.isp_out && p) {
            var j = p;
            if (p instanceof Array) {
                j = p[0];
            }
            for (var w in this.isp_out) {
                var v = this.isp_out[w];
                if (v) {
                    j.addParameter(w, v, 11);
                }
            }
        }
        if (this.isp && p) {
            var j = p;
            if (p instanceof Array) {
                j = p[0];
            }
            var h = this.isp.length;
            for (var m = 0; m < h; m++) {
                var u = this.isp[m];
                if (p.getParameter(u.n) == null) {
                    p.addParameter(u.n, u.v, u.c);
                }
            }
        }
        if (this.searchorder) {
            p.setOrder(this.searchorder);
        }
        return p;
    };
    pageObjectExtend._innerGetSearchService = function() {
        var d = "beanSearch";
        if (!String.isEmpty(this.service_search)) {
            d = this.service_search;
        }
        return d;
    };
    pageObjectExtend.innerStat = function() {
        var g = this.getUT("statlist");
        if (g) {
            if (this.asynwait == true) {
                LEAP.messagebox.alert("正在统计,请等候!");
                return;
            }
            var d = this._innerGetSearchService();
            var h = this._innerGetQuery(1, 99999);
            h = this.innserGetSortPar(h, g);
            if (h == null) {
                return;
            }
            h.toCount = false;
            this.asynrequest(d, {
                par: h
            }, this.innerAsynStat, {
                par: h
            });
            this.asynwait = true;
        }
        g = null;
    };
    pageObjectExtend.innerAsynStat = function(g, d) {
        this.asynwait = false;
        var h = this.getUT("statlist");
        try {
            if (g != null) {
                this.pks = g.pks;
                if (this.searchSucess) {
                    this.searchSucess(g);
                }
                if (this.searchEnd) {
                    this.searchEnd(d.par);
                }
                if (h) {
                    LEAP.setValue(h, g);
                }
            } else {
                if (this.searchSucess) {
                    this.searchSucess(null);
                }
                if (this.searchEnd) {
                    this.searchEnd(d.par);
                }
                if (h) {
                    LEAP.setValue(h, null);
                }
            }
        } finally {
            h = null;
            g = d = null;
        }
    };
    pageObjectExtend.addFeatureLay = function(x, v, w) {
        try {
            var u = this.getUT("ut_gisp_onlycurpage");
            if (w != null && w == "1") {
                var n = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
                if (n != null) {
                    if ((w != null && w == "1") && v != null) {
                        if (v.parameter != null && v.parameter.parameters != null) {
                            var h = new SearchBuilder(v.name);
                            var j = v.parameter.parameters;
                            var p = 11;
                            var g = "";
                            for (var m = 0; m < j.length; m++) {
                                if (j[m].flag != null) {
                                    if (j[m].group != null) {
                                        h.par(j[m].name, j[m].value, j[m].flag, j[m].group);
                                    } else {
                                        h.add(j[m].name, j[m].value, j[m].flag);
                                    }
                                } else {
                                    h.add(j[m].name, j[m].value);
                                }
                            }
                            if (u != null && u.checked) {
                                var d = x.result;
                                if (d != null && d.length > 0) {
                                    for (var m = 0; m < d.length; m++) {
                                        if (m == 0) {
                                            g = g + "'" + d[m].id + "'";
                                        } else {
                                            g = g + ",'" + d[m].id + "'";
                                        }
                                    }
                                }
                                h.parameter.extendQuery = v.parameter.extendQuery + " and id in (" + g + ")";
                            } else {
                                h.parameter.extendQuery = v.parameter.extendQuery;
                            }
                        }
                        LEAP.GIS._SearchModule_setBySearchModule(n, LEAP.GIS.GISSearchModule.layername, h);
                    }
                    if ((w != null && w == "1") && x != null) {
                        var o = [];
                        var d = x.result;
                        if (d != null && d.length > 0) {
                            for (var m = 0; m < d.length; m++) {
                                var l = new Object();
                                l.id = d[m].id;
                                l.type = "1";
                                l.pts = d[m].gisp_x + "," + d[m].gisp_y;
                                l.layer = LEAP.GIS.GISSearchModule.layername;
                                o.push(l);
                            }
                            o = JSON.stringify(o);
                            if (LEAP.GIS.GISSearchModule.ctid != null) {
                                LEAP.GIS._SearchModule_onSearch(n, o);
                            }
                        }
                    }
                    if ((w != null && w == "1") && x == null) {
                        LEAP.GIS._SearchModule_clearSearch(n);
                    }
                }
            }
        } catch (q) {}
    };
    pageObject.innerRefreshPage = function(h, A, B, n) {
        var z = this.getUT("list");
        if (z == null) {
            return;
        }
        var r = null;
        var p = null;
        try {
            if (this.asynwait != null && this.asynwait == true) {
                var D = {
                    leapclient_asynwait: 1
                };
                if (window._messagetip == "1") {
                    alert("正在查询,请等候!");
                } else {
                    LEAP.messagebox.alert("正在查询,请等候!");
                }
                return D;
            }
            var u = this._innerGetSearchService();
            r = this._innerGetQuery(A, B, n);
            r = this.innserGetSortPar(r, h);
            if (r == null) {
                return;
            }
            if (this.moduleParameter != null && this.moduleParameter.isfromgis != null && this.moduleParameter.isfromgis == "1") {
                var C = LEAP.GIS.GISSearchModule.getEnvQuery();
                if (C) {
                    if (r.parameter.extendQuery != null && r.parameter.extendQuery != "") {
                        var q = r.parameter.extendQuery;
                        r.setExtendQuery(q + " and " + C);
                    } else {
                        r.setExtendQuery(C);
                    }
                }
                var g = LEAP.GIS.GISSearchModule.getAreaLayer();
                if (g) {
                    if (r.parameter.extendQuery != null && r.parameter.extendQuery != "") {
                        var q = r.parameter.extendQuery;
                        r.setExtendQuery(q + " and " + g);
                    } else {
                        r.setExtendQuery(g);
                    }
                }
            }
            var w = r;
            if (r instanceof Array) {
                if (r.length > 0) {
                    w = r[0];
                }
            }
            if (w.getCodeValue != null && w.getCodeValue == true) {
                var v = LEAP[this.listmode].getHeaders(h);
                if (v != null) {
                    var x = v.length;
                    for (var y = 0; y < x; y++) {
                        var j = v[y];
                        var d = j.code;
                        if (!String.isEmpty(d)) {
                            if (w.codetypes == null) {
                                w.codetypes = [];
                            }
                            var m = {
                                name: j.md,
                                code: d
                            };
                            w.codetypes.add(m);
                        }
                    }
                }
            }
            if (this.asynmode == null || this.asynmode) {
                if (this.supportAsynCount) {
                    if (r instanceof Array && r.length) {
                        r[0].toCount = false;
                    } else {
                        r.toCount = false;
                    }
                    if (this.asyncountsn == null) {
                        this.asyncountsn = 0;
                    }
                    this.asyncountsn++;
                    z.setAttribute("asyncount", "1");
                } else {
                    z.removeAttribute("asyncount", "1");
                }
                if (this.moduleVersion > 1 && !(u.toLowerCase().startWith("lwfp"))) {
                    var o = {
                        gotoPageNum: A,
                        pageSize: B,
                        element: h,
                        par: r,
                        toCount: r.toCount,
                        asynsn: this.asyncountsn
                    };
                    r.search(this.innerAsynRefreshPage, o, u);
                    if (this.supportAsynCount) {
                        r.toCount = true;
                        r.toResult = false;
                        r.search(this.innerAsynRefreshPageCount, o, u);
                    }
                } else {
                    var o = {
                        gotoPageNum: A,
                        pageSize: B,
                        element: h,
                        par: r
                    };
                    p = this.asynrequest(u, {
                        par: r
                    }, this.innerAsynRefreshPage, o);
                    if (this.supportAsynCount) {
                        if (r instanceof Array && r.length) {
                            r[0].toCount = true;
                            r[0].toResult = false;
                        } else {
                            r.toCount = true;
                            r.toResult = false;
                        }
                        this.asynrequest(u, {
                            par: r
                        }, this.innerAsynRefreshPageCount, o);
                    }
                }
                this.asynwait = true;
                var D = {
                    leapclient_isasyn: 1
                };
                return D;
            } else {
                p = this.request(u, {
                    par: r
                });
                if (this.moduleParameter != null && this.moduleParameter.isfromgis != null && this.moduleParameter.isfromgis == "1") {
                    this.addFeatureLay(p, r, this.moduleParameter.isfromgis);
                }
                if (p != null) {
                    this.pks = p.pks;
                }
                if (this.searchSucess) {
                    this.searchSucess(p);
                }
                if (this.searchEnd) {
                    this.searchEnd(r);
                }
            }
            return p;
        } finally {
            z = null;
            h = r = p = null;
        }
    };
    pageObjectExtend.focus = function() {
        if (this.moduleElement) {
            try {
                this.moduleElement.focus();
            } catch (d) {}
        }
    };
    pageObjectExtend.innerGetSortFields = function(h) {
        try {
            if (h == null) {
                return h;
            }
            if (h instanceof Array) {
                h = h[0];
            }
            var d = h.getOrder();
            var n = new StringBuffer();
            var l = this._innserOrders;
            if (l != null && l.keys != null) {
                var j = this._innserOrders.keys;
                for (var g in j) {
                    var m = this._innserOrders.getvalue(g);
                    if (m.mod == 2) {
                        n.append(this._innserOrders.getkey(g) + " desc");
                    } else {
                        n.append(this._innserOrders.getkey(g));
                    }
                }
            }
            if (n.toString() == null || n.toString().length == 0) {
                return d;
            } else {
                if (String.isEmpty(d)) {
                    d = n.toString(",");
                } else {
                    d += ("," + n.toString(","));
                }
            }
            return d;
        } finally {}
    };
    pageObjectExtend.innserGetSortPar = function(j, g) {
        try {
            if (j == null) {
                return j;
            }
            var m = false;
            var h = j;
            if (j instanceof Array) {
                m = true;
                j = j[0];
            }
            var d = j.getOrder();
            if (this._innserOrders == null || this._innserOrders.size() == 0) {
                return h;
            }
            if (g.getAttribute("skiporder") != null && g.getAttribute("skiporder") == "1") {
                d = null;
                j.setOrder(null);
            }
            var l = new StringBuffer();
            var p = this._innserOrders.keys;
            for (var o in p) {
                var n = this._innserOrders.getvalue(o);
                if (n.mod == 2) {
                    l.append(this._innserOrders.getkey(o) + " desc");
                } else {
                    l.append(this._innserOrders.getkey(o));
                }
            }
            if (String.isEmpty(d)) {
                d = l.toString(",");
            } else {
                d += ("," + l.toString(","));
            }
            j.setOrder(d);
            return h;
        } finally {
            g = null;
        }
    };
    pageObjectExtend.innserSetSortPar = function(l, g, h) {
        if (h != null) {
            var g = h.getAttribute("_orderstatus");
            if (g == null) {
                g = 0;
            }
            if (g == 2) {
                g = 0;
            } else {
                g += 1;
            }
            h.setAttribute("_orderstatus", g);
        }
        if (this._innserOrders == null) {
            this._innserOrders = new hashtable();
        }
        if (g == 0) {
            this._innserOrders.remove(l);
            if (h != null) {
                var d = LEAP.getElement("div[flag=orderflag]", h);
                if (d != null) {
                    LEAP.removeElement(d, false);
                    d = null;
                }
            }
        } else {
            var j = this._innserOrders.getvalue(l);
            if (j == null) {
                this._innserOrders.add(l, {
                    name: l,
                    mod: g
                });
            } else {
                j.mod = g;
            }
            if (h != null) {
                var d = LEAP.getElement("div[flag=orderflag]", h);
                if (d == null) {
                    var d = document.createElement("div");
                    d.style.width = "18px";
                    d.style.height = "16px";
                    d.style.left = "10px";
                    d.style.top = "0px";
                    d.style.position = "absolute";
                    d.setAttribute("flag", "orderflag");
                }
                if (g == 1) {
                    d.style.background = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/order1.png)  no-repeat center";
                } else {
                    if (g == 2) {
                        d.style.background = "url(" + leapconfig.server + "LEAP/Resource/images/itemstyle/table/order2.png)  no-repeat center";
                    }
                }
                h.style.position = "relative";
                h.appendChild(d);
                d = null;
            }
        }
        h = null;
    };
    pageObjectExtend.exportExcel = function(v, y, w, m, q, z) {
        if (m == null) {
            m = true;
        }
        if (v == null) {
            v = 1;
        }
        if (v < 1) {
            v = 1;
        }
        if (this.cusotomExportExcel != null) {
            this.cusotomExportExcel({
                exportPageCount: v,
                beginPageNum: y,
                pageSize: w,
                isAsyn: m,
                fields: q
            });
            return null;
        }
        var p = this.getUT("list");
        if (y == null) {
            if (p != null) {
                y = p.pageNum * 1;
            }
            if (y == null || isNaN(y) || y <= 0) {
                y = 1;
            }
        }
        if (w == null) {
            if (p != null) {
                w = p.pageSize * 1;
            }
            if (w == null || isNaN(w) || w <= 0) {
                w = 12;
            }
        }
        if (q == null) {
            var g = p[LEAP[this.listmode].a];
            if (g != null) {
                var j = g.length;
                for (var n = 0; n < j; n++) {
                    var o = g[n];
                    if (o.md != null && o.sncol == false) {
                        if (q == null) {
                            q = [];
                        }
                        if (!q.contains(o.md)) {
                            q.add(o.md);
                        }
                    }
                }
                g = null;
            }
        }
        var d = this._innerGetQuery(y, w);
        if (d instanceof Array) {
            d = d[0];
        }
        if (v > 1) {
            d.pageSize = d.pageSize;
            d.pageCount = v;
        }
        d = this.innserGetSortPar(d, p);
        p = null;
        var r = this._innerGetSearchService();
        var x = null;
        if (m) {
            LEAP.showMask();
            x = this.exportExcelHandler;
        }
        if (q != null && q.length && q.length > 0) {
            var j = q.length;
            for (var n = 0; n < q.length; n++) {
                d.addField(q[n]);
            }
        }
        if (this.onExportExcel != null) {
            var u = this.onExportExcel(d, r, z);
            if (u != null && u == false) {
                return;
            }
        }
        x = null;
        m = false;
        if (this.reportTitle != null) {
            d.name2 = this.reportTitle;
        }
        var A = this.request("ExportExcelExt", {
            sp: d,
            service: r
        }, x);
        if (!m) {
            this.___processExcelResult(A, null, z);
        }
    };
    pageObjectExtend.___processExcelResult = function(g, m, j) {
        LEAP.hideMask();
        if (g) {
            var h = leapconfig.server + "LEAP/Download/excelReport/" + g;
            if (m) {
                h += "?sr=1";
            }
            if (j) {
                var d = null;
                var o = null;
                try {
                    o = new ActiveXObject("excel.Application");
                    o.Application.Visible = true;
                    d = o.Workbooks.Open(h);
                    try {
                        o.activeWindow.activeSheet.PrintOut();
                    } catch (n) {}
                } catch (n) {
                    LEAP.messagebox.alert("未安装Office软件,不能进行打印!\n将下载报表文件!", 2);
                    window.open(window.geturl(h));
                } finally {
                    if (d) {
                        try {
                            d.close();
                        } catch (n) {}
                        d = null;
                    }
                    if (o) {
                        try {
                            o.Application.Quit();
                        } catch (n) {}
                    }
                    o = null;
                }
            } else {
                window.open(window.geturl(h));
            }
        } else {
            var l = this.getLastError();
            if (l != null) {
                LEAP.messagebox.alert(l.error, 3);
            } else {
                LEAP.messagebox.alert("导出失败", 3);
            }
        }
    };
    pageObjectExtend.exportExcelHandler = function(d, g) {
        this.___processExcelResult(d, true, g);
    };
    pageObject.innerSearch = function() {
        this.__sys_src_ctf = null;
        if (window.event && window.event.srcElement && window.event.srcElement.getAttribute) {
            this.__sys_src_ctf = window.event.srcElement.getAttribute("ctf");
        }
        if (this.isstat) {
            this.innerStat();
        } else {
            this._innerSearch();
        }
    };
    pageObjectExtend._innerSearch = function() {
        var g = this.getUT("list");
        var h = 1;
        var d = null;
        if (g) {
            d = g.getAttribute("keeppagenum");
            if (d == "1" || d == true) {
                h = g.pageNum;
                if (h == null || h == undefined || isNaN(h) || h == 0) {
                    LEAP[this.listmode].gotoPage(g, 1);
                } else {
                    LEAP[this.listmode].gotoPage(g, h);
                }
            } else {
                LEAP[this.listmode].gotoPage(g, 1);
            }
        } else {
            this.innerRefreshPage(null, 1, 12);
        }
        g = h = d = null;
    };
    pageObjectExtend.innerSearch2 = function() {
        var g = this.getUT("list");
        if (g) {
            var d = g.pageNum;
            if (d == null || d == undefined || isNaN(d) || d == 0) {
                LEAP[this.listmode].gotoPage(g, 1);
            } else {
                LEAP[this.listmode].gotoPage(g, d);
            }
        } else {
            this.innerRefreshPage(null, 1, 12);
        }
        g = null;
    };
    pageObject.searchMore = function() {
        if (null == this.adisshow) {
            this.adisshow = true;
        }
        var l = LEAP.getElement(">div.lgresultpanel", this.getUT("searchMore").parentNode.parentNode);
        var d = this.getUT("searchMore").parentNode;
        var j = this.getUT("searchNomal");
        var g = this.getUT("searchMore");
        var h = LEAP.getElement("div.lgbtncon:first", d);
        if (this.adisshow) {
            this.adisshow = false;
            this.getUT("searchMore").style.display = "none";
            d.style.height = j.offsetHeight + h.offsetHeight + "px";
            if (!LEAP.isIE) {
                g.style.height = "auto";
                j.style.paddingLeft = "0px";
                if (this.getUT("searchNomal").style.height == "") {
                    j.style.height = j.offsetHeight * 1 + "px";
                }
            } else {
                j.style.height = "auto";
            }
            l.style.top = d.style.height;
            l.style.height = "auto";
            this.getUT("searchMore").style.display = "none";
            this.getUT("btn_more").innerText = this.getUT("btn_more").innerText.replace("－", "＋").replace("减少", "更多");
        } else {
            this.adisshow = true;
            this.getUT("searchMore").style.display = "inline-block";
            if (!LEAP.isIE) {
                d.style.height = j.offsetHeight + g.offsetHeight + h.offsetHeight + "px";
                h.style.top = j.offsetHeight + g.offsetHeight + "px";
            } else {
                d.style.height = d.style.height.replace("px", "") * 1 + g.offsetHeight * 1 + "px";
            }
            l.style.top = d.style.height.replace("px", "") * 1 + "px";
            l.style.height = "auto";
            this.getUT("btn_more").innerText = this.getUT("btn_more").innerText.replace("＋", "－").replace("更多", "减少");
        }
    };
    pageObject.innerAsynRefreshPage = function(g, d) {
        if (this.moduleParameter != null && this.moduleParameter.isfromgis != null && this.moduleParameter.isfromgis == "1") {
            this.addFeatureLay(g, d.par, this.moduleParameter.isfromgis);
        }
        var h = this.getUT("list");
        try {
            this.asynwait = false;
            if (g != null) {
                this.pks = g.pks;
                if (this.searchSucess) {
                    this.searchSucess(g);
                }
                if (this.searchEnd) {
                    this.searchEnd(d.par);
                }
                if (h) {
                    LEAP[this.listmode].gotoPage(h, d.gotoPageNum, g, d.asynsn);
                }
            } else {
                if (this.searchSucess) {
                    this.searchSucess(null);
                }
                if (this.searchEnd) {
                    this.searchEnd(d.par);
                }
                if (h) {
                    LEAP[this.listmode].clearPage(h);
                }
            }
        } finally {
            h = null;
            g = d.element = null;
        }
    };
    pageObjectExtend.innerAsynRefreshPageCount = function(g, d) {
        var h = this.getUT("list");
        try {
            this.asynwait = false;
            if (g != null) {
                if (h) {
                    LEAP[this.listmode].asynCountPage(h, d.gotoPageNum, g, d.asynsn);
                }
            }
        } finally {
            h = null;
            g = d.element = null;
        }
    };
    pageObject.innerReset = function() {
        this.setPageData(null, null, null, false);
        if (this.afterReset != null) {
            this.afterReset();
        }
    };
    pageObjectExtend.createSearchBuilder = function(d) {
        var g = null;
        if (d) {
            g = new SearchBuilder(d.name);
            g.parameter = d;
        } else {
            g = new SearchBuilder();
        }
        g.moduleInstance = this.instance;
        return g;
    };
    pageObjectExtend.___afterLoadModule = function(g, d) {
        if (g && d && g.pfield) {
            if (d.parentElement) {
                d.parentElement.style.position = "relative";
            }
            if (!d.preParameterNames) {
                d.preParameterNames = [];
            }
            if (!d.preParameterNames.contains(g.pfield.toLowerCase().trim())) {
                d.preParameterNames.add(g.pfield.toLowerCase().trim());
            }
            d.linkedfield = g.pfield.toLowerCase().trim();
            if (!this.___binddatamodule) {
                this.___binddatamodule = new hashtable();
            }
            if (!this.___binddatamodule.contains(g.name.toLowerCase().trim())) {
                this.___binddatamodule.add(g.name.toLowerCase().trim(), g);
            }
        }
    };
    pageObjectExtend.___afterGetModule = function(g) {
        if (g) {
            g.parentPKValue = null;
            if (g.linkedfield) {
                if (this.data) {
                    var d = this.data.id;
                    if (d) {
                        g.parentPKValue = d;
                    }
                }
            }
        }
    };
    pageObjectExtend.___initcts = function() {
        if (LEAP.linkmodule != null && !this.___linkmodulectsinited) {
            this.___linkmodulectsinited = true;
            this.___linkmodulects = this.getElements("div[ct=linkmodule][instance=" + this.instance + "]");
        }
        if (!this.___linkmodule2ctsinited) {
            this.___linkmodule2ctsinited = true;
            this.___linkmodule2cts = this.getElements("[ct=linkmodule2][instance=" + this.instance + "]");
        }
        if (!this.___datastatctsinited) {
            this.___datastatctsinited = true;
            var d = this.getElements("[ct=statchart][linkstatname][instance=" + this.instance + "]");
            if (d != null && d.length > 0) {
                for (var g = 0; g < d.length; g++) {
                    LEAP.statchart.initLinkChart(d[g]);
                }
            }
        }
    };
    pageObjectExtend.___clearData = function() {
        if (LEAP.linkmodule != null && this.___linkmodulects) {
            var d = this.___linkmodulects.length;
            for (var g = 0; g < d; g++) {
                LEAP.linkmodule.clear(this.___linkmodulects[g]);
            }
        }
        if (this.___linkmodule2cts) {
            var d = this.___linkmodule2cts.length;
            for (var g = 0; g < d; g++) {
                LEAP.linkmodule2.clear(this.___linkmodule2cts[g]);
            }
        }
    };
    pageObjectExtend.___clearData2 = function() {
        LEAP.check.clearValidate(LEAP.getElements("[check][instance=" + this.instance + "]", this.parentElement));
        this.___clearData();
        LEAP.bindData(this.defaultData, this.instance, null, null, this.parentElement);
        this.processDefaultValues();
        if (this.setDefaultPageData) {
            this.setDefaultPageData(this.defaultData);
        }
    };
    pageObjectExtend.setPageDataOnWF = function(m, g) {
        this.WFMode = true;
        this.setPageData(m);
        if (this.___linkmodule2cts) {
            if (this.afterSetWFPageData) {
                this.afterSetWFPageData(m);
            } else {
                var h = this.___linkmodule2cts.length;
                var q = new hashtable();
                if (g != null && g.length && g.length > 0) {
                    var d = g.length;
                    for (var n = 0; n < d; n++) {
                        var u = g[n];
                        var o = u.beanname;
                        if (String.isEmpty(o)) {
                            continue;
                        }
                        o = o.toLowerCase().Trim();
                        var w = null;
                        if (q.contains(o)) {
                            w = q.getvalue(o);
                        } else {
                            w = [];
                            q.add(o, w);
                        }
                        w.add(u);
                    }
                }
                for (var n = 0; n < h; n++) {
                    LEAP.linkmodule2.clear(this.___linkmodule2cts[n]);
                    var r = this.___linkmodule2cts[n].getAttribute("datamodule");
                    r = r && r.toLowerCase().Trim();
                    if (q.contains(r)) {
                        var j = q.getvalue(r);
                        var v = new Object();
                        v.result = j;
                        v.pageCount = 1;
                        v.pageNum = 1;
                        v.beginNum = 1;
                        v.size = j.length;
                        v.count = j.length;
                        v.endNum = j.length + 1;
                        var p = false;
                        if (this.pageMode && this.pageMode == "insert") {
                            p = true;
                        }
                        LEAP.linkmodule2.setValue(this.___linkmodule2cts[n], v, p, false);
                    }
                }
            }
        }
    };
    pageObjectExtend.___afterSetData = function() {
        if (this.WFMode == null || this.WFMode != true) {
            if (LEAP.linkmodule != null && this.___linkmodulects) {
                var d = this.___linkmodulects.length;
                for (var g = 0; g < d; g++) {
                    LEAP.linkmodule.refresh(this.___linkmodulects[g]);
                }
            }
            if (this.___linkmodule2cts) {
                var d = this.___linkmodule2cts.length;
                for (var g = 0; g < d; g++) {
                    LEAP.linkmodule2.refresh(this.___linkmodule2cts[g]);
                }
            }
        }
        this._rebuildMdcheck();
    };
    pageObjectExtend.___innerLoadModule = function(h) {
        if (!h) {
            return;
        }
        if (h.___hasinited) {
            return;
        }
        h.___hasinited = true;
        var m = h.moduleLoadArg;
        if (!m) {
            return;
        }
        m = m.initPar;
        if (!m) {
            return;
        }
        var d = null;
        if (m.ut) {
            var l = this.getUT(m.ut);
            if (l) {
                if (!m.islinkchild) {
                    if (m.istab) {
                        var g = m.tabidx;
                        if (g == null) {
                            g = 0;
                        }
                        var j = l;
                        if (j) {
                            var l = LEAP.getElement("div[ctf=tab_content]:eq(" + g + ")", j);
                            j = null;
                            if (l) {
                                h.parent = l;
                                try {
                                    d = this.loadModule2(h);
                                    if (d) {
                                        this.____moduledefs.add(m.name.toLowerCase().trim(), d);
                                        this.___afterLoadModule(m, d);
                                    }
                                } catch (n) {
                                    LEAP.messagebox.alert(n.message, 3);
                                }
                                l = null;
                            }
                        }
                    } else {
                        h.parent = l;
                        try {
                            d = this.loadModule2(h);
                            if (d) {
                                this.____moduledefs.add(m.name.toLowerCase().trim(), d);
                                this.___afterLoadModule(m, d);
                            }
                        } catch (n) {
                            LEAP.messagebox.alert(n.message, 3);
                        }
                    }
                }
                l = null;
            }
        } else {
            if (m.tab) {}
        }
        try {
            this.____moduledefs2.add(m.name.toLowerCase(), h);
            return d;
        } finally {
            d = null;
        }
    };
    pageObjectExtend.___innerLoadModuleWithTab = function(q) {
        var d = q.arg2.tab;
        try {
            var g = d.getAttribute("ut");
            if (g) {
                var j = this.___tabbindmodules.getvalue(g);
                if (j) {
                    var n = q.arg2.index + "";
                    var h = j.length;
                    for (var m = 0; m < h; m++) {
                        var o = j[m];
                        var p = o.moduleLoadArg.initPar.tabidx.trim();
                        if (p == n) {
                            this.___innerLoadModule(o);
                            break;
                        }
                    }
                }
            }
        } finally {
            q = o = d = null;
        }
    };
    pageObjectExtend.___innerPageLoad2 = function(arg) {
        if (!this.____formdefs) {
            this.____formdefs = new hashtable();
        }
        if (!this.____moduledefs) {
            this.____moduledefs = new hashtable();
        }
        if (!this.____moduledefs2) {
            this.____moduledefs2 = new hashtable();
        }
        if (!this.___tabbindmodules) {
            this.___tabbindmodules = new hashtable();
        }
        if (this.moduleElement) {
            var modules = this.moduleElement.getAttribute("modules");
            if (!String.isEmpty(modules)) {
                try {
                    modules = eval("(" + modules + ")");
                    this.autoLoadedModulesDefine = modules;
                    if (modules && modules.length) {
                        var l = modules.length;
                        var _tabs = new Array();
                        for (var i = 0; i < modules.length; i++) {
                            var c = modules[i];
                            if (!String.isEmpty(c.name)) {
                                var def = LEAP.clone(c);
                                def.name = c.name;
                                def.path = c.name;
                                def.title = c.cn;
                                def.width = c.w;
                                def.height = c.h;
                                def.hidemsg = c.hidemsg;
                                if (!String.isEmpty(def.hidemsg)) {
                                    def.autohide = 0;
                                }
                                if (c.ismodule) {
                                    var mf = {
                                        name: def.name,
                                        pageMode: c.mode,
                                        moduleLoadArg: {
                                            initPar: def
                                        }
                                    };
                                    if (def.init) {
                                        this.___innerLoadModule(mf);
                                    } else {
                                        if (!def.init && def.istab) {
                                            if (!_tabs.contains(def.ut)) {
                                                _tabs.add(def.ut);
                                                var tab = this.getUT(def.ut);
                                                if (tab) {
                                                    this.addEvent(tab, "selectedIndexChange", this.___innerLoadModuleWithTab);
                                                    tab = null;
                                                }
                                            }
                                        }
                                    }
                                    if (def.istab) {
                                        var _tds = null;
                                        if (this.___tabbindmodules.contains(def.ut)) {
                                            _tds = this.___tabbindmodules.getvalue(def.ut);
                                        } else {
                                            _tds = [];
                                            this.___tabbindmodules.add(def.ut, _tds);
                                        }
                                        _tds.add(mf);
                                    }
                                    continue;
                                }
                                if (def.islinkchild && def.ut) {
                                    var ut = this.getUT(def.ut);
                                    if (ut) {
                                        var ct = ut.getAttribute(commfields.ct);
                                        if (LEAP.linkmodule != null && ct == LEAP.linkmodule.d) {
                                            if (def.mode) {
                                                if (def.mode == "view") {
                                                    ut.setAttribute("infomodule", def.name);
                                                } else {
                                                    if (def.mode == "insert") {
                                                        ut.setAttribute("insertmodule", def.name);
                                                    } else {
                                                        if (def.mode == "modify") {
                                                            ut.setAttribute("modifymodule", def.name);
                                                        }
                                                    }
                                                }
                                            } else {
                                                ut.setAttribute("infomodule", def.name);
                                            }
                                        }
                                    }
                                }
                                this.____formdefs.add(c.name.toLowerCase(), def);
                            }
                        }
                    }
                } catch (e) {}
            }
        }
        this.___initcts();
    };
    pageObjectExtend.___innerPageLoad3 = function(d) {
        if (this.autoLoadedModulesDefine) {
            var g = this.autoLoadedModulesDefine.length;
            var n = false;
            for (var j = 0; j < g; j++) {
                var p = this.autoLoadedModulesDefine[j];
                if (!String.isEmpty(p.name)) {
                    if (p.isinfo != null && p.isinfo == true) {
                        this.infoPageModuleName = p.name;
                        n = true;
                    } else {
                        if (p.isview != null && p.isview == true) {
                            this.viewPageModuleName = p.name;
                            n = true;
                        }
                    }
                }
            }
            var m = this.ut("list");
            if (m) {
                var h = m.getAttr("ct");
                if (h && h == "table") {
                    if (m.element[ElementEventManager.e] == null || !m.element[ElementEventManager.e].contains("rowOperationClick")) {
                        m.addEvent("rowOperationClick", this.innerListOperation);
                        m = null;
                    }
                }
            }
            var o = this.ut("btn_add");
            if (o) {
                if (o.element[DelegateUIEventManager.e] == null || !o.element[DelegateUIEventManager.e].contains("click")) {
                    o.addEvent("click", this.innerInsertBottonClick);
                    o = null;
                }
            }
        }
    };
    pageObjectExtend.getForm = function(d, j, l) {
        if (d) {
            d = d.toLowerCase().trim();
        } else {
            return null;
        }
        if (!this.___forms2) {
            this.___forms2 = new hashtable();
        }
        var h = null;
        try {
            if (this.___forms2.contains(d)) {
                h = this.___forms2.getvalue(d);
                h.show();
                return h;
            } else {
                if (j != null && !String.isEmpty(j.path)) {
                    if (l != null) {
                        if (j == null) {
                            j = {
                                moduleLoadArg: l
                            };
                        } else {
                            if (j.moduleLoadArg == null) {
                                j.moduleLoadArg = l;
                            }
                        }
                    }
                    j.formtype = this.formType;
                    j.module = this;
                    h = this.loadForm3(j);
                    this.___forms2.add(d, h);
                    return h;
                }
            }
        } catch (g) {
            LEAP.showError(g);
        } finally {
            j = h = null;
        }
    };
    pageObjectExtend.__asynSetPageData = function(l, n, j, h, d) {
        if (j == null) {
            j = true;
        }
        if (j) {
            this.data = l;
        }
        var m = null;
        var g = d;
        if (g == null) {
            g = this.parentElement;
        }
        if (n != null) {
            m = "[ds=" + n + "]";
        }
        if (this.beforeSetPageData) {
            this.beforeSetPageData(l);
        }
        LEAP.bindData(l, this.instance, m, h, g);
        if (this.afterSetPageData) {
            this.afterSetPageData(l);
        }
        this.fireEvent("onsetpagedata", l);
    };
    pageObjectExtend.getUserInfo = function() {
        return LEAP.getUserInfo();
    };
    pageObjectExtend.toJSONObject = function(d) {
        if (d == null) {
            return null;
        }
        return JSON.parse(d);
    };
    pageObjectExtend.toJSONString = function(d) {
        if (d == null) {
            return null;
        }
        return JSON.stringify(d);
    };
    pageObjectExtend.forms = function(d, n, q, o, j) {
        var p = d;
        if (d) {
            d = d.toLowerCase().trim();
        } else {
            return null;
        }
        var l = this.____formdefs.getvalue(d);
        if (!l) {
            l = {
                mode: (n == null) ? "insert" : n,
                path: p,
                name: p
            };
            this.____formdefs.add(d, l);
        }
        if (l) {
            l = LEAP.clone(l);
            if (!this.___forms2) {
                this.___forms2 = new hashtable();
            }
            var g = null;
            if (this.___forms2.contains(d)) {
                g = this.___forms2.getvalue(d);
                if (n) {
                    g.mode = n;
                    g.module.pageMode = n;
                }
                if (j) {
                    l.formtype = j;
                } else {
                    if (!l.formtype) {
                        l.formtype = this.formType;
                    }
                }
                g.formtype = l.formtype;
                this.___afterGetModule(g.module);
                if (g.module.isworkflow && q && q.workflow) {
                    g.module.workflow = q.workflow;
                    LWFP.API.ModuleProcess.process(g.module);
                }
                return g;
            } else {
                if (l != null && !String.isEmpty(l.path)) {
                    if (q != null) {
                        if (l == null) {
                            l = {
                                moduleLoadArg: q
                            };
                        } else {
                            if (l.moduleLoadArg == null) {
                                l.moduleLoadArg = q;
                            }
                        }
                    }
                    l.authority = o;
                    var m;
                    if (l.initShow == null) {
                        l.initShow = true;
                    } else {
                        m = l.initShow;
                    }
                    l.pageMode = n;
                    if (j) {
                        l.formtype = j;
                    } else {
                        if (!l.formtype) {
                            l.formtype = this.formType;
                        }
                    }
                    l.module = this;
                    g = this.loadForm3(l);
                    if (m != null && m == true) {
                        g.show();
                    } else {
                        g.hide(false);
                    }
                    g._isFormObj = true;
                    g.moduleLoadArg = q;
                    if (g) {
                        var h = g.module;
                        if (h) {
                            this.___afterLoadModule(l, h);
                            if (n != null) {
                                g.mode = n;
                            }
                        }
                        g.show = function(v) {
                            if (v) {
                                this.mode = v;
                            }
                            if (this.__showCount == null) {
                                this.__showCount = 1;
                                if (this.module) {
                                    this.module.__showCount = 1;
                                }
                            } else {
                                this.__showCount++;
                                if (this.module) {
                                    this.module.__showCount = this.__showCount;
                                }
                            }
                            try {
                                if (this.module.isworkflow) {
                                    LWFP.API.ModuleProcess.process(this.module);
                                }
                                if (this.__showCount > 1 && this.mode && this.module) {
                                    var u = LEAP._peGetMM(this.module);
                                    this.module.pageMode = u.pageMode = this.mode;
                                    if (this.mode == "search" && u && u.searchPageLoad) {
                                        u.searchPageLoad(this.moduleLoadArg);
                                    } else {
                                        if (this.mode == "insert" && u && u.insertPageLoad) {
                                            u.insertPageLoad(this.moduleLoadArg);
                                        } else {
                                            if (this.mode == "modify" && u && u.modifyPageLoad) {
                                                u.modifyPageLoad(this.moduleLoadArg);
                                            } else {
                                                if (this.mode == "view" && u && u.viewPageLoad) {
                                                    u.viewPageLoad(this.moduleLoadArg);
                                                }
                                            }
                                        }
                                    }
                                    if (this.mode == "view") {
                                        var x = u.___btnSubmit;
                                        if (x != null) {
                                            x.style.display = "none";
                                            x = null;
                                        }
                                    } else {
                                        if (this.mode == "insert" || this.mode == "modify") {
                                            var x = u.___btnSubmit;
                                            if (x != null) {
                                                x.style.display = "";
                                                x = null;
                                            }
                                            u._rebuildMdAttr(this.mode);
                                        }
                                    }
                                    u._hideButton(this.mode);
                                    u._hideExpressElement();
                                    if (this.module.masterModule) {
                                        this.module._hideButton(this.mode);
                                    }
                                }
                            } catch (w) {
                                LEAP.messagebox.alert(w.message);
                            }
                            var r = LEAP.form.t_last_ctid && LEAP.form.t_last_ctid == LEAP.ctid(LEAP.getElement(this.form)) && LEAP.form.t_last && new Date().getTime() - LEAP.form.t_last2 < 200;
                            LEAP.form.show(this.form, this.formtype, !r);
                            if (l.ismaxsize == true) {
                                LEAP.form.maxSize(this.form);
                            }
                        };
                        h = null;
                    }
                    this.___forms2.add(d, g);
                    this.___afterGetModule(g.module);
                    return g;
                }
            }
        }
    };
    pageObjectExtend.modules = function(g) {
        if (g) {
            g = g.toLowerCase().trim();
        } else {
            return null;
        }
        if (this.____moduledefs.contains(g)) {
            var d = this.____moduledefs.getvalue(g);
            this.___afterGetModule(d);
            return d;
        }
        var h = this.____moduledefs2.getvalue(g);
        if (h) {
            var d = this.___innerLoadModule(h);
            this.___afterGetModule(d);
            return d;
        }
        var l = this.___forms2.getvalue(g);
        if (l) {
            try {
                this.___afterGetModule(l.module);
                return l.module;
            } catch (j) {
                LEAP.showError(j);
            } finally {
                l = null;
            }
        }
    };
    pageObjectExtend.innerListOperation = function(q) {
        var n = q.arg2.flag;
        var j = q.arg2.index;
        var h = q.arg2.data;
        var m = q.arg2.table;
        try {
            LEAP[this.listmode].setSelectedIndex(m, j);
            pageObjectExtend.tab_unitesave_list_sindex = j;
            if (n == 1 || n == 2) {
                var o = null;
                if (n == 1) {
                    var d = this.viewPageModuleName;
                    if (!d) {
                        d = this.infoPageModuleName;
                    }
                    var p = this.forms(d, "view");
                    p.show();
                    p.module.setPageData(h);
                } else {
                    if (n == 2) {
                        var p = this.forms(this.infoPageModuleName, "modify");
                        p.show();
                        p.module.setPageData(h);
                    }
                }
            } else {
                if (n == 3) {
                    if (window.confirm("确定删除该数据?")) {
                        if (this.unitesave && this.unitesave == "1") {
                            pageObjectExtend.tab_unitesave_list_del(this, j);
                        } else {
                            if (this.onListDeleteData != null) {
                                var l = this.onListDeleteData(h, this.pks);
                                if (l == true) {
                                    this.innerSearch2();
                                    this.fireEvent("deletesubmit", h);
                                }
                            } else {
                                if (this.beanDelete(h) == true) {
                                    this.innerSearch2();
                                    this.fireEvent("deletesubmit", h);
                                }
                            }
                        }
                    }
                }
            }
        } catch (g) {
            LEAP.showError(g);
        } finally {
            m = q = n = j = h = null;
        }
    };
    pageObjectExtend.innerInsertBottonClick = function(d) {
        if (!this.infoPageModuleName) {
            return;
        }
        var g = this.forms(this.infoPageModuleName, "insert");
        g.show();
        g.module.clearPageData(true);
        if (this.unitesave != null) {
            if (g != null && g.module != null) {
                g.module.unitesave = this.unitesave;
                if (this.unitesave == "1") {
                    g.module.submitMode = 3;
                } else {
                    g.module.submitMode = null;
                }
                pageObjectExtend.bindlinkdata(g.module, this.linkdata);
            }
        }
    };
    pageObjectExtend.innerInsertSubmit = function() {
        var o = null;
        var p = null;
        try {
            if (this.beforeInsertValidate) {
                var x = this.beforeInsertValidate();
                if (x == false) {
                    return -91;
                }
            }
            o = this.validateUI(null, this.validateArea);
            if (o != null) {
                return -9;
            }
            if (this.insertValidate) {
                var x = this.insertValidate();
                if (x == false) {
                    return -11;
                }
            }
            if (this.submitValidate) {
                var x = this.submitValidate();
                if (x == false) {
                    return -1;
                }
            }
            var d = this.moduleElement;
            var D = null;
            if (d) {
                D = d.getAttribute("bystep");
            }
            if (D == "2") {
                if (this.parentPageModule) {
                    p = pageObjectExtend.formstep_getdata(this.parentPageModule);
                } else {
                    p = pageObjectExtend.formstep_getdata(this.parentElement.parentElement);
                }
            } else {
                p = this.getCreateParameter(null, this.validateArea);
            }
            if (this.buildCreateParameter) {
                p = this.buildCreateParameter(p);
            }
            if (p == null) {
                if (this.skipMessage != null && this.skipMessage != null) {
                    return -2;
                }
                LEAP.messagebox.alert("输入参数为空,请正确填写", 2);
                return -2;
            }
            if (this.parentPKValue && this.linkedfield) {
                if (this.moduleVersion > 1) {
                    p[this.linkedfield] = this.parentPKValue;
                } else {
                    p.addparameter(this.linkedfield, this.parentPKValue);
                }
            }
            this.buildExtendPageData(p);
            if (this.insertBeforeSubmit) {
                var x = this.insertBeforeSubmit(p);
                if (x == false) {
                    return -13;
                }
            }
            if (this.beforeSubmit) {
                var x = this.beforeSubmit(p);
                if (x == false) {
                    return -3;
                }
            }
            if (this.submitMode != null && this.submitMode == 2) {
                if (this.parentPageModule && this.outerSubmit) {
                    try {
                        if (this.parentPageModule && typeof this.outerSubmit == "string") {
                            this.parentPageModule[outerSubmit].call(this, this, "insert", p, this.submitMode);
                        } else {
                            this.outerSubmit.call(this.parentPageModule, this, "insert", p, this.submitMode);
                        }
                        this.clearPageData();
                        this.hideForm();
                    } catch (B) {
                        LEAP.messagebox.alert(B.message, 3);
                        return -99;
                    }
                }
                return 99;
            }
            if (this.submitMode != null && this.submitMode == 3) {
                if (this.parentPageModule) {
                    try {
                        pageObjectExtend.tab_unitesave_list_add(this.parentPageModule, this.getPageData().data);
                        this.clearPageData();
                        this.hideForm();
                    } catch (B) {
                        LEAP.messagebox.alert(B.message, 3);
                        return -99;
                    }
                }
                return 99;
            }
            try {
                if (D == "1") {
                    return p;
                }
            } catch (B) {
                LEAP.messagebox.alert(B.message, 3);
                return -99;
            }
            var v = null;
            var G = null;
            var n = null;
            var C = null;
            var g = null;
            var A = false;
            if (this.___linkmodule2cts) {
                A = true;
                var w = this.___linkmodule2cts.length;
                for (var z = 0; z < w; z++) {
                    var m = LEAP.linkmodule2.getValue(this.___linkmodule2cts[z]);
                    if (m != null && m.create != null && m.create.length > 0) {
                        if (G == null) {
                            G = [];
                        }
                        for (var y = 0; y < m.create.length; y++) {
                            G.add(m.create[y]);
                        }
                    }
                    if (m != null && m.del != null && m.del.length > 0) {
                        if (C == null) {
                            C = [];
                        }
                        for (var y = 0; y < m.del.length; y++) {
                            C.add(m.del[y]);
                        }
                    }
                    if (m != null && m.change != null && m.change.length > 0) {
                        if (n == null) {
                            n = [];
                        }
                        for (var y = 0; y < m.change.length; y++) {
                            n.add(m.change[y]);
                        }
                    }
                    if (m != null && m.result != null && m.result.length > 0) {
                        if (g == null) {
                            g = [];
                        }
                        for (var y = 0; y < m.result.length; y++) {
                            g.add(m.result[y]);
                        }
                    }
                }
            }
            if (this.WFMode && this.WFMode == true && this.innerWFInsertSubmit) {
                if (this.sysBeforeSubmit) {
                    this.sysBeforeSubmit(p, G);
                }
                v = this.innerWFInsertSubmit(p, G, n, C, g);
            } else {
                if (this.sysBeforeSubmit) {
                    this.sysBeforeSubmit(p, G);
                }
                if (this.WFExtMode && this.WFExtMode == true) {
                    var h = null;
                    if (this.getChildPar) {
                        h = this.getChildPar(G);
                    }
                    if (h != null) {
                        G = h;
                    }
                    var F = {
                        parameter: p,
                        childPar: G
                    };
                    return F;
                } else {
                    var r = "DynaCreate3";
                    if (this.moduleVersion > 1) {
                        r = "beanCreate";
                    }
                    if (!String.isEmpty(this.service_insert)) {
                        r = this.service_insert;
                        if (this.isInLinkModule2 != null && this.isInLinkModule2) {
                            var u = this.getParentModule();
                            if (u) {
                                v = u.childModuleSubmit(r, p, 0);
                                u = null;
                            }
                        } else {
                            var h = null;
                            if (this.getChildPar) {
                                h = this.getChildPar(G);
                            }
                            if (h != null) {
                                G = h;
                            }
                            if (A || h != null) {
                                if (this.exSubmitParam != null) {
                                    v = this.request(r, {
                                        par: p,
                                        childPar: G,
                                        exParams: this.exSubmitParam
                                    });
                                } else {
                                    v = this.request(r, {
                                        par: p,
                                        childPar: G
                                    });
                                }
                            } else {
                                if (this.exSubmitParam != null) {
                                    v = this.request(r, {
                                        par: p,
                                        exParams: this.exSubmitParam
                                    });
                                } else {
                                    v = this.request(r, {
                                        par: p
                                    });
                                }
                            }
                        }
                    } else {
                        if (this.isInLinkModule2 != null && this.isInLinkModule2) {
                            var u = this.getParentModule();
                            if (u) {
                                v = u.childModuleSubmit(r, p, 0);
                                u = null;
                            }
                        } else {
                            v = this.request(r, {
                                par: p,
                                childPar: G
                            });
                        }
                    }
                }
            }
            if (!(this.WFExtMode && this.WFExtMode == true)) {
                return this.innerInsertSubmitStep2(v, p, G);
            }
        } catch (q) {
            LEAP.showError(q);
        } finally {
            p = G = null;
        }
    };
    pageObjectExtend.innerInsertSubmitStep2 = function(q, n, o) {
        try {
            if (q) {
                try {
                    if (this.submitCallBack) {
                        try {
                            var m = null;
                            var j = null;
                            if (this.parentPageModule && typeof this.submitCallBack == "string") {
                                var m = this.parentPageModule[submitCallBack];
                            } else {
                                var m = this.submitCallBack;
                                j = this.submitCallBack_domain;
                            }
                            if (j == null) {
                                j = m.domain;
                            }
                            if (j == null) {
                                j = this;
                            }
                            m.call(j, this, "insert", n, o, q);
                        } catch (l) {
                            LEAP.messagebox.alert(l.message, 3);
                        }
                    }
                    if (this.insertSucess) {
                        var r = this.insertSucess(q);
                        if (r == false) {
                            return 1;
                        }
                    }
                    if (this.submitSucess) {
                        var r = this.submitSucess(q);
                        if (r == false) {
                            return 1;
                        }
                    }
                    if (this.sysSubmitSucess) {
                        var r = this.sysSubmitSucess(q);
                        if (r == false) {
                            return 1;
                        }
                    }
                    this.fireEvent("onSubmit");
                    this.fireEvent("insertsubmit", n);
                    if (this.instance != null) {
                        if (this.parentPageModule && this.pageModuleName) {
                            var d = "on_" + this.pageModuleName + "_Submit";
                            if (this.parentPageModule[d]) {
                                try {
                                    this.parentPageModule[d].call(this.parentPageModule, {
                                        type: "insert",
                                        result: q,
                                        module: this,
                                        parameter: n,
                                        childPar: o
                                    });
                                } catch (h) {
                                    LEAP.showError(h);
                                }
                            }
                            var d = "on_" + this.pageModuleName + "_InsertSubmit";
                            if (this.parentPageModule[d]) {
                                try {
                                    this.parentPageModule[d].call(this.parentPageModule, {
                                        type: "insert",
                                        result: q,
                                        module: this,
                                        parameter: n,
                                        childPar: o
                                    });
                                } catch (h) {
                                    LEAP.showError(h);
                                }
                            }
                        }
                        if (this.WFMode2 == null) {
                            this.clearPageData();
                            this.hideForm();
                        }
                        if (this.autoRefreshParentModule) {
                            var g = this.getParentModule();
                            if (g) {
                                if (g.pageMode == "search") {
                                    g.innerSearch2();
                                }
                                g = null;
                            }
                        }
                    }
                } catch (h) {
                    LEAP.showError(h);
                } finally {
                    return 1;
                }
            } else {
                var h = this.getLastError();
                if (h != null) {
                    LEAP.messagebox.alert(h.error, 3);
                }
                return -4;
            }
        } catch (h) {
            LEAP.showError(h);
        } finally {
            errCtlList = n = null;
        }
    };
    pageObjectExtend.innerModifySubmit = function() {
        var o = null;
        var n = null;
        try {
            if (this.beforeModifyValidate) {
                var p = this.beforeModifyValidate();
                if (p == false) {
                    return -91;
                }
            }
            o = this.validateUI(null, this.validateArea);
            if (o != null) {
                return -9;
            }
            if (this.modifyValidate) {
                var p = this.modifyValidate();
                if (p == false) {
                    return -21;
                }
            }
            if (this.submitValidate) {
                var p = this.submitValidate();
                if (p == false) {
                    return -1;
                }
            }
            n = this.getUpdateParameter(null, this.validateArea);
            if (this.buildUpdateParameter) {
                n = this.buildUpdateParameter(n);
            }
            if (n == null) {
                return -2;
            }
            this.buildExtendPageData(n);
            if (this.modifyBeforeSubmit) {
                var p = this.modifyBeforeSubmit(n);
                if (p == false) {
                    return -23;
                }
            }
            if (this.beforeSubmit) {
                var p = this.beforeSubmit(n);
                if (p == false) {
                    return -3;
                }
            }
            if (this.sysBeforeSubmit) {
                this.sysBeforeSubmit(n);
            }
            if (this.submitMode != null && this.submitMode == 2) {
                if (this.outerSubmit) {
                    try {
                        if (this.parentPageModule && typeof this.outerSubmit == "string") {
                            this.parentPageModule[outerSubmit].call(this, this, "modify", n, this.submitMode);
                        } else {
                            this.outerSubmit.call(this, this, "modify", n, this.submitMode);
                        }
                        this.clearPageData();
                        this.hideForm();
                    } catch (h) {
                        LEAP.messagebox.alert(h.message, 3);
                        return -99;
                    }
                }
                return 99;
            }
            if (this.submitMode != null && this.submitMode == 3) {
                if (this.parentPageModule) {
                    try {
                        var g = this.getPageData().data;
                        pageObjectExtend.tab_unitesave_list_modify(this.parentPageModule, g);
                        this.clearPageData();
                        this.hideForm();
                    } catch (h) {
                        LEAP.messagebox.alert(h.message, 3);
                        return -99;
                    }
                }
                return 99;
            }
            var l = "DynaModify";
            if (this.moduleVersion > 1) {
                l = "beanModify";
            }
            if (!String.isEmpty(this.service_modify)) {
                l = this.service_modify;
            }
            var q = null;
            if (this.WFMode && this.WFMode == true && this.innerWFModifySubmit) {
                q = this.innerWFModifySubmit(n);
            } else {
                if (this.WFExtMode && this.WFExtMode == true) {
                    var j = {
                        parameter: n
                    };
                    return j;
                } else {
                    if (this.isInLinkModule2 != null && this.isInLinkModule2) {
                        var m = this.getParentModule();
                        if (m) {
                            q = m.childModuleSubmit(l, n, 1);
                            m = null;
                        }
                    } else {
                        if (this.exSubmitParam != null) {
                            q = this.request(l, {
                                par: n,
                                exParam: this.exSubmitParam
                            });
                        } else {
                            q = this.request(l, {
                                par: n
                            });
                        }
                    }
                }
            }
            if (!(this.WFExtMode && this.WFExtMode == true)) {
                return this.innerModifySubmitStep2(q, n);
            }
        } catch (d) {
            LEAP.showError(d);
        } finally {
            o = n = null;
        }
    };
    pageObjectExtend.innerModifySubmitStep2 = function(o, n) {
        try {
            if (o) {
                try {
                    if (this.submitCallBack) {
                        try {
                            var m = null;
                            var j = null;
                            if (this.parentPageModule && typeof this.submitCallBack == "string") {
                                var m = this.parentPageModule[submitCallBack];
                            } else {
                                var m = this.submitCallBack;
                                j = this.submitCallBack_domain;
                            }
                            if (j == null) {
                                j = m.domain;
                            }
                            if (j == null) {
                                j = this;
                            }
                            m.call(j, this, "modify", n, o);
                        } catch (l) {
                            LEAP.messagebox.alert(l.message, 3);
                        }
                    }
                    if (this.modifySucess) {
                        var q = this.modifySucess(o);
                        if (q == false) {
                            return 1;
                        }
                    }
                    if (this.submitSucess) {
                        var q = this.submitSucess(o);
                        if (q == false) {
                            return 1;
                        }
                    }
                    if (this.sysSubmitSucess) {
                        var q = this.sysSubmitSucess(o);
                        if (q == false) {
                            return 1;
                        }
                    }
                    this.fireEvent("onSubmit");
                    this.fireEvent("modifysubmit", n);
                    if (this.instance != null) {
                        if (this.parentPageModule && this.pageModuleName) {
                            var d = "on_" + this.pageModuleName + "_Submit";
                            if (this.parentPageModule[d]) {
                                try {
                                    this.parentPageModule[d].call(this.parentPageModule, {
                                        type: "modify",
                                        result: o,
                                        module: this,
                                        parameter: n
                                    });
                                } catch (h) {
                                    LEAP.showError(h);
                                }
                            }
                            var d = "on_" + this.pageModuleName + "_ModifySubmit";
                            if (this.parentPageModule[d]) {
                                try {
                                    this.parentPageModule[d].call(this.parentPageModule, {
                                        type: "modify",
                                        result: o,
                                        module: this,
                                        parameter: n
                                    });
                                } catch (h) {
                                    LEAP.showError(h);
                                }
                            }
                        }
                        if (this.WFMode2 == null) {
                            this.clearPageData();
                            this.hideForm();
                        }
                        if (this.autoRefreshParentModule) {
                            var g = this.getParentModule();
                            if (g) {
                                if (g.pageMode == "search") {
                                    g.innerSearch2();
                                }
                                g = null;
                            }
                        }
                    }
                } catch (h) {
                    LEAP.showError(h);
                } finally {
                    return 1;
                }
            } else {
                var h = this.getLastError();
                if (h != null) {
                    LEAP.messagebox.alert(h.error, 3);
                }
                return -4;
            }
        } catch (h) {
            LEAP.showError(h);
        } finally {
            n = null;
        }
    };
    pageObjectExtend.innerInfoSubmit = function() {
        try {
            if (this.innerWFModuleSubmit && this.WFMode2 != null && this.WFMode2 == true) {
                return this.innerWFModuleSubmit();
            } else {
                if (this.pageMode) {
                    if (this.pageMode == "modify") {
                        return this.innerModifySubmit();
                    } else {
                        if (this.pageMode == "insert") {
                            return this.innerInsertSubmit();
                        }
                    }
                } else {
                    return this.innerInsertSubmit();
                }
            }
        } catch (d) {
            LEAP.showError(d);
        }
    };
    pageObjectExtend.getDateUtil = function() {
        return new DateUtil();
    };
    pageObjectExtend.setQueryData = function(d) {
        this.isp_out = d;
        this.innerSearch();
    };
    pageObjectExtend.saveModuleAuthoritySatus = function() {
        var g = this.___alpanels;
        if (g) {
            var d = g.length;
            for (var h = 0; h < d; h++) {
                var m = g[h];
                m.setAttribute("_sys_opstatus_s_display", m.style.display);
                var j = m.getAttribute("_sys_opareastatus");
                if (String.isEmpty(j)) {
                    j = "0";
                }
                m.setAttribute("_sys_opstatus_s_code", j);
                m = null;
            }
            g = null;
        }
    };
    pageObjectExtend.resotreModuleAuthoritySatus = function() {
        var g = this.___alpanels;
        if (g) {
            var d = g.length;
            for (var h = 0; h < d; h++) {
                var n = g[h];
                var m = n.getAttribute("_sys_opareastatus");
                var j = n.getAttribute("_sys_opstatus_s_code");
                if (String.isEmpty(m)) {
                    m = 0;
                }
                if (String.isEmpty(j)) {
                    j = 0;
                }
                if (m != j) {
                    if (m == "110") {
                        LEAP.setOPAreaStatus(n, j, null, true);
                    } else {
                        LEAP.setOPAreaStatus(n, j);
                    }
                }
                n = null;
            }
            g = null;
        }
    };
    pageObjectExtend._initpes = function() {
        var C = this.moduleElement;
        if (C) {
            var p = C.getAttribute("lem");
            if (!String.isEmpty(p)) {
                var g = null;
                try {
                    g = JSON.parse(p);
                } catch (A) {}
                if (g) {
                    var j = [];
                    var m = new hashtable();
                    var x = g.length;
                    for (var y = 0; y < x; y++) {
                        var h = g[y];
                        if (!h.e) {
                            continue;
                        }
                        if (h.qfm != null && !h.qfmo) {
                            var n = h.qfm.split(",");
                            h.qfmo = [];
                            for (var r = 0; r < n.length; r++) {
                                var w = n[r];
                                var o = w.split("=");
                                h.qfmo.add(o);
                            }
                        }
                        if (h.p) {
                            var F = h.p + "|" + h.e;
                            var D = this.getST(h.p);
                            if (!D) {
                                continue;
                            }
                            if (!j.contains(F)) {
                                j.add(F);
                                this.addEvent(D, h.e, this._peshandleEvent, 2);
                            }
                            var u = D._ledef;
                            if (!u) {
                                u = new hashtable();
                                D._ledef = u;
                            }
                            var q = h.s;
                            if (h.t) {
                                q = q + "|" + h.t;
                            }
                            if (h.f != null) {
                                q = q + "|" + h.f;
                            }
                            D._ledef.add(q, h);
                            var v = this.getST(h.s);
                            if (!v._ledef) {
                                v._ledef = new hashtable();
                            }
                            if (!v._ledef.contains(q)) {
                                v._ledef.add(q, h);
                            }
                            v = null;
                            if (h.initload) {
                                var d = this.getST(h.p);
                                if (d && d.getAttribute("ct") == "tab") {
                                    LEAP.tab.setSelectedIndex(d, h.f);
                                    d = null;
                                }
                            }
                            D = null;
                        } else {
                            if (h.s) {
                                var v = this.getST(h.s);
                                if (!v) {
                                    continue;
                                }
                                var q = h.s + "|" + h.t;
                                var z = v._ledef;
                                var B = false;
                                if (!z) {
                                    z = new hashtable();
                                    B = true;
                                }
                                if (!z.contains(q)) {
                                    z.add(q, h);
                                }
                                v._ledef = z;
                                if (B) {
                                    this.addEvent(v, h.e, this._peshandleEvent, 1);
                                }
                                v = null;
                            }
                        }
                    }
                }
            }
        }
        C = null;
    };
    LEAP._peGetMM = function(d) {
        try {
            if (d && d.masterModule) {
                return d.masterModule;
            }
            return d;
        } finally {
            d = null;
        }
    };
    pageObjectExtend._peshandleEvent = function(L) {
        var h = L.arg;
        var J = null;
        J = L.caller;
        if (J.srcElement) {
            J = J.srcElement;
        }
        var F = J._ledef;
        var w = J.getAttribute("st");
        var ab = L.type;
        var Y = null;
        var O = null;
        var aa = null;
        var P = null;
        if (h == 1) {
            if (!F || !F.keys) {
                return;
            }
            for (var D in F.keys) {
                if (!D) {
                    continue;
                }
                if (D.indexOf("|module") > -1) {
                    Y = F.getvalue(D);
                } else {
                    if (D.indexOf("|method") > -1) {
                        O = F.getvalue(D);
                    }
                }
            }
        } else {
            if (h == 2) {
                var l = L.arg2.srcst;
                if (l) {
                    var o = this.getST(l);
                    if (o) {
                        F = o._ledef;
                        if (!F || !F.keys) {
                            return;
                        }
                        aa = L.arg2.data;
                        P = L.arg2.flag;
                        for (var D in F.keys) {
                            if (!D || !F.getvalue(D)) {
                                continue;
                            }
                            var I = F.getvalue(D);
                            if (I.f != null && I.f == P) {
                                if (D.indexOf("|module") > -1) {
                                    Y = F.getvalue(D);
                                } else {
                                    if (D.indexOf("|method") > -1) {
                                        O = F.getvalue(D);
                                    }
                                }
                            } else {
                                if (P == null) {
                                    if (D.indexOf("|module") > -1) {
                                        Y = F.getvalue(D);
                                    } else {
                                        if (D.indexOf("|method") > -1) {
                                            O = F.getvalue(D);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var j = null;
        var g = null;
        if (Y && ab == Y.e) {
            if (Y.prem) {
                var G = Y.prem;
                var z = null;
                if (G.indexOf("(") > 0 && G.indexOf(")") > 0) {
                    var T = G.substring(G.indexOf("(") + 1, G.length - 1);
                    if (T) {
                        z = T.split(",");
                    }
                    G = G.substring(0, G.indexOf("("));
                }
                var d = false;
                if (this[G]) {
                    if (z != null) {
                        d = this[G].apply(this, z);
                    } else {
                        d = this[G](L);
                    }
                    if (d != null && d == false) {
                        return;
                    }
                }
            }
            var M = 3;
            if (Y.ft) {
                M = Y.ft;
            }
            var x = "view";
            if (Y.vt) {
                x = Y.vt;
            }
            var u = null;
            if (Y.qfm) {
                u = {
                    autosearch: false
                };
            }
            var S = null;
            if (ab == "selectedIndexChange") {
                if (x != "search") {
                    x = this.pageMode;
                }
                var Q = this.st(Y.s);
                if (Q) {
                    Q = Q.element;
                }
                S = Q.getAttribute("linkfiled");
            }
            if (Y.c) {
                var C = this.moduleElement.getAttribute("unitesave");
                if (C != null && C == "1") {
                    if (this.pageMode != "insert") {
                        C = "0";
                    }
                }
                if (u == null) {
                    u = {
                        unitesave: C
                    };
                } else {
                    u.unitesave = C;
                }
                if (!this._peloadmodules) {
                    this._peloadmodules = new hashtable();
                }
                if (!this._peloadmodules.contains(Y.n)) {
                    var W = this.loadModule2({
                        name: Y.n,
                        pageMode: x,
                        parent: this.getST(Y.c),
                        moduleLoadArg: u
                    });
                    this._peloadmodules.add(Y.n, W);
                    if (W) {
                        W = LEAP._peGetMM(W);
                        var B = false;
                        if (x == "insert") {
                            W.clearPageData();
                        } else {
                            if (x != "search") {
                                B = true;
                                if (aa != null) {
                                    W.setPageData(aa);
                                }
                            }
                        }
                        if (!B && Y.sp) {
                            if (aa != null) {
                                W.setPageData(aa);
                            }
                        }
                    }
                    j = W;
                } else {
                    j = this._peloadmodules.getvalue(Y.n);
                    if (j.pageMode == "search") {
                        if (!j.unitesave || j.unitesave == "0") {
                            if (j.isNewFlag == null || j.isNewFlag == true) {
                                j.innerSearch();
                            }
                        }
                    }
                }
                if (Y.ldtype) {
                    j.ldtype = Y.ldtype;
                }
                j.unitesave = C;
                pageObjectExtend.bindlinkdata(j, this.linkdata, S);
                if (j.isNewFlag == null || j.isNewFlag == true) {
                    if (j.pageMode == "view" || j.pageMode == "modify") {
                        if (!Y.ismain) {
                            pageObjectExtend.tab_unitesave_loaddata(j.name, this);
                        }
                    }
                }
                pageObjectExtend.tab_unitesave_setModuleNew(this, j.name, false);
            } else {
                var R = this.forms(Y.n, x, u, null, M);
                if (R) {
                    R.show();
                    if (R.module) {
                        g = R.module;
                        var W = LEAP._peGetMM(R.module);
                        var B = false;
                        if (x == "insert") {
                            W.clearPageData();
                        } else {
                            if (x != "search") {
                                B = true;
                                if (aa != null) {
                                    W.setPageData(aa);
                                }
                            }
                        }
                        if (!B && Y.sp) {
                            if (aa != null) {
                                W.setPageData(aa);
                            }
                        }
                        pageObjectExtend.tab_unitesave_form(x, R.module, aa);
                        R.module.linkdata = aa;
                    }
                    j = W;
                    R = null;
                }
            }
            if (Y.endm && this[Y.endm] && j) {
                this[Y.endm](j);
            }
            if (Y.ismain && j) {
                this.masterModule = j;
            }
            if (j) {
                if (x == "insert") {
                    j.isp_out_inset = this.isp_out;
                }
            }
            if (j && (Y.fm)) {
                if (!this._peloadmodulefms) {
                    this._peloadmodulefms = [];
                }
                if (!this._peloadmodulefms.contains(Y.n)) {
                    this._peloadmodulefms.add(Y.n);
                    if (Y.fm != null) {
                        var v = Y.fm.split(",");
                        Y.fmo = [];
                        for (var X = 0; X < v.length; X++) {
                            var K = v[X];
                            var n = K.split("=");
                            Y.fmo.add(n);
                        }
                        if (Y.n == "gisp_location") {
                            j.regEvent(Y.f, this._peshandleEvent_gpe, this, Y);
                        } else {
                            var H = j.getElement("div[ut=list]");
                            if (H) {
                                j.addEvent(H, "doubleClick", this._peshandleEvent_fm, Y, null, this);
                                j.addEvent(H, "rowOperationClick", this._peshandleEvent_rowclick, Y, null, this);
                            }
                        }
                    }
                }
            }
            if (j && Y.qfmo) {
                if (aa) {
                    var V = {};
                    for (var X = 0; X < Y.qfmo.length; X++) {
                        var r = Y.qfmo[X][0];
                        var q = Y.qfmo[X][1];
                        V[q] = aa[r];
                    }
                    j.setQueryData(V);
                } else {
                    j.setQueryData(null);
                }
            }
        }
        if (O && ab == O.e) {
            if (!O.n) {
                return;
            }
            if (O.ds && O.ds == "page") {
                var y = this;
                if (this.masterModule) {
                    y = this.masterModule;
                }
                var N = y.getPageData();
                if (N) {
                    aa = N.data;
                } else {
                    aa = null;
                }
            }
            var p = O.n;
            var A = this;
            if (g) {
                A = g;
            } else {
                if (j) {
                    A = j;
                }
            }
            p = p.split(";");
            for (var X = 0; X < p.length; X++) {
                var U = false;
                var Z = p[X];
                if (p[X].indexOf("(") > 0 && p[X].indexOf(")") > 0) {
                    var T = p[X].substring(p[X].indexOf("(") + 1, p[X].length - 1);
                    if (T) {
                        aa = T.split(",");
                        U = true;
                    }
                    Z = p[X].substring(0, p[X].indexOf("("));
                }
                if (A[Z]) {
                    if (aa != null) {
                        if (U) {
                            A[Z].apply(A, aa);
                        } else {
                            A[Z](aa);
                        }
                    } else {
                        A[Z](L);
                    }
                }
            }
        }
        j = null;
    };
    pageObjectExtend.bindlinkdata = function(d, h, g) {
        if (d == null) {
            d = this;
        }
        if (h == null) {
            h = d.linkdata;
        } else {
            d.linkdata = h;
        }
        if ((h != null && h.id != null) || g) {
            var j = g;
            if (j == null) {
                j = d.linkedfield;
            }
            if (j == null) {
                j = d.moduleElement.getAttribute("linkfiled");
            }
            if (j != null) {
                if (h != null) {
                    d.parentPKValue = h.id;
                }
                d.linkedfield = j;
            }
        }
    };
    pageObjectExtend.tab_unitesave_list_sindex = 0;
    pageObjectExtend.tab_unitesave_loaddata = function(h, p) {
        if (h) {
            var d = p._peloadmodules.getvalue(h);
            if (d != null) {
                var o = d.parentPKValue;
                var j = d.linkedfield;
                var n = d.moduleName;
                var l = null;
                if (o && j && n) {
                    l = new SearchParameters();
                    l.setName(d.moduleName);
                    l.addParameter(j, o, 11);
                }
                if (l == null) {
                    return;
                }
                var g = LEAP.request("DynaSearch", {
                    par: l
                });
                if (g != null) {
                    g = LEAP.convertResult(g);
                    if (g != null) {
                        g = g[0];
                        if (g != null) {
                            d.setPageData(g);
                            return;
                        }
                    }
                }
                d.clearPageData();
            }
        }
    };
    pageObjectExtend.tab_unitesave_setModuleNew = function(j, h, g) {
        if (!j._peloadmodules) {
            return;
        }
        if (h) {
            var d = j._peloadmodules.getvalue(h);
            if (d) {
                d.isNewFlag = g;
            }
        } else {
            for (key in j._peloadmodules.keys) {
                var d = j._peloadmodules.getvalue(key);
                d.isNewFlag = g;
            }
        }
    };
    pageObjectExtend.tab_unitesave_list_add = function(d, h) {
        var g = d.getUT("list");
        LEAP.table.addRow(g, h, null, null, true);
    };
    pageObjectExtend.tab_unitesave_list_del = function(d, g) {
        var h = d.getUT("list");
        LEAP.table.removeRow(h, g);
    };
    pageObjectExtend.tab_unitesave_list_modify = function(d, h) {
        var g = d.getUT("list");
        LEAP.table.updateRow(g, pageObjectExtend.tab_unitesave_list_sindex, h);
    };
    pageObjectExtend.formstep_getdata = function(d) {
        var g = null;
        if (d.getUT) {
            g = d.getUT("formstep");
        } else {
            g = d;
        }
        return LEAP.formstep.getValue(g);
    };
    pageObjectExtend.tab_unitesave_form = function(p, o, n) {
        var h = o.moduleElement.getAttribute("unitesave");
        var j = 0;
        if (o._peloadmodules != null && o._peloadmodules.count >= 1) {
            for (key in o._peloadmodules.keys) {
                var g = o._peloadmodules.getvalue(key);
                if (g.pageMode != "search") {
                    g.pageMode = p;
                    g.unitesave = h;
                } else {}
                if (p != "insert") {
                    pageObjectExtend.bindlinkdata(g, n);
                    if (j == 0) {
                        if (g.pageMode == "insert") {
                            g.clearPageData();
                        } else {}
                    } else {
                        g.clearPageData();
                        if (g.pageMode == "search") {
                            if (g.parentPageModule.pageMode == "insert") {
                                var l = g.getUT("list");
                                LEAP.table.clearRow(l);
                            }
                        }
                    }
                } else {
                    g.parentPKValue = linkdata = null;
                    g.clearPageData();
                    if (g.pageMode == "search") {
                        if (g.parentPageModule.pageMode == "insert") {
                            var l = g.getUT("list");
                            LEAP.table.clearRow(l);
                        }
                    }
                }
                j++;
            }
        }
        pageObjectExtend.tab_unitesave_setModuleNew(o, null, true);
        var d = o.getElement("[ct=tab]");
        LEAP.tab.setSelectedIndex(d, 0);
    };
    pageObjectExtend.BeforSubmit_Tab = function(g) {
        var j = null;
        try {
            if (g.pageMode == "search") {
                return;
            }
            j = g.getCreateParameter(null, g.validateArea);
            if (g.buildCreateParameter) {
                j = g.buildCreateParameter(j);
            }
            if (j == null) {
                if (g.skipMessage != null && g.skipMessage != null) {
                    return -2;
                }
                LEAP.messagebox.alert("输入参数为空,请正确填写", 2);
                return -2;
            }
            if (g.parentPKValue && g.linkedfield) {
                if (g.moduleVersion > 1) {
                    j[g.linkedfield] = g.parentPKValue;
                } else {
                    j.addparameter(g.linkedfield, g.parentPKValue);
                }
            }
            g.buildExtendPageData(j);
            if (this.pageMode == "insert") {
                if (g.insertBeforeSubmit) {
                    var d = g.insertBeforeSubmit(j);
                    if (d == false) {
                        return -13;
                    }
                }
            } else {
                if (this.pageMode == "modify") {
                    if (g.modifyBeforeSubmit) {
                        var d = g.modifyBeforeSubmit(j);
                        if (d == false) {
                            return -23;
                        }
                    }
                }
            }
            if (g.beforeSubmit) {
                var d = g.beforeSubmit(j);
                if (d == false) {
                    return -3;
                }
            }
            return 1;
        } catch (h) {
            LEAP.showError(h);
        } finally {
            errCtlList = j = null;
        }
    };
    pageObjectExtend.innerInfoSubmit_Tab = function() {
        try {
            var z = null;
            var p = [];
            if (this._peloadmodules != null && this._peloadmodules.count >= 1) {
                for (x in this._peloadmodules.keys) {
                    var j = this._peloadmodules.getvalue(x);
                    var g = this.BeforSubmit_Tab(j);
                    if (g < 1) {
                        return;
                    }
                    var v = null;
                    if (this.pageMode == "insert") {
                        v = j.getPageData().data;
                        v.beanname = j.moduleName;
                        var B = j.linkedfield;
                        if (B != null) {
                            v.linkfiled = B;
                        }
                        if (j.pageMode == "search") {
                            if (j.unitesave == "1") {
                                var u = j.getUT("list");
                                var A = LEAP.table.getRows(u);
                                if (A != null) {
                                    for (var n = 0; n < A.length; n++) {
                                        var y = A[n].data;
                                        if (B != null) {
                                            y.linkfiled = B;
                                        }
                                        y.beanname = j.moduleName;
                                        p.push(y);
                                    }
                                }
                            }
                            v = null;
                        }
                        if (v) {
                            if (j == this.masterModule) {
                                z = v;
                            } else {
                                p.push(v);
                            }
                        }
                    } else {
                        if (this.pageMode == "modify") {
                            if (j.pageMode != "search") {
                                v = j.getPageData().change;
                                if (v) {
                                    v.id = j.getPageData().data.id;
                                    if (v.id == null) {
                                        var B = j.linkedfield;
                                        if (B != null) {
                                            v[B] = j.parentPKValue;
                                        }
                                    }
                                    v.beanname = j.moduleName;
                                }
                            }
                            if (v) {
                                p.push(v);
                            }
                        }
                    }
                }
                var w = false;
                if (this.pageMode == "insert") {
                    w = LEAP.request("studiov2_Tab_Create", {
                        manbean: z,
                        beans: p
                    });
                }
                if (this.pageMode == "modify") {
                    var q = [];
                    for (var n = 0; n < p.length; n++) {
                        var v = p[n];
                        var h = {};
                        for (var x in v) {
                            if (v[x] != null && v[x].value != null) {
                                h[x] = v[x].value;
                            } else {
                                h[x] = v[x];
                            }
                        }
                        q.push(h);
                    }
                    w = LEAP.request("studiov2_Tab_Update", {
                        changeresults: q
                    });
                }
                if (this.pageMode == "view") {
                    w = true;
                }
                if (w) {
                    this.hideForm();
                    if (this.parentPageModule != null) {
                        if (this.parentPageModule.innerSearch != null) {
                            this.parentPageModule.innerSearch();
                        }
                    }
                    this.fireEvent("onSubmit");
                }
            }
        } catch (l) {
            LEAP.showError(l);
        }
    };
    pageObjectExtend.buildExtendPageData = function(g) {
        if (this.moduleVersion > 1) {
            if (this.exdata != null) {
                for (var d in this.exdata) {
                    g[d] = this.exdata[d];
                }
            }
        }
    };
    pageObjectExtend._peshandleEvent_gpe = function(d, g) {
        this._peshandleEvent_fm({
            arg: g,
            arg2: {
                data: d
            }
        });
    };
    pageObjectExtend._peshandleEvent_rowclick = function(d) {
        if (!d || d.arg2) {
            var g = d.arg2.flag;
            if (g == "选择") {
                this._peshandleEvent_fm(d);
            }
        }
    };
    pageObjectExtend._peshandleEvent_fm = function(q) {
        var g = null;
        if (q && q.arg2 && q.arg2.data) {
            g = q.arg2.data;
        }
        var p = null;
        if (q && q.arg) {
            p = q.arg;
        }
        if (g && p && p.fmo) {
            for (var h = 0; h < p.fmo.length; h++) {
                var m = p.fmo[h][0];
                var l = p.fmo[h][1];
                if (this.exdata == null) {
                    this.exdata = {};
                }
                var j = this.md(m);
                if (j) {
                    j.setValue(g[l]);
                    j = null;
                } else {
                    this.exdata[m] = g[l];
                }
            }
            var d = q.caller;
            if (d) {
                var o = d;
                while (!o.hasAttribute("instance")) {
                    o = d.parentElement;
                }
                if (o.hasAttribute("instance")) {
                    var n = LEAP.getLoadedModule(o.getAttribute("instance"));
                    if (n) {
                        n.hideForm();
                        n = null;
                    }
                }
            }
        }
    };
    pageObjectExtend._initphs = function() {
        var m = this.moduleElement;
        if (m) {
            var h = m.getAttribute("lhe");
            if (!String.isEmpty(h)) {
                var d = null;
                try {
                    d = JSON.parse(h);
                } catch (o) {}
                if (d) {
                    var g = d.length;
                    for (var j = 0; j < g; j++) {
                        var p = d[j];
                        if (!p.e) {
                            continue;
                        }
                        if (p.s) {
                            var n = this.getST(p.s);
                            if (!n) {
                                continue;
                            }
                            n._lhdef = p;
                            this.addEvent(n, p.e, this._plhhandleEvent);
                        }
                    }
                }
            }
        }
        m = null;
    };
    pageObjectExtend._plhhandleEvent = function(arg) {
        var src = arg.caller;
        if (src.srcElement) {
            src = src.srcElement;
        }
        var def = src._lhdef;
        var st = src.getAttribute("st");
        var type = arg.type;
        if (def && def.e == type) {
            var h = def.h;
            var ck = def.ck;
            var v = LEAP.getValue(src);
            var me = this.moduleElement;
            if (h && h.length > 0) {
                var hides = null;
                var shows = null;
                for (var i = 0; i < h.length; i++) {
                    if (h[i] && h[i].v == v) {
                        hides = h[i].hide;
                        shows = h[i].show;
                        break;
                    }
                }
                if (hides && hides.length > 0) {
                    for (var k = 0; k < hides.length; k++) {
                        var hEls = LEAP.getElements("[panel=" + hides[k] + "]", me);
                        this._hidePanelElement(hEls, true);
                    }
                }
                if (shows && shows.length > 0) {
                    for (var k = 0; k < shows.length; k++) {
                        var sEls = LEAP.getElements("[panel=" + shows[k] + "]", me);
                        this._hidePanelElement(sEls, false);
                    }
                }
            }
            if (ck && ck.length > 0) {
                var rmds = null;
                var nrmds = null;
                var cmds = null;
                var ncmds = null;
                for (var i = 0; i < ck.length; i++) {
                    if (ck[i] && ck[i].v == v) {
                        rmds = ck[i].r;
                        nrmds = ck[i].nr;
                        cmds = ck[i].c;
                        ncmds = ck[i].nc;
                        break;
                    }
                }
                var mdEl = null;
                if (rmds && rmds.length > 0) {
                    for (var k = 0; k < rmds.length; k++) {
                        mdEl = LEAP.getElement("[md =" + rmds[k] + "]", me);
                        if (mdEl) {
                            LEAP.setReadonly(mdEl, true);
                        }
                    }
                }
                if (nrmds && nrmds.length > 0) {
                    for (var k = 0; k < nrmds.length; k++) {
                        mdEl = LEAP.getElement("[md=" + nrmds[k] + "]", me);
                        if (mdEl) {
                            LEAP.setReadonly(mdEl, false);
                        }
                    }
                }
                if (cmds && cmds.length > 0) {
                    for (var k = 0; k < cmds.length; k++) {
                        mdEl = LEAP.getElement("[md=" + cmds[k] + "]", me);
                        if (mdEl) {
                            var check = mdEl.getAttribute("check");
                            if (check != null && check.trim().length > 0) {
                                check = eval("({" + check + "})");
                            }
                            if (check == null) {
                                check = {};
                            }
                            check.notnull = true;
                            var str = JSON.stringify(check);
                            mdEl.setAttribute("check", str.substr(1, str.length - 2).replaceall('"', ""));
                            mdEl.setAttribute("_dynacheck", "check");
                        }
                    }
                }
                if (ncmds && ncmds.length > 0) {
                    for (var k = 0; k < ncmds.length; k++) {
                        mdEl = LEAP.getElement("[md=" + ncmds[k] + "]", me);
                        if (mdEl) {
                            var check = mdEl.getAttribute("check");
                            if (check != null && check.trim().length > 0) {
                                check = eval("({" + check + "})");
                            }
                            if (check == null) {
                                check = {};
                            }
                            delete check.notnull;
                            var str = JSON.stringify(check);
                            mdEl.setAttribute("check", str.substr(1, str.length - 2).replaceall('"', ""));
                            mdEl.setAttribute("_dynacheck", "uncheck");
                            if (mdEl.style["background-color"]) {
                                mdEl.style.removeAttribute("background-color");
                                delete mdEl.style["background-color"];
                            }
                        }
                    }
                }
            }
        }
    };
    pageObjectExtend._hideExpressElement = function() {
        var me = this.moduleElement;
        if (!me) {
            return;
        }
        var heepStr = me.getAttribute("heep");
        if (String.isEmpty(heepStr)) {
            return;
        }
        var defs = null;
        try {
            defs = JSON.parse(heepStr);
        } catch (e) {}
        if (defs && defs.length > 0) {
            for (var i = 0; i < defs.length; i++) {
                var exp = defs[i].exp;
                var bool = false;
                try {
                    if (!eval(exp)) {
                        continue;
                    } else {
                        bool = true;
                    }
                } catch (e) {}
                if (!bool) {
                    continue;
                }
                var hide = defs[i].hide;
                var show = defs[i].show;
                if (hide && hide.length > 0) {
                    var hides = hide.split(",");
                    for (var k = 0; k < hides.length; k++) {
                        var hEls = LEAP.getElements("[panel=" + hides[k] + "]", me);
                        this._hidePanelElement(hEls, true);
                    }
                }
                if (show && show.length > 0) {
                    var shows = show.split(",");
                    for (var k = 0; k < shows.length; k++) {
                        var sEls = LEAP.getElements("[panel=" + shows[k] + "]", me);
                        this._hidePanelElement(sEls, false);
                    }
                }
            }
        }
    };
    pageObjectExtend._hidePanelElement = function(m, j) {
        if (!m || m.length == 0) {
            return;
        }
        var n = null;
        for (var h = 0; h < m.length; h++) {
            n = m[h];
            if (j) {
                n.style.display = "none";
            } else {
                n.style.display = "";
            }
            var g = LEAP.getElements("[md]", n);
            if (g && g.length > 0) {
                for (var d = 0; d < g.length; d++) {
                    var l = g[d].getAttribute("check");
                    if (!j) {
                        g[d].removeAttribute("_hide");
                    } else {
                        if (j) {
                            g[d].setAttribute("_hide", 1);
                        }
                    }
                }
            }
        }
    };
    pageObjectExtend._rebuildMdAttr = function(p) {
        if (p == "view" || p == "search") {
            return;
        }
        var o = this.moduleElement;
        if (!o) {
            return;
        }
        var v = o.getAttribute("mext");
        var j = null;
        if (!String.isEmpty(v)) {
            try {
                j = JSON.parse(v);
            } catch (n) {}
        }
        if (!j) {
            return;
        }
        var r = null;
        var q = null;
        for (var h in j) {
            if (h == "rmds") {
                var d = j[h];
                if (d == null || d.length == 0) {
                    continue;
                }
                r = d.split(",");
                for (var l = 0; l < r.length; l++) {
                    if (q && q.contains(r[l]) && p == "insert") {
                        continue;
                    }
                    var m = LEAP.getElement("[md=" + r[l] + "]", o);
                    if (m) {
                        LEAP.setReadonly(m, p == "modify");
                    }
                }
            } else {
                if (h == "rmdcs") {
                    var u = j[h];
                    if (u == null || u.length == 0) {
                        continue;
                    }
                    q = u.split(",");
                    for (var l = 0; l < q.length; l++) {
                        if (r && r.contains(q[l]) && p == "modify") {
                            continue;
                        }
                        var g = LEAP.getElement("[md=" + q[l] + "]", o);
                        if (g) {
                            LEAP.setReadonly(g, p == "insert");
                        }
                    }
                }
            }
        }
        o = null;
    };
    pageObjectExtend._rebuildMdcheck = function() {
        if (this.data == null) {
            return;
        }
        var n = this.moduleElement;
        var h = null;
        if (n) {
            var q = n.getAttribute("lhe");
            if (!String.isEmpty(q)) {
                var h = null;
                try {
                    h = JSON.parse(q);
                } catch (m) {}
            }
        }
        if (h) {
            var g = h.length;
            for (var j = 0; j < g; j++) {
                var o = h[j];
                if (!o.e || o.e != "valueChange") {
                    continue;
                }
                if (o.s) {
                    var d = this.getST(o.s);
                    if (!d) {
                        continue;
                    }
                    d._lhdef = o;
                    var p = {};
                    p.caller = {};
                    p.caller.srcElement = d;
                    p.type = "valueChange";
                    this._plhhandleEvent(p);
                }
            }
        }
        n = null;
    };
    pageObjectExtend._hideButton = function(l) {
        if (!l || l == "search") {
            return;
        }
        var j = this.moduleElement;
        if (!j) {
            return;
        }
        var h = LEAP.getElements("[_hidemode]", j);
        if (h == null || h.length == 0) {
            return;
        }
        for (var d = 0; d < h.length; d++) {
            var g = h[d].getAttribute("_hidemode");
            if (g && g.indexOf(l) > -1) {
                h[d].style.display = "none";
            } else {
                h[d].style.display = "";
            }
        }
    };
    var pageElement = function(d, g) {
        this.element = d;
        this.pageModule = g;
    };
    pageElement.prototype.getValue = function() {
        return LEAP.getValue(this.element);
    };
    pageElement.prototype.setValue = function(d) {
        LEAP.setValue(this.element, d);
    };
    pageElement.prototype.show = function() {
        var d = this.element.getAttribute(commfields.ct);
        if (d == "form") {
            LEAP.form.show(this.element);
        } else {
            this.element.style.display = "";
        }
    };
    pageElement.prototype.hide = function() {
        var d = this.element.getAttribute(commfields.ct);
        if (d == "form") {
            LEAP.form.hide(this.element);
        } else {
            this.element.style.display = "none";
        }
    };
    pageElement.prototype.valueChange = function(d, g) {
        if (d != null && typeof(d) == "function") {
            if (g == null && this.pageModule != null) {
                g = this.pageModule;
            }
            if (g._isPageObject) {
                g.addEvent(this.element, "valueChange", d);
            } else {
                LEAP.addEvent(this.element, "valueChange", d, null, g);
            }
        }
    };
    pageElement.prototype.readOnly = function(l) {
        if (l == null || l == 1 || l == true) {
            l = true;
        } else {
            l = false;
        }
        var j = this.element;
        var h = j.getAttribute("ct");
        if (String.isEmpty(h)) {
            if (l) {
                j.setAttribute("readOnly", "true");
            } else {
                j.removeAttribute("readOnly");
            }
            j = null;
        } else {
            if (l) {
                j.setAttribute("readonly", "1");
            } else {
                j.removeAttribute("readonly");
            }
            if (h == "date") {
                LEAP.date.setReadOnly(j, l);
            } else {
                if (h == "areagroup") {
                    var g = LEAP.getElements("div[ct=select]", j);
                    if (g != null) {
                        for (var d = 0; d < g.length; d++) {
                            if (l) {
                                g[d].setAttribute("readonly", "1");
                            } else {
                                g[d].removeAttribute("readonly");
                            }
                        }
                    }
                    g = null;
                } else {
                    if (h == "simplecheck") {
                        j.setAttribute("disabled", "true");
                    }
                }
            }
            j = null;
        }
    };
    pageElement.prototype.click = function(d, g) {
        if (d != null && typeof(d) == "function") {
            if (g == null && this.pageModule != null) {
                g = this.pageModule;
            }
            if (g._isPageObject) {
                g.addEvent(this.element, "click", d);
            } else {
                LEAP.addEvent(this.element, "click", d, null, g);
            }
        }
    };
    pageElement.prototype.addEvent = function(g, d, h) {
        if (!String.isEmpty(g) && d != null && typeof(d) == "function") {
            if (h == null && this.pageModule != null) {
                h = this.pageModule;
            }
            if (h._isPageObject) {
                h.addEvent(this.element, g, d);
            } else {
                LEAP.addEvent(this.element, g, d, null, h);
            }
        }
    };
    pageElement.prototype.removeEvent = function(g, d, h) {
        if (!String.isEmpty(g) && d != null && typeof(d) == "function") {
            if (h == null && this.pageModule != null) {
                h = this.pageModule;
            }
            if (h._isPageObject) {
                h.removeEvent(this.element, g, d);
            } else {
                LEAP.removeEvent(this.element, g, d, null, h);
            }
        }
    };
    pageElement.prototype.setHeight = function(g) {
        var d = this.element.getAttribute(commfields.ct);
        if (d == "form") {
            LEAP.form.setSize(this.element, null, g);
        } else {
            this.element.style.height = g;
        }
    };
    pageElement.prototype.setWidth = function(d) {
        var g = this.element.getAttribute(commfields.ct);
        if (g == "form") {
            LEAP.form.setSize(this.element, d, null);
        } else {
            this.element.style.width = d;
        }
    };
    pageElement.prototype.setStyle = function(d) {
        LEAP.setStyle(this.element, d);
    };
    pageElement.prototype.setClassName = function(d) {
        this.element.className = d;
    };
    pageElement.prototype.addClassName = function(d) {
        LEAP.addCSS(this.element, d, false);
    };
    pageElement.prototype.delClassName = function(d) {
        LEAP.removeCSS(this.element, d, false);
    };
    pageElement.prototype.getSelectedIndex = function() {
        var d = this.element.getAttribute(commfields.ct);
        if (d && LEAP[d] && LEAP[d].getSelectedIndex) {
            return LEAP[d].getSelectedIndex(this.element);
        }
    };
    pageElement.prototype.setSelectedIndex = function(d) {
        var g = this.element.getAttribute(commfields.ct);
        if (g && LEAP[g] && LEAP[g].setSelectedIndex) {
            return LEAP[g].setSelectedIndex(this.element);
        }
    };
    pageElement.prototype.getSelectedData = function() {
        var d = this.element.getAttribute(commfields.ct);
        if (d && LEAP[d] && LEAP[d].getRow) {
            var g = LEAP[d].setSelectedIndex(this.element, this.getSelectedIndex());
            if (g) {
                return g.data;
            }
        }
    };
    pageElement.prototype.setTitle = function(g) {
        var d = this.element.getAttribute(commfields.ct);
        if (d == "form") {
            LEAP.form.setTitle(this.element, g);
        }
    };
    pageElement.prototype.addItem = function(g, h) {
        var d = this.element.getAttribute(commfields.ct);
        if (d) {
            if (d && LEAP[d] && LEAP[d].addItem) {
                LEAP[d].addItem(this.element, g, h);
            }
        }
    };
    pageElement.prototype.setAttr = function(d, g) {
        if (g == null) {
            this.element.removeAttribute(d);
        } else {
            this.element.setAttribute(d, g);
        }
    };
    pageElement.prototype.getAttr = function(d) {
        return this.element.getAttribute(d);
    };
    LEAP.wrap = function(d, g) {
        if (d == null) {
            return;
        }
        if (typeof(d) == "string") {
            if (g != null) {
                d = g.getElement(d);
            } else {
                d = LEAP.getElement(d);
            }
        }
        if (d == null) {
            return;
        }
        return new pageElement(d, g);
    };
    pageObjectExtend._initpls = function() {
        var D = this.moduleElement;
        if (D) {
            var u = D.getAttribute("lmm");
            if (!String.isEmpty(u)) {
                var d = null;
                try {
                    d = JSON.parse(u);
                } catch (B) {}
                if (d) {
                    var j = [];
                    var z = d.length;
                    this._lmm = new hashtable();
                    for (var A = 0; A < z; A++) {
                        var h = d[A];
                        if (h.s && h.n) {
                            var C = this.getST(h.s);
                            if (C) {
                                var y = h.vt;
                                if (!y) {
                                    y = "search";
                                }
                                var v = null;
                                if (h.tqfm) {
                                    v = {
                                        autosearch: false
                                    };
                                }
                                var x = this.loadModule2({
                                    name: h.n,
                                    pageMode: y,
                                    parent: C,
                                    moduleLoadArg: v
                                });
                                if (x) {
                                    if (h.ismain) {
                                        this.masterModule = x;
                                    }
                                    this._lmm.add(h.s, x.instance);
                                }
                                C = null;
                            }
                        }
                    }
                }
            }
            u = D.getAttribute("lmes");
            if (!String.isEmpty(u) && this._lmm) {
                d = null;
                try {
                    d = JSON.parse(u);
                } catch (B) {}
                if (d) {
                    var z = d.length;
                    var p = [];
                    for (var A = 0; A < z; A++) {
                        var h = d[A];
                        if (!String.isEmpty(h.tqfm)) {
                            var o = h.tqfm.split(",");
                            h.tqfmo = [];
                            for (var A = 0; A < o.length; A++) {
                                var w = o[A];
                                var q = w.split("=");
                                h.tqfmo.add(q);
                            }
                        }
                        if (h.s && h.e && h.ts) {
                            var r = LEAP.getLoadedModule(this._lmm.getvalue(h.s));
                            var g = LEAP.getLoadedModule(this._lmm.getvalue(h.ts));
                            if (r && g && g[h.tm]) {
                                if (h.sct) {
                                    var G = r.getST(h.sct);
                                    if (G) {
                                        if (h.p) {
                                            var n = r.getST(h.p);
                                            if (n) {
                                                var F = h.p + "|" + h.e;
                                                if (!p.contains(F)) {
                                                    p.add(F);
                                                    r.addEvent(n, h.e, this._plshandleEvent, h, null, this);
                                                }
                                                if (this.__ples == null) {
                                                    this.__ples = new hashtable();
                                                }
                                                if (h.f) {
                                                    this.__ples.add(h.sct + "|" + h.e + "|" + h.f, h);
                                                } else {
                                                    this.__ples.add(h.sct + "|" + h.e, h);
                                                }
                                            }
                                        } else {
                                            r.addEvent(G, h.e, this._plshandleEvent, h, null, this);
                                        }
                                    }
                                } else {
                                    r.regEvent(h.e, this._plshandleEvent, this, h);
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    pageObjectExtend._plshandleEvent = function(l, q, v) {
        var B = null;
        var g = null;
        var r = null;
        var o = null;
        var y = null;
        if (l.arg) {
            r = l.arg;
            if (l && l.arg2) {
                B = l.arg2.data;
                o = l.arg2.srcst;
                y = l.arg2.flag;
            }
            g = l.type;
        } else {
            if (q) {
                B = l;
                g = q.e;
                r = q;
            }
        }
        if (l && l.arg2 && o && this.__ples != null) {
            var w = l.caller;
            if (w) {
                var p = w;
                while (!p.hasAttribute("instance")) {
                    p = w.parentElement;
                }
                if (p.hasAttribute("instance")) {
                    var n = LEAP.getLoadedModule(p.getAttribute("instance"));
                    var h = n.getST(o);
                    if (h) {
                        var C = o + "|" + g;
                        if (y) {
                            C += "|" + y;
                        }
                        var x = this.__ples.getvalue(C);
                        if (x) {
                            r = x;
                        }
                    }
                }
            }
        }
        var d = LEAP._peGetMM(LEAP.getLoadedModule(this._lmm.getvalue(r.ts)));
        if (d) {
            if (r.tm) {
                if (r.tqfmo) {
                    if (B) {
                        var A = {};
                        for (var z = 0; z < r.tqfmo.length; z++) {
                            var m = r.tqfmo[z][0];
                            var j = r.tqfmo[z][1];
                            A[j] = B[m];
                        }
                        d[r.tm](A);
                    } else {
                        d[r.tm](null);
                    }
                } else {
                    if (r.tf) {
                        if (B) {
                            var u = B[r.tf];
                            d[r.tm](u);
                            return;
                        } else {
                            d[r.tm](null);
                        }
                    } else {
                        d[r.tm](B);
                    }
                }
            }
        }
    };
    var WorkDayService = function() {
        var h = "leapworkdaycategory";
        var j = "leapworkday";
        var d = "leapworktimecategory";
        var g = "leapworktime";
    };
    LEAP.___defaultValueMaps = new hashtable();
    LEAP.___defaultValueMaps.add("年", "this.getUserInfo().getTime().getFullYear()");
    LEAP.___defaultValueMaps.add("月", "(this.getUserInfo().getTime().getMonth()+1)");
    LEAP.___defaultValueMaps.add("日", "this.getUserInfo().getTime().getDate()");
    LEAP.___defaultValueMaps.add("小时", "this.getUserInfo().getTime().getHours()");
    LEAP.___defaultValueMaps.add("分", "this.getUserInfo().getTime().getMinutes()");
    LEAP.___defaultValueMaps.add("时间", "this.getUserInfo().getTimeFormart(0)");
    LEAP.___defaultValueMaps.add("用户名", "this.getUserInfo().fullName");
    LEAP.___defaultValueMaps.add("用户全名", "this.getUserInfo().fullName");
    LEAP.___defaultValueMaps.add("用户ID", "this.getUserInfo().userid");
    LEAP.___defaultValueMaps.add("区域ID", "this.getUserInfo().areaid");
    LEAP.___defaultValueMaps.add("区域名", "this.getUserInfo().areaCNName");
    LEAP.___defaultValueMaps.add("系统代码", "this.getUserInfo().applictioncode");
    LEAP.___defaultValueMaps.add("岗位ID", "this.getUserInfo().positionid");
    LEAP.___defaultValueMaps.add("岗位名", "this.getUserInfo().positionENName");
    LEAP.___defaultValueMaps.add("岗位英文名", "this.getUserInfo().positionENName");
    LEAP.___defaultValueMaps.add("机构ID", "this.getUserInfo().orgid");
    LEAP.___defaultValueMaps.add("机构名", "this.getUserInfo().orgCNName");
    LEAP.___defaultValueMaps.add("邮件地址", "this.getUserInfo().email");
    LEAP.___defaultValueMaps.add("移动电话", "this.getUserInfo().mobilephone");
    LEAP.___defaultValueMaps.add("办公电话", "this.getUserInfo().officephone");
    LEAP.___defaultValueMaps.add("用户详细信息.", "this.getUserInfo().detail.");
    pageObjectExtend.processDefaultValues = function(els) {
        if (this.___hasDVAttrs == null) {
            if (els != null) {
                this.___hasDVAttrs = els;
            } else {
                this.___hasDVAttrs = this.getElements("[defaultvalueexp][instance=" + this.instance + "]");
                if (this.___hasDVAttrs == null) {
                    this.___hasDVAttrs = [];
                }
            }
        }
        var l = this.___hasDVAttrs.length;
        if (l > 0) {
            for (var i = 0; i < l; i++) {
                var cur = this.___hasDVAttrs[i];
                toev = cur.getAttribute("defaultvalueexpcom");
                if (String.isEmpty(toev)) {
                    var exp = cur.getAttribute("defaultvalueexp");
                    if (!String.isEmpty(exp)) {
                        toev = this.processDefaultValueExp(exp);
                        cur.setAttribute("defaultvalueexpcom", toev);
                    }
                }
                if (String.isEmpty(toev)) {
                    continue;
                }
                var v = "";
                try {
                    if (toev.indexOf("(") > -1 && toev.indexOf(")") > 0) {
                        v = eval("(" + toev + ")");
                    } else {
                        v = eval('"' + toev + '"');
                    }
                } catch (e) {}
                LEAP.setValue(cur, v);
            }
        }
    };
    pageObjectExtend.processDefaultValueExp = function(m) {
        if (typeof(m) != "string") {
            return;
        }
        var j = m.length;
        var u = 0;
        var p = new StringBuffer();
        var r = 0;
        while (u > -1) {
            var h = m.indexOf("{", u);
            if (h > -1) {
                var n = -1;
                n = m.indexOf("}", h + 1);
                if (n > -1) {
                    u = n + 1;
                    var o = m.substring(h + 1, n);
                    var q = o.indexOf(".");
                    var d = "";
                    var g = "";
                    if (q > -1) {
                        d = o.substring(0, q + 1);
                        d = d.Trim();
                        g = o.substring(q + 1);
                    } else {
                        d = o;
                    }
                    if (LEAP.___defaultValueMaps.contains(d)) {
                        p.append(m.substring(r, h));
                        r = n + 1;
                        p.append(" ( ");
                        p.append(LEAP.___defaultValueMaps.getvalue(d));
                        p.append(g);
                        p.append(" ) ");
                    }
                    continue;
                }
            }
            p.append(m.substring(r));
            u = -1;
        }
        return p.toString();
    };
    LEAP.button = {};
    LEAP.checkbox = {};
    LEAP.checkbox.d = "checkbox";
    LEAP.checkbox.init = function() {
        if (document != null && document.body != null) {
            LEAP.checkbox._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.checkbox._init);
        }
        ElementEventManager.addManagedEventType(LEAP.checkbox.d, "valueChange");
        ElementEventManager.addManagedEventType(LEAP.checkbox.d, "clickItem");
    };
    LEAP.checkbox._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.checkbox.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.checkbox._init);
    };
    LEAP.checkbox.uiProcess = function(u) {
        var d = null;
        var o = null;
        var j = null;
        var r = null;
        var l = null;
        var n = null;
        var g = null;
        var h = null;
        var q = 0;
        try {
            d = u.e.srcElement;
            if (null == d) {
                return;
            }
            o = u.e.type;
            if (null == o) {
                return;
            }
            j = LEAP._match(d, LEAP.checkbox.d);
            if (null == j) {
                return;
            }
            if ("checkbox_label" != d.getAttribute("ctf")) {
                return;
            }
            if ("1" == j.getAttribute("readonly")) {
                return;
            }
            r = j.getAttribute("cmax");
            l = j.getAttribute("cmin");
            if (null == r || "" == r) {
                r = 0;
            } else {
                try {
                    r = parseInt(r);
                    if (r < 0) {
                        r = 0;
                    }
                } catch (m) {
                    r = 0;
                }
            }
            if (null == l || "" == l) {
                l = 0;
            } else {
                try {
                    l = parseInt(l);
                    if (l < 0) {
                        l = 0;
                    }
                } catch (m) {
                    l = 0;
                }
            }
            if (l > r) {
                l = r;
            }
            n = LEAP.getElements("[ctf=checkbox_item]", j);
            if (null == n) {
                return;
            }
            if (null != n) {
                n = n.length;
            }
            if (l > n) {
                l = n;
            }
            if (r > n) {
                r = n;
            }
            if ("click" == o) {
                if ("checkbox_disabled" == d.className) {
                    return;
                }
                q = LEAP.checkbox.getCheckedCount(j);
                var p;
                if ("checkbox_unchecked" == d.className) {
                    p = true;
                    if (r == 0 || r > q) {
                        g = LEAP.checkbox.getValue(j, false);
                        d.className = "checkbox_checked";
                        h = LEAP.checkbox.getValue(j, false);
                        ElementEventManager.handleEvent(j, "valueChange", {
                            newvalue: h,
                            oldvalue: g,
                            src: j,
                            pv: g,
                            lv: h
                        });
                    }
                } else {
                    p = false;
                    if (l < q) {
                        g = LEAP.checkbox.getValue(j, false);
                        d.className = "checkbox_unchecked";
                        h = LEAP.checkbox.getValue(j, false);
                        ElementEventManager.handleEvent(j, "valueChange", {
                            newvalue: h,
                            oldvalue: g,
                            src: j,
                            pv: g,
                            lv: h
                        });
                    }
                }
                ElementEventManager.handleEvent(j, "clickItem", {
                    item: d,
                    checked: p,
                    value: d.getAttribute("value").Trim(),
                    data: d.data
                });
            }
        } finally {
            h = g = n = r = l = j = d = u = o = null;
        }
    };
    LEAP.checkbox.getCheckedCount = function(j) {
        var d = null;
        var h = 0;
        try {
            j = LEAP._check(j, LEAP.checkbox.d);
            if (null == j) {
                return h;
            }
            d = LEAP.getElements("[ctf=checkbox_label]", j);
            if (null == d) {
                return h;
            }
            for (var g = 0; g < d.length; g++) {
                if ("checkbox_checked" == d[g].className) {
                    h++;
                }
            }
            g = null;
            return h;
        } finally {
            h = d = j = null;
        }
    };
    LEAP.checkbox.getNameByValue = function(h, j) {
        var d = null;
        var g = null;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return null;
            }
            d = LEAP.getElements("[ctf=checkbox_label]", h);
            if (null == d) {
                return null;
            }
            for (g = 0; g < d.length; g++) {
                if (d[g].getAttribute("value").Trim() == j) {
                    return (LEAP.isIE ? d[g].innerText : d[g].textContent);
                }
            }
            return null;
        } finally {
            g = h = null;
        }
    };
    LEAP.checkbox.getCheckedItem = function(h) {
        var d = null;
        var g = null;
        var j = null;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return null;
            }
            d = LEAP.getElements("[ctf=checkbox_label]", h);
            if (null == d) {
                return null;
            }
            j = new hashtable();
            for (g = 0; g < d.length; g++) {
                if ("checkbox_checked" == d[g].className) {
                    j.add(d[g].getAttribute("value").Trim(), (LEAP.isIE ? d[g].innerText : d[g].textContent));
                }
            }
            return j.count > 0 ? j : null;
        } finally {
            j = g = h = null;
        }
    };
    LEAP.checkbox.getCheckedItemElements = function(h) {
        var d = null;
        var g = null;
        var j = null;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return null;
            }
            d = LEAP.getElements(".checkbox_checked[ctf=checkbox_label]", h);
            return d;
        } finally {
            j = g = h = d = null;
        }
    };
    LEAP.checkbox.getValue = function(h, d) {
        var n = ",";
        var p = null;
        var j = null;
        var o = null;
        var l = 0;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return null;
            }
            o = LEAP.getElements("[ctf=checkbox_label]", h);
            if (null == o) {
                return null;
            }
            if (null == d) {
                d = false;
            }
            if (d) {
                p = h.getAttribute("cmax");
                j = h.getAttribute("cmin");
                if (null == p || "" == p) {
                    p = 0;
                } else {
                    try {
                        p = parseInt(p);
                        if (p < 0) {
                            p = 0;
                        }
                    } catch (m) {
                        p = 0;
                    }
                }
                if (null == j || "" == j) {
                    j = 0;
                } else {
                    try {
                        j = parseInt(j);
                        if (j < 0) {
                            j = 0;
                        }
                    } catch (m) {
                        j = 0;
                    }
                }
                if (j > p) {
                    j = p;
                }
                if (j > o.length) {
                    j = o.length;
                }
                if (p > o.length) {
                    p = o.length;
                }
            }
            for (var g = 0; g < o.length; g++) {
                if ("checkbox_checked" == o[g].className) {
                    n += o[g].getAttribute("value").Trim() + ",";
                    l++;
                }
            }
            g = null;
            if (d) {
                if (j != 0 && j > l) {
                    throw "最小选择项数为[" + j + "],大于实际选择项数[" + l + "]";
                }
                if (p != 0 && p < l) {
                    throw "最大选择项数为[" + p + "],小于实际选择项数[" + l + "]";
                }
            }
            return ("," == n) ? null : n.substring(0, n.length);
        } finally {
            d = l = j = p = o = n = h = null;
        }
    };
    LEAP.checkbox.setValue = function(l, m) {
        var d = null;
        try {
            l = LEAP._check(l, LEAP.checkbox.d);
            if (null == l) {
                return;
            }
            LEAP.checkbox.checkedAll(l, false);
            if (null == m || "" == m) {
                return;
            }
            d = LEAP.getElements("[ctf=checkbox_label]", l);
            if (null == d) {
                return;
            }
            m = m.split(",");
            for (var h = 0; h < m.length; h++) {
                for (var g = 0; g < d.length; g++) {
                    if ("checkbox_disabled" == d[g].className) {
                        continue;
                    }
                    if (d[g].getAttribute("value").Trim() == m[h].Trim()) {
                        d[g].className = "checkbox_checked";
                        break;
                    }
                }
                g = null;
            }
            h = null;
        } finally {
            l = m = d = null;
        }
    };
    LEAP.checkbox.checkedAll = function(h, j) {
        var d = null;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return;
            }
            d = LEAP.getElements("[ctf=checkbox_label]", h);
            if (null == d) {
                return;
            }
            for (var g = 0; g < d.length; g++) {
                if ("checkbox_disabled" == d[g].className) {
                    continue;
                }
                d[g].className = (j ? "checkbox_checked" : "checkbox_unchecked");
            }
            g = null;
        } finally {
            j = h = d = null;
        }
    };
    LEAP.checkbox.addItem = function(j, h, o, m, n) {
        var p = null;
        var g = null;
        try {
            j = LEAP._check(j, LEAP.checkbox.d);
            if (null == j) {
                return;
            }
            if (null == h || "" == h) {
                h = "&nbsp;";
            }
            p = document.createElement("div");
            j.appendChild(p);
            p.className = "checkbox_div";
            p.setAttribute("ctf", "checkbox_item");
            g = document.createElement("label");
            p.appendChild(g);
            g.setAttribute("ctf", "checkbox_label");
            g.setAttribute("value", o);
            if (n) {
                g.data = n;
            }
            g.innerHTML = h;
            if (null == m) {
                m = false;
            }
            if ("boolean" == typeof(m)) {
                if (m) {
                    g.className = "checkbox_checked";
                } else {
                    g.className = "checkbox_unchecked";
                }
            } else {
                g.className = "checkbox_disabled";
            }
            return g;
        } finally {
            p = g = j = h = o = m = null;
        }
    };
    LEAP.checkbox.removeItems = function(h, d, j) {
        var l = null;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return;
            }
            l = LEAP.getElements("[ctf=checkbox_label]", h);
            if (null == l) {
                return;
            }
            if (null != d && null != j) {
                for (var g = 0; g < l.length; g++) {
                    if (l[g].getAttribute("value") == j && l[g].innerHTML == d) {
                        h.removeChild(l[g].parentNode);
                    }
                }
                g = null;
            } else {
                if (null != d) {
                    for (var g = 0; g < l.length; g++) {
                        if (l[g].innerHTML == d) {
                            h.removeChild(l[g].parentNode);
                        }
                    }
                    g = null;
                } else {
                    if (null != j) {
                        for (var g = 0; g < l.length; g++) {
                            if (l[g].getAttribute("value") == j) {
                                h.removeChild(l[g].parentNode);
                            }
                        }
                        g = null;
                    } else {
                        for (var g = 0; g < l.length; g++) {
                            l[g].parentNode.parentNode.removeChild(l[g].parentNode);
                        }
                        g = null;
                    }
                }
            }
        } finally {
            l = h = d = j = null;
        }
    };
    LEAP.checkbox.setDisabled = function(h, m, d, j) {
        var l = null;
        try {
            h = LEAP._check(h, LEAP.checkbox.d);
            if (null == h) {
                return;
            }
            if ("boolean" != typeof(m)) {
                return;
            }
            if (null != d && null != j) {
                l = LEAP.getElements("[ctf=checkbox_label]", h);
                if (null != l) {
                    for (var g = 0; g < l.length; g++) {
                        if (l[g].getAttribute("value") == j && l[g].innerHTML == d) {
                            if (m) {
                                l[g].className = "checkbox_disabled";
                            } else {
                                l[g].className = "checkbox_unchecked";
                            }
                        }
                    }
                    g = null;
                }
            } else {
                if (null != d) {
                    l = LEAP.getElements("[ctf=checkbox_label]", h);
                    if (null != l) {
                        for (var g = 0; g < l.length; g++) {
                            if (l[g].innerHTML == d) {
                                if (m) {
                                    l[g].className = "checkbox_disabled";
                                } else {
                                    l[g].className = "checkbox_unchecked";
                                }
                            }
                        }
                        g = null;
                    }
                } else {
                    if (null != j) {
                        l = LEAP.getElements("[ctf=checkbox_label]", h);
                        if (null != l) {
                            for (var g = 0; g < l.length; g++) {
                                if (l[g].getAttribute("value") == j) {
                                    if (m) {
                                        l[g].className = "checkbox_disabled";
                                    } else {
                                        l[g].className = "checkbox_unchecked";
                                    }
                                }
                            }
                            g = null;
                        }
                    } else {
                        l = LEAP.getElements("[ctf=checkbox_label]", h);
                        if (null != l) {
                            for (var g = 0; g < l.length; g++) {
                                if (m) {
                                    l[g].className = "checkbox_disabled";
                                } else {
                                    l[g].className = "checkbox_unchecked";
                                }
                            }
                            g = null;
                        }
                    }
                }
            }
        } finally {
            l = h = d = j = null;
        }
    };
    LEAP.checkbox.setReadOnly = function(d, g) {
        try {
            d = LEAP._check(d, LEAP.checkbox.d);
            if (null == d) {
                return;
            }
            if (g) {
                d.setAttribute("readonly", "1");
            } else {
                d.setAttribute("readonly", "0");
            }
        } finally {
            d = g = null;
        }
    };
    LEAP.checkbox.init();
    LEAP.DataMap = {};
    LEAP.DataMap.d = "DataMap";
    LEAP.DataMap.f = '<object id="@id" ctf="DataMap" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100%" height="100%" align="middle"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="wmode" value="Transparent" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@url@gv" width="100%" height="100%"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="wmode" value="Transparent" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="@serverLEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object><div style="z-index:-1;filter:alpha(opacity=80);-moz-opacity:0.8;width:100%;height:100%;background-color: white;position: absolute;left:0;top:0"></div>'.replaceall("@server", leapconfig.server).replaceall("@gv", leapclient.getVersionStr());
    LEAP.DataMap.init = function() {
        ElementEventManager.addManagedEventType(LEAP.DataMap.d, "DataMap_initComplete");
    };
    LEAP.DataMap.i = function(l, d) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (l != null) {
            var r = function() {
                LEAP.DataMap.i(null, d);
                d = null;
            };
            setTimeout(r, l);
            return;
        }
        var h = d.parentElement;
        var m = null;
        if (h != null) {
            m = h.getAttribute("ctid");
            if (!m) {
                m = UUID.cID();
                h.setAttribute("ctid", m);
            }
        } else {
            return;
        }
        var q = h.getAttribute("isflex");
        if (q == "1") {
            q = true;
        } else {
            q = false;
        }
        var n = h.getAttribute(commfields.ct);
        if (n && n == LEAP.DataMap.d) {
            var x = new Object();
            x.showtype = 2;
            x.server = leapconfig.server;
            x.sessionid = leapclient.getsid();
            x.ctid = m;
            if (LEAP.getUserInfo()) {
                x.areaid = LEAP.getUserInfo().areaid;
                x.areaname = LEAP.getUserInfo().areaCNName;
            }
            var j = [];
            var p = 0;
            for (var w in x) {
                var u = x[w];
                if (u && typeof u != "function") {
                    j.add(w + "=" + encodeURIComponent(u));
                }
            }
            var o = j.join("&");
            var g = LEAP.DataMap.f.replaceall("@vars", o).replace("@id", m);
            if (q) {
                g = g.replaceall("@url", leapconfig.server + "LEAP/Resource/flash/flex/LDataMap.swf");
            } else {
                g = g.replaceall("@url", leapconfig.server + "LEAP/Resource/flash/LDataMap.swf");
            }
            h.innerHTML = g;
        }
        if (d) {
            LEAP.removeElement(d, false);
        }
        h = d = null;
    };
    LEAP.DataMap._flashcallback = function(h, g, d) {
        LEAP.asyn(LEAP.DataMap.__flashcallback, null, 10, h, g, d);
    };
    LEAP.DataMap.__flashcallback = function(q, m, j) {
        var h = LEAP.getElement("[ctid=" + q + "]");
        if (h) {
            if (j) {
                try {
                    j = JSON.parse(j);
                } catch (z) {}
            }
            if (m == "DataMap_initComplete") {
                h.setAttribute("flashinited", "1");
                var r = document.getElementById(q);
                if (r) {
                    var o = r.getElementsByTagName("object");
                    if (o && o.length) {
                        r = o[0];
                    }
                    o = null;
                }
                if (r != null) {
                    r.focus();
                }
                r = null;
            }
            var A = h.getAttribute("instance");
            try {
                if (A) {
                    var d = LEAP.getLoadedModule(A);
                    var u = null;
                    if (d) {
                        var y = false;
                        if (m == "DataMap_onClick" && j) {
                            if (j.config && j.config.pagemodule) {
                                y = true;
                                var l = j.config.pagemodule;
                                var w = j.config.pagemoduletype;
                                var B = j.config;
                                if (l) {
                                    var v = {
                                        name: l,
                                        title: null,
                                        autodispose: true,
                                        moduleLoadArg: {
                                            id: j.data.id
                                        },
                                        pageMode: x,
                                        height: B.pagemoduleheight,
                                        width: B.pagemodulewidth,
                                        datamapelement: h
                                    };
                                    var x = "view";
                                    if (!String.isEmpty(w)) {
                                        x = w;
                                    }
                                    if (x && x == "simpleview") {
                                        LEAP.loadSimpleModule(v);
                                    } else {
                                        try {
                                            var g = d.loadForm3(v);
                                            var p = g.module;
                                            if (p) {
                                                if (p.pageModuleType) {
                                                    if (p.pageModuleType == "search") {} else {
                                                        if (!String.isEmpty(w) && (w == "view" || w == "modify")) {
                                                            p.setPageDataByPK(j.data.id);
                                                        } else {
                                                            if (p.pageModuleType == "tableinfo") {
                                                                p.setPageDataByPK(j.data.id);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } finally {
                                            v = null;
                                        }
                                    }
                                }
                            }
                        }
                        if (!y) {
                            var n = d[m];
                            if (n) {
                                try {
                                    u = n.call(d, j);
                                } catch (z) {
                                    if (isdebug) {
                                        throw z;
                                    }
                                } finally {
                                    d = n = null;
                                }
                            }
                        }
                        d = null;
                    }
                }
            } catch (z) {}
            ElementEventManager.handleEvent(h, m, j);
        }
        h = null;
    };
    LEAP.DataMap._call = function(h, r) {
        h = LEAP._check(h, LEAP.DataMap.d);
        if (h == null) {
            return null;
        }
        try {
            var d = h.getAttribute("flashinited");
            var g = null;
            if (d != null && d == "1") {
                var m = LEAP.ctid(h);
                g = document.getElementById(m);
                if (g) {
                    var l = g.getElementsByTagName("object");
                    if (l && l.length) {
                        g = l[0];
                    }
                    l = null;
                }
                if (g != null && g[r]) {
                    var p = null;
                    if (arguments.length > 2) {
                        p = [];
                        for (var j = 2; j < arguments.length; j++) {
                            var q = arguments[j];
                            if (q != null) {
                                var o = typeof(q);
                                if (o != "number" && o != "string") {
                                    p.add(JSON.stringify(q));
                                } else {
                                    p.add(q);
                                }
                            } else {
                                p.add(null);
                            }
                        }
                    }
                    var n = null;
                    try {
                        if (p != null) {
                            n = g[r].apply(g, p);
                        } else {
                            n = g[r].apply(g);
                        }
                    } catch (u) {}
                    if (n != null) {
                        return JSON.parse(n);
                    }
                }
            }
        } finally {
            g = h = null;
        }
        return null;
    };
    LEAP.DataMap.show = function(g, h, d) {
        return LEAP.DataMap._call(g, "show", h, d);
    };
    LEAP.DataMap.showgroup = function(h, g, d) {
        return LEAP.DataMap._call(h, "showgroup", g, d);
    };
    LEAP.DataMap.clear = function(d) {
        return LEAP.DataMap._call(d, "clear");
    };
    LEAP.DataMap.init();
    LEAP.GIS = {};
    LEAP.GIS.d = "GIS";
    LEAP.GIS.f = '<DIV gisf="searchcon"  style="filter:Alpha(Opacity=45);position:absolute;right:0;top:27px;background-color:white;WIDTH: 300px;height:300px;display:none;overflow:hidden;z-index:99999"><DIV gisf="searchconContent" style="width:100%;height:100%;display:block;overflow:hidden;"></DIV></DIV><DIV style="width:100%;height:100%">     <object id="@id" ctf="GIS" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100%" height="100%" align="middle"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@url@gv" width="100%" height="100%"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="@serverLEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>   </DIV>'.replaceall("@server", leapconfig.server).replaceall("@url", leapconfig.server + "LEAP/Resource/flash/GIS/LGIS.swf").replaceall("@gv", leapclient.getVersionStr());
    LEAP.GIS.w = function(h, g, j) {
        try {
            var d = h.getAttribute(j);
            if (String.isEmpty(d)) {
                d = g.getAttribute(j);
            }
            if (String.isEmpty(d)) {
                d = null;
            }
            return d;
        } finally {
            h = g = null;
        }
    };
    LEAP.GIS.i = function(G, q) {
        if (!q) {
            if (!event) {
                return;
            }
            q = event.srcElement;
        }
        if (!q) {
            return;
        }
        if (G != null) {
            var u = function() {
                LEAP.GIS.i(null, q);
                q = null;
            };
            setTimeout(u, G);
            return;
        }
        var l = q.parentElement;
        var A = null;
        if (l != null) {
            l.style.position = "relative";
            A = l.getAttribute("ctid");
            if (!A) {
                A = UUID.cID();
                l.setAttribute("ctid", A);
            }
        } else {
            return;
        }
        var o = l.getAttribute(commfields.ct);
        var x = l.getAttribute("usebaidu");
        var n = l.getAttribute("hidebar");
        var p = l.getAttribute("showbaselayer");
        var B = l.getAttribute("show3D");
        var M = l.getAttribute("show3Dalpha");
        var g = l.getAttribute("isweb");
        var C = l.getAttribute("maptype");
        var F = l.getAttribute("areamaskcolor");
        var m = l.getAttribute("areamaskalpha");
        var P = l.getAttribute("showmaptype");
        var D = l.getAttribute("subtype");
        var j = l.getAttribute("showarea");
        var w = l.getAttribute("showareamask");
        var J = l.getAttribute("shownavbar");
        var I = l.getAttribute("bgcolor");
        var h = l.getAttribute("mouseroll");
        var L = l.getAttribute("showcutline");
        if (o && o == LEAP.GIS.d) {
            var z = new Object();
            z.server = leapconfig.server;
            z.sessionid = leapclient.getsid();
            if (g != null && g == "1") {
                z.isweb = "1";
                z.refreurl = encodeURIComponent(__s__3.href);
            }
            if (window.LEAP_LID) {
                z.LEAP_LID = window.LEAP_LID;
            }
            if (window._leap_systemarea) {
                z.LSYS_AREA = window._leap_systemarea;
            }
            if (window._leap_systemname) {
                z.LSYS_NAME = window._leap_systemname;
            }
            if (window._leap_systemcode) {
                z.LSYS_CODE = window._leap_systemcode;
            }
            if (C != null) {
                z.maptype = C;
            }
            if (F != null) {
                z.areamaskcolor = F;
            }
            if (m != null) {
                z.areamaskalpha = m;
            }
            if (P != null) {
                z.showmaptype = P;
            }
            if (L != null) {
                z.showcutline = L;
            }
            if (D != null) {
                z.subtype = D;
            }
            if (j != null) {
                z.showarea = j;
            }
            if (w != null) {
                z.showareamask = w;
            }
            if (J != null) {
                z.showNavBar = J;
            }
            if (n != null && n) {
                z.hidebar = n;
            }
            if (p != null) {
                z.showbaselayer = p;
            }
            if (B != null && B) {
                z.show3D = B;
            }
            if (M != null && M) {
                z.show3Dalpha = M;
            }
            if (x) {
                z.usebaidu = x;
            }
            if (I) {
                z.map_bgColor = I;
            }
            if (h) {
                z.mouseroll = h;
            }
            if (LEAP.getUserInfo() != null && LEAP.getUserInfo().applicationname != null) {
                z.applicationname = LEAP.getUserInfo().applicationname;
            }
            z.showtype = 1;
            z.ctid = A;
            if (LEAP.getUserInfo()) {
                z.areaid = LEAP.getUserInfo().areaid;
                z.areaname = LEAP.getUserInfo().areaCNName;
                if (LEAP.getUserInfo().extendinfo) {
                    if (LEAP.getUserInfo().extendinfo.gis_showxz) {
                        z.showxz = LEAP.getUserInfo().extendinfo.gis_showxz;
                    }
                    if (LEAP.getUserInfo().extendinfo.gis_showdrawtool) {
                        z.showdrawtool = LEAP.getUserInfo().extendinfo.gis_showdrawtool;
                    }
                }
            }
            var d = [];
            var K = 0;
            for (var O in z) {
                var y = z[O];
                if (y && typeof y != "function") {
                    d.add(O + "=" + encodeURIComponent(y));
                }
            }
            var H = d.join("&");
            var r = LEAP.GIS.f.replaceall("@vars", H).replace("@id", A);
            l.innerHTML = r;
            LEAP.getElement("DIV[gisf=searchcon]", l).style.height = "100%";
            LEAP.addEvent(LEAP.getElement("DIV[gisf=searchcon]", l), "mouseenter", LEAP.GIS.___onDIVmouseover, null, null, true);
            LEAP.addEvent(LEAP.getElement("DIV[gisf=searchcon]", l), "mouseleave", LEAP.GIS.___onDIVmouseout, null, null, true);
            var N = document.createElement("img");
            N.style.cursor = "pointer";
            N.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif";
            N.style.position = "absolute";
            N.style.right = "100px";
            N.style.top = "20px";
            N.style.zIndex = "9999";
            N.style.display = "none";
            N.setAttribute("gisf", "searchconsplitimg");
            N.style.filter = "Alpha(Opacity=45)";
            l.appendChild(N);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", l), "click", LEAP.GIS.___moduleSplitClick, null, null, true);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", l), "mouseover", LEAP.GIS.___onSplitmouseover, null, null, true);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", l), "mouseout", LEAP.GIS.___onSplitmouseout, null, null, true);
        }
        if (q) {
            LEAP.removeElement(q, false);
        }
        l = q = null;
    };
    LEAP.GIS.___moduleSplitClick = function() {
        var h = LEAP.getElement("DIV[gisf=searchcon]");
        if (h != null) {
            if (h.style.display == "") {
                h.style.display = "none";
                var d = LEAP.getElement("img[gisf=searchconsplitimg]", h.parentElement);
                if (d != null) {
                    d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn03.gif";
                    d.style.right = "-0.5px";
                }
            } else {
                h.style.display = "";
                var d = LEAP.getElement("img[gisf=searchconsplitimg]", h.parentElement);
                if (d != null) {
                    var g = h.style.width;
                    if (g.indexOf("px")) {
                        g = g.replace("px", "");
                    }
                    d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif";
                    d.style.right = LEAP.tonum(g) - 1;
                }
            }
        }
    };
    LEAP.GIS.___onSplitmouseover = function() {
        var g = LEAP.getElement("DIV[gisf=searchcon]");
        var d = LEAP.getElement("img[gisf=searchconsplitimg]", g.parentElement);
        if (g != null) {
            g.style.filter = "Alpha(Opacity=100)";
        }
        if (d != null) {
            d.style.filter = "Alpha(Opacity=100)";
            if (g.style.display == "none") {
                d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn04.gif";
            } else {
                d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn02.gif";
            }
        }
        g = d = null;
    };
    LEAP.GIS.___onSplitmouseout = function() {
        var g = LEAP.getElement("DIV[gisf=searchcon]");
        var d = LEAP.getElement("img[gisf=searchconsplitimg]", g.parentElement);
        if (g != null) {
            g.style.filter = "Alpha(Opacity=45)";
        }
        if (d != null) {
            d.style.filter = "Alpha(Opacity=45)";
            if (g.style.display == "none") {
                d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn03.gif";
            } else {
                d.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif";
            }
        }
        g = d = null;
    };
    LEAP.GIS.hideModuleSplit = function() {
        var g = LEAP.getElement("DIV[gisf=searchcon]");
        var d = LEAP.getElement("img[gisf=searchconsplitimg]", g.parentElement);
        if (d != null) {
            d.style.display = "none";
        }
    };
    LEAP.GIS.showModuleSplit = function() {
        var j = LEAP.getElement("DIV[gisf=searchcon]");
        if (j != null) {
            var d = LEAP.getElement("img[gisf=searchconsplitimg]", j.parentElement);
            if (d != null) {
                var g = j.style.width;
                if (g.indexOf("px")) {
                    g = g.replace("px", "");
                }
                var h = document.body.clientHeight;
                h = (h - 68) / 2;
                d.style.right = LEAP.tonum(g) - 1;
                d.style.display = "";
                d.style.top = h;
            }
        }
    };
    LEAP.GIS.___onDIVmouseover = function(d) {
        var h = LEAP.getElement("DIV[gisf=searchcon]");
        var g = LEAP.getElement("img[gisf=searchconsplitimg]", h.parentElement);
        if (h != null) {
            h.style.filter = "Alpha(Opacity=100)";
        }
        if (g != null) {
            g.style.filter = "Alpha(Opacity=100)";
        }
        h = g = null;
    };
    LEAP.GIS.___onDIVmouseout = function(d) {
        var h = LEAP.getElement("DIV[gisf=searchcon]");
        var g = LEAP.getElement("img[gisf=searchconsplitimg]", h.parentElement);
        if (h != null) {
            h.style.filter = "Alpha(Opacity=45)";
        }
        if (g != null) {
            g.style.filter = "Alpha(Opacity=45)";
        }
        h = g = null;
    };
    LEAP.GIS.init = function() {
        ElementEventManager.addManagedEventType(LEAP.GIS.d, "GIS_initComplete");
        ElementEventManager.addManagedEventType(LEAP.GIS.d, "GIS_drawShapeComplete");
    };
    LEAP.GIS._flashcallback = function(h, g, d) {
        LEAP.asyn(LEAP.GIS.__flashcallback, null, 10, h, g, d);
    };
    LEAP.GIS.__flashcallback = function(y, r, n) {
        var h = LEAP.getElement("[ctid=" + y + "]");
        if (h) {
            if (n) {
                try {
                    n = JSON.parse(unescape(n));
                } catch (I) {}
            }
            if (r == "GIS_initComplete") {
                h.setAttribute("flashinited", "1");
                var A = document.getElementById(y);
                if (A) {
                    var v = A.getElementsByTagName("object");
                    if (v && v.length) {
                        A = v[0];
                    }
                    v = null;
                }
                if (A != null) {
                    A.focus();
                }
                A = null;
                if (LEAP.GISAPI._initComplete != null) {
                    LEAP.GISAPI._initComplete(n);
                }
            }
            ElementEventManager.handleEvent(h, r, n);
            var J = h.getAttribute("instance");
            try {
                if (J) {
                    var g = LEAP.getLoadedModule(J);
                    var B = null;
                    if (g) {
                        var u = g[r];
                        if (u) {
                            try {
                                B = u.call(g, n);
                            } catch (I) {
                                if (isdebug) {
                                    throw I;
                                }
                            } finally {
                                u = null;
                            }
                        }
                        if (r == "GIS_onPolygonHover") {
                            var o = n.layer.gisp_tipmodule;
                            if (o) {
                                var K = n.layer.text;
                                if (!String.isEmpty(n.layer.gisp_moduletitle)) {
                                    K = n.layer.gisp_moduletitle;
                                }
                                n.isgis = true;
                                n.isGIS = true;
                                n.GIS = true;
                                n.id = n.id;
                                var C = {
                                    name: o,
                                    title: K,
                                    autodispose: true,
                                    moduleLoadArg: n,
                                    pageMode: "view",
                                    height: n.layer.gisp_tipmoduleheight,
                                    width: n.layer.gisp_tipmodulewidth,
                                    giselement: h
                                };
                                if (!C.height) {
                                    C.height = 200;
                                }
                                if (!C.width) {
                                    C.width = 300;
                                }
                                LEAP.GIS.__removeHoverDIV();
                                if (!LEAP.GIS.hoverDIV) {
                                    var z = document.createElement("div");
                                    document.body.appendChild(z);
                                    z.style.position = "absolute";
                                    z.style.left = "0px";
                                    z.style.top = "0px";
                                    z.style.display = "none";
                                    z.style.zIndex = "99999";
                                    z.style.height = C.height + "px";
                                    z.style.width = C.width + "px";
                                    LEAP.GIS.hoverDIV = z;
                                    LEAP.addEvent(z, "mouseenter", LEAP.GIS.__hoverDIVMouseOver, null, null, true);
                                    LEAP.addEvent(z, "mouseleave", LEAP.GIS.__hoverDIVMouseOut, null, null, true);
                                }
                                LEAP.GIS.hoverDIV.innerHTML = "";
                                LEAP.GIS.hoverDIV.style.display = "block";
                                C.parent = LEAP.GIS.hoverDIV;
                                LEAP.GIS.hoverDIV.style.height = C.height;
                                LEAP.GIS.hoverDIV.style.width = C.width;
                                var p = LEAP.getAbsolutePos(h);
                                var x = LEAP.GIS.hoverDIV.style.width;
                                if (x.indexOf("px") >= 0) {
                                    x = x.replaceall("px", "");
                                }
                                x = parseInt(x);
                                if ((document.body.clientWidth - (n.layer.mouseX + p.x)) < x) {
                                    LEAP.GIS.hoverDIV.style.left = document.body.clientWidth - x - 20 + "px";
                                } else {
                                    LEAP.GIS.hoverDIV.style.left = n.layer.mouseX + p.x + "px";
                                }
                                var H = LEAP.GIS.hoverDIV.style.height;
                                if (H.indexOf("px") >= 0) {
                                    H = H.replaceall("px", "");
                                }
                                H = parseInt(H);
                                if ((document.body.clientHeight - (n.layer.mouseY + p.y)) < H) {
                                    LEAP.GIS.hoverDIV.style.top = document.body.clientHeight - H - 50 + "px";
                                } else {
                                    LEAP.GIS.hoverDIV.style.top = n.layer.mouseY + p.y + "px";
                                }
                                LEAP.GIS.houverDIVOUT = false;
                                LEAP.GIS.houverType = n.layer._refModuleType;
                                LEAP.GIS.hoverDIVID = n.id;
                                LEAP.GIS.hoverDIVLAYER = n.layer.id;
                                LEAP.GIS.hoverDIVRreModule = LEAP.loadModule2(C);
                            }
                        }
                        if (B == null || B == undefined || B == false) {
                            if (r == "GIS_onClick") {
                                if (n && n.layer && n.id) {
                                    var o = n.layer.refmodules;
                                    n.isgis = true;
                                    n.isGIS = true;
                                    n.GIS = true;
                                    var D = n.layer.gisp_moduletype;
                                    var j = n.layer.gisp_showopen;
                                    if (o) {
                                        if (j && j == 0) {
                                            var m = "";
                                            if (o.indexOf("/") >= 0) {
                                                if (o.indexOf("http") >= 0) {
                                                    var F = "scrollbars=1,resizable=1,menubar=0,location=0,status=0,toolbar=0,top=0,left=0,height=" + screen.availHeight + ",width=" + screen.availWidth;
                                                    var q = o + "?id=" + n.id;
                                                    window.open(q, null, F);
                                                } else {
                                                    m = LEAP.getURL();
                                                    var F = "scrollbars=1,resizable=1,menubar=0,location=0,status=0,toolbar=0,top=0,left=0,height=" + screen.availHeight + ",width=" + screen.availWidth;
                                                    var q = m + o + "?id=" + n.id;
                                                    window.open(q, "_blank", F);
                                                }
                                            } else {
                                                m = window.geturl(leapconfig.server + "LEAP/Resource/HTML/trusted/trustedload.html?module=" + o + "&text=" + encodeURIComponent(n.layer.text));
                                                if (n) {
                                                    var l = JSON.stringify(n);
                                                    m += "&arg=" + l;
                                                }
                                                window.open(m);
                                            }
                                        } else {
                                            var K = n.layer.text;
                                            if (!String.isEmpty(n.layer.gisp_moduletitle)) {
                                                K = n.layer.gisp_moduletitle;
                                            }
                                            var G = D;
                                            var C = {
                                                name: o,
                                                title: K,
                                                autodispose: true,
                                                moduleLoadArg: n,
                                                pageMode: G,
                                                height: n.layer.gisp_moduleheight,
                                                width: n.layer.gisp_modulewidth,
                                                giselement: h
                                            };
                                            if (!String.isEmpty(n.layer.gisp_moduletype)) {
                                                G = n.layer.gisp_moduletype;
                                            }
                                            if (G && G == "simpleview") {
                                                if (LEAP.GIS.preModule && LEAP.GIS.preModule.dispose) {
                                                    LEAP.GIS.preModule.dispose();
                                                }
                                                LEAP.GIS.preModule = LEAP.loadSimpleModule(C);
                                            } else {
                                                try {
                                                    var d = g.loadForm3(C);
                                                    var w = d.module;
                                                    if (w) {
                                                        if (w.pageModuleType) {
                                                            if (w.pageModuleType == "search") {} else {
                                                                if (!String.isEmpty(n.layer.gisp_moduletype) && (n.layer.gisp_moduletype == "view" || n.layer.gisp_moduletype == "modify")) {
                                                                    w.setPageDataByPK(n.id);
                                                                } else {
                                                                    if (w.pageModuleType == "tableinfo") {
                                                                        w.setPageDataByPK(n.id);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    C = null;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (r == "GIS_onOpenModule") {
                                    var o = n.layer.refmodules;
                                    var K = n.layer.text;
                                    if (!String.isEmpty(n.layer.gisp_moduletitle)) {
                                        K = n.layer.gisp_moduletitle;
                                    }
                                    n.isgis = true;
                                    n.isGIS = true;
                                    n.GIS = true;
                                    var C = {
                                        name: o,
                                        title: K,
                                        autodispose: true,
                                        moduleLoadArg: n,
                                        height: n.layer.gisp_moduleheight,
                                        width: n.layer.gisp_modulewidth,
                                        giselement: h
                                    };
                                    if (LEAP.GIS.preModule && LEAP.GIS.preModule.dispose) {
                                        LEAP.GIS.preModule.dispose();
                                    }
                                    LEAP.GIS.preModule = LEAP.loadSimpleModule(C);
                                } else {
                                    if (r == "GIS_onOpenCutLineModule") {
                                        var o = n.layer.gisp_cutlinemodule;
                                        var K = n.layer.text;
                                        if (!String.isEmpty(n.layer.gisp_moduletitle)) {
                                            K = n.layer.gisp_moduletitle;
                                        }
                                        n.isgis = true;
                                        n.isGIS = true;
                                        n.GIS = true;
                                        var C = {
                                            name: o,
                                            title: K,
                                            autodispose: true,
                                            moduleLoadArg: n,
                                            pageMode: "view",
                                            height: n.layer.gisp_cutlinemoduleh,
                                            width: n.layer.gisp_cutlinemodulew,
                                            giselement: h
                                        };
                                        if (LEAP.GIS.preModuleForm != null) {
                                            if (LEAP.GIS.preModuleForm.module.dispose != null) {
                                                LEAP.GIS.preModuleForm.module.dispose();
                                            }
                                            LEAP.GIS.preModuleForm.module = null;
                                        }
                                        if (LEAP.GIS.preModuleForm == null) {
                                            LEAP.GIS.preModuleForm = LEAP.form.create3(C);
                                        } else {
                                            LEAP.GIS.preModuleForm.show();
                                        }
                                    }
                                }
                            }
                        }
                        g = null;
                    }
                }
            } finally {
                h = null;
            }
        }
    };
    LEAP.GIS.__removeHoverDIV = function() {
        if (LEAP.GIS.hoverDIVRreModule && LEAP.GIS.hoverDIVRreModule.dispose) {
            LEAP.GIS.hoverDIVRreModule.dispose();
        }
        if (LEAP.GIS.hoverDIV) {
            LEAP.GIS.hoverDIV.style.display = "none";
            LEAP.GIS.hoverDIV.innerHTML = "";
        }
        LEAP.GIS.houverDIVIN = false;
        LEAP.GIS.houverDIVOUT = true;
        LEAP.GIS.hoverDIVRreModule = null;
        LEAP.GIS.hoverDIVID = null;
        LEAP.GIS.hoverDIVLAYER = null;
    };
    LEAP.GIS.__getHoverDIVProp = function() {
        var d = JSON.stringify({
            IN: LEAP.GIS.houverDIVIN,
            OUT: LEAP.GIS.houverDIVOUT,
            HASMODULE: LEAP.GIS.hoverDIVRreModule != null,
            ID: LEAP.GIS.hoverDIVID,
            LYR: LEAP.GIS.hoverDIVLAYER,
            TYPE: LEAP.GIS.houverType
        });
        return d;
    };
    LEAP.GIS.__setHoverDIVPos = function(d) {
        LEAP.asyn(LEAP.GIS.___setHoverDIVPos, null, 100, d);
    };
    LEAP.GIS.___setHoverDIVPos = function(h) {
        if (LEAP.GIS.hoverDIV && LEAP.GIS.hoverDIVRreModule) {
            var l = h.split(",");
            var g = LEAP.getElement("DIV[ctid=" + l[0] + "]");
            if (g) {
                var m = LEAP.getAbsolutePos(g);
                if (LEAP.GIS.hoverDIV != null) {
                    var j = LEAP.GIS.hoverDIV.style.width;
                    if (j.indexOf("px") >= 0) {
                        j = j.replaceall("px", "");
                    }
                    j = parseInt(j);
                    if ((document.body.clientWidth - (Number(l[1]) + m.x)) < j) {
                        LEAP.GIS.hoverDIV.style.left = document.body.clientWidth - j - 20 + "px";
                    } else {
                        LEAP.GIS.hoverDIV.style.left = Number(l[1]) + m.x + "px";
                    }
                    var d = LEAP.GIS.hoverDIV.style.height;
                    if (d.indexOf("px") >= 0) {
                        d = d.replaceall("px", "");
                    }
                    d = parseInt(d);
                    if ((document.body.clientHeight - (Number(l[2]) + m.y)) < d) {
                        LEAP.GIS.hoverDIV.style.top = document.body.clientHeight - d - 20 + "px";
                    } else {
                        LEAP.GIS.hoverDIV.style.top = Number(l[2]) + m.y + "px";
                    }
                } else {
                    LEAP.GIS.hoverDIV.style.top = Number(l[2]) + m.y;
                }
            }
            g = null;
        }
    };
    LEAP.GIS.__hoverDIVMouseOut = function(d) {
        LEAP.GIS.houverDIVOUT = true;
        LEAP.GIS.houverDIVIN = false;
        LEAP.GIS.hoverDIV.style.display = "none";
        if (LEAP.GIS.preModule && LEAP.GIS.preModule.dispose) {
            LEAP.GIS.preModule.dispose();
        }
        LEAP.GIS.hoverDIV.innerHTML = "";
    };
    LEAP.GIS.__hoverDIVMouseOver = function(d) {
        LEAP.GIS.houverDIVOUT = false;
        LEAP.GIS.houverDIVIN = true;
    };
    LEAP.GIS.api_getselectedlayer = function(d) {
        return LEAP.GIS._call(d, "api_getselectedlayer");
    };
    LEAP.GIS.map_getShowLayers = function(d) {
        return LEAP.GIS._call(d, "map_getShowLayers");
    };
    LEAP.GIS._call = function(m, x) {
        m = LEAP._check(m, LEAP.GIS.d);
        if (m == null) {
            return null;
        }
        try {
            var h = m.getAttribute("flashinited");
            var j = null;
            var g = null;
            if (h != null && h == "1") {
                var o = LEAP.ctid(m);
                j = document.getElementById(o);
                if (j) {
                    var n = j.getElementsByTagName("object");
                    if (n && n.length) {
                        g = n[0];
                    }
                    n = null;
                }
                if (g != null && g[x]) {
                    j = g;
                }
                if (j != null && j[x]) {
                    var v = null;
                    if (arguments.length > 2) {
                        v = [];
                        for (var l = 2; l < arguments.length; l++) {
                            var w = arguments[l];
                            if (w != null) {
                                var u = typeof(w);
                                if (u != "number" && u != "string") {
                                    v.add(JSON.stringify(w));
                                } else {
                                    v.add(w);
                                }
                            } else {
                                v.add(null);
                            }
                        }
                    }
                    var p = null;
                    try {
                        if (v != null) {
                            p = j[x].apply(j, v);
                        } else {
                            p = j[x].apply(j);
                        }
                    } catch (y) {}
                    if (p != null) {
                        var d = p;
                        try {
                            d = JSON.parse(unescape(p));
                        } catch (q) {}
                        return d;
                    }
                }
            }
        } finally {
            j = m = null;
        }
        return null;
    };
    LEAP.GIS.layer_addshowlayer = function(g, d) {
        return LEAP.GIS._call(g, "LayerFilter_AddShowLayer", d);
    };
    LEAP.GIS.layer_addshowlayer_sqlquery = function(h, g, d) {
        return LEAP.GIS._call(h, "LayerFilter_AddShowLayer_sqlfilter", g, d);
    };
    LEAP.GIS.layer_addshowlayer_queryFilter = function(g, d, j, h) {
        return LEAP.GIS._call(g, "LayerFilter_AddShowLayer_queryFilter", d, j, h);
    };
    LEAP.GIS.layer_areaclick3d = function(d, g, h) {
        return LEAP.GIS._call(d, "Layer_areaclick", g, h);
    };
    LEAP.GIS.layer_removeshowlayer = function(g, d) {
        return LEAP.GIS._call(g, "LayerFilter_RemoveShowLayer", d);
    };
    LEAP.GIS.layer_AddSearchLayer = function(g, d) {
        return LEAP.GIS._call(g, "LayerFilter_AddSearchLayer", d);
    };
    LEAP.GIS.layer_AddTransferLayer = function(g, d, l) {
        var j = {};
        j.curarea = l;
        j.areas = d;
        var h = JSON.stringify(j);
        return LEAP.GIS._call(g, "Layer_AddTransferLayer", h);
    };
    LEAP.GIS.layer_removeTransferLayer = function(d) {
        return LEAP.GIS._call(d, "Layer_RemoveTransferLayer");
    };
    LEAP.GIS.draw_begin = function(d, g) {
        LEAP.GIS._call(d, "draw_begin", g);
    };
    LEAP.GIS.draw_clear = function(d) {
        LEAP.GIS._call(d, "draw_clear");
    };
    LEAP.GIS.draw_end = function(d) {
        LEAP.GIS._call(d, "draw_end");
    };
    LEAP.GIS.draw_get = function(d) {
        return LEAP.GIS._call(d, "draw_get");
    };
    LEAP.GIS.draw_gets = function(d) {
        return LEAP.GIS._call(d, "draw_gets");
    };
    LEAP.GIS.draw_add = function(g, d, h) {
        LEAP.GIS._call(g, "draw_add", d, h);
    };
    LEAP.GIS.feature_set = function(d, g) {
        LEAP.GIS._call(d, "feature_set", g);
    };
    LEAP.GIS.feature_add = function(d, g) {
        LEAP.GIS._call(d, "feature_add", g);
    };
    LEAP.GIS.feature_show = function(d) {
        LEAP.GIS._call(d, "feature_show");
    };
    LEAP.GIS.feature_clear = function(d) {
        LEAP.GIS._call(d, "feature_clear");
    };
    LEAP.GIS.map_move = function(d, h, g) {
        LEAP.GIS._call(d, "map_move", h, g);
    };
    LEAP.GIS.map_getUserCP = function(d) {
        return LEAP.GIS._call(d, "map_getUserCP");
    };
    LEAP.GIS.map_getUserLevel = function(d) {
        return LEAP.GIS._call(d, "map_getUserLevel");
    };
    LEAP.GIS.gis_getCP = function(d, g) {
        return LEAP.GIS._call(d, "gis_getCP", g);
    };
    LEAP.GIS.pointTrack_show = function(h, j, l, d, g) {
        return LEAP.GIS._call(h, "pointTrack_show", j, l, d, g);
    };
    LEAP.GIS.pointTrack_show2 = function(d, g) {
        return LEAP.GIS._call(d, "pointTrack_show2", layerOrTable, g);
    };
    LEAP.GIS.pointTrack_showAndPlay = function(h, j, l, d, g) {
        return LEAP.GIS._call(h, "pointTrack_showAndPlay", j, l, d, g);
    };
    LEAP.GIS.pointTrack_showAndPlay2 = function(d, g, h) {
        return LEAP.GIS._call(d, "pointTrack_showAndPlay2", g, h);
    };
    LEAP.GIS.pointTrace_hide = function(d) {
        return LEAP.GIS._call(d, "pointTrace_hide");
    };
    LEAP.GIS.layer_remove = function(g, d) {
        return LEAP.GIS._call(g, "layer_remove", d);
    };
    LEAP.GIS.layer_refresh = function(g, d) {
        return LEAP.GIS._call(g, "layer_refresh", d);
    };
    LEAP.GIS.xzqh_move = function(d, g) {
        return LEAP.GIS._call(d, "xzqh_move", g);
    };
    LEAP.GIS.draw_setarea = function(d, g) {
        return LEAP.GIS._call(d, "draw_setarea", g);
    };
    LEAP.GIS.map_showBar = function(d) {
        return LEAP.GIS._call(d, "map_showBar");
    };
    LEAP.GIS.map_hideBar = function(d) {
        return LEAP.GIS._call(d, "map_hideBar");
    };
    LEAP.GIS.map_hideAreaLevel = function(d) {
        return LEAP.GIS._call(d, "map_hideAreaLevel");
    };
    LEAP.GIS.map_show2d = function(d) {
        return LEAP.GIS._call(d, "map_show2d");
    };
    LEAP.GIS.map_show3d = function(d) {
        return LEAP.GIS._call(d, "map_show3d");
    };
    LEAP.GIS.map_showSSLK = function(d) {
        return LEAP.GIS._call(d, "map_showSSLK");
    };
    LEAP.GIS._flashcall_getLeapCodeValue = function(g) {
        var d = LEAP.getCodeValue("lighttype");
        if (d != null) {
            return JSON.stringify(d);
        }
    };
    LEAP.GIS_flashCall_BuildSearchBuilder = function(g) {
        var d = new SearchBuilder("AAA");
        d.par("name", "1", 12);
        d.par("type", "1", 11);
        d.par("age", "35", 11);
        d.par("age", "72", 11);
        d.par("cdate", "35", 11);
        d.par("cdate", "72", 11);
        return JSON.stringify(d);
    };
    LEAP.GIS._flashcallremovesearchui = function(g, d) {
        LEAP.asyn(LEAP.GIS.__flashcallremovesearchui, null, 10, g, d);
    };
    LEAP.GIS.__flashcallremovesearchui = function(g, d) {
        LEAP.GIS.Searcher.hide(g, d);
    };
    LEAP.GIS._flashcallbuildsearchui = function(j, h, g, d) {
        LEAP.asyn(LEAP.GIS.__flashcallbuildsearchui, null, 10, j, h, g, d);
    };
    LEAP.GIS.__flashcallbuildsearchui = function(m, j, h, g) {
        if (g) {
            try {
                var d = JSON.parse(unescape(g));
                LEAP.GIS.Searcher.show(m, j, d);
            } catch (l) {
                if (isdebug) {
                    throw l;
                }
            }
        }
    };
    LEAP.GIS._flashcall_UserArea_CreateInputForm = function(d) {
        LEAP.GIS.GISUserArea.CreateInputForm(d);
    };
    LEAP.GIS._flashcall_UserArea_CreateListForm = function(d) {
        LEAP.GIS.GISUserArea.CreateListForm(d);
    };
    LEAP.GIS._flashcall_getUserArea = function(d) {
        LEAP.GIS.GISUserArea.getMyUserArea(d);
    };
    LEAP.GIS._flashcall_delUserAreaID = function(g, d) {
        LEAP.GIS.GISUserArea.delUserAreaID(g, d);
    };
    LEAP.GIS.UserArea_OnSearch = function(d, g) {
        LEAP.GIS._call(d, "LayerFilter_UserArea_OnSearch", g);
    };
    LEAP.GIS.UserArea_getDrawData = function(d) {
        return LEAP.GIS._call(d, "LyaerFilter_UserArea_getDrawData");
    };
    LEAP.GIS.UserArea_AddShapItem = function(d, g) {
        LEAP.GIS._call(d, "LyaerFilter_ShapBar_AddShapItem", g);
    };
    LEAP.GIS.UserArea_ClearShapItem = function(d) {
        LEAP.GIS._call(d, "LyaerFilter_ShapBar_ClearShapItem");
    };
    LEAP.GIS.questionanalyse_RemoveLayer = function(d, g) {
        LEAP.GIS._call(d, "LayerFilter_questionanalyse_removeLayer", g);
    };
    LEAP.GIS.questionanalyse_RemoveallLayer = function(d) {
        LEAP.GIS._call(d, "LayerFilter_questionanalyse_removeallLayer");
    };
    LEAP.GIS.questionanalyse_AddLayers = function(g, h, d) {
        LEAP.GIS._call(g, "LayerFilter_SearchModule_addLayer_areaidfilter", h, d);
    };
    LEAP.GIS._flashcall_BuildStatCutLine = function(m, h, j, g, d, o, n, l) {
        LEAP.asyn(LEAP.GIS.__flashcall_BuildStatCutLine, null, 10, m, h, j, g, d, o, n, l);
    };
    LEAP.GIS.__flashcall_BuildStatCutLine = function(d, p, l, o, n, m, j, h) {
        try {
            if (!LEAP.GIS.GISPStatCutLine._isshow) {
                LEAP.GIS.GISPStatCutLine._show(d, p, l, o, n, m, j, h);
            }
        } catch (g) {
            if (isdebug) {
                throw g;
            }
        }
    };
    LEAP.GIS._flashcall_HideStatCutLine = function() {
        LEAP.GIS.GISPStatCutLine._hide();
    };
    LEAP.GIS._flashcall_BuildStatDistribut = function(h, d, g) {
        LEAP.asyn(LEAP.GIS.__flashcall_BuildStatDistribut, null, 10, h, d, g);
    };
    LEAP.GIS.__flashcall_BuildStatDistribut = function(l, g, h) {
        if (g) {
            try {
                var d = JSON.parse(unescape(g));
                LEAP.GIS.GISPStatDistribut._show(l, d, h);
            } catch (j) {
                if (isdebug) {
                    throw j;
                }
            }
        }
    };
    LEAP.GIS._flashcall_HideStatDistribut = function() {
        LEAP.GIS.GISPStatDistribut._hide();
    };
    LEAP.GIS.callfalshfun_element = null;
    LEAP.GIS.callfalshfun = function(g, d) {
        if (LEAP.GIS.callfalshfun_element == null) {
            LEAP.GIS.callfalshfun_element = LEAP.getElement("div[ct=GIS]");
        }
        var h = JSON.stringify(d);
        LEAP.GIS._call(LEAP.GIS.callfalshfun_element, "flash_callservice", g, h);
    };
    LEAP.GIS._GISPStatDistribut_addCodeValuePar = function(d, j, g, h) {
        LEAP.GIS._call(d, "LayerFilter_Distribut_addCodeValuePar", g, j, LEAP.GIS.GISPStatDistribut._layername);
    };
    LEAP.GIS._flashcall_buildtipmodule = function(m, l, j, h, g, d, n) {
        LEAP.asyn(LEAP.GIS.___flashcallbuildtipmodule, null, 10, m, l, j, h, g, d, n);
    };
    LEAP.GIS.___flashcallbuildtipmodule = function(l, g, h, n, j, p, o) {
        if (n) {
            try {
                var d = JSON.parse(unescape(n));
                LEAP.GIS.GISTipModule._show(l, g, d, j, p, o);
            } catch (m) {
                if (isdebug) {
                    throw m;
                }
            }
        }
    };
    LEAP.GIS._flashcall_hidetipmodule = function() {
        LEAP.GIS.GISTipModule._hide();
    };
    LEAP.GIS._flashcall_buildsearchmodule = function(j, h, g, d) {
        LEAP.asyn(LEAP.GIS.___flashcallbuildsearchmodule, null, 10, j, h, g, d);
    };
    LEAP.GIS.___flashcallbuildsearchmodule = function(m, j, h, g) {
        if (g) {
            try {
                var d = JSON.parse(unescape(g));
                LEAP.GIS.GISSearchModule.show(m, j, d);
            } catch (l) {
                if (isdebug) {
                    throw l;
                }
            }
        }
    };
    LEAP.GIS._flashcall_SearchModule_reSearch = function(d) {
        LEAP.GIS.GISSearchModule.ReSearch(d);
    };
    LEAP.GIS._flashcall_SearchModule_hide = function(d) {
        LEAP.GIS.GISSearchModule.hide2(d);
    };
    LEAP.GIS._SearchModule_clearselectSearch = function(d) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_clearselectSearch");
    };
    LEAP.GIS._SearchModule_AddAreaFilter = function(d, g, h) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_addAreaFilter", h, g);
    };
    LEAP.GIS._SearchModule_onSearch = function(d, g) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_onSearch", g);
    };
    LEAP.GIS._SearchModule_onSelectIndexChange = function(d, g) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_onDataSelect", g);
    };
    LEAP.GIS._SearchModule_clearSearch = function(d) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_clearSearch");
    };
    LEAP.GIS._SearchModule_setBySearchModule = function(d, h, g) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_setBySearchModule", h, g);
    };
    LEAP.GIS._SearchModule_setBySearchModule_byonlyareachange = function(d, g, h) {
        LEAP.GIS._call(d, "LayerFilter_SearchModule_setBySearchModule_byonlyareachange", g, h);
    };
    LEAP.GIS._SearchModule_getAreaLayer = function(d) {
        return LEAP.GIS._call(d, "LayerFilter_SearchModule_getAreaLayer");
    };
    LEAP.GIS._flashcall_LayerFilter_reSearch = function(d) {
        LEAP.GIS.Searcher.reSearch(d);
    };
    LEAP.GIS._flashcall_LayerFilter_onDataSelected = function(g, h, d) {
        LEAP.GIS.Searcher.onDataSelected(g, h, d);
    };
    LEAP.GIS.map_getEnv = function(d) {
        return LEAP.GIS._call(d, "map_getEnv");
    };
    LEAP.GIS.map_getEnvQuery = function(g) {
        var d = LEAP.GIS._call(g, "map_getEnvQuery");
        if (d) {
            return d.value;
        }
        return null;
    };
    LEAP.GIS._flashcall_Stater_show = function(j, g) {
        if (g) {
            try {
                var d = JSON.parse(unescape(g));
                LEAP.GIS.GISStater.show(j, d);
            } catch (h) {
                if (isdebug) {
                    throw h;
                }
            }
        }
    };
    LEAP.GIS._flashcall_Stater_Apply = function(l, g, h) {
        if (g) {
            try {
                var d = JSON.parse(unescape(g));
                LEAP.GIS.GISStater.apply(l, d, JSON.parse(unescape(h)));
            } catch (j) {
                if (isdebug) {

                    throw j;
                }
            }
        }
    };
    LEAP.GIS.map_beginGetClickedPoint = function(d) {
        LEAP.GIS._call(d, "map_beginGetClickedPoint");
    };
    LEAP.GIS.api_polygon_union = function(d) {
        if (!(d instanceof Array)) {
            d = [d];
        }
        return LEAP.request("GIS_API_polygon_union", {
            par: d
        });
    };
    LEAP.GIS.api_polygon_union2 = function(d) {
        if (!(d instanceof Array)) {
            d = [d];
        }
        return LEAP.request("GIS_API_polygon_union2", {
            par: d
        });
    };
    LEAP.GIS.api_pointSearch = function(j, g, d, h) {
        return LEAP.request("GIS_API_pointSearch", {
            ptStr: j,
            layerName: g,
            radius: d,
            type: h
        });
    };
    LEAP.GIS.api_getScale = function(d) {
        return LEAP.GIS._call(d, "api_getScale");
    };
    LEAP.GIS.map_showLayer = function(g, d) {
        LEAP.GIS._call(g, "map_showLayer", d);
    };
    LEAP.GIS.map_removeShowLayer = function(g, d) {
        LEAP.GIS._call(g, "map_removeShowLayer", d);
    };
    LEAP.GIS.map_removeAllShowLayer = function(d) {
        LEAP.GIS._call(d, "map_removeAllShowLayer");
    };
    LEAP.GIS.map_getLevel = function(d) {
        return LEAP.GIS._call(d, "map_getLevel");
    };
    LEAP.GIS.Layer_buildlayer = function(d, g) {
        return LEAP.GIS._call(d, "Layer_buildlayer", g);
    };
    LEAP.GIS.getPintArea = function(g, d, h) {
        return LEAP.request("GIS_API_getPintArea", {
            arealevel: g,
            x: d,
            y: h
        });
    };
    LEAP.GIS.LayerFilter_getSearchLayerDefs = function(d) {
        return LEAP.GIS._call(d, "LayerFilter_getSearchLayerDefs");
    };
    LEAP.GIS._flashcall_JJ_hide = function() {
        var d = LEAP.getElements("[ctname=gis_jj]");
        if (d) {
            LEAP.removeElement(d, true);
        }
    };
    LEAP.GIS._flashcall_JJ_show = function(j, d) {
        LEAP.GIS._flashcall_JJ_hide();
        var h = LEAP.getElement("[ctid=" + j + "]");
        if (h) {
            var g = document.createElement("iframe");
            g.src = leapconfig.server + "LEAP/Resource/flash/GIS/jj/jj.html?height=" + (h.offsetHeight - 4);
            g.style.height = "100%";
            g.style.width = "100%";
            g.style.border = "0";
            g.style.padding = "0";
            g.style.position = "absolute";
            g.style.left = "0px";
            g.style.top = "0px";
            g.setAttribute("ctname", "gis_jj");
            h.appendChild(g);
        }
    };
    LEAP.GIS._flashcall_Customer_show = function(j, d) {
        LEAP.GIS._flashcall_Customer_hide();
        var h = LEAP.getElement("[ctid=" + j + "]");
        if (h) {
            var g = document.createElement("iframe");
            g.src = leapconfig.server + "LEAP/Resource/flash/GIS/customer/customer.html?url=" + (d);
            g.style.height = "100%";
            g.style.width = "100%";
            g.style.border = "0";
            g.style.padding = "0";
            g.style.position = "absolute";
            g.style.left = "0px";
            g.style.top = "0px";
            g.setAttribute("ctname", "gis_customer");
            h.appendChild(g);
        }
    };
    LEAP.GIS._flashcall_Customer_hide = function() {
        var d = LEAP.getElements("[ctname=gis_customer]");
        if (d) {
            LEAP.removeElement(d, true);
        }
    };
    LEAP.GIS._flashcall_3D_show = function(d) {
        window.open(leapconfig.server + "LEAP/SZLDASModule/Modules_3D/szldas_3dmap.html");
    };
    LEAP.GIS.init();
    LEAP.GISAPI = {};
    LEAP.GISAPI.d = "GIS";
    LEAP.GISAPI.e = null;
    LEAP.GISAPI.arg = null;
    LEAP.GISAPI.LayerObj = {
        name: "古树名目",
        optiontype: "add",
        showname: "添加图层",
        resourcetype: 51,
        datamodule: "GIS01古树名木",
        gisp_timeline: 0,
        gisp_layertype: 1,
        gisp_areaclick: 0,
        refmodules: null,
        gisp_showopen: null,
        gisp_searchservice: null,
        gisp_moduleheight: null,
        gisp_modulewidth: null,
        gisp_moduletitle: null,
        gisp_moduletype: null,
        gisp_showicon: 1,
        icon: null,
        gisp_showlabel: 1,
        gisp_showlabellevel: null,
        gisp_showlabelreuslt: null,
        gisp_alpha: null,
        gisp_statcirclebg: 0,
        gisp_linewidth: null,
        gisp_linecolor: null,
        gisp_tipmodule: null,
        gisp_tipmodulewidth: null,
        gisp_tipmoduleheight: null,
        gisp_tipmoduletype: null,
        gisp_tipexp: null,
        gisp_layerautoredraw: null,
        gisp_pointthinning: null,
        gisp_searchcache: null,
        remarks: null,
        datafilter: null
    };
    LEAP.GISAPI.setMap = function(g, d, h) {
        if (h == null) {
            h = false;
            if (LEAP.GISAPI.e == null) {
                h = true;
            } else {
                if (LEAP.GISAPI.e != g) {
                    h = true;
                }
            }
        }
        LEAP.GISAPI._checkArg(d, h);
        if (g == null) {
            return;
        }
        g = LEAP._check(g, LEAP.GISAPI.d);
        if (g == null) {
            return;
        }
        LEAP.GISAPI.e = g;
        LEAP.GISAPI.arg = d;
        LEAP.GISAPI._addEvent();
        if (h) {
            LEAP.GISAPI.init1();
        } else {
            LEAP.GISAPI._reBuild();
        }
    };
    LEAP.GISAPI.setOption = function(g, d, h) {
        if (h == null) {
            h = false;
            if (LEAP.GISAPI.e == null) {
                h = true;
            } else {
                if (LEAP.GISAPI.e != g) {
                    h = true;
                }
            }
        }
        LEAP.GISAPI._checkArg(d, h);
        if (g == null) {
            return;
        }
        g = LEAP._check(g, LEAP.GISAPI.d);
        if (g == null) {
            return;
        }
        LEAP.GISAPI.e = g;
        LEAP.GISAPI.arg = d;
        LEAP.GISAPI._addEvent();
        if (h) {
            LEAP.GISAPI.init();
        } else {
            LEAP.GISAPI._reBuild();
        }
    };
    LEAP.GISAPI.init = function() {
        var o = LEAP.GISAPI.e.getAttribute(commfields.ct);
        var u = LEAP.GISAPI.arg.usebaidu;
        var G = LEAP.GISAPI.arg.showbaselayer_c;
        var n = LEAP.GISAPI.arg.hidebar;
        var p = LEAP.GISAPI.arg.showbaselayer;
        var z = LEAP.GISAPI.arg.show3D;
        var K = LEAP.GISAPI.arg.show3Dalpha;
        var g = LEAP.GISAPI.arg.isweb;
        var A = LEAP.GISAPI.arg.maptype;
        var C = LEAP.GISAPI.arg.areamaskcolor;
        var m = LEAP.GISAPI.arg.areamaskalpha;
        var N = LEAP.GISAPI.arg.showmaptype;
        var B = LEAP.GISAPI.arg.subtype;
        var j = LEAP.GISAPI.arg.runingStyle;
        var H = LEAP.GISAPI.arg.shownavbar;
        var l = LEAP.GISAPI.arg.showarea;
        var r = LEAP.GISAPI.arg.showareamask;
        var J = LEAP.GISAPI.arg.showcutline;
        var F = LEAP.GISAPI.arg.bgcolor;
        var h = LEAP.GISAPI.arg.mouseroll;
        if (o && o == LEAP.GIS.d) {
            var y = new Object();
            y.server = leapconfig.server;
            y.sessionid = leapclient.getsid();
            if (g != null && g == "1") {
                y.isweb = "1";
                y.refreurl = encodeURIComponent(__s__3.href);
            }
            if (window.LEAP_LID) {
                y.LEAP_LID = window.LEAP_LID;
            }
            if (window._leap_systemarea) {
                y.LSYS_AREA = window._leap_systemarea;
            }
            if (window._leap_systemname) {
                y.LSYS_NAME = window._leap_systemname;
            }
            if (window._leap_systemcode) {
                y.LSYS_CODE = window._leap_systemcode;
            }
            if (A != null) {
                y.maptype = A;
            }
            if (C != null) {
                y.areamaskcolor = C;
            }
            if (m != null) {
                y.areamaskalpha = m;
            }
            if (N != null) {
                y.showmaptype = N;
            }
            if (B != null) {
                y.subtype = B;
            }
            if (j != null) {
                y.runingStyle = JSON.stringify(j);
            }
            if (l != null) {
                y.showarea = l;
            }
            if (r != null) {
                y.showareamask = r;
            }
            if (J != null) {
                y.showcutline = J;
            }
            if (H != null) {
                y.showNavBar = H;
            }
            if (n != null && n) {
                y.hidebar = n;
            }
            if (G != null) {
                y.showbaselayer_c = G;
            }
            if (p != null) {
                y.showbaselayer = p;
            }
            if (z != null) {
                y.show3D = z;
            }
            if (K != null && K) {
                y.show3Dalpha = K;
            }
            if (u) {
                y.usebaidu = u;
            }
            if (F != null) {
                y.map_bgColor = F;
            }
            if (h != null) {
                y.mouseroll = h;
            }
            if (LEAP.getUserInfo() != null && LEAP.getUserInfo().applicationname != null) {
                y.applicationname = LEAP.getUserInfo().applicationname;
            }
            y.showtype = 1;
            var x = null;
            if (LEAP.GISAPI.e != null) {
                LEAP.GISAPI.e.style.position = "relative";
                x = LEAP.GISAPI.e.getAttribute("ctid");
                if (!x) {
                    x = UUID.cID();
                    LEAP.GISAPI.e.setAttribute("ctid", x);
                }
            } else {
                return;
            }
            y.ctid = x;
            if (LEAP.getUserInfo()) {
                y.areaid = LEAP.getUserInfo().areaid;
                y.areaname = LEAP.getUserInfo().areaCNName;
                if (LEAP.getUserInfo().extendinfo) {
                    if (LEAP.getUserInfo().extendinfo.gis_showxz) {
                        y.showxz = LEAP.getUserInfo().extendinfo.gis_showxz;
                    }
                    if (LEAP.getUserInfo().extendinfo.gis_showdrawtool) {
                        y.showdrawtool = LEAP.getUserInfo().extendinfo.gis_showdrawtool;
                    }
                }
            }
            var d = [];
            var I = 0;
            for (var M in y) {
                var w = y[M];
                if (w != null && typeof w != "function") {
                    d.add(M + "=" + encodeURIComponent(w));
                }
            }
            var D = d.join("&");
            var q = LEAP.GIS.f.replaceall("@vars", D).replace("@id", x);
            if (LEAP.GISAPI.arg.loadmodule != null && LEAP.GISAPI.arg.loadmodule == "simple") {
                q = q.replaceall("LGIS.swf", "LGISA.swf");
            } else {
                if (LEAP.GISAPI.arg.loadmodule != null && LEAP.GISAPI.arg.loadmodule == "simple1") {
                    q = q.replaceall("LGIS.swf", "LGISD.swf");
                }
            }
            LEAP.GISAPI.e.innerHTML = q;
            LEAP.getElement("DIV[gisf=searchcon]", LEAP.GISAPI.e).style.height = "100%";
            LEAP.addEvent(LEAP.getElement("DIV[gisf=searchcon]", LEAP.GISAPI.e), "mouseenter", LEAP.GIS.___onDIVmouseover, null, null, true);
            LEAP.addEvent(LEAP.getElement("DIV[gisf=searchcon]", LEAP.GISAPI.e), "mouseleave", LEAP.GIS.___onDIVmouseout, null, null, true);
            var L = document.createElement("img");
            L.style.cursor = "pointer";
            L.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif";
            L.style.position = "absolute";
            L.style.right = "100px";
            L.style.top = "20px";
            L.style.zIndex = "9999";
            L.style.display = "none";
            L.gisf = "searchconsplitimg";
            L.style.filter = "Alpha(Opacity=45)";
            LEAP.GISAPI.e.appendChild(L);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", LEAP.GISAPI.e), "click", LEAP.GIS.___moduleSplitClick, null, null, true);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", LEAP.GISAPI.e), "mouseover", LEAP.GIS.___onSplitmouseover, null, null, true);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", LEAP.GISAPI.e), "mouseout", LEAP.GIS.___onSplitmouseout, null, null, true);
        }
    };
    LEAP.GISAPI.init1 = function() {
        var o = LEAP.GISAPI.e.getAttribute(commfields.ct);
        var u = LEAP.GISAPI.arg.usebaidu;
        var G = LEAP.GISAPI.arg.showbaselayer_c;
        var n = LEAP.GISAPI.arg.hidebar;
        var p = LEAP.GISAPI.arg.showbaselayer;
        var g = LEAP.GISAPI.arg.isweb;
        var A = LEAP.GISAPI.arg.maptype;
        var C = LEAP.GISAPI.arg.areamaskcolor;
        var m = LEAP.GISAPI.arg.areamaskalpha;
        var M = LEAP.GISAPI.arg.showmaptype;
        var B = LEAP.GISAPI.arg.subtype;
        var j = LEAP.GISAPI.arg.runingStyle;
        var H = LEAP.GISAPI.arg.shownavbar;
        var l = LEAP.GISAPI.arg.showarea;
        var r = LEAP.GISAPI.arg.showareamask;
        var F = LEAP.GISAPI.arg.bgcolor;
        var J = LEAP.GISAPI.arg.showcutline;
        var z = LEAP.GISAPI.arg.refreshnotice;
        var h = LEAP.GISAPI.arg.mouseroll;
        if (o && o == LEAP.GIS.d) {
            var y = new Object();
            y.server = leapconfig.server;
            y.sessionid = leapclient.getsid();
            if (g != null && g == "1") {
                y.isweb = "1";
                y.refreurl = encodeURIComponent(__s__3.href);
            }
            if (window.LEAP_LID) {
                y.LEAP_LID = window.LEAP_LID;
            }
            if (window._leap_systemarea) {
                y.LSYS_AREA = window._leap_systemarea;
            }
            if (window._leap_systemname) {
                y.LSYS_NAME = window._leap_systemname;
            }
            if (window._leap_systemcode) {
                y.LSYS_CODE = window._leap_systemcode;
            }
            if (A != null) {
                y.maptype = A;
            }
            if (C != null) {
                y.areamaskcolor = C;
            }
            if (m != null) {
                y.areamaskalpha = m;
            }
            if (M != null) {
                y.showmaptype = M;
            }
            if (B != null) {
                y.subtype = B;
            }
            if (j != null) {
                y.runingStyle = JSON.stringify(j);
            }
            if (l != null) {
                y.showarea = l;
            }
            if (r != null) {
                y.showareamask = r;
            }
            if (H != null) {
                y.showNavBar = H;
            }
            if (n != null && n) {
                y.hidebar = n;
            }
            if (p != null) {
                y.showbaselayer = p;
            }
            if (u) {
                y.usebaidu = u;
            }
            if (F != null) {
                y.map_bgColor = F;
            }
            if (h != null) {
                y.mouseroll = h;
            }
            if (z != null) {
                y.refreshnotice = z;
            }
            if (J != null) {
                y.showcutline = J;
            }
            if (G != null) {
                y.showbaselayer_c = G;
            }
            if (LEAP.getUserInfo() != null && LEAP.getUserInfo().applicationname != null) {
                y.applicationname = LEAP.getUserInfo().applicationname;
            }
            y.showtype = 1;
            var x = null;
            if (LEAP.GISAPI.e != null) {
                LEAP.GISAPI.e.style.position = "relative";
                x = LEAP.GISAPI.e.getAttribute("ctid");
                if (!x) {
                    x = UUID.cID();
                    LEAP.GISAPI.e.setAttribute("ctid", x);
                }
            } else {
                return;
            }
            y.ctid = x;
            if (LEAP.getUserInfo()) {
                y.areaid = LEAP.getUserInfo().areaid;
                y.areaname = LEAP.getUserInfo().areaCNName;
                if (LEAP.getUserInfo().extendinfo) {
                    if (LEAP.getUserInfo().extendinfo.gis_showxz) {
                        y.showxz = LEAP.getUserInfo().extendinfo.gis_showxz;
                    }
                    if (LEAP.getUserInfo().extendinfo.gis_showdrawtool) {
                        y.showdrawtool = LEAP.getUserInfo().extendinfo.gis_showdrawtool;
                    }
                }
            }
            var d = [];
            var I = 0;
            for (var L in y) {
                var w = y[L];
                if (w != null && typeof w != "function") {
                    d.add(L + "=" + encodeURIComponent(w));
                }
            }
            var D = d.join("&");
            var q = LEAP.GIS.f.replaceall("@vars", D).replace("@id", x);
            q = q.replaceall("LGIS.swf", "LGISD.swf");
            LEAP.GISAPI.e.innerHTML = q;
            LEAP.getElement("DIV[gisf=searchcon]", LEAP.GISAPI.e).style.height = "100%";
            LEAP.addEvent(LEAP.getElement("DIV[gisf=searchcon]", LEAP.GISAPI.e), "mouseenter", LEAP.GIS.___onDIVmouseover, null, null, true);
            LEAP.addEvent(LEAP.getElement("DIV[gisf=searchcon]", LEAP.GISAPI.e), "mouseleave", LEAP.GIS.___onDIVmouseout, null, null, true);
            var K = document.createElement("img");
            K.style.cursor = "pointer";
            K.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif";
            K.style.position = "absolute";
            K.style.right = "100px";
            K.style.top = "20px";
            K.style.zIndex = "9999";
            K.style.display = "none";
            K.gisf = "searchconsplitimg";
            K.style.filter = "Alpha(Opacity=45)";
            LEAP.GISAPI.e.appendChild(K);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", LEAP.GISAPI.e), "click", LEAP.GIS.___moduleSplitClick, null, null, true);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", LEAP.GISAPI.e), "mouseover", LEAP.GIS.___onSplitmouseover, null, null, true);
            LEAP.addEvent(LEAP.getElement("img[gisf=searchconsplitimg]", LEAP.GISAPI.e), "mouseout", LEAP.GIS.___onSplitmouseout, null, null, true);
        }
    };
    LEAP.GISAPI._areaborder = function() {
        if (LEAP.GISAPI.arg) {
            var g = LEAP.GISAPI.arg.areaborder;
            if (g != null) {
                var d = g.subtype;
                if (d == null) {
                    d = 1;
                }
                if (g.areaid != null && g.areaid != "") {
                    LEAP.GIS._call(LEAP.GISAPI.e, "xzqh_bianjie", g.areaid, d);
                }
            }
        }
    };
    LEAP.GISAPI._maplocation = function() {
        if (LEAP.GISAPI.arg) {
            var g = LEAP.GISAPI.arg.mapmove;
            if (g != null) {
                var d = g.maplevel;
                if (!d) {
                    d = LEAP.GIS.map_getUserLevel(LEAP.GISAPI.e);
                }
                if (g.centerpoint != null && g.centerpoint != "") {
                    LEAP.GIS.map_move(LEAP.GISAPI.e, g.centerpoint, d);
                } else {
                    if (g.areaid != null && g.areaid != "") {
                        var h = g.areaid;
                        while (h.length < 18) {
                            h = h + "0";
                        }
                        LEAP.GIS.xzqh_move(LEAP.GISAPI.e, h);
                    } else {
                        var j = LEAP.GIS.map_getUserCP(LEAP.GISAPI.e);
                        if (j != null) {
                            LEAP.GIS.map_move(LEAP.GISAPI.e, j.x + "," + j.y, d);
                        }
                    }
                }
            }
        }
    };
    LEAP.GISAPI._mapLevel = function() {
        if (LEAP.GISAPI.arg) {
            var d = LEAP.GISAPI.arg.maplevel;
            if (d != null) {
                var g = LEAP.GIS.map_getUserCP(LEAP.GISAPI.e);
                LEAP.GIS.map_move(LEAP.GISAPI.e, g.x + "," + g.y, d);
            }
        }
    };
    LEAP.GISAPI._addLayer = function() {
        if (LEAP.GISAPI.arg) {
            var d = LEAP.GISAPI.arg.layers;
            if (d != null && d.length > 0) {
                LEAP.GIS.Layer_buildlayer(LEAP.GISAPI.e, d);
            }
        }
    };
    LEAP.GISAPI._call = function() {
        if (LEAP.GISAPI.arg) {
            if (LEAP.GISAPI.arg.callfuns) {
                var g = LEAP.GISAPI.arg.callfuns;
                for (var h = 0; h < g.length; h++) {
                    var d = [];
                    d.push(LEAP.GISAPI.e);
                    d.push(g[h].name);
                    for (key in g[h].args) {
                        d.push(g[h].args[key]);
                    }
                    LEAP.GIS._call.apply(LEAP.GIS, d);
                }
            }
        }
    };
    LEAP.GISAPI._addEvent = function() {
        var h = LEAP.GISAPI.arg.events;
        if (h != null) {
            for (var d = 0; d < h.length; d++) {
                var j = h[d];
                if (j == null) {
                    continue;
                }
                var g = window;
                if (j.domain != null) {
                    g = j.domain;
                }
                LEAP.GISAPI.setEvent(LEAP.GISAPI.e, j.name, j.fun, g);
            }
        }
    };
    LEAP.GISAPI.setEvent = function(g, j, d, h) {
        g["_" + j] = d;
        d._domain = h;
    };
    LEAP.GISAPI._checkArg = function(d, g) {
        if (g) {
            if (d.usebaidu == null) {
                d.usebaidu = false;
            }
            if (d.hidebar == null) {
                d.hidebar = false;
            }
            if (d.showbaselayer == null) {
                d.showbaselayer = true;
            }
        }
        return d;
    };
    LEAP.GISAPI._initComplete = function(d) {
        LEAP.GISAPI._reBuild();
    };
    LEAP.GISAPI._reBuild = function() {
        LEAP.GISAPI._maplocation();
        LEAP.GISAPI._areaborder();
        LEAP.GISAPI._addLayer();
        LEAP.GISAPI._mapLevel();
        LEAP.GISAPI._call();
    };
    LEAP.GISGridstat = {};
    LEAP.GISGridstat.d = "GISGridstat";
    LEAP.GISGridstat.f = '<DIV gisf="searchcon"  style="filter:Alpha(Opacity=45);position:absolute;right:0;top:27px;background-color:white;WIDTH: 300px;height:300px;display:none;overflow:hidden;"><DIV gisf="searchconContent" style="width:100%;height:100%;display:block;overflow:hidden;"></DIV></DIV><DIV style="width:100%;height:100%">     <object id="@id" ctf="GIS" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100%" height="100%" align="middle"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@url@gv" width="100%" height="100%"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="@serverLEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>   </DIV>'.replaceall("@server", leapconfig.server).replaceall("@url", leapconfig.server + "LEAP/Resource/flash/chart/swf/grid_stat.swf").replaceall("@gv", leapclient.getVersionStr());
    LEAP.GISGridstat.i = function(l, d) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (l != null) {
            var r = function() {
                LEAP.GISGridstat.i(null, d);
                d = null;
            };
            setTimeout(r, l);
            return;
        }
        var j = d.parentElement;
        var n = null;
        if (j != null) {
            j.style.position = "relative";
            n = j.getAttribute("ctid");
            if (!n) {
                n = UUID.cID();
                j.setAttribute("ctid", n);
            }
        } else {
            return;
        }
        var o = j.getAttribute(commfields.ct);
        if (o && o == LEAP.GISGridstat.d) {
            var x = new Object();
            x.ctid = n;
            var m = [];
            var q = 0;
            for (var w in x) {
                var u = x[w];
                if (u && typeof u != "function") {
                    m.add(w + "=" + encodeURIComponent(u));
                }
            }
            var p = m.join("&");
            var g = LEAP.GISGridstat.f.replaceall("@vars", p).replace("@id", n);
            j.innerHTML = g;
            LEAP.getElement("DIV[gisf=searchcon]", j).style.height = (j.clientHeight - 27) + "px";
            var h = document.createElement("img");
            h.style.cursor = "pointer";
            h.src = leapconfig.server + "LEAP/Resource/images/GIS/ModuleSplit/shrink_btn01.gif";
            h.style.position = "absolute";
            h.style.right = "100px";
            h.style.top = "20px";
            h.style.zIndex = "9999";
            h.style.display = "none";
            h.gisf = "searchconsplitimg";
            h.style.filter = "Alpha(Opacity=45)";
            j.appendChild(h);
        }
    };
    LEAP.GISGridstat._flashcallback = function(h, g, d) {
        LEAP.asyn(LEAP.GISGridstat.__flashcallback, null, 10, h, g, d);
    };
    LEAP.GISGridstat.__flashcallback = function(l, p, r) {
        var h = LEAP.getElement("[ctid=" + l + "]");
        if (h) {
            if (r) {
                try {
                    r = JSON.parse(unescape(r));
                } catch (m) {}
            }
            if (p == "GISGrid_initComplete") {
                h.setAttribute("flashinited", "1");
                var g = document.getElementById(l);
                if (g) {
                    var j = g.getElementsByTagName("object");
                    if (j && j.length) {
                        g = j[0];
                    }
                    j = null;
                }
                if (g != null) {
                    g.focus();
                }
                g = null;
            }
            var q = h.getAttribute("instance");
            try {
                if (q) {
                    var d = LEAP.getLoadedModule(q);
                    var n = null;
                    if (d) {
                        var o = d[p];
                        if (o) {
                            try {
                                n = o.call(d, r);
                            } catch (m) {
                                if (isdebug) {
                                    throw m;
                                }
                            } finally {
                                d = o = null;
                            }
                        }
                        d = null;
                    }
                }
            } finally {
                h = null;
            }
        }
    };
    LEAP.GISGridstat.setValue = function(g, h) {
        var d = LEAP.getElement("[ctid=" + g + "]");
        return LEAP.GISGridstat._call(d, "setgridstatValue", h);
    };
    LEAP.GISGridstat._call = function(j, w) {
        j = LEAP._check(j, LEAP.GISGridstat.d);
        if (j == null) {
            return null;
        }
        try {
            var g = j.getAttribute("flashinited");
            var h = null;
            if (g != null && g == "1") {
                var n = LEAP.ctid(j);
                h = document.getElementById(n);
                if (h) {
                    var m = h.getElementsByTagName("object");
                    if (m && m.length) {
                        h = m[0];
                    }
                    m = null;
                }
                if (h != null && h[w]) {
                    var u = null;
                    if (arguments.length > 2) {
                        u = [];
                        for (var l = 2; l < arguments.length; l++) {
                            var v = arguments[l];
                            if (v != null) {
                                var q = typeof(v);
                                if (q != "number" && q != "string") {
                                    u.add(JSON.stringify(v));
                                } else {
                                    u.add(v);
                                }
                            } else {
                                u.add(null);
                            }
                        }
                    }
                    var o = null;
                    try {
                        if (u != null) {
                            o = h[w].apply(h, u);
                        } else {
                            o = h[w].apply(h);
                        }
                    } catch (x) {}
                    if (o != null) {
                        var d = o;
                        try {
                            d = JSON.parse(unescape(o));
                        } catch (p) {}
                        return d;
                    }
                }
            }
        } finally {
            h = j = null;
        }
        return null;
    };
    LEAP.GIS.GISPStatDistribut = {};
    LEAP.GIS.GISPStatDistribut._module = null;
    LEAP.GIS.GISPStatDistribut._sizeflag = true;
    LEAP.GIS.GISPStatDistribut._layername = null;
    LEAP.GIS.GISPStatDistribut._show = function(m, d, j) {
        var l = LEAP.getElement("[ctid=" + m + "]");
        if (!l) {
            return;
        }
        var p = "bingzhuangtu";
        if (p == null || p == "") {
            return;
        }
        LEAP.GIS.GISPStatDistribut._layername = j;
        var g = "410px";
        var q = "420px";
        LEAP.GIS.GISPStatDistribut._hide();
        var n = document.body.clientWidth;
        var o = document.body.clientHeight;
        var h = {
            name: p,
            title: "",
            autodispose: true,
            moduleLoadArg: {
                arg: d.gisp_statdistribute
            },
            pageMode: "view",
            height: q,
            width: g,
            giselement: l,
            autoposition: false
        };
        LEAP.GIS.GISPStatDistribut._module = LEAP.loadSimpleModule(h);
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.top = "";
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.right = "";
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.bottom = "0px";
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.left = "0px";
        LEAP.GIS.GISPStatDistribut._module.layername = j;
    };
    LEAP.GIS.GISPStatDistribut._hide = function() {
        if (LEAP.GIS.GISPStatDistribut._module != null && LEAP.GIS.GISPStatDistribut._module.dispose != null) {
            LEAP.GIS.GISPStatDistribut._module.dispose();
            LEAP.GIS.GISPStatDistribut._module = null;
        }
        LEAP.GIS.GISPStatDistribut._module = null;
    };
    LEAP.GIS.GISPStatDistribut.ReSize = function() {
        if (LEAP.GIS.GISPStatDistribut._module != null) {
            if (LEAP.GIS.GISPStatDistribut._sizeflag) {
                LEAP.GIS.GISPStatDistribut._module.simpleForm.style.heigth = "500px";
                LEAP.GIS.GISPStatDistribut._module.simpleForm.style.width = "500px";
            } else {
                LEAP.GIS.GISPStatDistribut._module.simpleForm.style.height = "300px";
                LEAP.GIS.GISPStatDistribut._module.simpleForm.style.width = "300px";
            }
            LEAP.GIS.GISPStatDistribut._sizeflag = !LEAP.GIS.GISPStatDistribut._sizeflag;
        }
    };
    LEAP.GIS.GISSearchModule = {};
    LEAP.GIS.GISSearchModule.layername = "";
    LEAP.GIS.GISSearchModule.ctid = null;
    LEAP.GIS.GISSearchModule.show = function(r, j, d) {
        var p = LEAP.getElement("[ctid=" + r + "]");
        if (!p) {
            return;
        }
        LEAP.GIS.GISSearchModule.ctid = r;
        LEAP.GIS.GISSearchModule.layername = j;
        LEAP.GIS.GISSearchModule.clear(r);
        LEAP.GIS.GISStater.hide2(r);
        LEAP.GIS.Searcher.hide2(r);
        var g = LEAP.getElement("div[gisf=searchcon]", p);
        var h = d.gisp_searchmodulewidth;
        var v = d.gisp_searchmodule;
        if (String.isEmpty(h)) {
            h = "300px";
        }
        g.style.width = h;
        g.style.display = "";
        var l = LEAP.loadModule(v, LEAP.getElement("DIV[gisf=searchconContent]", g), null, null, null, null, {
            isfromgis: "1"
        });
        var q = '<span class="lgia"><label class="lgiatext">仅显示当前页数据</label><input ut="ut_gisp_onlycurpage" instance="' + l.instance + '" class="lgiact" type="checkbox" ht="input" bt="text"  mdcn="isvalid" mdtype="checkbox" search="11" style="width: 30px" /></span>';
        var m = LEAP.getElement("DIV[class=lgsearchcon]", g);
        if (m != null) {
            m.innerHTML = m.innerHTML + q;
            LEAP.addEvent(LEAP.getElement("input[ut=ut_gisp_onlycurpage]", m), "click", LEAP.GIS.GISSearchModule.onOnlyCurPageClick);
        }
        var o = LEAP.getElement("DIV[class=lgbtncon]", g);
        if (o != null) {
            var x = '<A class="lgimgbtn lgimg_search" href="javascript:" instance="' + l.instance + '" mytype=chosearea ht="button">选择区域</A>';
            var w = document.createElement("a");
            w.className = "lgimgbtn lgimg_search";
            w.mytype = "chosearea";
            w.ht = "button";
            w.innerText = "选择区域";
            w.style.width = "80px";
            o.appendChild(w);
            LEAP.addEvent(LEAP.getElement("a[mytype=chosearea]", o), "click", LEAP.GIS.GISSearchModule.onChoseAreaClick, h);
        } else {
            var u = document.createElement("img");
            u.style.cursor = "pointer";
            u.src = leapconfig.server + "LEAP/Resource/images/GIS/Search/add.gif";
            u.style.position = "absolute";
            u.style.right = "30px";
            u.style.top = "5px";
            u.title = "选择区域";
            u.style.zIndex = "9999";
            g.appendChild(u);
            LEAP.addEvent(u, "click", LEAP.GIS.GISSearchModule.onChoseAreaClick, h);
        }
        var n = document.createElement("img");
        n.style.cursor = "pointer";
        n.src = leapconfig.server + "LEAP/Resource/images/GIS/Search/close.gif";
        n.style.position = "absolute";
        n.style.right = "5px";
        n.style.top = "5px";
        n.title = "关闭";
        n.style.zIndex = "9999";
        g.appendChild(n);
        LEAP.addEvent(n, "click", LEAP.GIS.GISSearchModule.onClick, r);
        LEAP.GIS.showModuleSplit();
        if (l.getUT("list") != null) {
            l.addEvent(l.getUT("list"), "selectedIndexChange", LEAP.GIS.GISSearchModule.selectindexchange);
        }
        p.___statmodule = l;
        p = g = null;
    };
    LEAP.GIS.GISSearchModule.onChoseAreaClick = function(g) {
        var h = 530;
        if (g != null && g.arg != null) {
            h = g.arg;
        }
        var j = LEAP.form.create("questionanalysetree", "选择区域", 400, 300);
        j.module.pageMode = "view";
        j.module.TreeType = "areaid";
        j.module.onshowmap = true;
        LEAP.form.show(j.form);
        j.module.initTree();
        LEAP.addEvent(j.form, "onSubmit", LEAP.GIS.GISSearchModule.onChoseTreeClick, null, null, true);
        var m = document.body.clientHeight - 25;
        var d = document.body.clientWidth - h - 400;
        var l = 25;
        LEAP.form.setLocation(j.form, d, l);
        LEAP.form.setSize(j.form, null, m);
    };
    LEAP.GIS.GISSearchModule.onChoseTreeClick = function(g) {
        var d = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
        if (d == null) {
            return;
        }
        LEAP.GIS._SearchModule_AddAreaFilter(d, LEAP.GIS.GISSearchModule.layername, g);
        LEAP.GIS.GISSearchModule.ReSearch(LEAP.GIS.GISSearchModule.ctid);
    };
    LEAP.GIS.GISSearchModule.onClick = function(d) {
        var g = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
        if (g == null) {
            return;
        }
        LEAP.GIS._SearchModule_clearSearch(g);
        LEAP.GIS._SearchModule_clearselectSearch(g);
        LEAP.GIS.GISSearchModule.hide2(d.arg);
    };
    LEAP.GIS.GISSearchModule.getEnvQuery = function() {
        try {
            var d = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
            var g = LEAP.GIS.map_getEnvQuery(d);
            if (g != null && g != "") {
                return g;
            }
            return null;
        } finally {
            d = g = null;
        }
    };
    LEAP.GIS.GISSearchModule.getAreaLayer = function() {
        try {
            var g = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
            var d = LEAP.GIS._SearchModule_getAreaLayer(g);
            if (d != null && d != "") {
                return d;
            }
            return null;
        } finally {
            g = env = null;
        }
    };
    LEAP.GIS.GISSearchModule.selectindexchange = function(d) {
        try {
            var h = d.arg2.data;
            if (h != null) {
                var g = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
                if (g == null) {
                    return;
                }
                LEAP.GIS._SearchModule_onSelectIndexChange(g, h.id);
            }
        } catch (j) {}
    };
    LEAP.GIS.GISSearchModule.ReSearch = function(h) {
        var g = LEAP.getElement("[ctid=" + h + "]");
        if (!g) {
            return;
        }
        var d = g.___statmodule;
        if (d) {
            if (d.moduleParameter.isfromgis != null && d.moduleParameter.isfromgis == "1") {
                d.innerSearch();
            }
        }
    };
    LEAP.GIS.GISSearchModule.clear = function(h) {
        var g = LEAP.getElement("[ctid=" + h + "]");
        if (!g) {
            return;
        }
        LEAP.GIS._SearchModule_clearSearch(g);
        var d = g.___statmodule;
        if (d) {
            d.dispose();
        }
        var j = LEAP.getElement("div[gisf=searchcon]", g);
        LEAP.getElement("DIV[gisf=searchconContent]", j).innerHTML = "";
        j.style.display = "none";
        g.___statmodule = null;
        j = g = null;
    };
    LEAP.GIS.GISSearchModule.hide2 = function(g) {
        if (g && g.arg) {
            g = g.arg;
        }
        var d = LEAP.getElement("[ctid=" + g + "]");
        if (!d) {
            return;
        }
        LEAP.GIS.GISSearchModule.clear(g);
        LEAP.GIS.hideModuleSplit();
        d = null;
    };
    LEAP.GIS.GISSearchModule.onOnlyCurPageClick = function(o) {
        var m = LEAP.getElement("[ctid=" + LEAP.GIS.GISSearchModule.ctid + "]");
        if (m == null) {
            return;
        }
        var v = "";
        var h = m.___statmodule;
        if (h) {
            var u = h._innerGetQuery(1, 12);
            u = h.innserGetSortPar(u, h);
            if (u == null) {
                return;
            }
            if (h.moduleParameter != null && h.moduleParameter.isfromgis != null && h.moduleParameter.isfromgis == "1") {
                var G = LEAP.GIS.GISSearchModule.getEnvQuery();
                if (G) {
                    if (u.parameter.extendQuery != null && u.parameter.extendQuery != "") {
                        var r = u.parameter.extendQuery;
                        u.setExtendQuery(r + " and " + G);
                    } else {
                        u.setExtendQuery(G);
                    }
                }
                var g = LEAP.GIS.GISSearchModule.getAreaLayer();
                if (g) {
                    if (u.parameter.extendQuery != null && u.parameter.extendQuery != "") {
                        var r = u.parameter.extendQuery;
                        u.setExtendQuery(r + " and " + g);
                    } else {
                        u.setExtendQuery(g);
                    }
                }
            }
            var z = u;
            if (u instanceof Array) {
                if (u.length > 0) {
                    z = u[0];
                }
            }
            if (z.getCodeValue != null && z.getCodeValue == true) {
                var x = LEAP.table.getHeaders(m);
                if (x != null) {
                    var A = x.length;
                    for (var B = 0; B < A; B++) {
                        var n = x[B];
                        var d = n.code;
                        if (!String.isEmpty(d)) {
                            if (z.codetypes == null) {
                                z.codetypes = [];
                            }
                            var p = {
                                name: n.md,
                                code: d
                            };
                            z.codetypes.add(p);
                        }
                    }
                }
            }
            var F = h.getUT("list");
            if (F != null) {
                var q = LEAP.table.getRows(F);
                for (var B = 0; B < q.length; B++) {
                    if (B == 0) {
                        v = v + "'" + q[B].data.id + "'";
                    } else {
                        v = v + ",'" + q[B].data.id + "'";
                    }
                }
            }
            var C = h.getUT("ut_gisp_onlycurpage");
            if (h.moduleParameter.isfromgis != null && h.moduleParameter.isfromgis == "1") {
                if (u.parameter != null && (u.parameter.parameters != null || u.parameter.extendQuery != null && u.parameter.extendQuery != "")) {
                    var j = new SearchBuilder(u.name);
                    var y = u.parameter.parameters;
                    var D = 11;
                    var w = "";
                    if (u.parameter.parameters != null) {
                        for (var B = 0; B < y.length; B++) {
                            if (y[B].flag != null) {
                                if (y[B].group != null) {
                                    j.par(y[B].name, y[B].value, y[B].flag, y[B].group);
                                } else {
                                    j.add(y[B].name, y[B].value, y[B].flag);
                                }
                            } else {
                                j.add(y[B].name, y[B].value);
                            }
                        }
                    }
                    if (C != null && C.checked) {
                        j.parameter.extendQuery = u.parameter.extendQuery + " and id in (" + v + ")";
                    } else {
                        j.parameter.extendQuery = u.parameter.extendQuery;
                    }
                }
                LEAP.GIS._SearchModule_setBySearchModule(m, LEAP.GIS.GISSearchModule.layername, j);
                return;
            }
        }
    };
    LEAP.GIS.Searcher = {};
    LEAP.GIS.Searcher._s = null;
    LEAP.GIS.Searcher.controls = {};
    LEAP.GIS.Searcher.controls.c0 = '<div style="width:100%;height:auto;line-height: 22px;font-size:16px">视野范围内搜索<input type="checkbox" checked=on gisf="syfw" style="border:1px solid #D5D5D5;"/></div>';
    LEAP.GIS.Searcher.controls.s1 = '<div style="width:100%;height:auto;line-height: 22px;font-size:16px">@text<input bt="text" _mdtype="@mdtype" md="@name" style="border:1px solid #D5D5D5;"/></div>';
    LEAP.GIS.Searcher.controls.s2 = '<div style="width:100%;height:auto;line-height: 22px;font-size:16px"><span style="float:left;margin-right:20px;">@text</span><DIV class="select devtablecontrol" style="WIDTH: 200px;float:left;" _mdtype="@mdtype" bt="text" ct="select" md="@name" code="@code"><DIV class="lg_p_lr_right select_drop selectdropout" ctf="select_drop"></DIV><DIV class=lg_p_lr_fill><DIV class="lg_p_lr_fill_c "><INPUT class="selectbtn ellipsis " type=button ctf="selectbtn"> </INPUT></DIV></DIV><DIV class=select_items style="WIDTH: 392px" ctf="select_items"><DIV><A href="javascript:void(0)" value="" ctf="select_item"></A></DIV><!--values--></DIV></DIV></div>';
    LEAP.GIS.Searcher.controls.z1 = '<DIV gisf="layernames" class="select devtablecontrol" style="WIDTH: 120px;float:left;"  bt="text" ct="select" md="@name" code="@code"><DIV class="lg_p_lr_right select_drop selectdropout" ctf="select_drop"></DIV><DIV class=lg_p_lr_fill><DIV class="lg_p_lr_fill_c "><INPUT class="selectbtn ellipsis " style="font-size:16px;color:blue" type=button ctf="selectbtn"> </INPUT></DIV></DIV><DIV class=select_items style="WIDTH: 392px" ctf="select_items"><!--values--></DIV></DIV>';
    LEAP.GIS.Searcher.controls.z2 = '<DIV gisf="layernames" style="font-size: 15px;color:#3385FA;margin-top:0px;margin-left:15px;width:70px;padding-top:5px">@layernames</DIV>';
    LEAP.GIS.Searcher.results = {};
    LEAP.GIS.Searcher.results.s1 = '<div gisfidx="@gisfidx" gisdata="@gisdata" gisdataid="@gisdataid" style="padding-top:5px;height:35px;background-color:@backcolor;cursor:pointer;" gisf="gisresult" gisf2="gisresult">  <input type="checkbox" value="1" rid="@rid" gisf="checkbox_choosecarme" style="display:none"/>   <img gisf="icon" gisf2="gisresult"  width=22 height=32 style="float:left;" src="@img">    @icon    <a gisf2="gisresult" style="margin-left:5px;font-size:14px;color:@fontcolor" href="javascript:">@text</a></div>';
    LEAP.GIS.Searcher.results.s2 = '<p style="font-size:18px;text-align:center;padding-bottom:10px;color:#00c;"><span gisf="pageindex" pageindex=0 style="border:#e7ecf0 solid 1px;padding:5px 6px 3px;margin:0 2px;cursor:pointer">首页</span><span gisf="pageindex" style="border:#e7ecf0 solid 1px;padding:5px 6px 3px;margin:0 2px;cursor:pointer;" pageindex="-1">上一页</span><span gisf="pageindextext" style="border:#e7ecf0 solid 1px;padding:5px 6px 3px;margin:0 2px;cursor:pointer;color:black;font-weight:bold;">@pagecount</span><span gisf="pageindex" style="border:#e7ecf0 solid 1px;padding:5px 6px 3px;margin:0 2px;cursor:pointer" pageindex="1">下一页</span></p>';
    LEAP.GIS.Searcher.atype = null;
    LEAP.GIS.Searcher.searched = false;
    LEAP.GIS.Searcher.show = function(v, C, p, m) {
        if (LEAP.GIS.Searcher._s == null) {
            if (m != null) {
                LEAP.GIS.Searcher.atype = m;
                if (m == "lh") {
                    LEAP.GIS.Searcher._s = leapclient.load("LEAP/Resource/HTML/GIS/Search_lh.html").replaceall("@server", leapconfig.server);
                }
            } else {
                LEAP.GIS.Searcher._s = leapclient.load("LEAP/Resource/HTML/GIS/Search.html").replaceall("@server", leapconfig.server);
            }
        }
        LEAP.GIS.GISStater.hide2(v);
        LEAP.GIS.Searcher.clear(v);
        var h = LEAP.getElement("[ctid=" + v + "]");
        if (!h) {
            return;
        }
        var A = h.getAttribute("__initgs");
        var y = LEAP.getElement("div[gisf=searchcon]", h);
        y.style.width = "350px";
        if (m != null) {
            if (m == "lh") {
                y.style.left = "0px";
                y.style.zIndex = 0;
            }
        }
        if (h.__layerdef) {
            var z = h.__layerdef;
            if (z && z.name == C) {
                return;
            }
        }
        if (y.getAttribute("_inited") != "1") {
            LEAP.addEvent(y, "click", LEAP.GIS.Searcher.onClick, null, null, true);
            LEAP.addEvent(y, "mouseover", LEAP.GIS.Searcher.onClick, null, null, true);
            LEAP.addEvent(y, "mouseout", LEAP.GIS.Searcher.onClick, null, null, true);
            y.setAttribute("_inited", "1");
        }
        var H = LEAP.GIS.Searcher._s;
        var F = LEAP.GIS.LayerFilter_getSearchLayerDefs(h);
        if (F) {
            var I = [];
            for (var D = 0; D < F.length; D++) {
                I.push({
                    codeid: F[D].name,
                    codevalue: F[D].text
                });
            }
            if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {
                var w = LEAP.GIS.Searcher.controls.z2.replace("@layernames", F[0].text);
                H = H.replace("@layernames", w);
            } else {
                H = H.replace("@layernames", LEAP.dynamodule.buildSelectItem(LEAP.GIS.Searcher.controls.z1, I));
            }
        }
        LEAP.getElement("DIV[gisf=searchconContent]", y).innerHTML = H;
        h.setAttribute("__initgs", "1");
        h.__layerdef = p;
        h.setAttribute("___initsearch", "0");
        LEAP.select.setValue(LEAP.getElement('[gisf="layernames"]', y), p.name);
        LEAP.addEvent(LEAP.getElement('[gisf="layernames"]', y), "valueChange", LEAP.GIS.Searcher._onLyrChange, v);
        LEAP.getElement("[gisf=resultcount]", y).innerText = "";
        if (p.gisp_searchmds) {
            var n = p.gisp_searchmds.split(";");
            var B = n.length;
            var x = new StringBuffer();
            if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {} else {
                x.append(LEAP.GIS.Searcher.controls.c0);
            }
            for (var D = 0; D < B; D++) {
                var j = n[D];
                var G = j.split(",");
                var g = G[0];
                var u = g;
                if (!String.isEmpty(G[1])) {
                    u = G[1];
                }
                if (G.length > 4 && !String.isEmpty(G[4])) {
                    var d = G[4];
                }
                var o = G[3];
                var q = LEAP.GIS.Searcher.controls["s" + o];
                if (q) {
                    q = q.replace("@text", u).replaceall("@name", g).replaceall("@mdtype", o).replace("@code", d);
                }
                if (o == 2) {
                    var r = LEAP.getCodeValue(d);
                    if (r != null) {
                        q = LEAP.dynamodule.buildSelectItem(q, r);
                    }
                }
                x.append(q);
            }
            LEAP.getElement("div[gisf=controlcon]", y).innerHTML = x.toString();
        }
        y.style.display = "";
        if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {} else {
            LEAP.asyn(LEAP.GIS.Searcher.initReSearch, null, 500, v);
        }
        y = null;
        LEAP.GIS.showModuleSplit();
    };
    LEAP.GIS.Searcher._onLyrChange = function(d) {
        var j = d.arg;
        var h = LEAP.getElement("[ctid=" + j + "]");
        if (!h) {
            return;
        }
        var g = d.arg2.lv;
        if (g) {
            LEAP.GIS.layer_AddSearchLayer(h, g);
        }
    };
    LEAP.GIS.Searcher.BuildCheckCamer = function(d) {};
    LEAP.GIS.Searcher.onClick = function(u) {
        var w = u.e.srcElement;
        var x = w.getAttribute("gisf");
        var y = w.getAttribute("gisf2");
        var o = u.e.type;
        if (x) {
            if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {
                if (o == "mouseover") {
                    if (x == "btn_reset") {
                        LEAP.getElement("[gisf=btn_reset]").style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/HTML/GIS/img/reset_02.png)";
                    } else {
                        if (x == "btn_search") {
                            LEAP.getElement("[gisf=btn_search]").style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/HTML/GIS/img/search_02.png)";
                        } else {
                            if (x == "btn_checkCamer") {
                                LEAP.getElement("[gisf=btn_checkCamer]").style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/HTML/GIS/img/check_02.png)";
                            }
                        }
                    }
                }
                if (o == "mouseout") {
                    if (x == "btn_reset") {
                        LEAP.getElement("[gisf=btn_reset]").style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/HTML/GIS/img/reset_01.png)";
                    } else {
                        if (x == "btn_search") {
                            LEAP.getElement("[gisf=btn_search]").style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/HTML/GIS/img/search_01.png)";
                        } else {
                            if (x == "btn_checkCamer") {
                                LEAP.getElement("[gisf=btn_checkCamer]").style.backgroundImage = "url(" + leapconfig.server + "LEAP/Resource/HTML/GIS/img/check_01.png)";
                            }
                        }
                    }
                }
            }
            if (o == "click") {
                var q = LEAP._match(w, "main", "gisf");
                if (q) {
                    if (x == "btn_checkCamer") {
                        var P = LEAP.request("lh_camera_isnolimit");
                        var O = LEAP.request("lh_camera_isnolimit_all");
                        var g = LEAP.userInfo.applicationname == "LHZWGC";
                        if (P || O || g) {
                            var j = LEAP._match(w, LEAP.GIS.d);
                            var n = LEAP.getElements("[gisf=checkbox_choosecarme]", j);
                            if (n != null) {
                                var H = "";
                                for (var D = 0; D < n.length; D++) {
                                    if (H == "") {
                                        if (n[D].checked) {
                                            H = "'" + H + LEAP.getAttribute(n[D], "rid") + "'";
                                        }
                                    } else {
                                        if (n[D].checked) {
                                            H = H + ",'" + LEAP.getAttribute(n[D], "rid") + "'";
                                        }
                                    }
                                }
                                if (H != "") {
                                    var p = "";
                                    var M = new SearchBuilder("camera_info");
                                    M.addField("camera_id");
                                    M.setExtendQuery("id in (" + H + ")");
                                    var Q = LEAP.request("studioSearch", {
                                        par: M
                                    });
                                    if (Q != null) {
                                        Q = LEAP.convertResult(Q);
                                        if (Q != null) {
                                            for (var J = 0; J < Q.length; J++) {
                                                if (J == 0) {
                                                    p = p + Q[J].camera_id;
                                                } else {
                                                    p = p + "|" + Q[J].camera_id;
                                                }
                                            }
                                            window.showModalDialog(leapconfig.server + "LEAP/TEAMModule/Team_SS_OA/Team_SS_OA_SJYGL/Team_OA_SJYGL_DT_SP_MSSSP.html?id=" + p, window, "dialogWidth=885px;dialogHeight=605px;status=no;scroll=no;");
                                        }
                                    }
                                }
                            }
                        } else {
                            alert("无权限查看视频");
                        }
                    }
                    if (x == "syfw") {
                        var j = LEAP._match(w, LEAP.GIS.d);
                        var A = LEAP.ctid(j);
                        LEAP.asyn(LEAP.GIS.Searcher.reSearch, null, 100, A);
                        j = null;
                    } else {
                        if (x == "btn_search") {
                            LEAP.GIS.Searcher.searched = true;
                            var j = LEAP._match(w, LEAP.GIS.d);
                            var A = LEAP.ctid(j);
                            LEAP.GIS.Searcher.reSearch(A);
                            j = null;
                        } else {
                            if (x == "btn_reset") {
                                var j = LEAP._match(w, LEAP.GIS.d);
                                var A = LEAP.ctid(j);
                                var L = LEAP.getElements("[md]");
                                var I = L.length;
                                var N = 0;
                                for (var K = 0; K < I; K++) {
                                    var m = L[K];
                                    LEAP.setValue(m);
                                }
                                if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {
                                    var G = LEAP.getElement("[gisf=resultcon]", j);
                                    if (G != null) {
                                        G.innerHTML = "";
                                    }
                                    var B = LEAP.getElement("div[gisf=searchcon]", j);
                                    if (B != null) {
                                        B.style.height = "auto";
                                    }
                                    LEAP.GIS._call(j, "LayerFilter_clearResult");
                                } else {
                                    LEAP.GIS.Searcher.reSearch(A);
                                }
                                j = null;
                            } else {
                                if (x == "close") {
                                    var j = LEAP._match(w, LEAP.GIS.d);
                                    var A = LEAP.ctid(j);
                                    LEAP.GIS.Searcher.hide(A);
                                    j = null;
                                } else {
                                    if (x == "pageindex") {
                                        var j = LEAP._match(w, LEAP.GIS.d);
                                        var A = LEAP.ctid(j);
                                        var v = j.getAttribute("___pageindex");
                                        var d = j.getAttribute("___pagecount");
                                        if (isNaN(v)) {
                                            v = 1;
                                        }
                                        var h = w.getAttribute("pageindex");
                                        if (h == "-1" && v > 1) {
                                            LEAP.GIS.Searcher.reSearch(A, --v);
                                        } else {
                                            if (h == "1" && v < d) {
                                                LEAP.GIS.Searcher.reSearch(A, ++v);
                                            } else {
                                                if (h == "0" && v != 1) {
                                                    LEAP.GIS.Searcher.reSearch(A, 1);
                                                }
                                            }
                                        }
                                        j = null;
                                    }
                                }
                            }
                        }
                    }
                }
                q = null;
            }
        }
        if (y) {
            var q = LEAP._match(w, "gisresult", "gisf");
            var S = LEAP.getElement("IMG", q);
            var C = q.getAttribute("gisfidx") * 1;
            var j = LEAP._match(w, LEAP.GIS.d);
            var z = j.__layerdef;
            var F = q.getAttribute("gisdataid");
            var R = z.name;
            if (o == "mouseover") {
                q.style.backgroundColor = "#DFDFDF";
                S.src = leapconfig.server + "LEAP/Resource/images/GIS/num/red/" + C + ".png";
                S.removeAttribute("_settrans_");
                LEAP.GIS._call(j, "LayerFilter_selectedData", R, F);
            } else {
                if (o == "mouseout") {
                    if ((C - 1) % 2 == 0) {
                        q.style.backgroundColor = "#F0F0F0";
                    } else {
                        q.style.backgroundColor = "";
                    }
                    S.src = leapconfig.server + "LEAP/Resource/images/GIS/num/blue/" + C + ".png";
                    S.removeAttribute("_settrans_");
                    LEAP.GIS._call(j, "LayerFilter_removeSelectedData", R, F);
                } else {
                    if (o == "click") {
                        if (x && x == "icon") {
                            var v = q.getAttribute("gisdata");
                            if (v) {
                                var r = LEAP.getElement("[gisf=syfw]", j);
                                if (!r.checked) {
                                    LEAP.GIS.map_move(j, v, LEAP.GIS.map_getLevel(j));
                                }
                                r = null;
                            }
                        } else {
                            LEAP.GIS._call(j, "LayerFilter_onResultClick", R, F);
                        }
                    }
                }
            }
            LEAP.transImages(q);
            j = S = q = null;
        }
        u = w = null;
    };
    LEAP.GIS.Searcher.onDataSelected = function(o, g, p) {
        var m = LEAP.getElement("[ctid=" + o + "]");
        var h = LEAP.getElement("[gisf=gisresult][gisdataid=" + g + "]", m);
        var n = LEAP.getElement("IMG", h);
        var q = h.getAttribute("gisfidx") * 1;
        var l = g;
        var j = m.__layerdef;
        var d = j.name;
        if (p) {
            h.style.backgroundColor = "#DFDFDF";
            n.src = leapconfig.server + "LEAP/Resource/images/GIS/num/red/" + q + ".png";
            n.removeAttribute("_settrans_");
            LEAP.GIS._call(m, "LayerFilter_selectedData", d, l);
        } else {
            if ((q - 1) % 2 == 0) {
                h.style.backgroundColor = "#F0F0F0";
            } else {
                h.style.backgroundColor = "";
            }
            n.src = leapconfig.server + "LEAP/Resource/images/GIS/num/blue/" + q + ".png";
            n.removeAttribute("_settrans_");
            LEAP.GIS._call(m, "LayerFilter_removeSelectedData", d, l);
        }
        LEAP.transImages(h);
        m = n = h = null;
    };
    LEAP.GIS.Searcher.initReSearch = function(g) {
        LEAP.GIS.Searcher.searched = true;
        var d = LEAP.getElement("[ctid=" + g + "]");
        if (d.getAttribute("___initsearch") != "1") {
            LEAP.GIS.Searcher.reSearch(g);
        }
        d = null;
    };
    LEAP.GIS.Searcher.reSearch = function(u, I) {
        if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {
            if (!LEAP.GIS.Searcher.searched) {
                return;
            }
        }
        var d = LEAP.getElement("[ctid=" + u + "]");
        if (d.getAttribute("__initgs") != null) {
            d.setAttribute("___initsearch", "1");
            var D = LEAP.getElements("[md]", d);
            var z = 0;
            if (D != null) {
                z = D.length;
            }
            var q = d.__layerdef;
            var B = q.name;
            var v = new SearchBuilder(q.id);
            var J = 0;
            for (var C = 0; C < z; C++) {
                var h = D[C];
                var y = LEAP.getValue(h);
                var K = h.getAttribute("md");
                var n = h.getAttribute("_mdtype");
                if (!String.isEmpty(y)) {
                    if (n == 1) {
                        v.add(K, y);
                    } else {
                        if (n == 2) {
                            v.add(K, y, 11);
                        }
                    }
                    J++;
                }
            }
            v.pageNum = I;
            LEAP.GIS._call(d, "LayerFilter_setBySearchUI", B, v);
            var m = LEAP.getElement("[gisf=syfw]", d);
            if (m) {
                if (m.checked) {
                    var G = LEAP.GIS.map_getEnv(d);
                    v.add("minx", G.minx);
                    v.add("miny", G.miny);
                    v.add("maxx", G.maxx);
                    v.add("maxy", G.maxy);
                }
            }
            var x = d.__layerdef;
            if (x && !String.isEmpty(x._gisp_icondef)) {
                var j = x._gisp_icondef.split(";");
                var o = [];
                for (var C = 0; C < j.length; C++) {
                    var H = j[C].split(",")[0];
                    if (!o.contains(H)) {
                        o.add(H);
                        v.addField(H);
                    }
                }
            }
            var F = LEAP.GIS._call(d, "map_Layer_queryFilter", B);
            if (F != null) {
                var g = JSON.parse(unescape(F));
                if (g != null) {
                    if (g.parameters != null) {
                        for (var r = 0; r < g.parameters.length; r++) {
                            var w = g.parameters[r];
                            if (v.parameter.get(w.name) != null) {
                                var A = v.parameter.get(w.name);
                                if (w.name == A.name && w.flag == A.flag) {
                                    v.removeParameter(w.name);
                                }
                            }
                            v.addParameter(w.name, w.value, w.flag);
                        }
                    }
                }
            }
            LEAP.asynrequest("GIS_UIS", {
                par: v
            }, null, LEAP.GIS.Searcher._searchCallback, null, u);
        }
        D = d = null;
    };
    LEAP.GIS.Searcher._searchCallback = function(J, w) {
        var g = LEAP.getElement("[ctid=" + w + "]");
        var A = LEAP.getElement("[gisf=resultcon]", g);
        var r = g.__layerdef;
        g.removeAttribute("___pageindex");
        g.removeAttribute("___pagecount");
        var m = LEAP.getElement("[gisf=resultcount]", g);
        if (m) {
            m.innerText = "";
            if (J) {
                var I = J.result;
                var C = I.length;
                var D = new StringBuffer();
                var d = [];
                var z = g.__layerdef;
                if (z && !String.isEmpty(z._gisp_icondef)) {
                    var n = z._gisp_icondef.split(";");
                    var p = [];
                    for (var F = 0; F < n.length; F++) {
                        var j = n[F].split(",");
                        d.add({
                            name: j[0],
                            value: j[1],
                            icon: j[2]
                        });
                    }
                }
                for (var F = 0; F < C; F++) {
                    var j = J.result[F];
                    var x = j.id;
                    var v = j.tip;
                    var q = "";
                    if (j.cp) {
                        q = j.cp;
                    }
                    var H = "";
                    if (d.length > 1) {}
                    var B = LEAP.GIS.Searcher.results.s1.replace("@gisdataid", x).replace("@gisdata", q).replace("@gisfidx", (F + 1)).replace("@text", v).replace("@img", leapconfig.server + "LEAP/Resource/images/GIS/num/blue/" + (F + 1) + ".png");
                    B = B.replace("@rid", j.id);
                    B = B.replace("@icon", H);
                    if (!q) {
                        B = B.replace("@fontcolor", "red");
                    } else {
                        B = B.replace("@fontcolor", "blue");
                    }
                    if (F % 2 == 0) {
                        B = B.replace("@backcolor", "#F0F0F0");
                    }
                    D.append(B);
                }
                D.append(LEAP.GIS.Searcher.results.s2.replace("@pagecount", J.pageNum));
                var y = g.__layerdef.name;
                if (y == "RKFR_Gis_RKXX_Age_All") {
                    LEAP.getElement("[gisf=resultcount]", g).innerText = "16337890条结果";
                } else {
                    if (y == "RKFR_gis_ENTData_All") {
                        LEAP.getElement("[gisf=resultcount]", g).innerText = "1257810条结果";
                    } else {
                        if (y == "Name_CJR") {
                            LEAP.getElement("[gisf=resultcount]", g).innerText = "15545条结果";
                        } else {
                            LEAP.getElement("[gisf=resultcount]", g).innerText = J.count + "条结果";
                        }
                    }
                }
                A.innerHTML = D.toString();
                g.setAttribute("___pageindex", J.pageNum);
                g.setAttribute("___pagecount", J.pageCount);
                if (LEAP.GIS.Searcher.atype != null && LEAP.GIS.Searcher.atype == "lh") {
                    var u = LEAP.getElement("div[gisf=searchcon]", g);
                    if (u != null) {
                        if (C < 12) {
                            var G = C * 35;
                            u.style.height = G + 100 + 35 + "px";
                        } else {
                            u.style.height = "95%";
                        }

                    }
                }
            } else {
                A.innerHTML = "";
            }
            if (J) {
                J = J.result;
            }
            LEAP.GIS._call(g, "LayerFilter_setResult", r.name, J);
            LEAP.transImages(A);
            LEAP.GIS.Searcher.HideCheck(r.name, w);
        }
        m = g = null;
    };
    LEAP.GIS.Searcher.HideCheck = function(l, m) {
        if (l.indexOf("GISP_camera_info") >= 0) {
            var h = LEAP.getElement("[ctid=" + m + "]");
            var d = LEAP.getElements("[gisf=checkbox_choosecarme]", h);
            var j = LEAP.getElement("[gisf=btn_checkCamer]", h);
            if (d != null && d.length > 0) {
                for (var g = 0; g < d.length; g++) {
                    d[g].style.display = "";
                }
            }
            if (j != null) {
                j.style.display = "";
            }
        }
    };
    LEAP.GIS.Searcher.hide2 = function(j) {
        var g = LEAP.getElement("[ctid=" + j + "]");
        if (!g) {
            return;
        }
        var d = g.__layerdef;
        if (d != null) {
            var h = d.name;
            LEAP.GIS.Searcher.clear(j);
            var l = LEAP.getElement("div[gisf=searchcon]", j);
            l.style.display = "none";
            LEAP.GIS._call(g, "LayerFilter_clearSearchUI", h);
        }
        g = null;
        LEAP.GIS.hideModuleSplit();
    };
    LEAP.GIS.Searcher.hide = function(j, h) {
        var g = LEAP.getElement("[ctid=" + j + "]");
        if (!g) {
            return;
        }
        var d = g.__layerdef;
        if (h == null || (d && d.name == h)) {
            LEAP.GIS.Searcher.clear(j);
            var l = LEAP.getElement("div[gisf=searchcon]", j);
            l.style.display = "none";
            LEAP.GIS._call(g, "LayerFilter_clearSearchUI", h);
        }
        g = null;
    };
    LEAP.GIS.Searcher.clear = function(g) {
        var d = LEAP.getElement("[ctid=" + g + "]");
        if (!d) {
            return;
        }
        d.removeAttribute("___pageindex");
        d.removeAttribute("___pagecount");
        d.removeAttribute("__initgs");
        d.__layerdef = null;
    };
    LEAP.GIS.Searcher.search = function() {};
    LEAP.GIS.Searcher.showResult = function() {};
    LEAP.GIS.GISPStatCutLine = {};
    LEAP.GIS.GISPStatCutLine._module = null;
    LEAP.GIS.GISPStatCutLine._div_module = null;
    LEAP.GIS.GISPStatCutLine._show = function(j, y, p, x, v, r, o, n) {
        var g = LEAP.getElement("[ctid=" + j + "]");
        if (!g) {
            return;
        }
        var m = "tuli";
        if (m == null || m == "") {
            return;
        }
        var d = 410;
        var w = 50;
        LEAP.GIS.GISPStatCutLine._hide();
        if (LEAP.GIS.GISPStatCutLine._div_module == null) {
            LEAP.GIS.GISPStatCutLine._div_module = document.createElement("div");
        }
        var u = 0;
        var q = 0;
        var h = document.body.clientWidth;
        var l = document.body.clientHeight;
        u = (h - d) / 2;
        q = l - w;
        LEAP.GIS.GISPStatCutLine._div_module.style.position = "absolute";
        LEAP.GIS.GISPStatCutLine._div_module.style.top = q + "px";
        LEAP.GIS.GISPStatCutLine._div_module.style.left = u + "px";
        LEAP.GIS.GISPStatCutLine._div_module.style.zIndex = "999999";
        LEAP.GIS.GISPStatCutLine._div_module.style.width = d;
        LEAP.GIS.GISPStatCutLine._div_module.style.height = w;
        document.body.appendChild(LEAP.GIS.GISPStatCutLine._div_module);
        LEAP.GIS.GISPStatCutLine._module = LEAP.loadModule2({
            name: m,
            parent: LEAP.GIS.GISPStatCutLine._div_module,
            moduleLoadArg: {
                maxv: p,
                minv: y,
                c1: x,
                c2: v,
                c3: r,
                c4: o,
                c5: n
            }
        });
    };
    LEAP.GIS.GISPStatCutLine._hide = function() {
        if (LEAP.GIS.GISPStatCutLine._div_module != null) {
            if (LEAP.GIS.GISPStatCutLine._module != null) {
                LEAP.GIS.GISPStatCutLine._module.dispose();
                LEAP.GIS.GISPStatCutLine._module = null;
            }
            LEAP.GIS.GISPStatCutLine._div_module.innerHTML = "";
            LEAP.GIS.GISPStatCutLine._div_module.outerHTML = "";
            LEAP.GIS.GISPStatCutLine._div_module = null;
        }
    };
    LEAP.GIS.GISPStatCutLine._show_loadsimplemodule = function(m, y, r, x, v, u, q, p) {
        var j = LEAP.getElement("[ctid=" + m + "]");
        if (!j) {
            return;
        }
        var o = "tuli";
        if (o == null || o == "") {
            return;
        }
        var d = 410;
        var w = 50;
        LEAP.GIS.GISPStatCutLine._hide();
        var l = document.body.clientWidth;
        var n = document.body.clientHeight;
        var h = (l - d) / 2;
        var g = {
            name: o,
            title: "",
            autodispose: true,
            moduleLoadArg: {
                maxv: r,
                minv: y,
                c1: x,
                c2: v,
                c3: u,
                c4: q,
                c5: p
            },
            pageMode: "view",
            height: w + "px",
            width: d + "px",
            giselement: j,
            autoposition: false
        };
        LEAP.GIS.GISPStatCutLine._module = LEAP.loadSimpleModule(g);
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.top = "";
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.right = "";
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.bottom = "0px";
        LEAP.GIS.GISPStatDistribut._module.simpleForm.style.left = h + "px";
    };
    LEAP.GIS.GISPStatCutLine._hide_loadsimplemodule = function() {
        if (LEAP.GIS.GISPStatCutLine._module != null && LEAP.GIS.GISPStatCutLine._module.dispose != null) {
            LEAP.GIS.GISPStatCutLine._module.dispose();
            LEAP.GIS.GISPStatCutLine._module = null;
        }
        LEAP.GIS.GISPStatCutLine._module = null;
    };
    LEAP.GIS.GISStater = {};
    LEAP.GIS.GISStater.show = function(n, d) {
        var j = LEAP.getElement("[ctid=" + n + "]");
        if (!j) {
            return;
        }
        LEAP.GIS.GISStater.clear(n);
        LEAP.GIS.Searcher.hide2(n);
        LEAP.GIS.GISSearchModule.hide2(n);
        var o = LEAP.getElement("div[gisf=searchcon]", j);
        var l = d.gisp_modulewidth;
        var m = d.refmodules;
        if (String.isEmpty(l)) {
            l = "300px";
        }
        o.style.width = l;
        o.style.display = "";
        var h = LEAP.loadModule(m, LEAP.getElement("DIV[gisf=searchconContent]", o));
        j.___statmodule = h;
        var g = document.createElement("img");
        g.style.cursor = "pointer";
        g.src = leapconfig.server + "LEAP/Resource/images/GIS/Search/close.gif";
        g.style.position = "absolute";
        g.style.right = "5px";
        g.style.top = "5px";
        g.style.zIndex = "9999";
        o.appendChild(g);
        LEAP.addEvent(g, "click", LEAP.GIS.GISStater.hide2, n);
        LEAP.GIS.showModuleSplit();
        j = o = null;
    };
    LEAP.GIS.GISStater.apply = function(l, g, d) {
        var j = LEAP.getElement("[ctid=" + l + "]");
        if (!j) {
            return;
        }
        var h = j.___statmodule;
        if (h && h.gisStateApply) {
            h.gisStateApply(g, d);
        }
        j = null;
    };
    LEAP.GIS.GISStater.clear = function(h) {
        var g = LEAP.getElement("[ctid=" + h + "]");
        if (!g) {
            return;
        }
        var d = g.___statmodule;
        if (d) {
            d.dispose();
        }
        var j = LEAP.getElement("div[gisf=searchcon]", g);
        LEAP.getElement("DIV[gisf=searchconContent]", j).innerHTML = "";
        j.style.display = "none";
        g.___statmodule = null;
        j = g = null;
    };
    LEAP.GIS.GISStater.hide2 = function(g) {
        if (g && g.arg) {
            g = g.arg;
        }
        var d = LEAP.getElement("[ctid=" + g + "]");
        if (!d) {
            return;
        }
        LEAP.GIS.GISStater.clear(g);
        LEAP.GIS._call(d, "Stater_hide");
        LEAP.GIS.hideModuleSplit();
        d = null;
    };
    LEAP.GIS.GISStater.hide = function() {};
    LEAP.GIS.GISTipModule = {};
    LEAP.GIS.GISTipModule._module_tipmodule = null;
    LEAP.GIS.GISTipModule._show = function(o, j, d, m, u, q) {
        var l = LEAP.getElement("[ctid=" + o + "]");
        if (!l) {
            return;
        }
        var r = d.gisp_tipmodule;
        if (r == null || r == "") {
            return;
        }
        var g = d.gisp_tipmodulewidth;
        var z = d.gisp_tipmoduleheight;
        if (String.isEmpty(g)) {
            g = "300px";
        }
        if (String.isEmpty(z)) {
            z = "300px";

        }
        LEAP.GIS.GISTipModule._hide();
        var w = 0;
        var v = 0;
        var n = document.body.clientWidth;
        var p = document.body.clientHeight;
        var h = {
            name: r,
            title: "",
            autodispose: true,
            moduleLoadArg: {
                id: m
            },
            pageMode: "view",
            height: z,
            width: g,
            giselement: l
        };
        LEAP.GIS.GISTipModule._module_tipmodule = LEAP.loadSimpleModule(h);
        LEAP.GIS.GISTipModule._module_tipmodule.simpleFormCloseMode = 1;
    };
    LEAP.GIS.GISTipModule._hide = function() {
        if (LEAP.GIS.GISTipModule._module_tipmodule != null && LEAP.GIS.GISTipModule._module_tipmodule.dispose != null) {
            LEAP.GIS.GISTipModule._module_tipmodule.dispose();
            LEAP.GIS.GISTipModule._module_tipmodule = null;
        }
        LEAP.GIS.GISTipModule._module_tipmodule = null;
    };
    LEAP.GIS.GISUserArea = {};
    LEAP.GIS.GISUserArea.CreateListForm = function(g) {
        var d = LEAP.form.create("gisp_userarealist", "保存自定义区域信息", 580, 550);
        d.module.setctid(g);
        LEAP.form.show(d.form);
    };
    LEAP.GIS.GISUserArea.CreateInputForm = function(g) {
        var d = LEAP.form.create("gisp_userarea", "保存自定义区域信息", 360, 225);
        d.module.pageMode = "insert";
        d.module.ctid = g;
        LEAP.form.show(d.form);
        LEAP.addEvent(d.form, "formHided", LEAP.GIS.GISUserArea.onFormHide, g, null, true);
    };
    LEAP.GIS.GISUserArea.onFormHide = function(d) {
        LEAP.GIS._flashcall_getUserArea(d.arg);
    };
    LEAP.GIS.GISUserArea.getMyUserArea = function(h) {
        var g = LEAP.getElement("[ctid=" + h + "]");
        if (!g) {
            return;
        }
        var d = LEAP.GIS.GISUserArea.getMyUserArea();
        if (d) {
            LEAP.GIS.UserArea_OnSearch(g, d.result);
        }
    };
    LEAP.GIS.GISUserArea.MyUserArea = function() {
        var h = LEAP.getUserInfo().userflag;
        var g = new SearchParameters();
        g.name = "gisp_userarea";
        g.addParameter("userflag", h, 11);
        var d = LEAP.request("beanSearch", {
            par: g
        });
        return d;
    };
    LEAP.GIS.GISUserArea.delUserAreaID = function(h, d) {
        if (window.confirm("确定删除该数据?")) {
            var g = new DataResult();
            g.name = "gisp_userarea";
            g.addparameter("id", h);
            if (LEAP.request("DynaDelete", {
                    par: g
                }) == true) {
                alert("删除成功");
                LEAP.GIS.GISUserArea.getMyUserArea(d);
            } else {
                alert("删除失败");
            }
        }
    };
    LEAP.GIS.GISUserArea.CreateModifyForm = function(l) {
        var j = new SearchParameters();
        j.name = "gisp_userarea";
        j.addParameter("id", l, 11);
        var d = this.request("beanSearch", {
            par: j
        });
        if (d != null) {
            var h = d.result;
            var g = LEAP.form.create("gisp_userarea", "保存自定义区域信息", 225, 360);
            g.module.pageMode = "modify";
            LEAP.form.show(g.form);
            g.module.setPageData(h);
        }
    };
    LEAP.input = {};
    LEAP.input.init = function() {
        if (document != null && document.body != null) {
            LEAP.input._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.input._init);
        }
    };
    LEAP.input._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.input.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keyup", LEAP.input.uiProcess, null, null, true);
        if (LEAP.isIE) {
            LEAP.addEvent(document.body, "focusin", LEAP.input.uiProcess, null, null, true);
        } else {
            document.addEventListener("focus", LEAP.input.uiProcess, true);
        }
        var g = document.createElement("div");
        g.id = "leap___autocomplate_div_cons";
        g.style.display = "none";
        g.style.position = "absolute";
        g.style.overflow = "auto";
        g.style.height = "50px";
        g.style.backgroundColor = "white";
        g.style.borderColor = "#CBCBCB";
        g.style.borderWidth = "1px";
        g.style.borderTopWidth = "0px";
        g.style.borderStyle = "solid";
        g.style.textAlign = "left";
        g.style.zIndex = "19000";
        document.body.appendChild(g);
        LEAP.addEvent(g, "mouseover", LEAP.input.uiProcess, null, null, true);
        LEAP.addEvent(g, "mouseout", LEAP.input.uiProcess, null, null, true);
        window.setInterval(LEAP.input.save, 1000 * 30);
        g = null;
    };
    LEAP.input.save = function() {
        try {
            if (LEAP.input.t != null) {
                var h = new String(gcook());
                var g = new Date();
                g.setTime(g.getTime() + 30 * 24 * 3600000);
                scook("autocomplate=" + JSON.stringify(LEAP.input.t).replaceall(";", "|") + ";expires=" + g.toGMTString());
            }
        } catch (d) {}
    };
    LEAP.input.uiProcess = function(arg) {
        var e = null;
        var src = null;
        var k = null;
        var type = null;
        if (arg != null && arg.e != null && arg.e.type != null) {
            type = arg.e.type;
        }
        try {
            if (type != null) {
                src = arg.e.srcElement;
                e = arg.e;
                if (LEAP.isIE) {
                    k = e.keyCode;
                } else {
                    k = e.which;
                }
            } else {
                e = arg;
                src = arg.target;
                k = e.which;
            }
            type = e.type;
            if (src == null || src.getAttribute == null) {
                return;
            }
            if (type == "click") {
                if (src.getAttribute("ctf") == "leap___autocomplate_item") {
                    var element = LEAP._match(src, "leap___autocomplate_div_cons", "id");
                    if (element != null) {
                        var last = null;
                        if ((last = LEAP.getElement(element.getAttribute("lastctid"))) != null) {
                            last.value = src.getAttribute("_value");
                            last.focus();
                            last = null;
                            element.style.display = "none";
                        }
                        element = null;
                        return;
                    }
                }
            }
            if (type == "keyup" && (k == 38 || k == 40 || k == 13) && LEAP.getElement("#leap___autocomplate_div_cons").style.display != "none") {
                var element = LEAP.getElement("#leap___autocomplate_div_cons");
                if (k == 13) {
                    var items = LEAP.getElements("div[ctf=leap___autocomplate_item]", element);
                    var s = -1;
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].style.backgroundColor.toUpperCase() == "#B8E5FF") {
                            items[i].style.backgroundColor = "white";
                            s = i;
                            break;
                        }
                    }
                    if (s != -1) {
                        var last = null;
                        if ((last = LEAP.getElement(element.getAttribute("lastctid"))) != null) {
                            last.value = items[s]["_value"];
                            last = null;
                            element.style.display = "none";
                        }
                        last = null;
                    }
                    items = null;
                } else {
                    var items = LEAP.getElements("div[ctf=leap___autocomplate_item]", element);
                    var s = -1;
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].style.backgroundColor.toUpperCase() == "#B8E5FF") {
                            items[i].style.backgroundColor = "white";
                            s = i;
                            break;
                        }
                    }
                    if (s != -1) {
                        if (items.length != 1) {
                            if (k == 40) {
                                if (s == items.length - 1) {
                                    s = 0;
                                } else {
                                    s += 1;
                                }
                            } else {
                                if (k == 38) {
                                    if (s != 0) {
                                        s -= 1;
                                    }
                                }
                            }
                            items[s].style.backgroundColor = "#B8E5FF";
                            var last = null;
                            if ((last = LEAP.getElement(element.getAttribute("lastctid"))) != null) {
                                last.value = items[s]["_value"];
                                last = null;
                            }
                            last = null;
                        }
                    } else {
                        items[0].style.backgroundColor = "#B8E5FF";
                        var last = null;
                        if ((last = LEAP.getElement(element.getAttribute("lastctid"))) != null) {
                            last.value = items[0]["_value"];
                            last = null;
                        }
                        last = null;
                    }
                    items = null;
                }
                element = null;
                return;
            }
            if ((type != "click" || (type == "click" && type.toLowerCase() == "text" && src.getAttribute("auto_complate") == "1") || type == "focusin" || type == "focus" || type == "keyup") && src.tagName == "INPUT" && src.type.toLowerCase() == "text" && src.getAttribute("auto_complate") == "1") {
                var items = null;
                var md = src.getAttribute("md");
                if (md == null) {
                    var element = LEAP.getElement("#leap___autocomplate_div_cons");
                    element.style.display = "none";
                    element = null;
                    return;
                }
                var __flag = src.getAttribute("autocomplateflag");
                if (__flag == null || __flag.Trim() == "") {
                    __flag = md;
                } else {
                    __flag = __flag + "__" + md;
                }
                try {
                    if (LEAP.input.t == null) {
                        var cookieString = new String(gcook());
                        if (cookieString.indexOf("autocomplate=") > -1) {
                            if (LEAP.input.t == null) {
                                var strings = cookieString.split(";");
                                for (var i = 0; i < strings.length; i++) {
                                    var string = strings[i];
                                    if (string.indexOf("autocomplate=") > -1) {
                                        var object = eval("(" + string.substring(cookieString.indexOf("autocomplate=") + 13).replaceall("|", ";") + ")");
                                        if (object != null) {
                                            LEAP.input.t = object;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                } catch (err) {}
                if (LEAP.input.t == null) {
                    LEAP.input.t = new Object();
                }
                if (LEAP.input.t[__flag] == null) {
                    LEAP.input.t[__flag] = [];
                }
                items = LEAP.input.t[__flag];
                var element = LEAP.getElement("#leap___autocomplate_div_cons");
                var last = null;
                if ((last = LEAP.getElement(element.getAttribute("lastctid"))) != null && src != last) {
                    var _md = last.getAttribute("md");
                    if (_md == null) {
                        return;
                    }
                    var t__flag = last.getAttribute("autocomplateflag");
                    if (t__flag == null || t__flag.Trim() == "") {
                        t__flag = _md;
                    } else {
                        t__flag = t__flag + "__" + _md;
                    }
                    var _v = last.value.Trim();
                    if (_v != null && _v != "") {
                        if (!LEAP.input.t[t__flag].contains(_v)) {
                            LEAP.input.t[t__flag].add(_v);
                            if (LEAP.input.t.length > 8) {
                                LEAP.input.t.removeindex(0);
                            }
                        }
                    }
                }
                var v = src.value.Trim();
                if (items != null && items.length > 0) {
                    var tempitems = [];
                    items.sort();
                    if (v == "") {
                        var l = items.length;
                        for (var i = 0; i < l; i++) {
                            tempitems.add("<div _value='" + items[i] + "' ctf='leap___autocomplate_item' style='width:100%;'>" + items[i].replace(v, "<strong ctf='leap___autocomplate_item_strong'>" + v + "</strong>") + "</div>");
                        }
                    } else {
                        var l = items.length;
                        for (var i = 0; i < l; i++) {
                            if (items[i].indexOf(v) > -1 && items[i] != v) {
                                tempitems.add("<div _value='" + items[i] + "' ctf='leap___autocomplate_item' style='width:100%;'>" + items[i].replace(v, "<strong ctf='leap___autocomplate_item_strong'>" + v + "</strong>") + "</div>");
                            }
                        }
                    }
                    if (tempitems.length > 0) {
                        LEAP.input.t[__flag] = items;
                        var html = tempitems.join("\n");
                        var cons = LEAP.getElement("#leap___autocomplate_div_cons");
                        cons.innerHTML = "";
                        cons.innerHTML = html;
                        cons.style.display = "block";
                        var p = LEAP.getAbsolutePos(src);
                        cons.style.left = p.x + "px";
                        cons.style.width = src.offsetWidth;
                        cons.style.top = p.y + src.offsetHeight + "px";
                        if (src.getAttribute("ctid") == null) {
                            var id = UUID.cID();
                            src.setAttribute("ctid", id);
                        }
                        cons.setAttribute("lastctid", "[ctid=" + src.getAttribute("ctid") + "]");
                        cons = null;
                    } else {
                        var cons = LEAP.getElement("#leap___autocomplate_div_cons");
                        cons.innerHTML = "";
                        cons.style.display = "none";
                        if (src.getAttribute("ctid") == null) {
                            var id = UUID.cID();
                            src.setAttribute("ctid", id);
                        }
                        cons.setAttribute("lastctid", "[ctid=" + src.getAttribute("ctid") + "]");
                    }
                } else {
                    var cons = LEAP.getElement("#leap___autocomplate_div_cons");
                    cons.innerHTML = "";
                    cons.style.display = "none";
                    if (src.getAttribute("ctid") == null) {
                        var id = UUID.cID();
                        src.setAttribute("ctid", id);
                    }
                    cons.setAttribute("lastctid", "[ctid=" + src.getAttribute("ctid") + "]");
                    cons = null;
                }
            } else {
                var ctf = src.getAttribute("ctf");
                if (ctf != "leap___autocomplate_item" && ctf != "leap___autocomplate_item_strong" && !(src.tagName == "INPUT" && src.type.toLowerCase() == "text" && src.getAttribute("auto_complate") == "1")) {
                    var cons = LEAP.getElement("#leap___autocomplate_div_cons");
                    cons.innerHTML = "";
                    cons.style.display = "none";
                    var element = cons;
                    var last = null;
                    if ((last = LEAP.getElement(element.getAttribute("lastctid"))) != null) {
                        var _md = last.getAttribute("md");
                        if (_md == null) {
                            return;
                        }
                        var t__flag = last.getAttribute("autocomplateflag");
                        if (t__flag == null || t__flag.Trim() == "") {
                            t__flag = _md;
                        } else {
                            t__flag = t__flag + "__" + _md;
                        }
                        var _v = last.value.Trim();
                        if (_v != null && _v != "") {
                            if (!LEAP.input.t[t__flag].contains(_v)) {
                                LEAP.input.t[t__flag].add(_v);
                                if (LEAP.input.t.length > 8) {
                                    LEAP.input.t.removeindex(0);
                                }
                            }
                        }
                    }
                    cons.removeAttribute("lastctid");
                    cons = null;
                }
            }
            if (type == "mouseover") {
                var ctf = src.getAttribute("ctf");
                if (ctf == "leap___autocomplate_item" || ctf == "leap___autocomplate_item_strong") {
                    var element = LEAP._match(src, "leap___autocomplate_item", "ctf");
                    if (element != null) {
                        element.style.backgroundColor = "#B8E5FF";
                        element.setAttribute("sel", "1");
                        element = null;
                    }
                }
                return;
            }
            if (type == "mouseout") {
                var ctf = src.getAttribute("ctf");
                if (ctf == "leap___autocomplate_item" || ctf == "leap___autocomplate_item_strong") {
                    var element = LEAP._match(src, "leap___autocomplate_div_cons", "id");
                    if (element != null) {
                        var element = LEAP._match(src, "leap___autocomplate_item", "ctf");
                        if (element != null) {
                            element.setAttribute("sel", "0");
                            element.style.backgroundColor = "white";
                            element = null;
                        }
                    }
                }
                return;
            }
        } finally {
            arg = e = src = k = type = null;
        }
    };
    LEAP.input.init();
    LEAP.tab = {};
    LEAP.tab.d = "tab";
    LEAP.tab._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.tab.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.tab._init);
    };
    LEAP.tab.init = function() {
        if (document != null && document.body != null) {
            LEAP.tab._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.tab._init);
        }
        ElementEventManager.addManagedEventType(LEAP.tab.d, "selectedIndexChange");
    }();
    LEAP.tab.getTabLables = function(m) {
        var d = m.getAttribute("lctt");
        var h = null;
        if (d == "bottom") {
            h = LEAP.getElement(">div:last>UL", m);
        } else {
            h = LEAP.getElement(">div:first>UL", m);
        }
        if (h && h.childNodes) {
            var n = h.childNodes;
            var g = n.length;
            var j = [];
            for (var l = 0; l < g; l++) {
                var o = n[l];
                if (o.tagName == "LI" && o.getAttribute("ctf") == "tab_label") {
                    j.add(o);
                }
                o = null;
            }
            m = h = n = null;
            try {
                return j;
            } finally {
                j = null;
            }
        }
    };
    LEAP.tab.addItem = function(m, q) {
        m = LEAP._check(m, LEAP.tab.d);
        if (m == null) {
            return;
        }
        var h = LEAP.getElements("[ctf=tab_label]", m);
        var j = {};
        if (h) {
            var u = h[h.length - 1].outerText;
            var n = h[h.length - 1].outerHTML;
            n = n.replace(u, q);
            var g = document.createElement("div");
            g.innerHTML = n;
            var r = g.children[0];
            var p = r.cloneNode(true);
            LEAP.removeCSS(p, "hover", false);
            var o = h[h.length - 1].parentElement;
            o.appendChild(p);
            j.tabli = p;
            var v = LEAP.getElements("[ctf=tab_content]", m);
            if (v) {
                var d = document.createElement("div");
                d.style.display = "none";
                d.className = "LC_tab2_item";
                d.setAttribute("ctf", "tab_content");
                var l = v[v.length - 1].parentElement;
                l.appendChild(d);
                j.tabcontent = d;
            }
        }
        return j;
    };
    LEAP.tab.removeItem = function(h, d) {
        h = LEAP._check(h, LEAP.tab.d);
        if (h == null) {
            return;
        }
        var m = LEAP.getElements("[ctf=tab_label]", h);
        var n = LEAP.getElements("[ctf=tab_content]", h);
        if (m) {
            if (m.length > 1) {
                var l = m[m.length - 1].parentElement;
                var j = n[n.length - 1].parentElement;
                for (var g = m.length - 1; g >= 0; g--) {
                    if (g == d) {
                        l.removeChild(m[g]);
                        j.removeChild(n[g]);
                    }
                }
            }
        }
    };
    LEAP.tab.uiProcess = function(y) {
        var d = y.e.srcElement;
        var r = y.e.type;
        var z = d.tagName;
        var u = d.getAttribute(commfields.ctf);
        var o = d.getAttribute(commfields.ct);
        var w = d.getAttribute("tabtype");
        try {
            if (u == null || u != "tab_label") {
                return;
            }
            var j = d.className.split(" ").contains("hover");
            if (j) {
                return;
            }
            var g = LEAP._match(d, LEAP.tab.d);
            if (g == null) {
                return;
            }
            var n = LEAP.tab.getTabLables(g);
            var p = -1;
            var h = n.length;
            var x = -1;
            var v = false;
            for (var m = 0; m < h; m++) {
                x++;
                if (n[m] == d) {
                    v = true;
                    break;
                }
            }
            if (w == "imgtab") {
                for (var m = 0; m < h; m++) {
                    var q = n[m].className.split(" ");
                    if (m == x) {
                        n[m].className = n[m].className.replace(q[0], q[0] + "1");
                    } else {
                        n[m].className = n[m].className.replace(q[0], q[0].replace("1", ""));
                    }
                }
            }
            if (v) {
                p = x;
            }
            LEAP.tab.setSelectedIndex(g, p);
            n = null;
        } finally {
            d = y = null;
        }
    };
    LEAP.tab.getSelectedIndex = function(j) {
        j = LEAP._check(j, LEAP.tab.d);
        if (j == null) {
            return;
        }
        if (j == null) {
            return;
        }
        var m = LEAP.tab.getTabLables(j);
        var g = -1;
        var d = m.length;
        for (var h = 0; h < d; h++) {
            if (m[h].className.split(" ").contains("hover")) {
                g = h;
                break;
            }
        }
        j = m = null;
        return g;
    };
    LEAP.tab.setSelectedIndex = function(j, o, v) {
        if (o < 0) {
            return;
        }
        j = LEAP._check(j, LEAP.tab.d);
        if (j == null) {
            return;
        }
        if (j == null) {
            return;
        }
        var x = j.getAttribute("lctt");
        var q = null;
        if (x == "bottom") {
            q = j.children[1].children[0];
        } else {
            q = j.children[0].children[0];
        }
        var h = null;
        if (x == "bottom") {
            h = j.children[0];
        } else {
            h = j.children[1];
        }
        var p = null;
        if (q.children.length != 0) {
            for (var m = 0; m < q.children.length; m++) {
                if (q.children[m].className.indexOf("hover") != -1) {
                    p = q.children[m].style.color;
                    break;
                }
            }
        }
        LEAP.removeCSS(q.children, "hover", true);
        LEAP.setStyle(q.children, {
            backgroundColor: "",
            color: "",
            borderColor: ""
        }, true);
        var n = LEAP.tab.getTabLables(j);
        var y = null;
        var g = n.length;
        var w = -1;
        var u = false;
        for (var m = 0; m < g; m++) {
            w++;
            if (o == w) {
                y = n[m];
                break;
            }
        }
        if (x == "left" || x == "right") {
            h = h.children[0];
        }
        var d = h.children[o];
        LEAP.addCSS(y, "hover", false);
        LEAP.setStyle(y, {
            color: p
        });
        if (LEAP.isIE) {
            d.style.visibility = "visible";
        }
        d.style.display = "block";
        var g = h.children.length;
        for (var m = 0; m < g; m++) {
            if (m == o) {
                continue;
            }

            var r = h.children[m];
            if (r.offsetHeight > 0) {
                if (LEAP.isIE) {
                    r.style.visibility = "hidden";
                }
                r.style.display = "none";
            }
        }
        if (v != null && v == false) {} else {
            ElementEventManager.handleEvent(j, "selectedIndexChange", {
                tab: j,
                index: o,
                element_content: d,
                element_tab: y,
                flag: o,
                srcst: y.getAttribute("st")
            });
        }
        cs = j = n = null;
    };
    LEAP.tree = {};
    LEAP.tree.d = "tree";
    LEAP.tree.e1 = "><input type='checkbox'></a><a href='javascript:' class='tree_item_title' style='color:@color'>@text</a>";
    LEAP.tree.e2 = "><input type='checkbox'></a><a href='javascript:' class='tree_item_title'>@text</a>";
    LEAP.tree.e11 = "><a onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' href='javascript:' style='color:@color;' class='tree_item_title'>@text</a>";
    LEAP.tree.e21 = "><a onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' href='javascript:' class='tree_item_title'>@text</a>";
    LEAP.tree.iconimg = "<img src='@img' style='float: inherit;margin-left:10px;display:inline-block;border:none' ctf='tree_ctrl' utf='@utf'/>";
    LEAP.tree.e3 = " ctid='@id' ctf='tree_item'>";
    LEAP.tree.cf = "<!--childs-->";
    LEAP.tree.e4 = LEAP.tree.cf + "</li>";
    LEAP.tree.e5 = "<li onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' ctid='@id' _value='@value' _value2='@value2' _value3='@value3' _value4='@value4' _value5='@value5' _objid='@objid' ctf='tree_item' title=@tip>";
    LEAP.tree.e5_2 = "<li onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' treestyle2=1 ctid='@id' _value='@value' _value2='@value2' _value3='@value3' _value4='@value4' _value5='@value5' _objid='@objid' ctf='tree_item' title=@tip>";
    LEAP.tree.e6 = "<a onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' class='tree_item_pre'><label onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' class='tree_child'></label><img style='margin-top:0;'";
    LEAP.tree.e7 = "<h3 onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' class='tree_02_opened_bg'>";
    LEAP.tree.e72 = "<h3 onselectstart='return false;' unselectable=on onContextMenu='return false' hidefocus='true' class='tree_02_opened_bg'>";
    LEAP.tree.e8 = "</h3>";
    LEAP.tree._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.tree.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "dblclick", LEAP.tree.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.tree._init);
    };
    LEAP.tree.init = function() {
        if (document != null && document.body != null) {
            LEAP.tree._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.tree._init);
        }
        ElementEventManager.addManagedEventType(LEAP.tree.d, "selectedItemChange");
        ElementEventManager.addManagedEventType(LEAP.tree.d, "itemInit");
        ElementEventManager.addManagedEventType(LEAP.tree.d, "checkedChanged");
        ElementEventManager.addManagedEventType(LEAP.tree.d, "doubleClick");
        ElementEventManager.addManagedEventType(LEAP.tree.d, "itemClick");
        ElementEventManager.addManagedEventType(LEAP.tree.d, "mousedown");
    }();
    LEAP.tree.uiProcess = function(p) {
        var d = p.e.srcElement;
        var m = p.e.type;
        var q = d.tagName;
        var j = d.getAttribute(commfields.ct);
        var n = d.getAttribute(commfields.ctf);
        var o = LEAP._match(d, "tree_item", "ctf", 99);
        if (o != null) {
            var h = null;
            if (j == LEAP.tree.d) {
                h = d;
            } else {
                h = LEAP._match(o, LEAP.tree.d, null, 99);
            }
            if (h == null) {
                return;
            }
            if (m == "click") {
                if (q == "LABEL" || q == "H3") {
                    if ((q == "LABEL" && d.className == "tree_opened") || (q == "H3" && d.className == "tree_02_opened_bg")) {
                        LEAP.tree.closeNode(o);
                    } else {
                        if ((q == "LABEL" && d.className == "tree_closed") || (q == "H3" && d.className == "tree_02_closed_bg")) {
                            LEAP.tree.expandNode(o);
                        }
                    }
                } else {
                    if (q == "INPUT") {
                        ElementEventManager.handleEvent(h, "checkedChanged", {
                            tree: h,
                            item: "[ctid=" + o.getAttribute("ctid") + "]",
                            value: o.getAttribute("_value"),
                            value2: o.getAttribute("_value2"),
                            value3: o.getAttribute("_value3"),
                            value4: o.getAttribute("_value4"),
                            value5: o.getAttribute("_value5"),
                            text: LEAP.tree.getItemText(o),
                            checked: d.checked
                        });
                    } else {
                        if (n == "tree_ctrl") {
                            LEAP.tree.setSelectedItem(h, o);
                            ElementEventManager.handleEvent(h, "itemClick", {
                                tree: h,
                                item: "[ctid=" + o.getAttribute("ctid") + "]",
                                value: o.getAttribute("_value"),
                                value2: o.getAttribute("_value2"),
                                value3: o.getAttribute("_value3"),
                                value4: o.getAttribute("_value4"),
                                value5: o.getAttribute("_value5"),
                                ctrlutf: d.getAttribute("utf"),
                                text: LEAP.tree.getItemText(o),
                                event: p.e
                            });
                        } else {
                            LEAP.tree.setSelectedItem(h, o);
                            ElementEventManager.handleEvent(h, "itemClick", {
                                tree: h,
                                item: "[ctid=" + o.getAttribute("ctid") + "]",
                                value: o.getAttribute("_value"),
                                value2: o.getAttribute("_value2"),
                                value3: o.getAttribute("_value3"),
                                value4: o.getAttribute("_value4"),
                                value5: o.getAttribute("_value5"),
                                text: LEAP.tree.getItemText(o),
                                event: p.e
                            });
                        }
                    }
                }
                h = null;
            } else {
                if (m == "dblclick") {
                    var g = LEAP.getElement("a:first", o);
                    if (g) {
                        var l = LEAP.getElement("label:first", g);
                        if (l) {
                            if (l.className == "tree_opened") {
                                LEAP.tree.closeNode(o);
                            } else {
                                if (l.className == "tree_closed") {
                                    LEAP.tree.expandNode(o);
                                }
                            }
                        }
                    }
                    if (q == "A") {
                        ElementEventManager.handleEvent(h, "doubleClick", {
                            tree: h,
                            value: o.getAttribute("_value"),
                            value2: o.getAttribute("_value2"),
                            value3: o.getAttribute("_value3"),
                            value4: o.getAttribute("_value4"),
                            value5: o.getAttribute("_value5"),
                            text: LEAP.tree.getItemText(o),
                            item: "[ctid=" + o.getAttribute("ctid") + "]",
                            data: o.data
                        });
                    }
                } else {
                    if (m == "mousedown" && p.e.button == 2) {
                        if (q == "A") {
                            ElementEventManager.handleEvent(h, "mousedown", {
                                tree: h,
                                value: o.getAttribute("_value"),
                                value2: o.getAttribute("_value2"),
                                value3: o.getAttribute("_value3"),
                                value4: o.getAttribute("_value4"),
                                value5: o.getAttribute("_value5"),
                                text: LEAP.tree.getItemText(o),
                                item: "[ctid=" + o.getAttribute("ctid") + "]",
                                button: p.e.button
                            });
                        }
                    }
                }
            }
        }
        d = m = q = p = j = o = null;
    };
    LEAP.tree.expandNode = function(j) {
        if (j == null) {
            return;
        }
        if (typeof(j) == "string") {
            j = LEAP.getElement(j);
        }
        if (j == null) {
            return;
        }
        var g = null;
        if (j.getAttribute(commfields.ct) == LEAP.tree.d) {
            g = j;
        } else {
            g = LEAP._match(j, LEAP.tree.d, null, 99);
        }
        if (g == null) {
            return;
        }
        var h = LEAP.getElement("a>label:first", j);
        if (h == null) {
            h = LEAP.getElement("a>H3:first", j);
        }
        var d = h.tagName;
        if (d == "LABEL") {
            h.className = "tree_opened";
            if (j.getAttribute("treestyle2") == "1") {
                h.parentNode.parentNode.className = "tree_02_opened_bg";
            }
        } else {
            if (d == "H3") {
                h.className = "tree_02_opened_bg";
                LEAP.getElement(">a>label:first", h).className = "tree_opened";
            }
        }
        LEAP.setStyle(LEAP.getElements(">ul", j), {
            display: "block"
        }, true);
        if (j.getAttribute("init") == false || j.getAttribute("init") == "false") {
            if (j.getAttribute("ctid") == null) {
                j.setAttribute("ctid", UUID.cID());
            }
            j.setAttribute("init", true);
            ElementEventManager.handleEvent(g, "itemInit", {
                tree: g,
                value: j.getAttribute("_value"),
                value2: j.getAttribute("_value2"),
                value3: j.getAttribute("_value3"),
                value4: j.getAttribute("_value4"),
                value5: j.getAttribute("_value5"),
                text: LEAP.tree.getItemText(j),
                item: "[ctid=" + j.getAttribute("ctid") + "]"
            });
        }
        j = h = null;
    };
    LEAP.tree.closeNode = function(h) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h);
        }
        if (h == null) {
            return;
        }
        var g = LEAP.getElement("a>label:first", h);
        var d = null;
        if (g == null) {
            d = LEAP.getElement("a>H3:first", h);
        }
        var d = g.tagName;
        if (d == "LABEL") {
            if (g.className == "tree_opened") {
                g.className = "tree_closed";
                if (h.getAttribute("treestyle2") == "1") {
                    g.parentNode.parentNode.className = "tree_02_closed_bg";
                }
            }
        } else {
            if (d == "H3") {
                if (g.className == "tree_02_opened_bg") {
                    g.className = "tree_02_closed_bg";
                    LEAP.getElement(">a>label:first", g).className = "tree_closed";
                }
            }
        }
        LEAP.setStyle(LEAP.getElements(">ul", h), {
            display: "none"
        }, true);
        h = g = null;
    };
    LEAP.tree.closeAll = function(j) {
        j = LEAP._check(j, LEAP.tree.d);
        if (j == null) {
            return;
        }
        var g = LEAP.getElements("LI[ctf=tree_item]", j);
        if (g) {
            var d = g.length;
            for (var h = 0; h < d; h++) {
                var m = g[h];
                if (m) {
                    LEAP.tree.closeNode(m);
                    m = null;
                }
            }
            g = null;
        }
        j = null;
    };
    LEAP.tree.bindData = function(u, m, w, v, n, x) {
        u = LEAP._check(u, LEAP.tree.d);
        if (u == null) {
            return;
        }
        if (w && w.length > 0) {
            var o = w.length;
            var y = null;
            var z = false;
            if (w[0].hasOwnProperty("id")) {
                y = "id";
                z = true;
            } else {
                if (n) {
                    y = n.value;
                }
            }
            var d = new hashtable();
            for (var r = 0; r < w.length; r++) {
                var B = w[r];
                if (n) {
                    for (var A in n) {
                        B[A] = B[n[A]];
                    }
                }
                x(B);
                if (y) {
                    d.add(B[y], B);
                    if (!z) {
                        B.id = B[y];
                    }
                }
            }
            LEAP.tree.addItems(u, m, w, v);
            var h = u;
            if (m != null) {
                h = LEAP.getElement(m, u);
            }
            if (h) {
                var q = h.getElementsByTagName("LI");
                if (q) {
                    var o = q.length;
                    for (var r = 0; r < o; r++) {
                        var j = q[r];
                        var g = j.getAttribute("_objid");
                        if (g) {
                            j.data = d.getvalue(g);
                        }
                        j = null;
                    }
                }
                q = h = null;
            }
        }
        u = null;
    };
    LEAP.tree.addItems = function(r, n, H, q) {
        r = LEAP._check(r, LEAP.tree.d);
        if (r == null) {
            return;
        }
        if (H == null || !H.length) {
            return;
        }
        var m = n == null;
        if (n == null) {
            n = r;
        } else {
            if (typeof(n) == "string") {
                n = LEAP.getElement(n, r);
            }
            if (n == null) {
                return;
            }
            var O = LEAP.getElement("ul:first", n);
            if (O == null) {
                O = document.createElement("UL");
                n.appendChild(O);
                var G = n;
                if (n.getAttribute("treestyle2") == "1") {
                    G = LEAP.getElement(">h3:first", n);
                }
                LEAP.getElement("a>label:first", G).className = "tree_opened";
                n = null;
                n = O;
                O = null;
            } else {
                n = null;
                n = O;
                O = null;
            }
        }
        var S = false;
        S = LEAP.hasCSS(r, "tree_02");
        if (q == null) {
            if (m) {
                q = 1;
            } else {
                q = 0;
            }
        }
        var x = new StringBuffer();
        var J = [];
        var D = LEAP.tree.e1;
        var B = LEAP.tree.e2;
        var z = !(r.getAttribute("showcheck") != "1");
        if (!z) {
            D = LEAP.tree.e11;
            B = LEAP.tree.e21;
        }
        var T = null;
        if (H != null && H[0].syscode != null) {
            T = new hashtable();
        }
        var K = H.length;
        var h = [];
        for (var V = 0; V < K; V++) {
            h.add(LEAP.clone(H[V]));
        }
        H = h;
        for (var V = 0; V < K; V++) {
            var w = H[V];
            var F = w.text;
            var Q = w.value;
            var I = w.fontColor;
            var p = w.icon;
            var W = w.ctrlimgs;
            if (S && (p == null || p.Trim() == "")) {
                if (!w.hasChild) {
                    p = "LEAP/Resource/images/itemstyle/tree/rootnode2.gif";
                } else {
                    p = "LEAP/Resource/images/itemstyle/tree/rootnode1.gif";
                }
            }
            var M = w.hasChild;
            var g = w.showCheck;
            if (g == null) {
                g = z;
            } else {
                if (g != true) {
                    g = false;
                }
            }
            var C = D;
            var A = B;
            if (z != g) {
                if (g) {
                    C = LEAP.tree.e1;
                    A = LEAP.tree.e2;
                } else {
                    C = LEAP.tree.e11;
                    A = LEAP.tree.e21;
                }
            }
            if (F == null) {
                continue;
            }
            var N = null;
            if (w.ctid == null) {
                w.ctid = N = UUID.cID();
            } else {
                N = w.ctid;
            }
            var R = null;
            if (I == null) {
                R = A;
            } else {
                R = C.replace("@color", I);
            }
            R = R.replace("@text", F);
            if (p == null || p.Trim() == "") {
                if (r.getAttribute("nidv") == "1") {
                    p = "LEAP/Resource/images/lcimages/LC_tree3/icon_tree3_title.png";
                } else {
                    p = "LEAP/Resource/images/itemstyle/tree/tree_icon.gif";
                }
            }
            if (p != null && p.Trim() != "") {
                if (p.indexOf("http://") == -1) {
                    p = PublishServerConfig.getURL(p);
                }
                R = " src='" + p + "'" + R;
            }
            var u = null;
            if (W != null) {
                var L = W.split(",");
                for (var U = 0; U < L.length; U++) {
                    if (U == 0) {
                        u = LEAP.tree.iconimg.replace("@img", leapconfig.server + L[U]).replace("@utf", "ctrl_" + (U + 1));
                    } else {
                        u += LEAP.tree.iconimg.replace("@img", leapconfig.server + L[U]).replace("@utf", "ctrl_" + (U + 1));
                    }
                }
            } else {
                u = "";
            }
            R = LEAP.tree.e6 + R + u;
            if (M == true) {
                R = R.replace("tree_child", "tree_closed");
            }
            var v = null;
            var d = 0;
            if (T != null) {
                v = LEAP.getRealSyscode(w.syscode);
                if (v != null && v.indexOf(".") > -1) {
                    var y = v.substring(v.indexOf(".") + 1);
                    d = y.length / 3;
                    d += 1;
                } else {
                    d = 1;
                }
            }
            if (!S || (S && d > q)) {
                R = LEAP.tree.e5 + R;
            } else {
                if (w.hasChild) {
                    R = LEAP.tree.e5_2 + LEAP.tree.e7 + R;
                } else {
                    R = LEAP.tree.e5_2 + LEAP.tree.e72 + R;
                }
            }
            if (Q != null) {
                R = R.replace("@value", Q);
            } else {
                R = R.replace("@value", "");
            }
            if (w.value2 != null) {
                R = R.replace("@value2", w.value2);
            } else {
                R = R.replace("@value2", "");
            }
            if (w.value3 != null) {
                R = R.replace("@value3", w.value3);
            } else {
                R = R.replace("@value3", "");
            }
            if (w.value4 != null) {
                R = R.replace("@value4", w.value4);
            } else {
                R = R.replace("@value4", "");
            }
            if (w.value5 != null) {
                R = R.replace("@value5", w.value5);
            } else {
                R = R.replace("@value5", "");
            }
            if (w.id != null) {
                R = R.replace("@objid", w.id);
            } else {
                R = R.replace("@objid", "");
            }
            if (!S || (S && d > q)) {
                R = R + LEAP.tree.e4;
            } else {
                R = R + LEAP.tree.e8 + LEAP.tree.e4;
            }
            R = R.replace("@id", N);
            if (M) {
                R = R.replace("<li ", '<li init="false" ');
            }
            var l = w.tip;
            if (!String.isEmpty(l)) {
                R = R.replace("@tip", l);
            } else {
                R = R.replace("@tip", "");
            }
            if (T == null) {
                x.append(R);
                x.append("\n");
            } else {
                w._html = R;
                if (v != null) {
                    w._syscode = v;
                    w._issys = true;
                    T.add(v, w);
                } else {
                    w._syscode = UUID.cID();
                    w._issys = false;
                    T.add(w._syscode, w);
                }
            }
            J.push("[ctid=" + N + "]");
            w = F = Q = I = p = R = N = null;
        }
        if (T == null) {
            n.innerHTML = x.toString();
        } else {
            for (var V = K - 1; V > -1; V--) {
                var w = H[V];
                var v = w._syscode;
                if (w._issys == true) {
                    var P = LEAP.getParentSyscode(v);
                    if (P != null) {
                        var o = T.getvalue(P);
                        if (o != null) {
                            w._html = w._html.replace(LEAP.tree.cf, "");
                            if (o.hassetul != true) {
                                o.hassetul = true;
                                o._html = o._html.replace("tree_child", "tree_opened").replace(LEAP.tree.cf, "<UL>" + LEAP.tree.cf + "</UL>");
                            }
                            o._html = o._html.replace(LEAP.tree.cf, LEAP.tree.cf + w._html);
                            H[V] = null;
                        }
                    }
                }
            }
            for (var V = 0; V < K; V++) {
                var w = H[V];
                if (w == null) {
                    continue;
                }
                x.append(w._html);
            }
            n.innerHTML = x.toString();
        }
        try {
            return J;
        } finally {
            r = n = H = x = J = null;
        }
    };
    LEAP.tree.addItem = function(h, w, u, z, g, D, C, l, q, p, o, n, B) {
        h = LEAP._check(h, LEAP.tree.d);
        if (h == null) {
            return;
        }
        if (u == null) {
            return;
        }
        var F = document.createElement("LI");
        F[commfields.ctf] = "tree_item";
        var d = !(h.getAttribute("showcheck") != "1");
        if (l == null) {
            l = d;
        } else {
            if (l != true) {
                l = false;
            }
        }
        var x = UUID.cID();
        F.ctid = x;
        F.setAttribute("ctid", x);
        F.ctf = "tree_item";
        F.setAttribute("ctf", "tree_item");
        if (z != null) {
            F._value = z;
            F.setAttribute("_value", z);
        }
        if (q != null) {
            F._value2 = q;
            F.setAttribute("_value2", q);
        }
        if (p != null) {
            F._value3 = p;
            F.setAttribute("_value3", p);
        }
        if (o != null) {
            F._value4 = o;
            F.setAttribute("_value4", o);
        }
        if (n != null) {
            F._value5 = n;
            F.setAttribute("_value5", n);
        }
        var m = LEAP.tree.e1;
        var j = LEAP.tree.e2;
        if (h.getAttribute("showcheck") != "1" && l == false) {
            m = LEAP.tree.e11;
            j = LEAP.tree.e21;
        }
        var v = null;
        if (g == null) {
            v = j;
        } else {
            v = m.replace("@color", g);
        }
        v = v.replace("@text", u);
        if (D == null || D.Trim() == "") {
            if (h.getAttribute("nidv") == "1") {
                D = "LEAP/Resource/images/lcimages/LC_tree3/icon_tree3_title.png";
            } else {
                D = "LEAP/Resource/images/itemstyle/tree/tree_icon.gif";
            }
        }
        if (D != null && D.Trim() != "") {
            if (D.indexOf("http://") == -1) {
                D = PublishServerConfig.getURL(D);
            }
            v = " src='" + D + "'" + v;
        }
        var G = null;
        if (B != null) {
            var y = B.split(",");
            for (var A = 0; A < y.length; A++) {
                if (A == 0) {
                    G = LEAP.tree.iconimg.replace("@img", leapconfig.server + y[A]).replace("@utf", "ctrl_" + (A + 1));
                } else {
                    G += LEAP.tree.iconimg.replace("@img", leapconfig.server + y[A]).replace("@utf", "ctrl_" + (A + 1));
                }
            }
        } else {
            G = "";
        }
        v = LEAP.tree.e6 + v + G;
        if (C == true) {
            v = v.replace("tree_child", "tree_closed");
        }
        F.setAttribute("init", false);
        F.innerHTML = v;
        if (w == null) {
            h.appendChild(F);
        } else {
            if (typeof(w) == "string") {
                w = LEAP.getElement(w, h);
            }
            if (w == null) {
                return;
            }
            var r = LEAP.getElement("ul:first", w);
            if (r == null) {
                r = document.createElement("UL");
                w.appendChild(r);
                LEAP.getElement("a>label:first", w).className = "tree_opened";
                w = null;
                w = r;
                r = null;
            } else {
                w = null;
                w = r;
                r = null;
            }
            w.appendChild(F);
        }
        v = h = w = u = z = g = D = null;
        return "[ctid=" + x + "]";
    };
    LEAP.tree.getValue = function(g, d) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g, d);
        }
        if (g == null) {
            return;
        }
        return g._value != null ? g._value : g.getAttribute("_value");
    };
    LEAP.tree.getValue2 = function(h, g) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h, g);
        }
        if (h == null) {
            return;
        }
        var d = {
            value: h._value != null ? h._value : h.getAttribute("_value"),
            value2: h._value2 != null ? h._value2 : h.getAttribute("_value2"),
            value3: h._value3 != null ? h._value3 : h.getAttribute("_value3"),
            value4: h._value4 != null ? h._value4 : h.getAttribute("_value4"),
            value5: h._value5 != null ? h._value5 : h.getAttribute("_value5"),
            objid: h._objid != null ? h._objid : h.getAttribute("_objid")
        };
        return d;
    };
    LEAP.tree.setValue = function(d, g, h) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g, d);
        }
        if (g == null) {
            return;
        }
        g._value = null;
        g.removeAttribute("_value");
        g._value = h;
    };
    LEAP.tree.setValue2 = function(g, h, d) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h, g);
        }
        if (h == null) {
            return;
        }
        h._value2 = null;
        h.removeAttribute("_value2");
        h._value2 = d;
    };
    LEAP.tree.setValue3 = function(g, h, d) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h, g);
        }
        if (h == null) {
            return;
        }
        h._value3 = null;
        h.removeAttribute("_value3");
        h._value3 = d;
    };
    LEAP.tree.setValue4 = function(d, g, h) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g, d);
        }
        if (g == null) {
            return;
        }
        g._value4 = null;
        g.removeAttribute("_value4");
        g._value4 = h;
    };
    LEAP.tree.setValue5 = function(d, g, h) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g, d);
        }
        if (g == null) {
            return;
        }
        g._value5 = null;
        g.removeAttribute("_value5");
        g._value5 = value5;
    };
    LEAP.tree.getValues = function(m) {
        m = LEAP._check(m, LEAP.tree.d);
        if (m == null) {
            return;
        }
        var g = LEAP.getElements("li[ctf=tree_item]", m);
        if (g != null) {
            var h = [];
            var d = g.length;
            for (var j = 0; j < d; j++) {
                h.add(g[j]["_value"] != null ? g[j]["_value"] : g[j].getAttribute("_value"));
            }
        }
        g = m = null;
        return h;
    };
    LEAP.tree.getItemByValue = function(g, j) {
        if (j == null) {
            return;
        }
        g = LEAP._check(g, LEAP.tree.d);
        if (g == null) {
            return;
        }
        if (j == null) {
            return;
        }
        var h = LEAP.getElement('li[ctf=tree_item][_value="' + j + '"]', g);
        if (h == null) {
            return;
        }
        var l = h.getAttribute("ctid");
        if (l == null) {
            l = UUID.cID();
            h.setAttribute("ctid", l);
        }
        var d = "[ctid=" + l + "]";
        h = null;
        return d;
    };
    LEAP.tree.hideItem = function(d, g) {
        d = LEAP._check(d, LEAP.tree.d);
        if (d == null) {
            return;
        }
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g, d);
        }
        if (g == null) {
            return;
        }
        g.style.display = "none";
    };
    LEAP.tree.showItem = function(d, g) {
        d = LEAP._check(d, LEAP.tree.d);
        if (d == null) {
            return;
        }
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {

            g = LEAP.getElement(g, d);
        }
        if (g == null) {
            return;
        }
        g.style.display = "";
    };
    LEAP.tree.getChild = function(m) {
        if (m == null) {
            return;
        }
        if (typeof(m) == "string") {
            m = LEAP.getElement(m);
        }
        if (m == null) {
            return;
        }
        var l = m[commfields.ct] == LEAP.tree.d;
        if ((m[commfields.ctf] == "tree_item" || m.getAttribute(commfields.ctf) == "tree_item") || l) {
            var h = null;
            if (!l) {
                h = LEAP.getElement("ul:first", m);
            } else {
                h = m;
            }
            if (h == null) {
                return null;
            } else {
                var j = LEAP.getElements(">li[ctf=tree_item]", h);
                if (j != null) {
                    var d = [];
                    for (var g = 0; g < j.length; g++) {
                        if (j[g].getAttribute("ctid") == null) {
                            j[g].setAttribute("ctid", UUID.cID());
                        }
                        d.push("[ctid=" + j[g].getAttribute("ctid") + "]");
                    }
                    try {
                        return d;
                    } finally {
                        j = null;
                        d = null;
                        m = null;
                    }
                }
            }
        }
        m = null;
    };
    LEAP.tree.getAllChild = function(n) {
        if (n == null) {
            return;
        }
        if (typeof(n) == "string") {
            n = LEAP.getElement(n);
        }
        if (n == null) {
            return;
        }
        var d = n[commfields.ct];
        if (d == null) {
            d = n.getAttribute(commfields.ct);
        }
        var m = d == LEAP.tree.d;
        if ((n[commfields.ctf] == "tree_item" || n.getAttribute(commfields.ctf) == "tree_item") || m) {
            var j = null;
            if (!m) {
                j = LEAP.getElement("ul:first", n);
            } else {
                j = n;
            }
            if (j == null) {
                return null;
            }
            var l = LEAP.getElements("li[ctf=tree_item]", j);
            if (l != null) {
                var g = [];
                for (var h = 0; h < l.length; h++) {
                    if (l[h].getAttribute("ctid") == null) {
                        l[h].setAttribute("ctid", UUID.cID());
                    }
                    g.push("[ctid=" + l[h].getAttribute("ctid") + "]");
                }
                try {
                    return g;
                } finally {
                    l = null;
                    g = null;
                    n = null;
                }
            }
        }
        n = null;
    };
    LEAP.tree.getAllChildValues = function(g, o, n) {
        if (o == null) {
            o = g;
        } else {
            if (typeof(o) == "string") {
                o = LEAP.getElement(o, g);
            }
        }
        if (o == null) {
            return;
        }
        var m = o[commfields.ct];
        if (m == null) {
            m = o.getAttribute(commfields.ct);
        }
        var p = m == LEAP.tree.d;
        try {
            var l = [];
            if ((o[commfields.ctf] == "tree_item" || o.getAttribute(commfields.ctf) == "tree_item") || p) {
                var j = null;
                if (!p) {
                    j = LEAP.getElement("ul:first", o);
                } else {
                    j = o;
                }
                if (j != null) {
                    var h = LEAP.getElements("li[ctf=tree_item]", j);
                    if (h != null) {
                        for (var d = 0; d < h.length; d++) {
                            if (h[d].getAttribute("ctid") == null) {
                                h[d].setAttribute("ctid", UUID.cID());
                            }
                            l.push({
                                value: h[d]["_value"] != null ? h[d]["_value"] : h[d].getAttribute("_value"),
                                value2: h[d]["_value2"] != null ? h[d]["_value2"] : h[d].getAttribute("_value2"),
                                value3: h[d]["_value3"] != null ? h[d]["_value3"] : h[d].getAttribute("_value3"),
                                value4: h[d]["_value4"] != null ? h[d]["_value4"] : h[d].getAttribute("_value4"),
                                value5: h[d]["_value5"] != null ? h[d]["_value5"] : h[d].getAttribute("_value5"),
                                item: "[ctid=" + h[d].getAttribute("ctid") + "]",
                                objid: o._objid != null ? o._objid : o.getAttribute("_objid")
                            });
                        }
                    }
                }
            }
            if (n && o.getAttribute("ctf") && o.getAttribute("ctf") == "tree_item") {
                if (o.getAttribute("ctid") == null) {
                    o.setAttribute("ctid", UUID.cID());
                }
                l.push({
                    value: o._value != null ? o._value : o.getAttribute("_value"),
                    value2: o._value2 != null ? o._value2 : o.getAttribute("_value2"),
                    value3: o._value3 != null ? o._value3 : o.getAttribute("_value3"),
                    value4: o._value4 != null ? o._value4 : o.getAttribute("_value4"),
                    value5: o._value5 != null ? o._value5 : o.getAttribute("_value5"),
                    item: "[ctid=" + o.getAttribute("ctid") + "]",
                    objid: o._objid != null ? o._objid : o.getAttribute("_objid")
                });
            }
            if (l.length == 0) {
                return null;
            } else {
                return l;
            }
        } finally {
            m = p = j = l = j = h = d = o = null;
        }
    };
    LEAP.tree.dispose = function(d) {
        if (item == null) {
            return;
        }
        d = LEAP._check(d, LEAP.tree.d);
        if (d == null) {
            return;
        }
        LEAP.removeElement(d);
    };
    LEAP.tree.isExpand = function(h) {
        if (h == null) {
            return false;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h);
        }
        if (h == null) {
            return false;
        }
        var d = h;
        if (h.getAttribute("treestyle2") == "1") {
            d = LEAP.getElement(">h3:first", h);
        }
        var g = LEAP.getElement("a>label:first", d);
        if (g != null && g.className == "tree_opened") {
            g = h = null;
            return true;
        }
        return false;
    };
    LEAP.tree.removeItem = function(g, l, d) {
        if (l == null) {
            return;
        }
        g = LEAP._check(g, LEAP.tree.d);
        if (g == null) {
            return;
        }
        if (typeof(l) == "string") {
            l = LEAP.getElement(l, g);
        }
        if (l == null) {
            return;
        }
        if (d == true) {
            var j = LEAP.tree.getParent(l);
            var m = LEAP.tree.getChild(j);
            if (m != null && m.length == 1) {
                var h = LEAP.getElement("a>label:first", j);
                h.className = "";
                m = h = null;
            }
            j = null;
        }
        LEAP.removeElement(l, false);
        g = l = null;
    };
    LEAP.tree.removeChilds = function(g, h) {
        if (h == null) {
            return;
        }
        g = LEAP._check(g, LEAP.tree.d);
        if (g == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h, g);
        }
        if (h == null) {
            return;
        }
        var d = LEAP.getElement("UL", h);
        if (d != null) {
            h.removeChild(d);
        }
        d = g = h = null;
    };
    LEAP.tree.clearItem = function(d) {
        d = LEAP._check(d, LEAP.tree.d);
        if (d == null) {
            return;
        }
        d.removeAttribute("selected");
        d.innerHTML = "";
        d = null;
    };
    LEAP.tree.setSelectedItem = function(h, j) {
        if (h == null) {
            return;
        }
        h = LEAP._check(h, LEAP.tree.d);
        if (h == null) {
            return;
        }
        if (typeof(j) == "string") {
            j = LEAP.getElement(j, h);
        }
        if (j == null) {
            h.removeAttribute("selected");
            LEAP.setAttribute(LEAP.getElements("a.tree_item_on", h), "className", "");
            return;
        }
        if (j.getAttribute("ctid") == null) {
            j.setAttribute("ctid", UUID.cID());
        }
        LEAP.setAttribute(LEAP.getElements("a.tree_item_on", h), "className", "");
        var g = j;
        if (j.getAttribute("treestyle2") == "1") {
            g = LEAP.getElement(">h3:first", j);
        }
        LEAP.getElement(">a:last", g).className = "tree_item_on";
        var d = h.getAttribute("selected");
        h.setAttribute("selected", j.getAttribute("ctid"));
        if (d != h.getAttribute("selected")) {
            ElementEventManager.handleEvent(h, "selectedItemChange", {
                tree: h,
                value: j.getAttribute("_value"),
                value2: j.getAttribute("_value2"),
                value3: j.getAttribute("_value3"),
                value4: j.getAttribute("_value4"),
                value5: j.getAttribute("_value5"),
                objid: j._objid != null ? j._objid : j.getAttribute("_objid"),
                text: LEAP.tree.getItemText(j),
                item: "[ctid=" + j.getAttribute("ctid") + "]",
                data: j.data
            });
        }
        h = j = null;
    };
    LEAP.tree.getSelectedItem = function(g) {
        g = LEAP._check(g, LEAP.tree.d);
        if (g == null) {
            return;
        }
        var d = LEAP.getElement("a.tree_item_on", g);
        if (d != null) {
            var h = LEAP._match(d, "tree_item", commfields.ctf, 99);
            if (h != null) {
                if (h.getAttribute("ctid") == null) {
                    h.setAttribute("ctid", UUID.cID());
                }
                return "[ctid=" + h.getAttribute("ctid") + "]";
            }
        }
        g = d = null;
    };
    LEAP.tree.isHalfChecked = function(j, l) {
        if (l == null) {
            return;
        }
        j = LEAP._check(j, LEAP.tree.d);
        if (j == null) {
            return;
        }
        if (typeof(l) == "string") {
            l = LEAP.getElement(l, j);
        }
        if (l == null) {
            return;
        }
        var h = l;
        if (l.getAttribute("treestyle2") == "1") {
            h = LEAP.getElement(">h3:first", l);
        }
        var d = LEAP.getElement("a>input:first", h);
        try {
            if (d != null) {
                var g = d.getAttribute("indeterminate");
                if (g == "true" || g == true) {
                    return true;
                }
            }
            return false;
        } finally {
            j = d = l = null;
        }
    };
    LEAP.tree.setItemHalfChecked = function(h, l, j) {
        if (l == null) {
            return;
        }
        h = LEAP._check(h, LEAP.tree.d);
        if (h == null) {
            return;
        }
        if (typeof(l) == "string") {
            l = LEAP.getElement(l, h);
        }
        if (l == null) {
            return;
        }
        if (l.getAttribute("ctid") == null) {
            l.setAttribute("ctid", UUID.cID());
        }
        if (j == null) {
            j = true;
        }
        var g = l;
        if (l.getAttribute("treestyle2") == "1") {
            g = LEAP.getElement(">h3:first", l);
        }
        var d = LEAP.getElement("a>input:first", g);
        if (d != null) {
            if (j != false) {
                d.setAttribute("indeterminate", true);
            } else {
                d.setAttribute("indeterminate", null);
                d.removeAttribute("indeterminate");
            }
        }
        h = l = d = null;
    };
    LEAP.tree.getHalfCheckedItems = function(m) {
        m = LEAP._check(m, LEAP.tree.d);
        if (m == null) {
            return;
        }
        var g = LEAP.getElements("input[indeterminate]", m);
        if (g != null) {
            var d = g.length;
            var h = [];
            for (var j = 0; j < d; j++) {
                var n = LEAP._match(g[j], "tree_item", commfields.ctf, 99);
                if (n.getAttribute("ctid") == null) {
                    n.setAttribute("ctid", UUID.cID());
                }
                h.push("[ctid=" + n.getAttribute("ctid") + "]");
                n = g[j] = null;
            }
            return h;
        }
    };
    LEAP.tree.isChecked = function(j, l) {
        if (l == null) {
            return;
        }
        j = LEAP._check(j, LEAP.tree.d);
        if (j == null) {
            return;
        }
        if (typeof(l) == "string") {
            l = LEAP.getElement(l, j);
        }
        if (l == null) {
            return;
        }
        var h = l;
        if (l.getAttribute("treestyle2") == "1") {
            h = LEAP.getElement(">h3:first", l);
        }
        var d = LEAP.getElement("a>input:first", h);

        try {
            if (d != null) {
                var g = d.getAttribute("checked");
                if (g == "true" || g == true) {
                    return true;
                }
            }
            return false;
        } finally {
            j = d = l = null;
        }
    };
    LEAP.tree.setItemChecked = function(h, l, j) {
        if (l == null) {
            return;
        }
        h = LEAP._check(h, LEAP.tree.d);
        if (h == null) {
            return;
        }
        if (typeof(l) == "string") {
            l = LEAP.getElement(l, h);
        }
        if (l == null) {
            return;
        }
        if (l.getAttribute("ctid") == null) {
            l.setAttribute("ctid", UUID.cID());
        }
        if (j == null) {
            j = true;
        }
        var g = l;
        if (l.getAttribute("treestyle2") == "1") {
            g = LEAP.getElement(">h3:first", l);
        }
        var d = LEAP.getElement("a>input:first", g);
        if (d != null) {
            if (j != false) {
                LEAP.setInputCheck(d);
            } else {
                LEAP.setInputUnCheck(d);
            }
        }
        h = l = d = null;
    };
    LEAP.tree.setCheckedItems = function(h, p) {
        if (p == null || p.length == 0) {
            return;
        }
        h = LEAP._check(h, LEAP.tree.d);
        if (h == null) {
            return;
        }
        var l = LEAP.getElements("[ctf=tree_item]", h);
        if (l) {
            for (var j = 0; j < l.length; j++) {
                var o = l[j];
                var d = o._value != null ? o._value : o.getAttribute("_value");
                var m = false;
                for (var g = 0; g < p.length; g++) {
                    if (p[g] == d) {
                        m = true;
                        break;
                    }
                }
                var n = o.childNodes[0].childNodes[2];
                if (n) {
                    if (m) {
                        LEAP.setInputCheck(n);
                    } else {
                        LEAP.setInputUnCheck(n);
                    }
                }
            }
        }
    };
    LEAP.setInputChecked = function(d, j) {
        if (d && d.tagName && d.tagName == "INPUT") {
            if (d.parentElement) {
                var m = document.createElement("input");
                m.type = "checkbox";
                m.className = d.className;
                m.setAttribute("ct", d.getAttribute("ct"));
                m.setAttribute("ctf", d.getAttribute("ctf"));
                var h = d.getAttribute("disabled");
                if (d.nextSibling) {
                    var g = d.nextSibling;
                    var l = d.parentElement;
                    l.removeChild(d);
                    l.insertBefore(m, g);
                    l = g = null;
                } else {
                    var l = d.parentElement;
                    l.removeChild(d);
                    l.appendChild(m);
                    l = null;
                }
                if (j) {
                    m.setAttribute("checked", "true");
                }
                if (h && h != "false") {
                    m.setAttribute("disabled", "true");
                }
                m = null;
            }
        }
        d = null;
    };
    LEAP.setInputUnCheck = function(d) {
        LEAP.setInputChecked(d, false);
    };
    LEAP.setInputCheck = function(d) {
        LEAP.setInputChecked(d, true);
    };
    LEAP.tree.setItemChildChecked = function(m, o, n) {
        m = LEAP._check(m, LEAP.tree.d);
        if (m == null) {
            return;
        }
        if (o != null) {
            if (typeof(o) == "string") {
                o = LEAP.getElement(o, m);
            }
            if (o == null) {
                return;
            }
            if (o.getAttribute("ctid") == null) {
                o.setAttribute("ctid", UUID.cID());
            }
        } else {
            o = m;
        }
        if (n == null) {
            n = true;
        }
        var h = LEAP.getElements("input[type=checkbox]", o);
        if (h != null) {
            var g = h.length;
            for (var j = 0; j < g; j++) {
                var d = h[j];
                if (n != false) {
                    LEAP.setInputCheck(d);
                } else {
                    LEAP.setInputUnCheck(d);
                }
            }
        }
        h = m = o = null;
    };
    LEAP.tree.getCheckedItems = function(m) {
        m = LEAP._check(m, LEAP.tree.d);
        if (m == null) {
            return;
        }
        var g = LEAP.getElements("input:checked", m);
        if (g != null) {
            var d = g.length;
            var h = [];
            for (var j = 0; j < d; j++) {
                var n = LEAP._match(g[j], "tree_item", commfields.ctf, 99);
                if (n.getAttribute("ctid") == null) {
                    n.setAttribute("ctid", UUID.cID());
                }
                h.push("[ctid=" + n.getAttribute("ctid") + "]");
                n = g[j] = null;
            }
            return h;
        }
    };
    LEAP.tree.getCheckedValues = function(m) {
        m = LEAP._check(m, LEAP.tree.d);
        if (m == null) {
            return;
        }
        var g = LEAP.getElements("input:checked", m);
        if (g != null) {
            var d = g.length;
            var h = [];
            for (var j = 0; j < d; j++) {
                var n = LEAP._match(g[j], "tree_item", commfields.ctf, 99);
                h.push(n._value != null ? n._value : n.getAttribute("_value"));
                n = g[j] = null;
            }
            return h;
        }
    };
    LEAP.tree.removeCheckedItems = function(j) {
        j = LEAP._check(j, LEAP.tree.d);
        if (j == null) {
            return;
        }
        var g = LEAP.getElements("input:checked", j);
        if (g != null) {
            var d = g.length;
            for (var h = 0; h < d; h++) {
                var m = LEAP._match(g[h], "tree_item", commfields.ctf, 99);
                LEAP.removeElement(m, false);
                m = g[h] = null;
            }
        }
    };
    LEAP.tree.getParent = function(d) {
        if (d == null) {
            return;
        }
        if (typeof(d) == "string") {
            d = LEAP.getElement(d);
        }
        if (d == null) {
            return;
        }
        var g = null;
        try {
            if ((d[commfields.ctf] == "tree_item" || d.getAttribute(commfields.ctf)) && d.parentNode != null) {
                g = LEAP._match(d.parentNode, "tree_item", "ctf", 99);
                if (g == null) {
                    return;
                }
                if (g.getAttribute("ctid") == null) {
                    g.setAttribute("ctid", UUID.cID());
                }
                return "[ctid=" + g.getAttribute("ctid") + "]";
                g = null;
            }
        } finally {
            g = d = null;
        }
    };
    LEAP.tree.updateItem = function(g, j, h) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g);
        }
        if (g == null) {
            return;
        }
        if (g[commfields.ctf] == "tree_item") {
            var d = LEAP.getElement(">a:last", g);
            if (d != null) {
                d.innerText = j;
            }
            if (h == null) {
                g.removeAttribute("_value");
            } else {
                g.setAttribute("_value", h);
            }
            d = null;
        }
        g = null;
        h = null;
    };
    LEAP.tree.getItemText = function(g) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g);
        }
        if (g == null) {
            return;
        }
        if (g[commfields.ctf] == "tree_item" || g.getAttribute(commfields.ctf) == "tree_item") {
            var d = LEAP.getElement(">a:last", g);
            if (d != null) {
                return d.innerText;
            }
            d = null;
        }
        g = null;
    };
    LEAP.tree.setItemText = function(d, g) {
        LEAP.tree.getItemText = function(j) {
            if (j == null) {
                return;
            }
            if (typeof(j) == "string") {
                j = LEAP.getElement(j);
            }
            if (j == null) {
                return;
            }
            if (j[commfields.ctf] == "tree_item") {
                var h = LEAP.getElement(">a:last", j);
                if (h != null) {
                    h.innerText = g;
                }
                h = null;
            }
            j = null;
            g = null;
        };
    };
    LEAP.areamap = new Object();
    LEAP.areamap.d = "areamap";
    LEAP.areamap.all = new hashtable();
    LEAP.areamap.datas = new hashtable();
    LEAP.areamap.datalist = new hashtable();
    LEAP.areamap.tipDiv = null;
    LEAP.areamap._init = function() {
        var d = LEAP.areamap.tipDiv = document.createElement("div");
        d.className = "areamaptip";
        d.style.display = "none";
        document.body.appendChild(d);
        d = null;
        UIEventManager.removeEvent(window, "load", LEAP.areamap._init);
        LEAP.addEvent(document.body, "click", LEAP.areamap.uiProcess, null, null, true);
    };
    LEAP.areamap.init = function() {
        if (document != null && document.body != null) {
            LEAP.areamap._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.areamap._init);
        }
        ElementEventManager.addManagedEventType(LEAP.areamap.d, "valueChange");
    };
    LEAP.areamap.administrativeAttr = {
        fill: "#3FA9F5",
        stroke: "#ddd",
        "stroke-width": 1,
        "stroke-linejoin": "round"
    };
    LEAP.areamap.i = function(j, d) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (j != null) {
            var n = function() {
                LEAP.areamap.i(null, d);
                d = null;
            };
            setTimeout(n, j);
            return;
        }
        var h = d.parentElement;
        var l = null;
        if (h != null) {
            l = h.getAttribute("ctid");
            if (!l) {
                l = UUID.cID();
                h.setAttribute("ctid", l);
            }
        } else {
            return;
        }
        var m = h.getAttribute(commfields.ct);
        if (m && m == LEAP.areamap.d) {
            h.removeChild(d);
            d = null;
            var g = h.getAttribute("areaid");
            var o = h.getAttribute("countyid");
            var p = h.getAttribute("arealevel");
            LEAP.areamap.draw(h, o, g, p);
        }
    };
    LEAP.areamap.uiProcess = function(p) {
        var d = p.e.srcElement;
        var l = p.e.type;
        var q = d.tagName;
        if (l == "click") {
            var j = LEAP._match(d, LEAP.areamap.d);
            if (j) {
                var g = d.getAttribute("_dataid");
                if (g) {
                    var h = LEAP.areamap.datalist.getvalue(g);
                    if (h) {
                        if (h.arealevel > 0 && h.areaid) {
                            LEAP.areamap.draw(j, h.countryid, h.areaid, null);
                        } else {
                            if (h.arealevel == 0 && h.countryid) {
                                LEAP.areamap.draw(j, h.countryid, h.areaid, 1);
                            }
                        }
                    }
                }
                var m = d.getAttribute("ctf");
                if (m && m == "areamap_backbtn") {
                    var o = j._keys;
                    if (o && o.length > 1) {
                        var n = o[o.length - 2];
                        o.removeindex(o.length - 1);
                        LEAP.areamap.draw(j, n.countryid, n.parentID, n.arealevel);
                    }
                }
            }
        }
        j = null;
    };
    LEAP.areamap.drawPin = function(j, m) {
        var p = j.getBBox();
        var o = Math.floor(p.x + p.width / 2) - 15;
        var n = Math.floor(p.y + p.height / 2) - 30;
        var d = m.path("M16,3.5c-4.142,0-7.5,3.358-7.5,7.5c0,4.143,7.5,18.121,7.5,18.121S23.5,15.143,23.5,11C23.5,6.858,20.143,3.5,16,3.5z M16,14.584c-1.979,0-3.584-1.604-3.584-3.584S14.021,7.416,16,7.416S19.584,9.021,19.584,11S17.979,14.584,16,14.584z");
        j.pin = d;
        var g = "t" + o + "," + (n - 15);
        var h = "t" + o + "," + (n);
        d.attr({
            fill: "#F92672",
            stroke: "#fff",
            opacity: 0
        }).animate({
            opacity: 1
        }, 1200);
        d.transform(g);
        d.toFront();
        var l = function() {
            var q = d.transform() == g ? h : g;
            d.animate({
                transform: q
            }, 500, "<>", l);
        };
        l();
    };
    LEAP.areamap.getTransfromString = function(n, o, m, l) {
        var h = Raphael.pathBBox(n);
        var g = h.x * o + (h.x2 * o - h.x * o) / 2 - h.cx;
        var d = h.y * o + (h.y2 * o - h.y * o) / 2 - h.cy;
        var j = {
            str: "t" + (g + m) + "," + (d + l) + "s" + o,
            tx: g + m,

            ty: d + l,
            s: o,
            cx: h.cx,
            cy: h.cy
        };
        return j;
    };
    LEAP.areamap.getPostion = function(h, g, l) {
        var d = g;
        if (l) {
            d += "_" + l;
        }
        var j = LEAP.areamap.all.getvalue(LEAP.ctid(h));
        if (j) {
            var n = j.paths;
            if (n) {
                var m = n.getvalue(d);
                if (m) {
                    return m.pos;
                }
            }
        }
    };
    LEAP.areamap.drawBackButton = function(g) {
        var d = g.path("M21.122,22.041L38.5,32.074v-5.155c0,0,3.83,0,7.529,0c3.7,0,7.885,4.854,7.885,4.854s-1.141-11.417-5.326-13.32C44.399,16.551,38.5,17.161,38.5,17.161v-5.154L21.122,22.041z");
        d.attr({
            fill: "#929293",
            stroke: "none",
            title: "back to top area",
            cursor: "pointer"
        });
        d.hover(function() {
            this.animate({
                stroke: "#8A8A8A",
                "stroke-width": 2
            }, 500);
        }, function() {
            this.animate({
                stroke: "none",
                "stroke-width": 0
            }, 500);
        });
        d.node.setAttribute("ctf", "areamap_backbtn");
    };
    LEAP.areamap.drawCallBack = function(S, x) {
        var j = LEAP.getElement("[ctid=" + x.ctid + "]");
        var D = LEAP.areamap.all.getvalue(x.ctid);
        if (D == null) {
            D = {};
            D.gra = Raphael(j, "100%", "100%");
            LEAP.areamap.all.add(x.ctid, D);
            D.paths = new hashtable();
        } else {
            if (S != null) {
                D.paths.clear();
                D.gra.clear();
            }
        }
        var U = x.countryid + "_" + x.parentID + "_" + x.arealevel;
        if (!LEAP.areamap.datas.contains(U)) {
            LEAP.areamap.datas.add(U, {
                arg: x,
                datas: S
            });
            if (S) {
                var I = S.length;
                for (var O = 0; O < I; O++) {
                    LEAP.areamap.datalist.add(S[O].id, S[O]);
                }
            }
        }
        if (S == null) {
            return;
        }
        var L = j._keys;
        if (L == null) {
            L = [];
            j._keys = L;
            L.add(x);
        } else {
            var I = L.length;
            var g = false;
            for (var O = 0; O < I; O++) {
                var U = L[O];
                if (U.countryid == x.countryid && U.parentID == x.parentID && U.arealevel == x.arealevel) {
                    g = true;
                    break;
                }
            }
            if (!g) {
                L.add(x);
            }
        }
        if (L.length > 1) {
            LEAP.areamap.drawBackButton(D.gra);
        }
        var K = Raphael.animation({
            opacity: 1
        }, 1200, "elastic");
        var I = S.length;
        var u, q, p, n;
        for (var O = 0; O < I; O++) {
            var A = Raphael.pathBBox(S[O].pathe);
            if (O == 0) {
                u = A.x;
                q = A.x2;
                p = A.y;
                n = A.y2;
            } else {
                if (A.x < u) {
                    u = A.x;
                }
                if (A.x2 > q) {
                    q = A.x2;
                }
                if (A.y < p) {
                    p = A.y;
                }
                if (A.y2 > n) {
                    n = A.y2;
                }
            }
        }
        var T = 1;
        var B = j.offsetWidth - 50;
        var P = j.offsetHeight - 50;
        if (B - (q - u) > 50 && P - (n - p) > 50) {
            if ((B - (q - u)) < (P - (n - p))) {
                T = B / (q - u);
            } else {
                T = P / (n - p);
            }
        } else {
            if (B - (q - u) < 0 || P - (n - p) < 0) {
                if ((B - (q - u)) < (P - (n - p))) {
                    T = B / (q - u);
                } else {
                    T = P / (n - p);
                }
            }
        }
        var v = -u * T + 25 + (B - (q - u) * T) / 2;
        var r = -p * T + 25 + (P - (n - p) * T) / 2;
        var J = null;
        var R = j.instance || j.getAttribute("instance");
        if (R) {
            var d = LEAP.getLoadedModule(R);
            if (d && d.onAreamapGetDataColors) {
                try {
                    J = d.onAreamapGetDataColors.call(d, S);
                } catch (Q) {}

            }
        }
        for (var O = 0; O < I; O++) {
            var m = S[O];
            var U = m.countryid;
            if (m.areaid) {
                U += "_" + m.areaid;
            }
            if (m.pathe) {
                var F = {};
                F.pathe = D.gra.path(m.pathe);
                var H = LEAP.clone(LEAP.areamap.administrativeAttr);
                if (J != null && J.contains(m.id) && J.getvalue(m.id)) {
                    H.fill = J.getvalue(m.id);
                }
                F.pathe.attr(H).attr("opacity", 0).animate(K.delay(500));
                var z = null;
                if (T != 1) {
                    z = LEAP.areamap.getTransfromString(m.pathe, T, v, r);
                    F.pathe.transform(z.str);
                    if (!isNaN(m.cx)) {
                        F.pos = {
                            x: Number(m.cx) + Number(z.tx),
                            y: Number(m.cy) + Number(z.ty)
                        };
                    } else {
                        F.pos = {
                            x: Number(z.cx) + Number(z.tx),
                            y: Number(z.cy) + Number(z.ty)
                        };
                    }
                } else {
                    F.pathe.translate(v, r);
                    if (!isNaN(m.cx)) {
                        F.pos = {
                            x: Number(m.cx) + Number(v),
                            y: Number(m.cy) + Number(r)
                        };
                    } else {
                        var G = Raphael.pathBBox(m.pathe);
                        F.pos = {
                            x: Number(G.cx) + Number(v),
                            y: Number(G.cy) + Number(r)
                        };
                    }
                }
                F.pathe.node.setAttribute("_dataid", m.id);
                F.pathe.node.setAttribute("_ctid", x.ctid);
                F.obj = m;
                D.paths.add(U, F);
                var C = F.pathe;
                if (m.cx && m.cy) {
                    F.adText = D.gra.text(m.cx, m.cy, m.name).attr({
                        font: "12px 宋体 Arial",
                        "text-anchor": "start"
                    });
                    if (T != 1) {
                        F.adText.translate(z.tx, z.ty);
                    } else {
                        F.adText.translate(v, r);
                    }
                }
                if (m.name == "China") {
                    LEAP.asyn(LEAP.areamap.drawPin, null, 500, F.pathe, D.gra);
                }
                if (m.name) {
                    var N = function(W) {
                        var X = this.cd.pathe;
                        if (!X.orgAttrs) {
                            X.orgAttrs = {};
                            for (var Y in X.attrs) {
                                X.orgAttrs[Y] = X.attrs[Y];
                            }
                        }
                        X.attr("cursor", "pointer");
                        if (this.hasOwnProperty("adText")) {
                            this.adText.attr("cursor", "pointer");
                        }
                        X.animate({
                            "stroke-width": "4",
                            fill: "red",
                            stroke: "white",
                            opacity: "0.7"
                        }, 300, ">");
                        var V, l;
                        if (isNaN(W.pageX)) {
                            V = W.clientX + document.body.scrollLeft - document.body.clientLeft;
                            l = W.clientY + document.body.scrollTop - document.body.clientTop;
                        } else {
                            V = W.pageX;
                            l = W.pageY;
                        }
                        var o = false;
                        var w = LEAP._match(X.node, LEAP.areamap.d);
                        if (w) {
                            var Z = w.instance || w.getAttribute("instance");
                            if (Z) {
                                var h = LEAP.getLoadedModule(Z);
                                if (h && h.onShowItemInfo) {
                                    try {
                                        LEAP.areamap._lastII = h.onShowItemInfo(h, this.cd, V, l);
                                        if (LEAP.areamap._lastII) {
                                            o = true;
                                        }
                                    } catch (W) {}
                                }
                            }
                        }
                        if (!o) {
                            LEAP.areamap.tipDiv.innerHTML = this.cd.obj.name;
                            LEAP.areamap.tipDiv.style.left = V + 5 + "px";
                            LEAP.areamap.tipDiv.style.top = l + 20 + "px";
                            LEAP.areamap.tipDiv.style.display = "block";
                        }
                        D.gra.safari();
                    };
                    var M = function(V) {
                        LEAP.areamap.tipDiv.style.display = "none";
                        var w = this.cd.pathe;
                        w.animate({
                            fill: w.orgAttrs.fill,
                            stroke: w.orgAttrs.stroke,
                            "stroke-width": "1",
                            opacity: "1"
                        }, 300, ">");
                        var o = LEAP._match(w.node, LEAP.areamap.d);
                        if (o) {
                            var h = o.instance || o.getAttribute("instance");
                            if (h) {
                                var l = LEAP.getLoadedModule(h);
                                if (l && l.onHideItemInfo) {
                                    try {
                                        l.onHideItemInfo(l, LEAP.areamap._lastII);
                                        hasShow = true;
                                    } catch (V) {}
                                }
                            }
                        }
                    };
                    var y = D.gra.set();
                    y.push(C);
                    if (m.name) {
                        y.push(m.name);
                    }
                    y.hover(N, M, {
                        cd: F,
                        arg: x
                    }, {
                        cd: F,
                        arg: x
                    });
                }
            }
        }
        ElementEventManager.handleEvent(j, "valueChange", {
            caller: j,
            countryid: x.countryid,
            parentID: x.parentID,
            arealevel: x.arealevel
        });
    };
    LEAP.areamap.onClick = function(h) {
        var g = h.cd.obj;
        if (g.areaid || g.countryid) {
            var d = g.countryid + "_" + g.areaid + "_null";
            var j = LEAP.areamap.datas.getvalue(d);
            if (j) {
                LEAP.areamap.drawCallBack(j, {
                    countryid: g.countryid,
                    parentID: g.areaid,
                    arealevel: null,
                    ctid: h.arg.ctid
                });
            } else {
                LEAP.request2({
                    name: "SVGArea_get",
                    par: {
                        countryid: g.countryid,
                        parentID: g.areaid,
                        arealevel: null
                    },
                    callback: LEAP.areamap.drawCallBack,
                    arg: {
                        countryid: g.countryid,
                        parentID: g.areaid,
                        arealevel: null,
                        ctid: h.arg.ctid
                    }
                });
            }
        }
    };
    LEAP.areamap.draw = function(j, h, m, d) {
        if (!h) {
            h = null;
        }
        if (!m) {
            m = null;
        }
        if (!d) {
            d = null;
        }
        try {
            j = LEAP._check(j, LEAP.areamap.d);
            if (j == null) {
                return;
            }
            var g = h + "_" + m + "_" + d;
            var l = LEAP.areamap.datas.getvalue(g);
            if (l) {
                LEAP.areamap.drawCallBack(l.datas, l.arg);
            } else {
                LEAP.request2({
                    name: "SVGArea_get",
                    par: {
                        countryid: h,
                        parentID: m,
                        arealevel: d
                    },
                    callback: LEAP.areamap.drawCallBack,
                    arg: {
                        countryid: h,
                        parentID: m,
                        arealevel: d,
                        ctid: LEAP.ctid(j),
                        key: g
                    }
                });
            }
        } finally {
            j = null;
        }
    };
    LEAP.areamap.init();
    LEAP.automodule = {};
    LEAP.automodule.i = function(h) {
        if (!h) {
            if (!event) {
                return;
            }
            h = event.srcElement;
        }
        var d = h.parentElement;
        d.innerHTML = '<table cellpadding="0" cellspacing="0" border="0" style="height:100%;width:100%;"><td align="center" valign="middle"><img src="' + PublishServerConfig.getURL("LEAP/Resource/images/itemstyle/form/p.gif") + '" ></td></table>';
        var g = d.getAttribute("modulename");
        var j = LEAP.ctid(d);
        if (g != null) {
            LEAP.asyn(LEAP.automodule.l, null, 100, j, d.getAttribute("instance"), g);
        }
        d = h = null;
    };
    LEAP.automodule.l = function(l, d, h) {
        var g = LEAP.getElement("DIV[ctid=" + l + "]:first");
        try {
            if (h != null) {
                var d = g.getAttribute("instance");
                if (d != null) {
                    LEAP.getLoadedModule(d).loadModule2({
                        name: h,
                        parent: g
                    });
                } else {
                    LEAP.loadModule2({
                        name: h,
                        parent: g
                    });
                }
            }
        } catch (j) {
            if (isdebug) {
                throw j;
            }
        } finally {
            g = null;
        }
    };
    LEAP.barcode = new Object();
    LEAP.barcode.d = "barcode";
    LEAP.barcode.getValue = function(g) {
        g = LEAP._check(g, LEAP.docedit.d);
        if (g == null) {
            return;
        }
        try {
            var d = g.getAttribute(commfields._value);
            if (d == null || isNaN(d) || String.isEmpty(d)) {
                return null;
            }
            return d;
        } finally {
            g = null;
        }
    };
    LEAP.barcode.setValue = function(g, h) {
        g = LEAP._check(g, LEAP.barcode.d);
        if (g == null) {
            return;
        }
        try {
            var j = (g.tagName == "IMAGE" || g.tagName == "IMG");
            if (h == null || isNaN(h) || String.isEmpty(h)) {
                g.removeAttribute(commfields._value);
                if (j) {
                    g.src = "";
                } else {
                    g.style.backGroundImage = "";
                }
            } else {
                var d = new StringBuffer(leapconfig.server);
                d.append("LEAP/Service/RPC/RPC.DO?sid=");
                d.append(leapclient.getsid());
                d.append("&service=leap&method=getBarCode&callService=leap&returnJSON=false&code=");
                d.append(h.trim());
                g.setAttribute(commfields._value, h.trim());
                if (j) {
                    g.src = d.toString();
                } else {
                    g.style.backGroundImage = d.toString();
                }
            }
        } finally {
            g = null;
        }
    };
    LEAP.chart = {};
    LEAP.chart.loads = [];
    LEAP.chart.show = function(n, m, h) {
        if (h == null || n == null) {
            return;
        }
        try {
            var l = LEAP.request("getChartDataXML", {
                serviceName: n,
                searchParameters: m
            });
            if (l != null) {
                if (typeof(h) == "string") {
                    h = LEAP.getElement(h);
                }
                var g = h.getAttribute("id");
                if (g == null || g == "" || (typeof(g) == "string" && g.Trim() == "")) {
                    g = "chart_con_" + UUID.cID();
                    h.setAttribute("id", g);
                }
                var j = "chart_" + UUID.cID();
                var q = l.type;
                var p = leapconfig.server;
                var d = "LEAP/Resource/Chart/fun/";
                if (q == 1) {
                    d += "bar";
                } else {
                    if (q == 2) {
                        d += "mbar";
                    } else {
                        if (q == 3) {
                            d += "MSLine";
                        } else {
                            if (q == 4) {
                                d += "Angular";
                            } else {
                                if (q = 5) {
                                    d += "barline";
                                }
                            }
                        }
                    }
                }
                d += ".swf";
                p += d;
                if (!LEAP.chart.loads.contains(d)) {
                    leapclient.load(d);
                    LEAP.chart.loads.add(d);
                }
                var o = new FusionCharts(p, j, h.clientWidth + "", h.clientHeight + "", "0", "0");
                o.addParam("wmode", "Opaque");
                o.setDataXML(l.data);
                o.render(g);
                o = null;
            } else {
                if (typeof(h) == "string") {
                    h = LEAP.getElement(h);
                }
                h.innerHTML = "";
            }
        } finally {
            h = null;
        }
    };
    LEAP.colorSelect = function(n, q, v, r, A) {
        if (document.getElementById("colorBoard")) {
            return;
        }
        v = v || event;
        var g = LEAP.getScrollPos();
        var o = g.l + v.clientX;
        var z = g.t + v.clientY + 10;
        if (o > LEAP.getBody().clientWidth - 253) {
            o = LEAP.getBody().clientWidth - 253;
        }
        if (z > LEAP.getBody().clientHeight - 253) {
            z = LEAP.getBody().clientHeight - 253;
        }
        var j = new Array("00", "33", "66", "99", "CC", "FF");
        var w = new Array("FF0000", "00FF00", "0000FF", "FFFF00", "00FFFF", "FF00FF");
        var u = document.createElement("div");
        u.setAttribute("id", "colorBank");
        u.style.width = "256px";
        u.setAttribute("unselectable", "on");
        var h = document.createElement("div");
        h.setAttribute("id", "colorViews");
        h.setAttribute("unselectable", "on");
        var d = document.createElement("input");
        d.setAttribute("id", "colorInput");
        d.setAttribute("type", "text");
        d.setAttribute("disabled", "disabled");
        d.setAttribute("unselectable", "on");
        var m = document.createElement("input");
        m.setAttribute("id", "colorClose");
        m.setAttribute("value", "关闭");
        m.setAttribute("type", "button");
        m.setAttribute("unselectable", "on");
        m.onclick = function() {
            document.body.removeChild(x);
        };
        var x = document.createElement("div");
        x.setAttribute("unselectable", "on");
        x.id = "colorBoard";
        x.style.left = o + "px";
        x.style.top = z + "px";
        x.style.width = "270px";
        x.style.zIndex = "999999";
        x.appendChild(h);
        x.appendChild(d);
        x.appendChild(m);
        x.appendChild(u);
        document.body.appendChild(x);
        var p = document.createElement("iframe");
        p.style.width = "100%";
        p.style.height = "220px";
        p.style.position = "absolute";
        p.style.top = "0px";
        p.style.left = "0px";
        p.style.zIndex = "-1";
        p.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)";
        p.style.opacity = "0";
        x.appendChild(p);
        for (b = 0; b < 6; b++) {
            for (a = 0; a < 3; a++) {
                for (i = 0; i < 6; i++) {
                    colorItem = document.createElement("div");
                    colorItem.setAttribute("unselectable", "on");
                    colorItem.style.backgroundColor = "#" + j[a] + j[i] + j[b];
                    u.appendChild(colorItem);
                }
            }
        }
        for (b = 0; b < 6; b++) {
            for (a = 3; a < 6; a++) {
                for (i = 0; i < 6; i++) {
                    colorItem = document.createElement("div");
                    colorItem.setAttribute("unselectable", "on");
                    colorItem.style.backgroundColor = "#" + j[a] + j[i] + j[b];
                    u.appendChild(colorItem);
                }
            }
        }
        for (i = 0; i < 6; i++) {
            colorItem = document.createElement("div");
            colorItem.setAttribute("unselectable", "on");
            colorItem.style.backgroundColor = "#" + j[0] + j[0] + j[0];
            u.appendChild(colorItem);
        }
        for (i = 0; i < 6; i++) {
            colorItem = document.createElement("div");
            colorItem.setAttribute("unselectable", "on");
            colorItem.style.backgroundColor = "#" + j[i] + j[i] + j[i];
            u.appendChild(colorItem);
        }
        for (i = 0; i < 6; i++) {
            colorItem = document.createElement("div");
            colorItem.setAttribute("unselectable", "on");
            colorItem.style.backgroundColor = "#" + w[i];
            u.appendChild(colorItem);
        }
        var y = u.getElementsByTagName("div");
        for (i = 0; i < y.length; i++) {
            y[i].onmouseover = function() {
                a = this.style.backgroundColor;
                if (a.length > 7) {
                    a = formatRgb(a);
                }
                h.style.background = a.toUpperCase();
                d.value = a.toUpperCase();
            };
            y[i].onclick = function() {
                a = this.style.backgroundColor;
                if (a.length > 7) {
                    a = formatRgb(a);
                }
                if (q == null) {
                    q = window;
                }
                n.apply(q, [a.toUpperCase(), r, A]);
                document.body.removeChild(x);
            };
        }
    };

    function formatRgb(rgb) {
        rgb = rgb.replace("rgb", "");
        rgb = rgb.replace("(", "");
        rgb = rgb.replace(")", "");
        format = rgb.split(",");
        a = eval(format[0]).toString(16);
        b = eval(format[1]).toString(16);
        c = eval(format[2]).toString(16);
        rgb = "#" + checkFF(a) + checkFF(b) + checkFF(c);

        function checkFF(str) {
            if (str.length == 1) {
                str = str + "" + str;
                return str;
            } else {
                return str;
            }
        }
        return rgb;
    }
    LEAP.getBody = function() {
        var d;
        if (typeof document.compatMode != "undefined" && document.compatMode != "BackCompat") {
            d = document.documentElement;
        } else {
            if (typeof document.body != "undefined") {
                d = document.body;
            }
        }
        return d;
    };
    LEAP.getScrollPos = function() {
        var h, d;
        if (typeof window.pageYOffset != "undefined") {
            h = window.pageYOffset;
            d = window.pageXOffset;
        } else {
            h = LEAP.getBody().scrollTop;
            d = LEAP.getBody().scrollLeft;
        }
        var g = {
            t: h,
            l: d
        };
        return g;
    };
    LEAP.date = {};
    LEAP.date.d = "date";
    LEAP.date._pm = LEAPBrowser && ((LEAPBrowser.documentMode && LEAPBrowser.documentMode < 7) || (LEAPBrowser.IEVersion && LEAPBrowser.IEVersion == 7 && !LEAPBrowser.documentMode)) ? "absolute" : "fixed";
    LEAP.date._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.date.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keypress", LEAP.date.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keyup", LEAP.date.uiProcess, null, null, true);
        if (LEAP.isIE) {
            LEAP.addEvent(document.body, "focusin", LEAP.date.uiProcess, null, null, true);
            LEAP.addEvent(document.body, "focusout", LEAP.date.uiProcess, null, null, true);
        } else {
            document.addEventListener("focus", LEAP.date.uiProcess, true);
            document.addEventListener("blur", LEAP.date.uiProcess, true);
        }
        UIEventManager.removeEvent(window, "load", LEAP.date._init);
        loadcalendar();
    };
    LEAP.date.init = function() {
        if (document != null && document.body != null) {
            LEAP.date._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.date._init);
        }
        ElementEventManager.addManagedEventType(LEAP.date.d, "valueChange");
    }();
    LEAP.date.uiProcess = function(n) {
        var D = null;
        var o = null;
        var y = null;
        var m = null;
        if (n != null && n.e != null && n.e.type != null) {
            m = n.e.type;
        }
        if (m != null) {
            o = n.e.srcElement;
            D = n.e;
            if (LEAP.isIE) {
                y = D.keyCode;
            } else {
                y = D.which;
            }
        } else {
            D = n;
            o = n.target;
            y = D.which;
        }
        if (m == "click") {
            var H = LEAP._match(o, "d_panel_group");
            if (H == null) {
                LEAP.getElement("#calendar").style.display = "none";
                LEAP.getElement("#calendar_year").style.display = "none";
                LEAP.getElement("#calendar_month").style.display = "none";
            }
        }
        if (o == null || o.getAttribute == null) {
            return;
        }
        var d = o.getAttribute(commfields.ctf);
        if (d == null) {
            return;
        }
        if (d.indexOf("date_") == -1 && d.indexOf("dates_") == -1) {
            return;
        }
        var g = LEAP._match(o, LEAP.date.d);
        if (g == null) {
            return;
        }
        var p = g.getAttribute("cdt");
        var G = g.getAttribute("bt");
        if (g.getAttribute("readonly") == "1") {
            return;
        }
        if (m == "click" && d == "date_show") {
            if (p == "1" && G == "datetime") {
                showcalendar(D, o.parentNode, true);
            } else {
                showcalendar(D, o.parentNode);
            }
        }
        if (d != "date_show") {
            var B = "";
            var r = -1;
            var q = o.value;
            var x = q.length;
            var h = d.substr(5, 1) * 1;
            var F = LEAP.getSelectedText(o);
            B = F.text;
            r = F.idx;
            if (m == "keypress") {
                var z = y - 48;
                if (y == 8 || y == 0 || y == 0 || y == 35 || y == 36 || y == 37 || y == 38 || y == 39 || y == 40) {
                    return;
                }
                if (D.ctrlKey && (y == 67 || y == 99)) {
                    return;
                }
                if (y < 48 || y > 57) {
                    if (LEAP.isIE) {
                        D.returnValue = false;
                    } else {
                        D.preventDefault();
                    }
                    return;
                } else {
                    if ((B == null || B == "") && (r != null) && r != -1 && r != 4) {
                        var q = o.value;
                        if (r == q.length) {
                            return;
                        }
                        o.value = q.substr(0, r) + q.substr(r + 1, q.length);
                        LEAP.date._s(o, r);
                    }
                }
            }
            var C = false;
            if (m == "keyup" || m == "focusout" || m == "blur" || m == "focusin" || m == "focus" || m == "click") {
                if (m == "keyup") {
                    if (((y >= 48 && y <= 57) || (y >= 96 && y <= 105)) && ((d == "date_1" && x == 4 && (r == null || r == 4)) || (d != "date_1" && x == 2 && (r == null || r == 2)))) {
                        var w = LEAP.getElement("input[ctf=date_" + (h + 1) + "]", o.parentNode);
                        if (w != null) {
                            w.focus();
                            if (!LEAP.isIE) {
                                C = true;
                            }
                        }
                        w = null;
                    }
                    if (y == 8 && z != 1 && r == 0) {
                        var u = LEAP.getElement("input[ctf=date_" + (h - 1) + "]", o.parentNode);
                        if (u != null) {
                            u.focus();
                            if (h - 1 == 1) {
                                LEAP.date._s(u, 4);
                            } else {
                                LEAP.date._s(u, 2);
                            }
                        }
                        u = null;
                    }
                }
                if (m == "focusin" || m == "focus") {
                    o.select();
                }
                if (m == "click") {
                    o.select();
                }
                if (m == "focusout" || m == "blur" || C) {
                    o.value = LEAP.date._c(q, x, h, o);
                    q = o.value;
                    x = q.length;
                    if (x == 0) {
                        return;
                    }
                    if ((h == 1 && x < 4) || (h > 1 && x < 2)) {
                        if (h == 1) {
                            for (var z = x; z < 4; z++) {
                                q = "0" + q;
                            }
                        } else {
                            q = "0" + q;
                        }
                        o.value = q;
                        return;
                    } else {}
                    var A = LEAP.date.getValue(g);
                    var j = g._lv;
                    if (j != A) {
                        if (j != A) {
                            ElementEventManager.handleEvent(g, "valueChange", {
                                caller: g,
                                pv: j,
                                lv: A
                            });
                            g._lv = A;
                        }
                    }
                }
            }
        }
    };
    LEAP.date._c = function(x, o, w, d) {
        var g = "";
        for (var p = 0; p < o; p++) {
            var u = x.charAt(p);
            if (u >= "0" && u <= "9") {
                g += u;
            }
        }
        if (g == "") {
            d.value = g;
            return g;
        }
        var h = g * 1;
        if (w == 1 && h < 1753) {
            g = "1753";
        }
        if (w == 2 && h > 12) {
            g = "12";
        }
        if (w == 3 && h > 28) {
            var q = LEAP.getElement("[ctf=date_1]", d.parentNode).value * 1;
            var j = LEAP.getElement("[ctf=date_2]", d.parentNode).value * 1;
            if (q != 0 && j == 2) {
                if (q % 400 == 0) {
                    g = 29;
                } else {
                    if (q % 100 == 0) {
                        g = 28;
                    }
                }
                if (q % 4 == 0) {
                    g = 29;
                } else {
                    g = 28;
                }
            }
            if (g * 1 > 31) {
                g = "31";
            }
        }
        if (w < 4 && g * 1 == 0) {
            g = "01";
            if (w == 1) {
                g = "00" + g;
            }
        }
        if (w == 4 && h > 24) {
            g = "24";
        }
        if ((w == 5 || w == 6) && h > 60) {
            g = "60";
        }
        return g + "";
    };
    LEAP.date._s = function(h, d) {
        if (LEAP.isIE) {
            var g = h.createTextRange();
            g.moveStart("character", d);
            g.collapse(true);
            g.select();
        } else {
            h.selectionStart = h.selectionEnd = d;
        }
    };
    LEAP.date.setValue = function(n, r, w) {
        n = LEAP._check(n, LEAP.date.d);
        if (n == null) {
            return;
        }
        var p = n.getAttribute("readonly");
        if (p == true || p == "readonly" || p == "1") {
            LEAP.date.setReadOnly(n, true);
        }
        var q = LEAP.date.getValue(n);
        var o = LEAP.getElements("input[ctf^=date_]", n);
        if (r != null && typeof r != "string") {
            r = LEAP.formatdate(r, 0);
        }
        if (r == null || r.Trim() == "") {
            LEAP.setAttribute(o, "value", "");
        } else {
            var x = r.split(" ");
            var u = [];
            u = x[0].split("-");
            if (x.length > 1) {
                var g = x[1].split(":");
                for (var m = 0; m < g.length; m++) {
                    u.add(g[m]);
                }
            }
            var z = u.length;
            if (o.length < z) {
                z = o.length;
            }
            for (var m = 0; m < z; m++) {
                if (m == 0 && u[m].length < 4) {
                    var d = u[m].length;
                    for (var h = 0; h < 4 - d; h++) {
                        u[m] = "0" + u[m];
                    }
                }
                if (m > 0 && u[m].length < 2) {
                    u[m] = "0" + u[m];
                }
                o[m].value = u[m];
                o[m].setAttribute("value", u[m]);
            }
            if (o.length > u.length) {
                for (var m = u.length; m < o.length; m++) {
                    o[m].value = "00";
                    o[m].setAttribute("value", "00");
                }
            }
        }
        var y = LEAP.date.getValue(n);
        if (q != y) {
            ElementEventManager.handleEvent(n, "valueChange", {
                caller: n,
                pv: q,
                lv: y
            });
        }
        n._lv = y;
        if (w == true) {
            n.focus();
        }
        o = n = r = null;
    };
    LEAP.date.getValue = function(n) {
        n = LEAP._check(n, LEAP.date.d);
        if (n == null) {
            return null;
        }
        var p = LEAP.getElements("input[ctf^=date_]", n);
        var d = p.length;
        var o = "";
        for (var h = 0; h < d; h++) {
            var m = p[h];
            var g = m.value;
            if (g.Trim() == "") {
                return null;
            }
            o += g;
            if (h < 2) {
                o += "-";
            }
            if (h == 2) {
                o += " ";
            }
            if (h > 2 && h != d - 1) {
                o += ":";
            }
        }
        if (d > 3 && d < 6) {
            for (var m = d; m < 6; m++) {
                o += ":";
                o += "00";
            }
        }
        p = d = null;
        return o.Trim();
    };
    LEAP.date.setReadOnly = function(j, l) {
        j = LEAP._check(j, LEAP.date.d);
        if (j == null) {
            return;
        }
        if (l != null && l) {
            j.setAttribute("readonly", "1");
            var d = LEAP.getElements("INPUT", j);
            if (d != null) {
                for (var h = 0; h < d.length; h++) {
                    var g = d[h];
                    g.setAttribute("readOnly", "true");
                    g.setAttribute("disabled", "true");
                }
            }
            d = null;
            var m = LEAP.getElement("div:first", j);
            if (m != null) {
                m.style.display = "none";
            }
            m = null;
        } else {
            j.removeAttribute("readonly");
            var d = LEAP.getElements("INPUT", j);
            if (d != null) {
                for (var h = 0; h < d.length; h++) {
                    var g = d[h];
                    g.removeAttribute("readOnly");
                    g.removeAttribute("disabled");
                }
            }
            d = null;
            var m = LEAP.getElement("div:first", j);
            if (m != null) {
                m.style.display = "block";
            }
            m = null;
        }
        j = null;
    };
    var ie = navigator.appName == "Microsoft Internet Explorer" ? true : false;
    var controlid = null;
    var currdate = null;
    var startdate = null;
    var enddate = null;
    var yy = null;
    var mm = null;
    var hh = null;
    var ii = null;
    var ss = null;
    var cdt = null;
    var currday = null;
    var addtime = false;
    var today = new Date();
    var lastcheckedyear = false;
    var lastcheckedmonth = false;

    function _cancelBubble(d) {
        e = d ? d : window.event;
        if (ie) {
            e.cancelBubble = true;
        } else {
            e.stopPropagation();
        }
    }

    function getposition(g) {
        var d = LEAP.getAbsolutePos(g);
        return d;
    }

    function loadcalendar() {
        s = "";
        s += '<div id="calendar" ct="d_panel_group" style="display:none; position:' + LEAP.date._pm + '; z-index:99999995;" onclick="_cancelBubble(event)">';
        if (ie) {
            s += '<iframe sandbox="allow-same-origin allow-scripts allow-top-navigation allow-forms" width="190" height="150" src="about:blank" style="position: absolute;z-index:-1;"></iframe>';
        }
        s += '<div style="width: 200px;"><table class="tableborder" cellspacing="0" cellpadding="0" width="100%" style="text-align: center">';
        s += '<tr align="center" class="header"><td class="header"><a href="#" onclick="refreshcalendar(yy, mm-1);return false" title="上一月"><<</a></td><td colspan="5" style="text-align: center" class="header"><a href="#" onclick="showdiv(\'year\');_cancelBubble(event);return false" title="点击选择年份" id="year"></a>  -  <a id="month" title="点击选择月份" href="#" onclick="showdiv(\'month\');_cancelBubble(event);return false"></a></td><td class="header"><A href="#" onclick="refreshcalendar(yy, mm+1);return false" title="下一月">>></A></td></tr>';
        s += '<tr class="category"><td>7</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr>';
        for (var l = 0; l < 6; l++) {
            s += '<tr class="altbg2">';
            for (var g = 1; g <= 7; g++) {
                s += "<td id=d" + (l * 7 + g) + ' height="19">0</td>';
            }
            s += "</tr>";
        }
        s += '<tr id="hourminute"><td colspan="7" align="center"><input type="text" size="1" value="" id="hour" onKeyUp=\'this.value=this.value > 23 ? 23 : zerofill(this.value);LEAP.date.setValue(controlid , LEAP.date.getValue(controlid).replace(/\\d+(:\\d+)/ig, this.value+"$1"),true)\'> 点 <input type="text" size="1" value="" id="minute" onKeyUp=\'this.value=this.value > 59 ? 59 : zerofill(this.value);LEAP.date.setValue(controlid, LEAP.date.getValue(controlid).replace(/(\\d+:)\\d+/ig, "$1"+this.value),true)\'> 分</td></tr>';
        s += "</table></div></div>";
        s += '<div id="calendar_year" onclick="_cancelBubble(event)" style="position:' + LEAP.date._pm + ';height:172px;width:195px;overflow-y:auto;overflow-x:hidden"><div class="col">';
        for (var d = 1890; d <= 2089; d++) {
            s += d != 1890 && d % 10 == 0 ? '</div><div class="col">' : "";
            s += '<a href="#" onclick="refreshcalendar(' + d + ", mm);dateid('calendar_year').style.display='none';return false\"><span" + (today.getFullYear() == d ? ' class="today"' : "") + ' id="calendar_year_' + d + '">' + d + "</span></a><br />";
        }
        s += "</div></div>";
        s += '<div id="calendar_month" onclick="_cancelBubble(event)" style="position:' + LEAP.date._pm + ';">';
        for (var d = 1; d <= 12; d++) {
            s += '<a href="#" onclick="refreshcalendar(yy, ' + (d - 1) + ");dateid('calendar_month').style.display='none';return false\"><span" + (today.getMonth() + 1 == d ? ' class="today"' : "") + ' id="calendar_month_' + d + '">' + d + (d < 10 ? " " : "") + " 月</span></a><br />";
        }
        s += "</div>";
        var h = document.createElement("div");
        h.innerHTML = s;
        document.body.appendChild(h);
        LEAP.getElement("#calendar").onclick = function(j) {
            _cancelBubble(j);
            LEAP.getElement("#calendar_year").style.display = "none";
            LEAP.getElement("#calendar_month").style.display = "none";
        };
    }

    function parsedate(l) {
        /(\d+)\-(\d+)\-(\d+)\s*(\d*):?(\d*)/.exec(l);
        var j = (RegExp.$1 && RegExp.$1 > 1899 && RegExp.$1 < 2101) ? parseFloat(RegExp.$1) : today.getFullYear();
        var h = (RegExp.$2 && (RegExp.$2 > 0 && RegExp.$2 < 13)) ? parseFloat(RegExp.$2) : today.getMonth() + 1;
        var g = (RegExp.$3 && (RegExp.$3 > 0 && RegExp.$3 < 32)) ? parseFloat(RegExp.$3) : today.getDate();
        var d = (RegExp.$4 && (RegExp.$4 > -1 && RegExp.$4 < 24)) ? parseFloat(RegExp.$4) : 0;
        var m = (RegExp.$5 && (RegExp.$5 > -1 && RegExp.$5 < 60)) ? parseFloat(RegExp.$5) : 0;
        /(\d+)\-(\d+)\-(\d+)\s*(\d*):?(\d*)/.exec("0000-00-00 00:00");
        return new Date(j, h - 1, g, d, m);
    }

    function cleartime() {
        LEAP.getElement("#calendar").style.display = "none";
        LEAP.date.setValue(controlid, null, true);
    }

    function settime1() {
        LEAP.getElement("#calendar").style.display = "none";
        var h = null;
        var l = new Date();
        var j = l.getFullYear();
        var n = l.getMonth();
        var g = l.getDate();
        var o = LEAP.getElement("#year").value;
        var d = LEAP.getElement("#month").value;
        o = LEAP.tonum(o);
        d = LEAP.tonum(d);
        if (o == j && d == n + 1) {
            h = o + "-" + zerofill(d) + "-" + zerofill(g) + (addtime ? " " + zerofill(LEAP.getElement("#hour").value) + ":" + zerofill(LEAP.getElement("#minute").value) + ":" + zerofill(LEAP.getElement("#second").value) : "");
        } else {
            h = o + "-" + zerofill(d) + "-" + zerofill(1) + (addtime ? " " + zerofill(LEAP.getElement("#hour").value) + ":" + zerofill(LEAP.getElement("#minute").value) + ":" + zerofill(LEAP.getElement("#second").value) : "");
        }
        LEAP.date.setValue(controlid, h, true);
    }

    function settime(h) {
        LEAP.getElement("#calendar").style.display = "none";
        var g = null;
        if (cdt == "1") {
            g = yy + "-" + zerofill(mm + 1) + "-" + zerofill(h) + (addtime ? " " + zerofill(LEAP.getElement("#hour").value) + ":" + zerofill(LEAP.getElement("#minute").value) + ":" + zerofill(LEAP.getElement("#second").value) : "");
        } else {
            g = yy + "-" + zerofill(mm + 1) + "-" + zerofill(h) + (addtime ? " " + zerofill(LEAP.getElement("#hour").value) + ":" + zerofill(LEAP.getElement("#minute").value) : "");
        }
        LEAP.date.setValue(controlid, g, true);
    }

    function showcalendar(g, u, o, n, h) {
        if (u.getAttribute("ctid") == null) {
            u.setAttribute("ctid", UUID.cID());
        }
        cdt = u.getAttribute("cdt");
        var l = null;
        var m = null;
        if (window.innerWidth) {
            l = window.innerWidth;
        } else {
            if ((document.body) && (document.body.clientWidth)) {
                l = document.body.clientWidth;
            }
        }
        if (window.innerHeight) {
            m = window.innerHeight;
        } else {
            if ((document.body) && (document.body.clientHeight)) {
                m = document.body.clientHeight;
            }
        }
        if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) {
            m = document.documentElement.clientHeight;
            l = document.documentElement.clientWidth;
        }
        controlid = "[ctid=" + u.getAttribute("ctid") + "]";
        addtime = o;
        startdate = n ? parsedate(n) : false;
        enddate = h ? parsedate(h) : false;
        var r = LEAP.date.getValue(u);
        currday = r ? parsedate(r) : today;
        hh = currday.getHours();
        ii = currday.getMinutes();
        ss = currday.getSeconds();
        var j = getposition(u);
        LEAP.getElement("#calendar").style.display = "block";
        _cancelBubble(g);
        refreshcalendar(currday.getFullYear(), currday.getMonth());
        LEAP.getElement("#hourminute").style.display = addtime ? "" : "none";
        var d = LEAP.getElement("#calendar").clientHeight;
        var q = u.clientHeight;
        LEAP.getElement("#calendar").style.left = j.x + 2 + "px";
        if (cdt == "1") {
            if (m - (j.y + q) > d) {
                LEAP.getElement("#calendar").style.top = (j.y + q) + "px";
            } else {
                LEAP.getElement("#calendar").style.top = (j.y - d) + "px";
            }
        } else {
            LEAP.getElement("#calendar").style.top = (j.y + 20) + "px";
        }
        if (lastcheckedyear != false) {
            LEAP.getElement("#calendar_year_" + lastcheckedyear).className = "default";
            LEAP.getElement("#calendar_year_" + today.getFullYear()).className = "today";
        }
        if (lastcheckedmonth != false) {
            LEAP.getElement("#calendar_month_" + lastcheckedmonth).className = "default";
            LEAP.getElement("#calendar_month_" + (today.getMonth() + 1)).className = "today";
        }
        if (cdt == "1") {
            LEAP.getElement("#calendar_year_" + currday.getFullYear()).className = "LC_date_active";
            LEAP.getElement("#calendar_month_" + (currday.getMonth() + 1)).className = "LC_date_active";
        } else {
            LEAP.getElement("#calendar_year_" + currday.getFullYear()).className = "checked";
            LEAP.getElement("#calendar_month_" + (currday.getMonth() + 1)).className = "checked";
        }
        lastcheckedyear = currday.getFullYear();
        lastcheckedmonth = currday.getMonth() + 1;
    }

    function refreshcalendar(p, h) {
        var q = new Date(p, h, 1);
        var u = q.getDay();
        var o = q.getDate();
        var r = null;
        yy = q.getFullYear();
        mm = q.getMonth();
        if (cdt == "1") {
            LEAP.getElement("#year").value = yy;
            LEAP.getElement("#month").value = mm + 1 > 9 ? (mm + 1) : "0" + (mm + 1);
        } else {
            LEAP.getElement("#year").innerHTML = yy;
            LEAP.getElement("#month").innerHTML = mm + 1 > 9 ? (mm + 1) : "0" + (mm + 1);
        }
        for (var j = 1; j <= u; j++) {
            r = LEAP.getElement("#d" + j);
            r.innerHTML = " ";
            if (cdt == "1") {
                r.className = "LC_not_this";
            } else {
                r.className = "";
            }
        }
        while (q.getMonth() == mm) {
            r = LEAP.getElement("#d" + (o + u));
            if (cdt == "1") {
                var g = new Date(p, h, o);
                var v = g.getDay();
                r.style.height = "30px";
                r.innerHTML = '<a href="###" style="width:100%;height:100%;line-height:30px;display:block;outline:none;" onclick="settime(' + o + ');return false">' + o + "</a>";
                if (v == 0 || v == 6) {
                    r.firstChild.style.color = "#1e88e5";
                }
                if (q.getFullYear() == today.getFullYear() && q.getMonth() == today.getMonth() && q.getDate() == today.getDate()) {
                    r.className = "LC_active";
                    r.firstChild.title = "今天";
                    r.firstChild.style.color = "#fff";
                } else {
                    if (q.getTime() < today.getTime() || (enddate && q.getTime() > enddate.getTime()) || (startdate && q.getTime() < startdate.getTime())) {
                        r.firstChild.style.color = "#c9c9c9";
                        r.className = "";
                    } else {
                        r.className = "";
                    }
                }
            } else {
                r.innerHTML = '<a href="###" onclick="settime(' + o + ');return false">' + o + "</a>";
                if (q.getTime() < today.getTime() || (enddate && q.getTime() > enddate.getTime()) || (startdate && q.getTime() < startdate.getTime())) {
                    r.className = "expire";
                } else {
                    r.className = "default";
                }
                if (q.getFullYear() == today.getFullYear() && q.getMonth() == today.getMonth() && q.getDate() == today.getDate()) {
                    r.className = "today";
                    r.firstChild.title = "今天";
                }
                if (q.getFullYear() == currday.getFullYear() && q.getMonth() == currday.getMonth() && q.getDate() == currday.getDate()) {
                    r.className = "checked";
                }
            }
            q.setDate(++o);
        }
        while (o + u <= 42) {
            r = LEAP.getElement("#d" + (o + u));
            r.innerHTML = " ";
            if (cdt == "1") {
                var n = LEAP.getElement("#d36");
                if (n.innerHTML == " " || n.innerHTML == "") {
                    r.style.height = "1px";
                } else {
                    r.style.height = "30px";
                }
                r.className = "LC_not_this";
            }
            o++;
        }
        if (cdt == "1") {
            if (addtime) {
                var l = new Date();
                LEAP.getElement("#hour").value = zerofill(l.getHours());
                LEAP.getElement("#minute").value = zerofill(l.getMinutes());
                LEAP.getElement("#second").value = zerofill(l.getSeconds());
            }
        } else {
            if (addtime) {
                LEAP.getElement("#hour").value = zerofill(hh);
                LEAP.getElement("#minute").value = zerofill(ii);
            }
        }
    }

    function dateid(d) {
        if (d != null) {
            return document.getElementById(d);
        }
    }

    function showdiv(j) {
        var h = dateid(j);
        var d = LEAP.getElement("#calendar_" + j);
        var l = getposition(h);
        var m = 220;
        var g = 200;
        if (l.x + m > window.document.body.offsetWidth) {
            l.x = l.x - (l.x + m - window.document.body.offsetWidth);
        }
        if (l.y + m + 16 > window.document.body.offsetHeight) {
            l.y = l.y - (l.y + g - window.document.body.offsetHeight);
        }
        if (cdt != "1") {
            d.style.left = l.x + "px";
            d.style.top = (l.y + 16) + "px";
            if (j == "year") {
                d.scrollTop = 525;
            }
        }
        d.style.display = "block";
        if (cdt == "1") {
            var n = new Date();
            var q = n.getFullYear();
            var o = n.getMonth();
            if (j == "year") {
                LEAP.getElement("#calendar_year_" + q).focus();
            } else {
                LEAP.getElement("#calendar_month_" + (o + 1)).focus();
            }
        }
        h = d = null;
    }

    function zerofill(d) {
        var d = parseFloat(d.toString().replace(/(^[\s0]+)|(\s+$)/g, ""));
        d = isNaN(d) ? 0 : d;
        return (d < 10 ? "0" : "") + d.toString();
    }
    LEAP.desktip = {};
    LEAP.desktip.win = null;
    LEAP.desktip.srcwin = window;
    LEAP.desktip.con = null;
    LEAP.desktip.soundcon = null;
    LEAP.desktip.flag = 0;
    LEAP.desktip.msgs = [];
    LEAP.desktip.s = '<div onmouseleave="LEAP.desktip.beginHide();" onmouseover="LEAP.desktip.stopHide();" style="width:200px;height:120px;border: 1px solid black;position: relative;background-color: #E7E4E0;"><A style="font-size:8px;position: absolute;right:3px;top:0px;cursor: pointer;" onclick="LEAP.desktip.hide()" title="关闭">X</A><div style="height:7px;font-size: 7px;filter: progid:DXImageTransform.Microsoft.gradient(startcolorstr=#EAE8E4,endcolorstr=#A2A1A0,gradientType=0);text-align: center;">。。。。</div><div style="overflow: auto;height:110px"><table style="color:blue;width:100%;font-size:12px;text-decoration: underline;border: 0;padding-left: 10px;" cellpadding="0" cellspacing="0" ptf="dtcontable"></table></div></div>';
    LEAP.desktip.i = null;
    LEAP.desktip.i2 = null;
    LEAP.desktip.tipimg = null;
    LEAP.desktip._z = 1;
    LEAP.desktip.init = function() {
        if (document != null && document.body != null) {
            LEAP.desktip._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.desktip._init);
        }
    };
    LEAP.desktip._init = function() {
        if (LEAP.desktip.con == null) {
            var h = LEAP.desktip.con = document.createElement("div");
            h.style.right = "0px";
            h.style.bottom = "26px";
            h.style.zIndex = "999999";
            h.style.position = "absolute";
            h.style.display = "none";
            document.body.appendChild(h);
            h.innerHTML = LEAP.desktip.s;
            h = null;
        }
        if (LEAP.desktip.soundcon == null) {
            var h = LEAP.desktip.soundcon = document.createElement("div");
            h.style.display = "none";
            document.body.appendChild(h);
            h = null;
        }
        if (LEAP.desktip.tipimg == null) {
            var g = LEAP.desktip.tipimg = document.createElement("IMG");
            g.style.width = "23px";
            g.style.height = "23px";
            g.style.cursor = "pointer";
            g.style.marginTop = "2px";
            g.style["float"] = "right";
            g.src = leapconfig.server + "LEAP/Resource/generalIndex/images/tip.gif";
            var d = LEAP.getElement("DIV[stf=modulepart_tipcon]:first");
            if (d != null) {
                d.appendChild(g);
                d = null;
            }
            LEAP.addEvent(g, "mouseover", LEAP.desktip.onMouseOver, null, null, true);
            g = null;
            setInterval(LEAP.desktip.showImg, 500);
        }
    };
    LEAP.desktip.regRefreshEvent = function(g) {
        if (g != null) {
            if (LEAP.desktip.onRefresh == null) {
                LEAP.desktip.onRefresh = [];
            }
            LEAP.desktip.onRefresh.add(g);
        }
    };
    LEAP.desktip.onMouseOver = function() {
        if (LEAP.desktip.onRefresh != null) {
            for (var g = 0; g < LEAP.desktip.onRefresh.length; g++) {
                var m = LEAP.desktip.onRefresh[g];
                var j = m.domain;
                if (j == null) {
                    j = window;
                }
                var h = m.fn;
                if (h != null) {
                    try {
                        h.call(j);
                    } catch (l) {
                        LEAP.messagebox.alert(l.message, 3);
                    }
                }
            }
        }
        setTimeout(LEAP.desktip.show, 300);
    };
    LEAP.desktip.show = function() {
        var h = LEAP.desktip.msgs.length;
        if (h.length == 0) {
            return;
        }
        for (var j = h - 1; j > -1; j--) {
            var p = LEAP.desktip.msgs[j];
            var d = p.catgroy;
            if (p.isshow != null && p.isshow && (d == null || d == "")) {
                LEAP.desktip.msgs.splice(j, 1);
            }
        }
        var h = LEAP.desktip.msgs.length;
        var u = LEAP.getElement('TABLE[ptf="dtcontable"]:first');
        var q = document;
        var m = LEAP.getElement("tbody", u);
        if (!m) {
            m = document.createElement("tbody");
            u.appendChild(m);
        }
        while (u.rows.length > 0) {
            u.rows[0].cells[0].onclick = null;
            m.removeChild(u.rows[0]);
        }
        var n = LEAP.desktip.msgs;
        for (var j = 0; j < h; j++) {
            var p = n[j];
            p.isshow = true;
            var r = p.msg;
            var d = p.catgroy;
            var o = q.createElement("TR");
            m.appendChild(o);
            o.style.height = "20px";
            var g = q.createElement("TD");
            g.style.cursor = "pointer";
            g.innerHTML = r;
            o.appendChild(g);
            g.onclick = LEAP.desktip.onclick;
            if (!String.isEmpty(d)) {
                g.setAttribute("cg", d);
            }
            p.ctid = LEAP.ctid(g);
        }
        n = null;
        q = m = u = null;
        LEAP.desktip.flag = 0;
        if (LEAP.desktip.i != null) {
            clearInterval(LEAP.desktip.i);
        }
        LEAP.desktip.con.style.display = "block";
        LEAP.desktip.beginHide();
    };
    LEAP.desktip.showImg = function() {
        if (LEAP && LEAP.desktip) {
            if (LEAP.desktip.msgs.length > 0) {
                LEAP.desktip.tipimg.style.display = "block";
                if (LEAP.desktip._z % 2 == 0) {
                    LEAP.desktip.tipimg.style.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=30)";
                } else {
                    if (LEAP.desktip.tipimg.style.removeAttribute) {
                        LEAP.desktip.tipimg.style.removeAttribute("filter");
                    } else {
                        delete LEAP.desktip.tipimg.style.filter;
                    }
                }
                LEAP.desktip._z++;
            } else {
                LEAP.desktip.tipimg.style.display = "none";
            }
        }
    };
    LEAP.desktip.stopHide = function() {
        if (LEAP.desktip.i != null) {
            clearTimeout(LEAP.desktip.i);
        }
    };
    LEAP.desktip.beginHide = function() {
        if (LEAP.desktip.i != null) {
            clearTimeout(LEAP.desktip.i);
        }
        LEAP.desktip.i = setTimeout(LEAP.desktip.hide, 3000);
    };
    LEAP.desktip.hide = function() {
        if (LEAP && LEAP.desktip) {
            if (LEAP.desktip.i != null) {
                clearTimeout(LEAP.desktip.i);
            }
            LEAP.desktip.con.style.display = "none";
        }
    };
    LEAP.desktip.delMsg = function(j) {
        if (LEAP.desktip.msgs.length > 0) {
            var d = LEAP.desktip.msgs.length;
            for (var g = d - 1; g > -1; g--) {
                var m = LEAP.desktip.msgs[g];
                var h = m.catgroy;
                if (h == null || h == "") {
                    continue;
                } else {
                    if (h == j) {
                        LEAP.desktip.msgs.splice(g, 1);
                    }
                }
            }
        }
    };
    LEAP.desktip.showMsg = function(h, j, d, y, v) {
        var u = {
            catgroy: h,
            msg: j,
            msgidlist: v,
            clickCallback: d,
            callBackDomain: y
        };
        var g = false;
        var p = false;
        if (LEAP.desktip.msgs.length > 0) {
            var w = LEAP.desktip.msgs.length;
            for (var x = 0; x < w; x++) {
                var C = LEAP.desktip.msgs[x];
                var r = C.catgroy;
                if (r == null || r == "") {
                    continue;
                } else {
                    if (r == h) {
                        var q = LEAP.desktip.msgs[x].msgidlist;
                        var m = v;
                        var p = false;
                        if (v != null) {
                            if (q == null) {
                                v = true;
                            } else {
                                var n = 0;
                                for (var o = 0; o < m.length; o++) {
                                    if (q.contains(v[o])) {
                                        n++;
                                    }
                                }
                                if (n != m.length) {
                                    p = true;
                                }
                            }
                        }
                        LEAP.desktip.msgs[x] = u;
                        g = true;
                        break;
                    }
                }
            }
        }
        if (!g) {
            LEAP.desktip.msgs.push(u);
            p = true;
        }
        if (p) {
            var A = LEAP.getElements("embed", LEAP.desktip.soundcon);
            if (A) {
                LEAP.removeElement(A, true);
            }
            var B = document.createElement("embed");
            B.setAttribute("src", leapconfig.server + "LEAP/Resource/sound/msg.wav");
            B.setAttribute("loop", "0");
            B.setAttribute("autostart", "true");
            B.setAttribute("hidden", "true");
            LEAP.desktip.soundcon.appendChild(B);
        }
        LEAP.desktip.show();
    };
    LEAP.desktip.onclick = function() {
        LEAP.desktip.srcwin.focus();
        var n = window.event;
        var o = null;
        if (n) {
            o = n.srcElement;
        }
        var m = LEAP.ctid(o);
        var d = LEAP.desktip.msgs.length;
        var j = null;
        for (var g = 0; g < d; g++) {
            var p = LEAP.desktip.msgs[g];
            if (p.ctid == m) {
                j = p;
                break;
            }
        }
        if (j != null && j.clickCallback != null) {
            var h = j.callBackDomain;
            if (h == null) {
                h = LEAP.desktip.srcwin;
            }
            j.clickCallback.call(h, j.msg, j.catgroy, j);
            h = null;
        }
        j = n = o = null;
    };
    LEAP.desktip.init();
    LEAP.docedit = new Object();
    LEAP.docedit.d = "docedit";
    LEAP.docedit.e = "表头<input style='width:130px' type=text dectf='tableDesignDefine_caption'><br>行数<input value='4' style='width:30px' type=text check='isint:true' dectf='tableDesignDefine_rowNum'>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp列数<input value='4' style='width:30px' type=text check='isint:true' dectf='tableDesignDefine_colNum'><br>表格宽度<input value='100' style='width:30px' check='isint:true' type=text dectf='tableDesignDefine_width'><select dectf='tableDesignDefine_widthtype'><option value='%'>百分比</option><option value='px'>像素</option></select><br>表格高度<input value='' style='width:30px' check='isint:true' type=text dectf='tableDesignDefine_height'><select dectf='tableDesignDefine_heighttype'><option value='%'>百分比</option><option value='px'>像素</option></select><br>边框粗细<input value='0' style='width:30px' type=text check='isint:true' dectf='tableDesignDefine_border'>像素<br>单元格边距<input value='0' style='width:30px' type=text check='isint:true' dectf='tableDesignDefine_cellpadding'>像素<br>单元格间距<input value='0' style='width:30px' type=text check='isint:true' dectf='tableDesignDefine_cellspacing'>像素<br>表单样式<input type=checkbox  dectf='tableDesignDefine_textstyle'><div style='float:right;' class='button_frame'><a href='javascript:void(0)' class='button'><p></p><span ctf='de_insert_table_submit' ht='button' unselectable='on' ctf='button'>确定</span></a></div>";
    LEAP.docedit.g1 = '<div style="width:100%;min-height:28px;"><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><SELECT ctf="de_format" onchange="LEAP.docedit._si(this);" style="float:left;font-size: 14px;font-family: 黑体;" unselectable="on"><OPTION value="" unselectable="on">— 格式 —</OPTION><OPTION value="p" unselectable="on">Normal</OPTION><OPTION value="h1" unselectable="on">Heading 1</OPTION><OPTION value="h2" unselectable="on">Heading 2</OPTION><OPTION value="h3" unselectable="on">Heading 3</OPTION><OPTION value="h4" unselectable="on">Heading 4</OPTION><OPTION value="h5" unselectable="on">Heading 5</OPTION><OPTION value="h6" unselectable="on">Heading 6</OPTION><OPTION value="address" unselectable="on">Address</OPTION><OPTION value="pre" unselectable="on">Formatted</OPTION></SELECT><SELECT ctf="de_font" onchange="LEAP.docedit._si(this);" unselectable="on" style="float:left;font-size: 14px;font-family: 黑体;"><OPTION value="" unselectable="on">—— 字体 ——</OPTION><OPTION value="arial,helvetica,sans-serif" unselectable="on">Arial</OPTION><OPTION value="courier new,courier,monospace" unselectable="on">Courier New</OPTION><OPTION value="georgia,times new roman,times,serif" unselectable="on">Georgia</OPTION><OPTION value="tahoma,arial,helvetica,sans-serif" unselectable="on">Tahoma</OPTION><OPTION value="times new roman,times,serif" unselectable="on">Times New Roman</OPTION><OPTION value="verdana,arial,helvetica,sans-serif" unselectable="on">Verdana</OPTION><OPTION value="宋体" unselectable="on">宋体</OPTION><OPTION value="fangsong" unselectable="on">仿宋</OPTION><OPTION value="黑体" unselectable="on">黑体</OPTION><OPTION value="kaiti" unselectable="on">楷体</OPTION><OPTION value="impact" unselectable="on">impact</OPTION><OPTION value="wingdings" unselectable="on">WingDings</OPTION></SELECT><SELECT ctf="de_fontsize" onchange="LEAP.docedit._si(this);" style="float:left;font-size: 14px;font-family: 黑体;" unselectable="on">';
    LEAP.docedit.g2 = '<OPTION value="" unselectable="on">— 尺寸 —</OPTION><OPTION value="1" unselectable="on">8 pt</OPTION><OPTION value="2" unselectable="on">10 pt</OPTION><OPTION value="3" unselectable="on">12 pt</OPTION><OPTION value="4" unselectable="on">14 pt</OPTION><OPTION value="5" unselectable="on">15 pt</OPTION><OPTION value="6" unselectable="on">24 pt</OPTION><OPTION value="7" unselectable="on">36 pt</OPTION></SELECT><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><img ctf="de_font_Bold" src="@server@LEAP/Resource/images/edit/text_b.gif" class="de_itembtn" title="加粗" unselectable="on" style="float:left;" ><img ctf="de_font_strikethrough" src="@server@LEAP/Resource/images/edit/text_s.gif" class="de_itembtn" title="删除线" unselectable="on" style="float:left;" ><img ctf="de_font_Underline" src="@server@LEAP/Resource/images/edit/text_x.gif" class="de_itembtn" title="下划线" unselectable="on" style="float:left;" ><img ctf="de_font_italic" src="@server@LEAP/Resource/images/edit/text_xie.gif" class="de_itembtn" title="倾斜" unselectable="on" style="float:left;" ><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><img ctf="de_forecolor" src="@server@LEAP/Resource/images/edit/bcolor.gif" class="de_itembtn" title="前景色" unselectable="on" style="float:left;" ><img ctf="de_backcolor" src="@server@LEAP/Resource/images/edit/bcolor2.gif" class="de_itembtn" title="背景色" unselectable="on" style="float:left;" ><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><img ctf="de_superscript" src="@server@LEAP/Resource/images/edit/sub.gif" class="de_itembtn" title="上标" unselectable="on" style="float:left;" ><img ctf="de_subscript" src="@server@LEAP/Resource/images/edit/super.gif" class="de_itembtn" title="下标" unselectable="on" style="float:left;" ></div><div style="width:100%;min-height:28px;">';
    LEAP.docedit.g3 = '<img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><img ctf="de_justifyleft" src="@server@LEAP/Resource/images/edit/text_left.gif" class="de_itembtn" title="左对齐" unselectable="on" style="float:left;" ><img ctf="de_justifyright" src="@server@LEAP/Resource/images/edit/text_right.gif" class="de_itembtn" title="右对齐" unselectable="on" style="float:left;" ><img ctf="de_justifycenter" src="@server@LEAP/Resource/images/edit/text_center.gif" class="de_itembtn" title="中间对齐" unselectable="on" style="float:left;" ><img ctf="de_justifyfull" src="@server@LEAP/Resource/images/edit/text_lr.gif" class="de_itembtn" title="两端对齐" unselectable="on" style="float:left;" ><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><img ctf="de_insertorderedlist" src="@server@LEAP/Resource/images/edit/pro_sn.gif" class="de_itembtn" title="添加项目编号" unselectable="on" style="float:left;" ><img ctf="de_insertunorderedlist" src="@server@LEAP/Resource/images/edit/pro_sig.gif" class="de_itembtn" title="添加项目符号" unselectable="on" style="float:left;" ><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><img ctf="de_outdent" src="@server@LEAP/Resource/images/edit/sjjs.gif" class="de_itembtn" title="减少缩进" unselectable="on" style="float:left;" ><img ctf="de_indent" src="@server@LEAP/Resource/images/edit/sjzj.gif" class="de_itembtn" title="增加缩进" unselectable="on" style="float:left;" ><img ctf="de_jswidth" src="@server@LEAP/Resource/images/edit/sx.gif" class="de_itembtn" title="减少宽度" unselectable="on" style="float:left;" ><img ctf="de_zjwidth" src="@server@LEAP/Resource/images/edit/zj.gif" class="de_itembtn" title="增加宽度" unselectable="on" style="float:left;" ><img ctf="de_changetablemode" src="@server@LEAP/Resource/images/edit/table_avgcols.gif" class="de_itembtn" title="切换表格格式" unselectable="on" style="float:left;" ><img ctf="de_link" src="@server@LEAP/Resource/images/imgbtn/www.gif" class="de_itembtn" title="创建超链接" unselectable="on" style="float:left;" ><img ctf="de_changesourcemode" src="@server@LEAP/Resource/images/imgbtn/static.gif" class="de_itembtn" title="切换源代码/设计模式" unselectable="on" style="float:left;" >   </div><div style="width:100%;min-height:28px;"><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;" ><div tct="docedit" ct="uploadbtn" style="width:60px;height:21px;float:left;" style="float:left;" ><img style="display:none" src=“data:image:png,base64" onerror="LEAP.uploadbtn.i(0);" style="float:left;" ></div><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;">';
    LEAP.docedit.g4 = '<img ctf="de_insert_table" src="@server@LEAP/Resource/images/edit/table_insert.gif" style="float:left;" class="de_itembtn" title="插入表格" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;"><img ctf="de_table_merge" src="@server@LEAP/Resource/images/edit/table_merge.gif" style="float:left;" class="de_itembtn" title="合并单元格" unselectable="on"><img ctf="de_table_split" src="@server@LEAP/Resource/images/edit/table_split.gif" style="float:left;" class="de_itembtn" title="拆分单元格" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" unselectable="on" style="float:left;"><img ctf="de_table_inertcol_left" style="float:left;" src="@server@LEAP/Resource/images/edit/table_insertcolleft.gif" class="de_itembtn" title="在左侧插入列" unselectable="on"><img ctf="de_table_inertcol_right" style="float:left;" src="@server@LEAP/Resource/images/edit/table_insertcolright.gif" class="de_itembtn" title="在右侧插入列" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on"><img ctf="de_table_inertrow_top" style="float:left;" src="@server@LEAP/Resource/images/edit/table_insertrowup.gif" class="de_itembtn" title="在上方插入行" unselectable="on"><img ctf="de_table_inertrow_bottom" style="float:left;" src="@server@LEAP/Resource/images/edit/table_insertrowdown.gif" class="de_itembtn" title="在下方插入行" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on"><img ctf="de_table_delrow" style="float:left;" src="@server@LEAP/Resource/images/edit/table_delrow.gif" class="de_itembtn" title="删除行" unselectable="on"><img ctf="de_table_delcol" style="float:left;" src="@server@LEAP/Resource/images/edit/table_delcol.gif" class="de_itembtn" title="删除列" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on">';
    LEAP.docedit.g5 = '<img ctf="de_table_avgrow" style="float:left;" src="@server@LEAP/Resource/images/edit/table_avgrows.gif" class="de_itembtn" title="平均分别各行" unselectable="on"><img ctf="de_table_avgcol" style="float:left;" src="@server@LEAP/Resource/images/edit/table_avgcols.gif" class="de_itembtn" title="平均分布各列" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on"><img ctf="de_insert_word" style="float:left;" src="@server@LEAP/Resource/images/edit/word.gif" class="de_itembtn" title="插入word文件" unselectable="on">    <img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on"><img src="@server@LEAP/Resource/images/edit/clear.gif" style="float:left;" ctf="de_clear" class="de_itembtn" title="清空所有内容" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on"><img src="@server@LEAP/Resource/images/edit/sjjs.gif" style="float:left;" ctf="de_pageup" class="de_itembtn" title="上一页" unselectable="on"><img src="@server@LEAP/Resource/images/edit/split.gif" style="float:left;" unselectable="on"><img src="@server@LEAP/Resource/images/edit/sjzj.gif" style="float:left;" ctf="de_pagenext" class="de_itembtn" title="下一页" unselectable="on"></div>';
    LEAP.docedit.g6 = [LEAP.docedit.g1, LEAP.docedit.g2, LEAP.docedit.g3, LEAP.docedit.g4, LEAP.docedit.g5];
    LEAP.docedit.g7 = LEAP.docedit.g6.join("").replaceall("@server@", leapconfig.server);
    LEAP.docedit.g6 = LEAP.docedit.g5 = LEAP.docedit.g4 = LEAP.docedit.g3 = LEAP.docedit.g2 = LEAP.docedit.g1 = null;
    LEAP.docedit.paging = new hashtable();
    LEAP.docedit.index = 1;
    LEAP.docedit._init = function() {
        LEAP.addEvent(document.body, "mouseup", LEAP.docedit.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "click", LEAP.docedit.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keypress", LEAP.docedit.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.docedit._init);
    };
    LEAP.docedit.init = function() {
        if (document != null && document.body != null) {
            LEAP.docedit._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.docedit._init);
        }
    }();
    LEAP.docedit.getDocument = function(d) {
        var g = d.getAttribute("edittype");
        if (g != null && (g == "iframe" || g == "iframe1")) {
            if (LEAPBrowser.isChrome || LEAPBrowser.isIE) {
                return LEAP.getElement("div[ctf=de_edit_content]:first>iframe:first", d).contentWindow.document;
            } else {
                return LEAP.getElement("div[ctf=de_edit_content]:first>iframe:first", d).contentDocument;
            }
        } else {
            return document;
        }
    };
    LEAP.docedit.getContent = function(g) {
        var d = null;
        try {
            var h = g.getAttribute("edittype");
            if (h != null && h == "iframe") {
                if (LEAPBrowser.isChrome || LEAPBrowser.isIE) {
                    d = LEAP.getElement("div[ctf=de_edit_content]:first>iframe:first", g).contentWindow.document.body;
                } else {
                    d = LEAP.getElement("div[ctf=de_edit_content]:first>iframe:first", g).contentDocument.body;
                }
            } else {
                d = LEAP.getElement("div[ctf=de_edit_content]:first>div[ctf=de_edit_contentarea]", g);
            }
            return d;
        } finally {
            g = d = null;
        }
    };
    LEAP.docedit.getContentCon = function(g) {
        var d = null;
        try {
            var h = g.getAttribute("edittype");
            if (h != null && h == "iframe") {
                d = LEAP.getElement("div[ctf=de_edit_content]:first>iframe:first", g);
            } else {
                d = LEAP.getElement("div[ctf=de_edit_content]:first", g);
            }
            return d;
        } finally {
            g = d = null;
        }
    };
    LEAP.docedit.imgTypes = [".gif", ".jpg", ".jpeg", ".bmp", ".png"];
    LEAP.docedit.flashTypes = [".swf"];
    LEAP.docedit.flvshTypes = [".flv"];
    LEAP.docedit.mediaTypes = [".midi", ".wav", ".aiff", ".au", ".mp3", ".mp4", ".wmv", ".wma"];
    LEAP.docedit.mp4Types = [".mpg", ".mpe", ".mpeg", ".mov", ".rm", ".rmvb", ".mp4", ".m4v", ".avi", ".wmv", ".wav", ".asf", ".asx", ".mtv"];
    LEAP.docedit.fs0 = "<embed src=”@url” width=”@width” height=”@height” type=”application/x-shockwave-flash” pluginspage=”http://www.macromedia.com/go/getflashplayer”  quality=”high”></embed>";
    LEAP.docedit.fs = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" type="application/x-shockwave-flash" data="@url" width="@width" height="@height" align="middle">' + LEAP.docedit.fs0 + '<a g=1 href="http://www.adobe.com/go/getflash"><img src="' + leapconfig.server + 'LEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a></object>';
    LEAP.docedit.ms = '<embed src="@url" width="@width" height="@height" loop="true" autostart="true"></embed>';
    LEAP.docedit.fls = '<embed src="@url" width="@width" height="@height" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"  quality="high"></embed>';
    LEAP.docedit.mp4 = '<embed src="@url" width="@width" height="@height" type="APPLICATION/OCTET-STREAM" loop="true" autostart="true"></embed>';
    LEAP.docedit.onUploadComplete = function(l, g) {
        try {
            var h = LEAP.upload.getShowPath(g);
            var m = false;
            if (h) {
                var j = null;
                var o = null;
                var d = h.lastIndexOf(".");
                if (d > -1) {
                    o = h.substring(d).toLowerCase();
                }
                if (o != null) {
                    if (LEAP.docedit.imgTypes.contains(o)) {
                        j = new StringBuffer('<img src="').append(h).append('">').toString();
                    } else {
                        if (LEAP.docedit.flashTypes.contains(o)) {
                            LEAP.docedit.saveSelection(LEAP.docedit.getDocument(l));
                            m = true;
                            j = LEAP.docedit.fs.replaceall("@url", h).replace("@width", 300).replace("@height", 300);
                        } else {
                            if (LEAP.docedit.flvshTypes.contains(o)) {
                                LEAP.docedit.saveSelection(LEAP.docedit.getDocument(l));
                                m = true;
                                j = LEAP.docedit.fls.replaceall("@url", h).replace("@width", 500).replace("@height", 500);
                            } else {
                                if (LEAP.docedit.mediaTypes.contains(o)) {
                                    LEAP.docedit.saveSelection(LEAP.docedit.getDocument(l));
                                    m = true;
                                    j = LEAP.docedit.ms.replaceall("@url", h).replace("@width", 500).replace("@height", 500);
                                } else {
                                    if (LEAP.docedit.mp4Types.contains(o)) {
                                        LEAP.docedit.saveSelection(LEAP.docedit.getDocument(l));
                                        m = true;
                                        j = LEAP.docedit.mp4.replaceall("@url", h).replace("@width", 500).replace("@height", 500);
                                    } else {
                                        var n = g.title;
                                        if (String.isEmpty(n)) {
                                            n = g.name;
                                        }
                                        j = new StringBuffer('<a style="color:blue" href="').append(h).append('">').append(n).append("</a>").toString();
                                    }
                                }
                            }
                        }
                    }
                }
                LEAP.docedit.fucous(l);
                LEAP.docedit.insertHTML(LEAP.docedit.getDocument(l), j);
                if (m) {
                    LEAP.asyn(LEAP.docedit.s1, null, 100, LEAP.ctid(l));
                }
            }
        } finally {
            l = g;
        }
    };
    LEAP.docedit.s1 = function(h) {
        var d = LEAP.getElement("div[ctid=" + h + "]");
        var g = d.___sel;
        LEAP.docedit.fucous(d);
        LEAP.docedit.restoreSelection(LEAP.docedit.getDocument(d), g);
    };
    LEAP.docedit.z = function(l) {
        try {
            if (!l) {
                if (!event) {
                    return;
                }
                l = event.srcElement;
            }
            if (!l) {
                return;
            }
            var d = l.parentElement;
            var j = LEAP.getElement("div[ctf=de_buttonscontent]:first", d);
            if (j) {
                j.innerHTML = LEAP.docedit.g7;
                j = null;
            }
            if (LEAPBrowser.isChrome || LEAPBrowser.isIE) {
                LEAP.getElement("div[ctf=de_edit_content]:first", d).contentEditable = false;
            } else {
                LEAP.getElement("div[ctf=de_edit_content]:first", d).designMode = "off";
            }
            var g = d.getAttribute("edittype");
            if (g != null && g == "iframe") {
                LEAP.getElement("div[ctf=de_edit_content]:first", d).innerHTML = '<iframe sandbox="allow-same-origin allow-scripts allow-top-navigation allow-forms" ctf=de_edit_contentarea frameborder="0" style="width:100%;height:100%;word-break:break-all"></iframe>';
                var h = LEAP.ctid(d);
                LEAP.asyn(LEAP.docedit.z1, null, 30, h);
            } else {
                d.setAttribute("doceditinited", "1");
                var m = document.createElement("div");
                m.className = "lgp2doceditcontent";
                m.style.margin = "0.5%";
                m.style.height = "99%";
                m.style.width = "99%";
                m.setAttribute("ctf", "de_edit_contentarea");
                LEAP.getElement("div[ctf=de_edit_content]:first", d).appendChild(m);
                if (LEAPBrowser.isChrome || LEAPBrowser.isIE) {
                    m.contentEditable = true;
                    LEAP.getElement("div[ctf=de_edit_content]:first", d).contentEditable = false;
                } else {
                    m.designMode = "on";
                    LEAP.getElement("div[ctf=de_edit_content]:first", d).designMode = "off";
                }
                m = null;
            }
        } finally {
            d = l = null;
        }
    };
    LEAP.docedit.z1 = function(h) {
        var g = LEAP.getElement("div[ctid=" + h + "]:first");
        if (!g) {
            return;
        }
        g.setAttribute("doceditinited", "1");
        if (LEAPBrowser.isChrome || LEAPBrowser.isIE) {
            LEAP.getElement("div[ctf=de_edit_content]:first", g).contentEditable = false;
            LEAP.docedit.getContent(g).contentEditable = true;
        } else {
            LEAP.getElement("div[ctf=de_edit_content]:first", g).designMode = "off";
            LEAP.docedit.getDocument(g).designMode == "on";
        }
        var d = LEAP.docedit.getContent(g);
        LEAP.addEvent(d, "mouseup", LEAP.docedit.uiProcess, null, null, true);
        LEAP.addEvent(d, "click", LEAP.docedit.uiProcess, null, null, true);
        LEAP.addEvent(d, "keypress", LEAP.docedit.uiProcess, null, null, true);
        leapclient.loadcss("LEAP/Resource/JavaScript/Control/docedit.css", LEAP.docedit.getDocument(g));
        g = null;
        d = null;
    };
    LEAP.docedit.uiProcess = function(n) {
        var L = null;
        var o = null;
        var F = null;
        var m = null;
        if (n != null && n.e != null && n.e.type != null) {
            m = n.e.type;
        }
        if (m != null) {
            o = n.e.srcElement;
            L = n.e;
            if (LEAP.isIE) {
                F = L.keyCode;
            } else {
                F = L.which;
            }
        } else {
            L = n;
            o = n.target;
            F = L.which;
        }
        var G = LEAP._match(o, LEAP.docedit.d);
        if (!G) {
            return;
        }
        if (o == null || o.getAttribute == null) {
            return;
        }
        var G = LEAP._match(o, LEAP.docedit.d);
        if (!G) {
            return;
        }
        var r = null;
        var h = null;
        try {
            var d = o.getAttribute(commfields.ctf);
            if (m == "mouseup" && LEAP.docedit.curEditorMode == 2) {
                if (LEAP.docedit.___lt2) {
                    var h = LEAP.getElement("div[ctid=" + LEAP.docedit.___lt2 + "]");
                    if (h) {
                        r = LEAP.docedit.getCursoredParentElement(LEAP.docedit.getDocument(h));
                        if (r && r.isContentEditable) {
                            LEAP.asyn(LEAP.docedit.mergeTableCells, LEAP.docedit, 50, LEAP.docedit.getDocument(h), L.button);
                            LEAP.stopEvent(L);
                            return false;
                        }
                    }
                }
                return;
            }
            var N = L.keyCode;
            var I = L.shiftKey;
            var u = L.ctrlKey;
            var M = L.altKey;
            if (m == "keypress" && LEAPBrowser.isIE && !u && !M && !I && N == 13) {
                if (o.document.parentWindow != window) {
                    o.document.body.focus();
                    LEAP.docedit.insertHTML(o.document, "<br/>");
                    LEAP.stopEvent(L);
                    return false;
                }
            }
            if (d == null) {
                return;
            }
            if (m == "click" && d == "de_insert_table_submit") {
                if (LEAP.docedit.___lt) {
                    var h = LEAP.getElement("div[ctid=" + LEAP.docedit.___lt + "]");
                    if (h) {
                        var D = h.___sel;
                        LEAP.docedit.fucous(h);
                        LEAP.docedit.restoreSelection(LEAP.docedit.getDocument(h), D);
                        LEAP.docedit.insertTable(LEAP.docedit.getDocument(h));
                    }
                    LEAP.form.hide(LEAP.docedit.desingeTablePropsForm);
                }
                LEAP.docedit.___lt = h = null;
            } else {
                if (m == "click" && d == "de_insertword_clean") {
                    var g = LEAP.getElement("[ctf=de_insertword_content]");
                    var v = LEAP.cleanWordCode(g);
                    if (v != null) {
                        g.innerHTML = v;
                    } else {
                        g.innerHTML = "";
                    }
                } else {
                    if (m == "click" && d == "de_insertword_ok") {
                        if (LEAP.docedit.___lt) {
                            var h = LEAP.getElement("div[ctid=" + LEAP.docedit.___lt + "]");
                            if (h) {
                                var D = h.___sel;
                                var O = LEAP.docedit.getDocument(h);
                                LEAP.docedit.fucous(h);
                                LEAP.docedit.restoreSelection(O, D);
                                var v = LEAP.getElement("[ctf=de_insertword_content]").innerHTML;
                                if (!String.isEmpty(v)) {
                                    LEAP.docedit.insertHTML(O, v);
                                }
                            }
                            LEAP.form.hide(LEAP.docedit.inserWordForm);
                        }
                        LEAP.docedit.___lt = h = null;
                    }
                }
            }
            h = LEAP._match(o, LEAP.docedit.d);
            if (h == null) {
                return;
            }
            var O = LEAP.docedit.getDocument(h);
            if (!r) {
                r = LEAP.docedit.getCursoredParentElement(O);
            }
            if (m == "click") {
                if (d == "de_changesourcemode") {
                    var J = LEAP.getElement("textarea[ctf=de_edit_sourcearea]:first", h);
                    if (LEAP.docedit.getContentCon(h).style.display == "none") {
                        LEAP.docedit.getContentCon(h).style.display = "block";
                        J.style.display = "none";
                        LEAP.docedit.getContent(h).innerHTML = J.value;
                    } else {
                        LEAP.docedit.getContentCon(h).style.display = "none";
                        if (J == null) {
                            var J = document.createElement("textarea");
                            J.style.width = "100%";
                            J.style.height = "99%";
                            J.setAttribute("ctf", "de_edit_sourcearea");
                            J.style.border = "1px dashed blue";
                            LEAP.docedit.getContentCon(h).parentElement.appendChild(J);
                            J.style.overflow = "auto";
                        }
                        J.style.display = "block";
                        var q = 1;
                        var B = " ";
                        if (q == 1) {
                            B = "\t";
                        }
                        J.value = style_html(LEAP.docedit.getContent(h).innerHTML, q, B, 999);
                    }
                    J = null;
                }
            }
            if (!r.isContentEditable) {
                return;
            }
            if (r.tagName == "INPUT" || r.tagName == "TEXTAREA") {
                if (r.getAttribute("ct") != null || r.getAttribute("ht") != null) {
                    return;
                }
            }
            if (m == "click" && r.getAttribute("ctf") != "de_edit_sourcearea") {
                if (d == "de_font_Bold") {
                    LEAP.docedit.execCommand(O, "Bold");
                    LEAP.docedit.fucous(h);
                } else {
                    if (d == "de_clear") {
                        LEAP.docedit.getContent(h).innerHTML = "";
                    } else {
                        if (d == "de_pagenext") {
                            if (LEAP.docedit.paging.contains(LEAP.docedit.index + 1)) {
                                LEAP.docedit.paging.replace(LEAP.docedit.index, LEAP.docedit.getContent(h).innerHTML);
                                LEAP.docedit.getContent(h).innerHTML = "";
                                var A = LEAP.docedit.paging.getvalue(LEAP.docedit.index + 1);
                                if (A != null) {
                                    LEAP.docedit.getContent(h).innerHTML = A;
                                }
                            } else {
                                var j = LEAP.docedit.getContent(h).innerHTML;
                                if (j.trim() == "") {
                                    alert("请输入内容！");
                                    return;
                                }
                                if (LEAP.docedit.paging.contains(LEAP.docedit.index)) {
                                    LEAP.docedit.paging.replace(LEAP.docedit.index, LEAP.docedit.getContent(h).innerHTML);
                                } else {
                                    LEAP.docedit.paging.add(LEAP.docedit.index, LEAP.docedit.getContent(h).innerHTML);
                                }
                                LEAP.docedit.getContent(h).innerHTML = "";
                            }
                            LEAP.docedit.index = LEAP.docedit.index + 1;
                        } else {
                            if (d == "de_pageup") {
                                if (LEAP.docedit.index == 1) {
                                    return;
                                }
                                var j = LEAP.docedit.getContent(h).innerHTML;
                                if (LEAP.docedit.paging.contains(LEAP.docedit.index)) {
                                    LEAP.docedit.paging.replace(LEAP.docedit.index, LEAP.docedit.getContent(h).innerHTML);
                                } else {
                                    LEAP.docedit.paging.add(LEAP.docedit.index, LEAP.docedit.getContent(h).innerHTML);
                                }
                                if (LEAP.docedit.paging.contains(LEAP.docedit.index - 1)) {
                                    LEAP.docedit.getContent(h).innerHTML = "";
                                    var A = LEAP.docedit.paging.getvalue(LEAP.docedit.index - 1);
                                    if (A != null) {
                                        LEAP.docedit.getContent(h).innerHTML = A;
                                    }
                                }
                                LEAP.docedit.index = LEAP.docedit.index - 1;
                            } else {
                                if (d == "de_font_strikethrough") {
                                    LEAP.docedit.execCommand(O, "strikethrough");
                                    LEAP.docedit.fucous(h);
                                } else {
                                    if (d == "de_font_Underline") {
                                        LEAP.docedit.execCommand(O, "Underline");
                                        LEAP.docedit.fucous(h);
                                    } else {
                                        if (d == "de_font_italic") {
                                            LEAP.docedit.execCommand(O, "italic");
                                            LEAP.docedit.fucous(h);
                                        } else {
                                            if (d == "de_superscript") {
                                                LEAP.docedit.execCommand(O, "superscript");
                                                LEAP.docedit.fucous(h);
                                            } else {
                                                if (d == "de_subscript") {
                                                    LEAP.docedit.execCommand(O, "subscript");
                                                    LEAP.docedit.fucous(h);
                                                } else {
                                                    if (d == "de_justifyleft") {
                                                        LEAP.docedit.execCommand(O, "justifyleft");
                                                        LEAP.docedit.fucous(h);
                                                    } else {
                                                        if (d == "de_justifyright") {
                                                            LEAP.docedit.execCommand(O, "justifyright");
                                                            LEAP.docedit.fucous(h);
                                                        } else {
                                                            if (d == "de_justifycenter") {
                                                                LEAP.docedit.execCommand(O, "justifycenter");
                                                                LEAP.docedit.fucous(h);
                                                            } else {
                                                                if (d == "justifyfull") {
                                                                    LEAP.docedit.execCommand(O, "justifyfull");
                                                                    LEAP.docedit.fucous(h);
                                                                } else {
                                                                    if (d == "de_insertorderedlist") {
                                                                        LEAP.docedit.execCommand(O, "insertorderedlist");
                                                                        LEAP.docedit.fucous(h);
                                                                    } else {
                                                                        if (d == "de_insertunorderedlist") {
                                                                            LEAP.docedit.execCommand(O, "insertunorderedlist");
                                                                            LEAP.docedit.fucous(h);
                                                                        } else {
                                                                            if (d == "de_outdent") {
                                                                                LEAP.docedit.execCommand(O, "outdent");
                                                                                LEAP.docedit.fucous(h);
                                                                            } else {
                                                                                if (d == "de_indent") {
                                                                                    LEAP.docedit.execCommand(O, "indent");
                                                                                    LEAP.docedit.fucous(h);
                                                                                } else {
                                                                                    if (d == "de_forecolor") {
                                                                                        LEAP.colorSelect(LEAP.docedit.setTextForeColor, LEAP.docedit, event, O);
                                                                                    } else {
                                                                                        if (d == "de_backcolor") {
                                                                                            LEAP.colorSelect(LEAP.docedit.setTextBackGroundColor, LEAP.docedit, event, O);
                                                                                        } else {
                                                                                            if (d == "de_table_inertcol_left") {
                                                                                                LEAP.docedit.insertTableCol(O, true);
                                                                                            } else {
                                                                                                if (d == "de_table_inertcol_right") {
                                                                                                    LEAP.docedit.insertTableCol(O, false);
                                                                                                } else {
                                                                                                    if (d == "de_table_inertrow_top") {
                                                                                                        LEAP.docedit.insertTableRow(O, true);
                                                                                                    } else {
                                                                                                        if (d == "de_table_inertrow_bottom") {
                                                                                                            LEAP.docedit.insertTableRow(O, false);
                                                                                                        } else {
                                                                                                            if (d == "de_table_delrow") {
                                                                                                                LEAP.docedit.removeTableRow(O);
                                                                                                            } else {
                                                                                                                if (d == "de_table_delcol") {
                                                                                                                    LEAP.docedit.removeTableCol(O);
                                                                                                                } else {
                                                                                                                    if (d == "de_table_split") {
                                                                                                                        LEAP.docedit.splitTableCells(O);
                                                                                                                    } else {
                                                                                                                        if (d == "de_table_merge") {
                                                                                                                            LEAP.docedit.beginMergeTableCells(O, h);
                                                                                                                        } else {
                                                                                                                            if (d == "de_link") {
                                                                                                                                LEAP.docedit.execCommand(O, "CreateLink");
                                                                                                                                LEAP.docedit.fucous(h);
                                                                                                                                var y = LEAP.docedit.getDocument(h).getElementsByTagName("A");
                                                                                                                                if (y != null) {
                                                                                                                                    var C = y.length;
                                                                                                                                    for (var H = 0; H < C; H++) {
                                                                                                                                        y[H].setAttribute("target", "_blank");
                                                                                                                                    }
                                                                                                                                    y = null;
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                if (d == "de_table_avgrow") {} else {
                                                                                                                                    if (d == "de_table_avgcol") {} else {
                                                                                                                                        if (d == "de_jswidth") {
                                                                                                                                            var D = LEAP.docedit.getCursoredParentElement(O);
                                                                                                                                            if (D) {
                                                                                                                                                try {
                                                                                                                                                    if (D != LEAP.docedit.getContent(h)) {
                                                                                                                                                        if (D.parentElement && D.parentElement.tagName == "TD") {
                                                                                                                                                            D = D.parentElement;
                                                                                                                                                        }
                                                                                                                                                        var z = D.style.width;
                                                                                                                                                        D.style.width = (D.clientWidth - 20) + "px";
                                                                                                                                                        if (z == D.style.width) {
                                                                                                                                                            D.style.width = D.clientWidth - 40;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                } catch (x) {}
                                                                                                                                            }
                                                                                                                                            D = null;
                                                                                                                                        } else {
                                                                                                                                            if (d == "de_zjwidth") {
                                                                                                                                                var D = LEAP.docedit.getCursoredParentElement(O);
                                                                                                                                                if (D) {
                                                                                                                                                    try {
                                                                                                                                                        if (D != LEAP.docedit.getContent(h)) {
                                                                                                                                                            if (D.parentElement && D.parentElement.tagName == "TD") {
                                                                                                                                                                D = D.parentElement;
                                                                                                                                                            }
                                                                                                                                                            var z = D.style.width;
                                                                                                                                                            D.style.width = (D.clientWidth + 20) + "px";
                                                                                                                                                            if (z == D.style.width) {
                                                                                                                                                                D.style.width = D.clientWidth + 40;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    } catch (x) {}
                                                                                                                                                }
                                                                                                                                                D = null;
                                                                                                                                            } else {
                                                                                                                                                if (d == "de_changetablemode") {
                                                                                                                                                    var D = LEAP.docedit.getCursoredParentElement(O);
                                                                                                                                                    if (D) {
                                                                                                                                                        try {
                                                                                                                                                            if (D != LEAP.docedit.getContent(h)) {
                                                                                                                                                                var K = LEAP._match(D, "TABLE", "tagName");
                                                                                                                                                                if (K) {
                                                                                                                                                                    if (K.style.tableLayout == "fixed") {
                                                                                                                                                                        K.style.tableLayout = "auto";
                                                                                                                                                                    } else {
                                                                                                                                                                        K.style.tableLayout = "fixed";
                                                                                                                                                                    }
                                                                                                                                                                    K = null;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        } catch (x) {}
                                                                                                                                                    }
                                                                                                                                                    D = null;
                                                                                                                                                } else {
                                                                                                                                                    if (m == "click" && d == "de_insert_table") {
                                                                                                                                                        LEAP.docedit.beginInsertTable(O);
                                                                                                                                                        var D = LEAP.docedit.saveSelection(O);
                                                                                                                                                        h.___sel = D;
                                                                                                                                                        var w = h.getAttribute("ctid");
                                                                                                                                                        if (!w) {
                                                                                                                                                            w = UUID.cID();
                                                                                                                                                            h.setAttribute("ctid", w);
                                                                                                                                                        }
                                                                                                                                                        LEAP.docedit.___lt = w;
                                                                                                                                                    } else {
                                                                                                                                                        if (m == "click" && d == "de_insert_word") {
                                                                                                                                                            LEAP.docedit.insertWord(O);
                                                                                                                                                            var D = LEAP.docedit.saveSelection(O);
                                                                                                                                                            h.___sel = D;
                                                                                                                                                            var w = h.getAttribute("ctid");
                                                                                                                                                            if (!w) {
                                                                                                                                                                w = UUID.cID();
                                                                                                                                                                h.setAttribute("ctid", w);
                                                                                                                                                            }
                                                                                                                                                            LEAP.docedit.___lt = w;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            L = o = n = h = r = null;
        }
    };
    LEAP.docedit.setValue = function(h, l) {
        var n = null;
        try {
            if (!l) {
                l = "";
            }
            h = LEAP._check(h, LEAP.docedit.d);
            if (h == null) {
                return;
            }
            var d = h.getAttribute("doceditinited");
            if (d != null && d == "1") {
                n = LEAP.docedit.getContent(h);
                if (n) {
                    if (l) {
                        l = l.replaceall("@serveruirl@", leapconfig.server);
                    }
                    var j = l.split("<!--next-->");
                    if (j != null) {
                        if (j.length == 1) {
                            n.innerHTML = l;
                        } else {
                            for (var g = 0; g < j.length; g++) {
                                if (g == 0) {
                                    n.innerHTML = j[g];
                                }
                                LEAP.docedit.paging.add(g + 1, j[g]);
                            }
                        }
                    }
                }
            } else {
                var m = LEAP.ctid(h);
                LEAP.asyn(LEAP.docedit.setValue, null, 10, h.tagName + "[ctid=" + m + "]", l);
            }
        } finally {
            n = h = null;
        }
    };
    LEAP.docedit.getValue = function(h) {
        var r = null;
        try {
            h = LEAP._check(h, LEAP.docedit.d);
            if (h == null) {
                return;
            }
            var v = h.getAttribute("doceditinited");
            if (v != null && v == "1") {
                r = LEAP.docedit.getContent(h);
                if (r) {
                    var m = [];
                    var o = LEAP.getElements("object[data]", LEAP.docedit.getDocument(h).body);
                    if (o != null) {
                        var g = o.length;
                        for (var j = 0; j < g; j++) {
                            m.add(o[j].getAttribute("data"));
                        }
                    }
                    var n = null;
                    var d = LEAP.docedit.paging;
                    if (d.count != 0) {
                        var p = false;
                        for (var j = 0; j < d.count; j++) {
                            if (j == 0) {
                                n = d.getvalue(j + 1) + "<!--next-->";
                            } else {
                                if (j == d.count - 1) {
                                    if (d.getvalue(j + 1) == "") {
                                        p = false;
                                        n += r.innerHTML;
                                    } else {
                                        if (d.getvalue(j + 1) == r.innerHTML) {
                                            p = false;
                                            n += d.getvalue(j + 1);
                                        } else {
                                            p = true;
                                            n += d.getvalue(j + 1);
                                        }
                                    }
                                } else {
                                    n += d.getvalue(j + 1) + "<!--next-->";
                                }
                            }
                        }
                        if (p == true) {
                            n = n + "<!--next-->" + r.innerHTML;
                        }
                        LEAP.docedit.index = 1;
                        LEAP.docedit.paging = new hashtable();
                    } else {
                        LEAP.docedit.index = 1;
                        n = r.innerHTML;
                    }
                    if (String.isEmpty(n)) {
                        n = null;
                    } else {
                        var u = -1;
                        var j = 0;
                        while ((u = n.indexOf("<a g=1", u + 1)) > -1) {
                            var q = LEAP.docedit.fs0.replace("@url", m[j]);
                            n = n.substring(0, u) + q + n.substring(u);
                            u += q.length;
                            j++;
                        }
                        n = n.replaceall(" data=" + leapconfig.server, " data=@serveruirl@").replaceall(' value="' + leapconfig.server, ' value="@serveruirl@').replaceall(' src="' + leapconfig.server, ' src="@serveruirl@').replaceall(' href="' + leapconfig.server, ' href="@serveruirl@');
                    }
                    return n;
                }
            } else {
                return null;
            }
        } finally {
            r = h = null;
        }
    };
    LEAP.docedit.fucous = function(d) {
        d = LEAP._check(d, LEAP.docedit.d);
        if (d == null) {
            return;
        }
        LEAP.docedit.getContent(d).focus();
    };
    LEAP.docedit.insertWord = function(g) {
        if (!LEAP.docedit.inserWordForm) {
            var d = '<div onresize="LEAPLG.bt();" class="lg_p2_bt"><div ctf="de_insertword_content" class="lg_p2_bt_top" CONTENTEDITABLE=true style="overflow:auto;"></div><div onresize="LEAPLG.bt_layout();" class="lg_p2_bt_bottom" style="height:22px;background-color: #CCC;text-align: center;"><a class="lgbtn" href="javascript:" style="float:right" ctf="de_insertword_ok">确定</a><a ctf="de_insertword_clean" class="lgbtn" href="javascript:" style="float:right">清理</a></div><img style="display:none" src="data:image:png,base64" onerror="LEAPLG.bt_img(0);"></div>';
            LEAP.docedit.inserWordForm = LEAP.form.create(null, "插入Office文档", 600, 500, 100, 100, false).form;
            LEAP.form.setContent(LEAP.docedit.inserWordForm, d);
            LEAP.addEvent(LEAP.docedit.inserWordForm, "formHided", LEAP.docedit.inserWordFormHided);
        }
        LEAP.form.show(LEAP.docedit.inserWordForm);
    };
    LEAP.docedit.inserWordFormHided = function() {
        if (LEAP.docedit.___lt) {
            var d = LEAP.getElement("div[ctid=" + LEAP.docedit.___lt + "]");
            if (d) {
                var g = d.___sel;
                LEAP.docedit.fucous(d);
                LEAP.docedit.restoreSelection(LEAP.docedit.getDocument(d), g);
            }
            LEAP.docedit.___lt = d = null;
        }
    };
    LEAP.docedit._si = function(l) {
        var g = null;
        var d = null;
        try {
            if (!l) {
                return;
            }
            var h = l.getAttribute(commfields.ctf);
            if (!h) {
                return;
            }
            d = LEAP._match(l, LEAP.docedit.d);
            if (d == null) {
                return;
            }
            var j = LEAP.docedit.getDocument(d);
            g = LEAP.docedit.getCursoredParentElement(j);
            if (!g.isContentEditable) {
                return;
            }
            if (h == "de_format") {
                if (l.value) {
                    LEAP.docedit.execCommand(j, "formatblock", "<" + l.value + ">");
                } else {
                    LEAP.docedit.execCommand(j, "formatblock", "<p>");
                }
            } else {
                if (h == "de_font") {
                    LEAP.docedit.execCommand(j, "fontName", l.value);
                } else {
                    if (h == "de_fontsize") {
                        LEAP.docedit.execCommand(j, "fontSize", l.value);
                    }
                }
            }
            l.options[0].selected = true;
            LEAP.docedit.fucous(d);
        } finally {
            g = d = l = null;
        }
    };
    LEAP.docedit.execCommand = function(j, h, d) {
        try {
            j.execCommand(h, false, d);
        } catch (g) {
            alert(g.message);
        }
    };
    LEAP.docedit.getSelection = function(d) {
        if (LEAP.isIE) {
            return d.selection;
        } else {
            return window.getSelection();
        }
    };
    LEAP.docedit.createRange = function(h, g) {
        if (LEAP.isIE) {
            if (!g) {
                g = LEAP.docedit.getSelection(h);
            }
            return g.createRange();
        } else {
            if (typeof g != "undefined") {
                try {
                    return g.getRangeAt(0);
                } catch (d) {
                    return h.createRange();
                }
            } else {
                return h.createRange();
            }
        }
    };
    LEAP.docedit.getCursoredParentElement = function(o, l) {
        try {
            if (LEAP.isIE) {
                if (typeof l == "undefined") {
                    l = LEAP.docedit.getSelection(o);
                }
                var d = LEAP.docedit.createRange(o, l);
                switch (l.type) {
                    case "Text":
                        var j = d.parentElement();
                        while (true) {
                            var g = d.duplicate();
                            g.moveToElementText(j);
                            if (g.inRange(d)) {
                                break;
                            }
                            if ((j.nodeType != 1) || (j.tagName.toLowerCase() == "body")) {
                                break;
                            }
                            j = j.parentElement;
                        }
                        return j;
                    case "None":
                        try {
                            return d.parentElement();
                        } catch (n) {
                            return o.body;
                        }
                    case "Control":
                        return d.item(0);
                    default:
                        return o.body;
                }
            } else {
                if (typeof l == "undefined") {
                    l = LEAP.docedit.getSelection(o);
                }
                var d = LEAP.docedit.createRange(o, l);
                try {
                    var m = d.commonAncestorContainer;
                    if (!d.collapsed && d.startContainer == d.endContainer && d.startOffset - d.endOffset <= 1 && d.startContainer.hasChildNodes()) {
                        m = d.startContainer.childNodes[d.startOffset];
                    }
                    while (m.nodeType == 3) {
                        m = m.parentNode;
                    }
                    return m;
                } catch (h) {
                    return null;
                }
            }
        } catch (n) {}
    };
    LEAP.docedit.insertHTML = function(d, n) {
        if (LEAPBrowser.isIE) {
            try {
                var h = LEAP.docedit.getSelection(d);
                var o = LEAP.docedit.createRange(d, h);
                o.pasteHTML(n);
            } catch (p) {
                alert("请不要选择对象");
            }
        } else {
            var g = d.createElement("div");
            g.innerHTML = n;
            var q = g.children;
            if (q != null) {
                var j = q.length;
                for (var m = j - 1; m > -1; m--) {
                    LEAP.docedit.insertNodeAtSelection(d, q.item(m));
                }
            }
            g = null;
        }
    };
    LEAP.docedit.insertNodeAtSelection = function(l, g) {
        var j = LEAP.docedit.getSelection(l);
        var d = LEAP.docedit.createRange(l, j);
        j.removeAllRanges();
        d.deleteContents();
        var h = d.startContainer;
        var n = d.startOffset;
        var m = g;
        switch (h.nodeType) {
            case 3:
                if (g.nodeType == 3) {
                    h.insertData(n, g.data);
                    d = LEAP.docedit.createRange(l);
                    d.setEnd(h, n + g.length);
                    d.setStart(h, n + g.length);
                    j.addRange(d);
                } else {
                    h = h.splitText(n);
                    if (g.nodeType == 11) {
                        m = m.firstChild;
                    }
                    h.parentNode.insertBefore(g, h);
                    LEAP.docedit.setCurrentControl(l, m, true);
                }
                break;
            case 1:
                if (g.nodeType == 11) {
                    m = m.firstChild;
                }
                h.insertBefore(g, h.childNodes[n]);
                LEAP.docedit.setCurrentControl(l, m, true);
                break;
            default:
                l.body.appendChild(g);
        }
    };
    LEAP.docedit.setTextForeColor = function(d, g) {
        LEAP.docedit.execCommand(g, "ForeColor", d);
    };
    LEAP.docedit.setTextBackGroundColor = function(d, g) {
        LEAP.docedit.execCommand(g, "BackColor", d);
    };
    LEAP.docedit.beginInsertTable = function(d) {
        if (!LEAP.docedit.desingeTablePropsForm) {
            LEAP.docedit.desingeTablePropsForm = LEAP.form.create(null, "表格属性", 200, 245, 100, 100, false).form;
            LEAP.form.setContent(LEAP.docedit.desingeTablePropsForm, LEAP.docedit.e);
            LEAP.addEvent(LEAP.docedit.desingeTablePropsForm, "formHided", LEAP.docedit.insetTableFormHided);
        }
        LEAP.form.show(LEAP.docedit.desingeTablePropsForm);
    };
    LEAP.docedit.insetTableFormHided = function() {
        if (LEAP.docedit.___lt) {
            var d = LEAP.getElement("div[ctid=" + LEAP.docedit.___lt + "]");
            if (d) {
                var g = d.___sel;
                LEAP.docedit.fucous(d);
                LEAP.docedit.restoreSelection(LEAP.docedit.getDocument(d), g);
            }
            LEAP.docedit.___lt = d = null;
        }
    };
    LEAP.docedit.saveSelection = function(g, d) {
        if (LEAPBrowser.isIE) {
            return LEAP.docedit.IE_saveSelection(g, d);
        } else {
            return LEAP.docedit.webkit_saveSelection(g);
        }
    };
    LEAP.docedit.restoreSelection = function(g, d) {
        if (LEAPBrowser.isIE) {
            return LEAP.docedit.IE_restoreSelection(g, d);
        } else {
            return LEAP.docedit.webkit_restoreSelection(g, d);
        }
    };
    LEAP.docedit.IE_saveSelection = function(g, d) {
        return LEAP.docedit.createRange(g, d ? d : LEAP.docedit.getSelection(g));
    };
    LEAP.docedit.IE_restoreSelection = function(d, v) {
        if (!v) {
            return;
        }
        var l = null;
        if (v.parentElement) {
            l = v.parentElement();
        } else {
            l = v.item(0);
        }
        var h = LEAP.docedit.createRange(d, LEAP.docedit.getSelection(d));
        var r = null;
        if (h.parentElement) {
            r = h.parentElement();
        } else {
            r = h.item(0);
        }
        var n = function(y) {
            for (var x = y; x; x = x.parentNode) {
                if (x.tagName.toLowerCase() == "html") {
                    return x.parentNode;
                }
            }
            return null;
        };
        if (v.parentElement && n(l) == n(r)) {
            if (h.isEqual(v)) {
                return;
            }
        }
        try {
            v.select();
        } catch (j) {}
        h = LEAP.docedit.createRange(d, LEAP.docedit.getSelection(d));
        if (h.parentElement) {
            r = h.parentElement();
        } else {
            r = h.item(0);
        }
        if (r != l) {
            var m = LEAP.docedit.config.selectWorkaround || "VisibleCue";
            switch (m) {
                case "SimulateClick":
                case "InsertSpan":
                    var o = n(l);
                    var q = function(A) {
                        var z = "";
                        for (var y = 0; y < 26; ++y) {
                            z += String.fromCharCode("a".charCodeAt(0) + y);
                        }
                        var x = "";
                        for (var y = 0; y < A;
                            ++y) {
                            x += z.substr(Math.floor(Math.random() * z.length + 1), 1);
                        }
                        return x;
                    };
                    var w = 1;
                    var u = "__InsertSpan_Workaround_" + q(w);
                    while (o.getElementById(u)) {
                        w += 1;
                        u = "__InsertSpan_Workaround_" + q(w);
                    }
                    v.pasteHTML('<span id="' + u + '"></span>');
                    var p = o.getElementById(u);
                    v.moveToElementText(p);
                    v.select();
                    break;
                case "JustificationHack":
                    var g = String.fromCharCode(1);
                    v.pasteHTML(g);
                    v.findText(g, -1);
                    v.select();
                    v.execCommand("JustifyNone");
                    v.pasteHTML("");
                    break;
                case "VisibleCue":
                default:
                    var g = String.fromCharCode(1);
                    v.pasteHTML(g);
                    v.findText(g, -1);
                    v.select();
            }
        }
    };
    LEAP.docedit.webkit_saveSelection = function(d) {
        return LEAP.docedit.createRange(d, LEAP.docedit.getSelection(d)).cloneRange();
    };
    LEAP.docedit.webkit_restoreSelection = function(h, d) {
        var g = LEAP.docedit.getSelection(h);
        g.removeAllRanges();
        g.addRange(d);
    };
    LEAP.docedit.insertTable = function(d) {
        LEAP.form.hide(LEAP.docedit.desingeTablePropsForm);
        var h = LEAP.getElement(LEAP.docedit.desingeTablePropsForm);
        var y = LEAP.getElement("[dectf=tableDesignDefine_caption]", h).value;
        var u = LEAP.getElement("[dectf=tableDesignDefine_rowNum]", h).value * 1;
        var g = LEAP.getElement("[dectf=tableDesignDefine_colNum]", h).value * 1;
        var j = LEAP.getElement("[dectf=tableDesignDefine_width]", h).value.Trim();
        var z = LEAP.getElement("[dectf=tableDesignDefine_widthtype]", h).value.Trim();
        var x = LEAP.getElement("[dectf=tableDesignDefine_height]", h).value.Trim();
        var w = LEAP.getElement("[dectf=tableDesignDefine_heighttype]", h).value.Trim();
        var m = LEAP.getElement("[dectf=tableDesignDefine_border]", h).value.Trim();
        var v = LEAP.getElement("[dectf=tableDesignDefine_cellpadding]", h).value.Trim();
        var q = LEAP.getElement("[dectf=tableDesignDefine_cellspacing]", h).value.Trim();
        var r = LEAP.getElement("[dectf=tableDesignDefine_textstyle]", h).checked;
        h = null;
        if (y != null) {
            y = y.trim();
        }
        if (y != null && y.trim().length == 0) {
            y = null;
        }
        var o = new StringBuffer();
        o.append("<table ");
        if (r) {
            o.append("istexttable=1 ");
        }
        o.append("style='word-break:break-all;");
        var n = null;
        if (j != "") {
            o.append("width:");
            o.append(j);
            o.append(z);
            n = j / g + z;
            o.append(";");
        } else {
            o.append("width:100%;");
        }
        if (x != "") {
            o.append("height:");
            o.append(x);
            o.append(w);
            o.append(";");
        }
        o.append("' ");
        if (m != "") {
            o.append("border='");
            o.append(m);
            o.append("' ");
        }
        if (v != "") {
            o.append("cellpadding='");
            o.append(v);
            o.append("' ");
        }
        if (q != "") {
            o.append("cellspacing='");
            o.append(q);
            o.append("' ");
        }
        o.append(">");
        if (y != null) {
            o.append("<caption>");
            o.append(y);
            o.append("</caption>");
        }
        o.append("<tbody>");
        for (var p = 0; p < u; p++) {
            if (p == 0) {
                o.append("<tr>");
            }
            for (var l = 0; l < g; l++) {
                if (l % 2 == 0 && r) {
                    if (p != 0) {
                        o.append("<td class=lg3tabletext></td>");
                    } else {
                        o.append("<td class=lg3tabletext style='width:85px;'></td>");
                    }
                } else {
                    o.append("<td></td>");
                }
            }
            o.append("</tr>");
        }
        o.append("</tbody>");
        o.append("</table>");
        LEAP.docedit.insertHTML(d, o.toString());
    };
    LEAP.docedit.insertTableRow = function(m, j) {
        var l = LEAP.docedit.getCursoredParentElement(m);
        if (l == null) {
            alert("当前选择的控件为空,请重新选择");
            return;
        }
        var g = LEAP._match(l, "TD", "tagName", 99);
        if (g == null) {
            alert("当前选择的单元格为空,请重新选择");
            return;
        }
        var h = LEAP._match(l, "TABLE", "tagName", 99);
        if (h == null) {
            alert("当前选择的表格为空,请重新选择");
            return;
        }
        var d = new LEAP.tableUtil(m);
        if (j == null) {
            j = false;
        }
        d.insertRow(h, g, j);
        d.dispose();
    };
    LEAP.docedit.removeTableRow = function(l) {
        var j = LEAP.docedit.getCursoredParentElement(l);
        if (j == null) {
            alert("当前选择的控件为空,请重新选择");
            return;
        }
        var g = LEAP._match(j, "TD", "tagName", 99);
        if (g == null) {
            alert("当前选择的单元格为空,请重新选择");
            return;
        }
        var h = LEAP._match(j, "TABLE", "tagName", 99);
        if (h == null) {
            alert("当前选择的表格为空,请重新选择");
            return;
        }
        var d = new LEAP.tableUtil(l);
        d.removeRow(h, g);
        d.dispose();
    };
    LEAP.docedit.removeTableCol = function(l) {
        var j = LEAP.docedit.getCursoredParentElement(l);
        if (j == null) {
            alert("当前选择的控件为空,请重新选择");
            return;
        }
        var g = LEAP._match(j, "TD", "tagName", 99);
        if (g == null) {
            alert("当前选择的单元格为空,请重新选择");
            return;
        }
        var h = LEAP._match(j, "TABLE", "tagName", 99);
        if (h == null) {
            alert("当前选择的表格为空,请重新选择");
            return;
        }
        var d = new LEAP.tableUtil(l);
        d.removeCol(h, g);
        d.dispose();
    };
    LEAP.docedit.insertTableCol = function(m, h) {
        var l = LEAP.docedit.getCursoredParentElement(m);
        if (l == null) {
            alert("当前选择的控件为空,请重新选择");
            return;
        }
        var g = LEAP._match(l, "TD", "tagName", 99);
        if (g == null) {
            alert("当前选择的单元格为空,请重新选择");
            return;
        }
        var j = LEAP._match(l, "TABLE", "tagName", 99);
        if (j == null) {
            alert("当前选择的表格为空,请重新选择");
            return;
        }
        var d = new LEAP.tableUtil(m);
        if (h == null) {
            h = false;
        }
        d.insertCol(j, g, h);
        d.dispose();
    };
    LEAP.docedit.beginMergeTableCells = function(h, d) {
        alert("进入单元格合并模式\n鼠标第一次点击选择左上角坐标\n鼠标第二次及后续点击选择右下角左边\n鼠标右键退出合并模式");
        LEAP.docedit.curEditorMode = 2;
        var g = d.getAttribute("ctid");
        if (!g) {
            g = UUID.cID();
            d.setAttribute("ctid", g);
        }
        LEAP.docedit.___lt2 = g;
        LEAP.docedit.editedTableDef = LEAP.docedit.editedTable = LEAP.docedit.lefttopcell = LEAP.docedit.rightbottomcell = null;
    };
    LEAP.docedit.mergeTableCells = function(n, j) {
        if ((LEAPBrowser.isIE && j == 1) || (LEAPBrowser.isChrome && j == 0)) {
            var m = LEAP.docedit.getCursoredParentElement(n);
            if (m == null) {
                alert("当前选择的控件为空,请重新选择");
                return;
            }
            var g = LEAP._match(m, "TD", "tagName", 99);
            if (g == null) {
                alert("当前选择的单元格为空,请重新选择");
                return;
            }
            var l = LEAP._match(m, "TABLE", "tagName", 99);
            if (l == null) {
                alert("当前选择的表格为空,请重新选择");
                return;
            }
            if (LEAP.docedit.lefttopcell == null) {
                LEAP.docedit.lefttopcell = g;
                LEAP.docedit.editedTable = l;
                LEAP.addCSS(g, LEAP.tableUtil.selectedTDClassName, false);
            } else {
                if (l == LEAP.docedit.editedTable) {
                    LEAP.removeCSS(LEAP.getElements("." + LEAP.tableUtil.selectedTDClassName, l), LEAP.tableUtil.selectedTDClassName, true);
                    var d = new LEAP.tableUtil(n);
                    if (LEAP.docedit.editedTableDef == null) {
                        LEAP.docedit.editedTableDef = d.getTableDef(l);
                    }
                    d.fixSelectRect(LEAP.docedit.editedTableDef, [LEAP.docedit.lefttopcell, m], l);
                    d.dispose();
                    LEAP.docedit.rightbottomcell = g;
                } else {
                    alert("当前表格与左上角坐标所在的表格不一致,请重新选择");
                }
            }
        } else {
            if (j == 2) {
                if (window.confirm("当前正处于单元格合并状态\n选择是将进行合并\n选择否将退出合并状态")) {
                    var d = new LEAP.tableUtil(n);
                    var h = LEAP.getElements("." + LEAP.tableUtil.selectedTDClassName, LEAP.docedit.editedTable);
                    LEAP.removeCSS(h, LEAP.tableUtil.selectedTDClassName, true);
                    d.mergeCells(LEAP.docedit.editedTable, h, LEAP.docedit.editedTableDef);
                    d.dispose();
                }
                LEAP.docedit.curEditorMode = null;
                LEAP.docedit.editedTableDef = LEAP.docedit.lefttopcell = LEAP.docedit.rightbottomcell = LEAP.docedit.editedTable = null;
            }
        }
    };
    LEAP.docedit.splitTableCells = function(m) {
        var l = LEAP.docedit.getCursoredParentElement(m);
        if (l == null) {
            alert("当前选择的控件为空,请重新选择");
            return;
        }
        var g = LEAP._match(l, "TD", "tagName", 99);
        if (g == null) {
            alert("当前选择的单元格为空,请重新选择");
            return;
        }
        var h = LEAP._match(l, "TABLE", "tagName", 99);
        if (h == null) {
            alert("当前选择的表格为空,请重新选择");
            return;
        }
        var d = new LEAP.tableUtil(m);
        var j = d.getTableDef(h);
        d.splitCells(h, [l]);
        d.dispose();
    };

    function style_html(m, g, j, l) {
        var o, n;

        function o() {
            this.pos = 0;
            this.token = "";
            this.current_mode = "CONTENT";
            this.tags = {
                parent: "parent1",
                parentcount: 1,
                parent1: ""
            };
            this.tag_type = "";
            this.token_text = this.last_token = this.last_text = this.token_type = "";
            this.Utils = {
                whitespace: "\n\r\t ".split(""),
                single_token: "br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed".split(","),
                extra_liners: "head,body,/html".split(","),
                in_array: function(r, p) {
                    for (var q = 0; q < p.length; q++) {
                        if (r === p[q]) {
                            return true;
                        }
                    }
                    return false;
                }
            };
            this.get_content = function() {
                var p = "";
                var r = [];
                var u = false;
                while (this.input.charAt(this.pos) !== "<") {
                    if (this.pos >= this.input.length) {
                        return r.length ? r.join("") : ["", "TK_EOF"];
                    }
                    p = this.input.charAt(this.pos);
                    this.pos++;
                    this.line_char_count++;
                    if (this.Utils.in_array(p, this.Utils.whitespace)) {
                        if (r.length) {
                            u = true;
                        }
                        this.line_char_count--;
                        continue;
                    } else {
                        if (u) {
                            if (this.line_char_count >= this.max_char) {
                                r.push("\n");
                                for (var q = 0; q < this.indent_level; q++) {
                                    r.push(this.indent_string);
                                }
                                this.line_char_count = 0;
                            } else {
                                r.push(" ");
                                this.line_char_count++;
                            }
                            u = false;
                        }
                    }
                    r.push(p);
                }
                return r.length ? r.join("") : "";
            };
            this.get_script = function() {
                var p = "";
                var r = [];
                var u = new RegExp("<\/script>", "igm");
                u.lastIndex = this.pos;
                var q = u.exec(this.input);
                var v = q ? q.index : this.input.length;
                while (this.pos < v) {
                    if (this.pos >= this.input.length) {
                        return r.length ? r.join("") : ["", "TK_EOF"];
                    }
                    p = this.input.charAt(this.pos);
                    this.pos++;
                    r.push(p);
                }
                return r.length ? r.join("") : "";
            };
            this.record_tag = function(p) {
                if (this.tags[p + "count"]) {
                    this.tags[p + "count"]++;
                    this.tags[p + this.tags[p + "count"]] = this.indent_level;
                } else {
                    this.tags[p + "count"] = 1;
                    this.tags[p + this.tags[p + "count"]] = this.indent_level;
                }
                this.tags[p + this.tags[p + "count"] + "parent"] = this.tags.parent;
                this.tags.parent = p + this.tags[p + "count"];
            };
            this.retrieve_tag = function(p) {
                if (this.tags[p + "count"]) {
                    var q = this.tags.parent;
                    while (q) {
                        if (p + this.tags[p + "count"] === q) {
                            break;
                        }
                        q = this.tags[q + "parent"];
                    }
                    if (q) {
                        this.indent_level = this.tags[p + this.tags[p + "count"]];
                        this.tags.parent = this.tags[q + "parent"];
                    }
                    delete this.tags[p + this.tags[p + "count"] + "parent"];
                    delete this.tags[p + this.tags[p + "count"]];
                    if (this.tags[p + "count"] == 1) {
                        delete this.tags[p + "count"];
                    } else {
                        this.tags[p + "count"]--;
                    }
                }
            };
            this.get_tag = function() {
                var p = "";
                var r = [];
                var v = false;
                do {
                    if (this.pos >= this.input.length) {
                        return r.length ? r.join("") : ["", "TK_EOF"];
                    }
                    p = this.input.charAt(this.pos);
                    this.pos++;
                    this.line_char_count++;
                    if (this.Utils.in_array(p, this.Utils.whitespace)) {
                        v = true;
                        this.line_char_count--;
                        continue;
                    }
                    if (p === "'" || p === '"') {
                        if (!r[1] || r[1] !== "!") {
                            p += this.get_unformatted(p);
                            v = true;
                        }
                    }
                    if (p === "=") {
                        v = false;
                    }
                    if (r.length && r[r.length - 1] !== "=" && p !== ">" && v) {
                        if (this.line_char_count >= this.max_char) {
                            this.print_newline(false, r);
                            this.line_char_count = 0;
                        } else {
                            r.push(" ");
                            this.line_char_count++;
                        }
                        v = false;
                    }
                    r.push(p);
                } while (p !== ">");
                var w = r.join("");
                var u;
                if (w.indexOf(" ") != -1) {
                    u = w.indexOf(" ");
                } else {
                    u = w.indexOf(">");
                }
                var q = w.substring(1, u).toLowerCase();
                if (w.charAt(w.length - 2) === "/" || this.Utils.in_array(q, this.Utils.single_token)) {
                    this.tag_type = "SINGLE";
                } else {
                    if (q === "script") {
                        this.record_tag(q);
                        this.tag_type = "SCRIPT";
                    } else {
                        if (q === "style") {
                            this.record_tag(q);
                            this.tag_type = "STYLE";
                        } else {
                            if (q.charAt(0) === "!") {
                                if (q.indexOf("[if") != -1) {
                                    if (w.indexOf("!IE") != -1) {
                                        var x = this.get_unformatted("-->", w);
                                        r.push(x);
                                    }
                                    this.tag_type = "START";
                                } else {
                                    if (q.indexOf("[endif") != -1) {
                                        this.tag_type = "END";
                                        this.unindent();
                                    } else {
                                        if (q.indexOf("[cdata[") != -1) {
                                            var x = this.get_unformatted("]]>", w);
                                            r.push(x);
                                            this.tag_type = "SINGLE";
                                        } else {
                                            var x = this.get_unformatted("-->", w);
                                            r.push(x);
                                            this.tag_type = "SINGLE";
                                        }
                                    }
                                }
                            } else {
                                if (q.charAt(0) === "/") {
                                    this.retrieve_tag(q.substring(1));
                                    this.tag_type = "END";
                                } else {
                                    this.record_tag(q);
                                    this.tag_type = "START";
                                }
                                if (this.Utils.in_array(q, this.Utils.extra_liners)) {
                                    this.print_newline(true, this.output);
                                }
                            }
                        }
                    }
                }
                return r.join("");
            };
            this.get_unformatted = function(q, u) {
                if (u && u.indexOf(q) != -1) {
                    return "";
                }
                var p = "";
                var v = "";
                var w = true;
                do {
                    p = this.input.charAt(this.pos);
                    this.pos++;
                    if (this.Utils.in_array(p, this.Utils.whitespace)) {
                        if (!w) {
                            this.line_char_count--;
                            continue;
                        }
                        if (p === "\n" || p === "\r") {
                            v += "\n";
                            for (var r = 0; r < this.indent_level; r++) {
                                v += this.indent_string;
                            }
                            w = false;
                            this.line_char_count = 0;
                            continue;
                        }
                    }
                    v += p;
                    this.line_char_count++;
                    w = true;
                } while (v.indexOf(q) == -1);
                return v;
            };
            this.get_token = function() {
                var q;
                if (this.last_token === "TK_TAG_SCRIPT") {
                    var p = this.get_script();
                    if (typeof p !== "string") {
                        return p;
                    }
                    try {
                        q = js_beautify(p, this.indent_size, this.indent_character, this.indent_level);
                    } catch (u) {}
                    return [q, "TK_CONTENT"];
                }
                if (this.current_mode === "CONTENT") {
                    q = this.get_content();
                    if (typeof q !== "string") {
                        return q;
                    } else {
                        return [q, "TK_CONTENT"];
                    }
                }
                if (this.current_mode === "TAG") {
                    q = this.get_tag();
                    if (typeof q !== "string") {
                        return q;
                    } else {
                        var r = "TK_TAG_" + this.tag_type;
                        return [q, r];
                    }
                }
            };
            this.printer = function(u, r, p, v) {
                this.input = u || "";
                this.output = [];
                this.indent_character = r || " ";
                this.indent_string = "";
                this.indent_size = p || 2;
                this.indent_level = 0;
                this.max_char = v || 999;
                this.line_char_count = 0;
                for (var q = 0; q < this.indent_size; q++) {
                    this.indent_string += this.indent_character;
                }
                this.print_newline = function(y, w) {
                    this.line_char_count = 0;
                    if (!w || !w.length) {
                        return;
                    }
                    if (!y) {
                        while (this.Utils.in_array(w[w.length - 1], this.Utils.whitespace)) {
                            w.pop();
                        }
                    }
                    w.push("\n");
                    for (var x = 0; x < this.indent_level; x++) {
                        w.push(this.indent_string);
                    }
                };
                this.print_token = function(w) {
                    this.output.push(w);
                };
                this.indent = function() {
                    this.indent_level++;
                };
                this.unindent = function() {
                    if (this.indent_level > 0) {
                        this.indent_level--;
                    }
                };
            };
            return this;
        }
        n = new o();
        n.printer(m, j, g);
        while (true) {
            var h = n.get_token();
            n.token_text = h[0];
            n.token_type = h[1];
            if (n.token_type === "TK_EOF") {
                break;
            }
            switch (n.token_type) {
                case "TK_TAG_START":
                case "TK_TAG_SCRIPT":
                case "TK_TAG_STYLE":
                    n.print_newline(false, n.output);
                    n.print_token(n.token_text);
                    n.indent();
                    n.current_mode = "CONTENT";
                    break;
                case "TK_TAG_END":
                    if (n.token_text.toLowerCase() != "</textarea>") {
                        n.print_newline(true, n.output);
                    }
                    n.print_token(n.token_text);
                    n.current_mode = "CONTENT";
                    break;
                case "TK_TAG_SINGLE":
                    n.print_newline(false, n.output);
                    n.print_token(n.token_text);
                    n.current_mode = "CONTENT";
                    break;
                case "TK_CONTENT":
                    if (n.token_text !== "") {
                        n.print_newline(false, n.output);
                        n.print_token(n.token_text);
                    }
                    n.current_mode = "TAG";
                    break;
            }
            n.last_token = n.token_type;
            n.last_text = n.token_text;
        }
        var d = n.output;
        if (d != null && d.length > 0) {
            ___trimHTML(d);
        }
        return d.join("");
    }

    function ___trimHTML(n) {
        var d = n.length;
        for (var h = 0; h < d; h++) {
            var m = n[h];
            if (m == "\n" || m == "\t") {
                continue;
            }
            if (m != null && m != "" && m.charAt(0) != "<" && m.charAt(m.length - 1) != ">") {
                for (var g = h - 1; g > -1; g--) {
                    if (n[g] == "\n" || n[g] == "\t") {
                        n[g] = "";
                    }
                    if (n[g].charAt(0) == "<" && n[g].charAt(n[g].length - 1) == ">") {
                        break;
                    }
                }
                for (var g = h + 1; g < d; g++) {
                    if (n[g] == "\n" || n[g] == "\t") {
                        n[g] = "";
                    }
                    if (n[g].charAt(0) == "<" && n[g].charAt(n[g].length - 1) == ">") {
                        break;
                    }
                }
            }
        }
    }
    LEAP.docedit2 = new Object();
    LEAP.docedit2.d = "docedit2";
    LEAP.docedit2.z = function(j) {
        try {
            if (!j) {
                if (!event) {
                    return;
                }
                j = event.srcElement;
            }
            if (!j) {
                return;
            }
            var d = j.parentElement;
            var h = document.createElement("IFRAME");
            h.setAttribute("ctf", "de_edit_contentarea");
            h.frameBorder = 0;
            var l = LEAP.ctid(h);
            h.setAttribute("id", l);
            h.style.width = "100%";
            h.style.height = "100%";
            h.style.border = "0px";
            d.setAttribute("_fid", l);
            h.src = leapconfig.server + "LEAP/Resource/HTML/tinymce/edit.html?id=" + l;
            d.insertBefore(h, j);
            LEAP.removeElement(j);
            d = j = null;
        } catch (g) {} finally {
            j = null;
        }
    };
    LEAP.docedit2.getContent = function(d) {
        try {
            d = LEAP._check(d, LEAP.docedit2.d);
            if (d == null) {
                return;
            }
            var h = d.getAttribute("_fid");
            if (h) {
                f = document.getElementById(h);
                try {
                    if (f) {
                        var g = f.contentWindow.document.getElementsByTagName("IFRAME");
                        if (g && g.length > 0) {
                            try {
                                return g[0].contentWindow.document.body;
                            } finally {
                                g = null;
                            }
                        }
                    }
                } finally {
                    f = null;
                }
            }
        } finally {
            d = ret = null;
        }
    };
    LEAP.docedit2.getValue = function(h) {
        var j = null;
        try {
            h = LEAP._check(h, LEAP.docedit2.d);
            if (h == null) {
                return;
            }
            var l = h.getAttribute("_fid");
            if (l) {
                j = document.getElementById(l);
                var g = j.getAttribute("doceditinited");
                if (g != null && g == "1") {
                    var d = j.contentWindow.getValue();
                    if (d) {
                        d = d.replaceall(' data="' + leapconfig.server, ' data="@serveruirl@').replaceall(' value="' + leapconfig.server, ' value="@serveruirl@').replaceall(' src="' + leapconfig.server, ' src="@serveruirl@').replaceall(' href="' + leapconfig.server, ' href="@serveruirl@');
                        d = d.replaceall(' data="../../../', ' data="@serveruirl@LEAP/').replaceall(' value="../../../', ' value="@serveruirl@LEAP/').replaceall(' src="../../../', ' src="@serveruirl@LEAP/').replaceall(' href="../../../', ' href="@serveruirl@LEAP/');
                    }
                    return d;
                }
            }
            return null;
        } finally {
            j = h = null;
        }
    };
    LEAP.docedit2.onUploadComplete = function(h, g) {
        f = document.getElementById(g);
        if (!f) {
            return;
        }
        if (h == null) {
            alert("上传失败");
            f.contentWindow.pu2();
            return;
        } else {
            var j = LEAP.upload.getShowPath(h);
            if (j) {
                var l = null;
                var n = null;
                var d = j.lastIndexOf(".");
                if (d > -1) {
                    n = j.substring(d).toLowerCase();
                }
                if (n != null) {
                    if (LEAP.docedit.imgTypes.contains(n)) {
                        l = new StringBuffer('<img src="').append(j).append('">').toString();
                    } else {
                        if (LEAP.docedit.flashTypes.contains(n)) {
                            s = true;
                            l = LEAP.docedit.fs.replaceall("@url", j).replace("@width", 300).replace("@height", 300);
                        } else {
                            if (LEAP.docedit.flvshTypes.contains(n)) {
                                s = true;
                                l = LEAP.docedit.fls.replaceall("@url", j).replace("@width", 500).replace("@height", 500);
                            } else {
                                if (LEAP.docedit.mediaTypes.contains(n)) {
                                    s = true;
                                    l = LEAP.docedit.ms.replaceall("@url", j).replace("@width", 500).replace("@height", 500);
                                } else {
                                    if (LEAP.docedit.mp4Types.contains(n)) {
                                        s = true;
                                        l = LEAP.docedit.mp4.replaceall("@url", j).replace("@width", 500).replace("@height", 500);
                                    } else {
                                        var m = h.title;
                                        if (String.isEmpty(m)) {
                                            m = h.name;
                                        }
                                        l = new StringBuffer('<a style="color:blue" href="').append(j).append('">').append(m).append("</a>").toString();
                                    }
                                }
                            }
                        }
                    }
                }
                f.contentWindow.pu(l);
            }
        }
    };
    LEAP.docedit2._u = function(j) {
        var h = document.getElementById(j);
        if (h) {
            var d = h.parentElement;
            var g = LEAP.uploadbtn.pa(d);
            g.arg = j;
            g.callback = LEAP.docedit2.onUploadComplete;
            LEAP.uploadform.show(g);
            d = null;
            h = null;
        }
    };
    LEAP.docedit2.s1 = function(h, g) {
        var d = LEAP.getElement("div[ctid=" + h + "]");
        LEAP.docedit2.setValue(d, g);
        d = null;
    };
    LEAP.docedit2.setValue = function(g, j) {
        var h = null;
        try {
            if (!j) {
                j = "";
            }
            g = LEAP._check(g, LEAP.docedit2.d);
            if (g == null) {
                return;
            }
            h = document.getElementById(g.getAttribute("_fid"));
            if (h != null) {
                var d = h.getAttribute("doceditinited");
                if (d != null && d == "1") {
                    try {
                        j = j.replaceall("@serveruirl@", leapconfig.server);
                        h.contentWindow.setValue(j);
                    } finally {
                        return;
                    }
                }
            }
            LEAP.asyn(LEAP.docedit2.s1, null, 100, LEAP.ctid(g), j);
        } finally {
            h = g = null;
        }
    };
    LEAP.docedit3 = new Object();
    LEAP.docedit3.d = "docedit3";
    LEAP.docedit3.z = function(j) {
        try {
            if (!j) {
                if (!event) {
                    return;
                }
                j = event.srcElement;
            }
            if (!j) {
                return;
            }
            var d = j.parentElement;
            var h = document.createElement("IFRAME");
            h.setAttribute("ctf", "de_edit_contentarea");
            h.frameBorder = 0;
            var l = LEAP.ctid(h);
            h.setAttribute("id", l);
            h.style.width = "100%";
            h.style.height = "100%";
            h.style.border = "0px";
            d.setAttribute("_fid", l);
            h.src = leapconfig.server + "LEAP/Resource/HTML/webeditor/editor.html?id=" + l;
            d.insertBefore(h, j);
            LEAP.removeElement(j);
            d = j = null;
        } catch (g) {} finally {
            j = null;
        }
    };
    LEAP.docedit3.getContent = function(d) {
        try {
            d = LEAP._check(d, LEAP.docedit3.d);
            if (d == null) {
                return;
            }
            var h = d.getAttribute("_fid");
            if (h) {
                f = document.getElementById(h);
                try {
                    if (f) {
                        var g = f.contentWindow.document.getElementsByTagName("IFRAME");
                        if (g && g.length > 0) {
                            try {
                                return g[0].contentWindow.document.body;
                            } finally {
                                g = null;
                            }
                        }
                    }
                } finally {
                    f = null;
                }
            }
        } finally {
            d = ret = null;
        }
    };
    LEAP.docedit3.getValue = function(j) {
        var l = null;
        try {
            j = LEAP._check(j, LEAP.docedit3.d);
            if (j == null) {
                return;
            }
            var m = j.getAttribute("_fid");
            if (m) {
                l = document.getElementById(m);
                var g = l.getAttribute("doceditinited");
                if (g != null && g == "1") {
                    var d = l.contentWindow.getValue();
                    if (d) {
                        var n = leapconfig.server.split("/");
                        var h = "/" + n[3] + "/";
                        d = d.replaceall(' data="' + h, ' data="@serveruirl@').replaceall(' value="' + h, ' value="@serveruirl@').replaceall(' src="' + h, ' src="@serveruirl@').replaceall(' href="' + h, ' href="@serveruirl@');
                        d = d.replaceall(' data="../../../', ' data="@serveruirl@LEAP/').replaceall(' value="../../../', ' value="@serveruirl@LEAP/').replaceall(' src="../../../', ' src="@serveruirl@LEAP/').replaceall(' href="../../../', ' href="@serveruirl@LEAP/');
                    }
                    return d;
                }
            }
            return null;
        } finally {
            l = j = null;
        }
    };
    LEAP.docedit3.s1 = function(h, g) {
        var d = LEAP.getElement("div[ctid=" + h + "]");
        LEAP.docedit3.setValue(d, g);
        d = null;
    };
    LEAP.docedit3.setValue = function(h, l) {
        var j = null;
        try {
            if (!l) {
                l = "";
            }
            h = LEAP._check(h, LEAP.docedit3.d);
            if (h == null) {
                return;
            }
            j = document.getElementById(h.getAttribute("_fid"));
            if (j != null) {
                var d = j.getAttribute("doceditinited");
                if (d != null && d == "1") {
                    try {
                        var m = leapconfig.server.split("/");
                        var g = "/" + m[3] + "/";
                        l = l.replaceall("@serveruirl@", g);
                        j.contentWindow.setValue(l);
                    } finally {
                        return;
                    }
                }
            }
            LEAP.asyn(LEAP.docedit3.s1, null, 100, LEAP.ctid(h), l);
        } finally {
            j = h = null;
        }
    };
    LEAP.dynaedit = {};
    LEAP.dynaedit.d = "dynaedit";
    LEAP.dynaedit.e = "dynaedit_template";
    LEAP.dynaedit.f = "dynaedit_edit";
    LEAP.dynaedit.f = "dynaedit_del";
    LEAP.dynaedit.f = "dynaedit_add";
    LEAP.dynaedit.g = "_isnew";
    LEAP.dynaedit.s = "_sn";
    LEAP.dynaedit.init = function() {
        if (document != null && document.body != null) {
            LEAP.dynaedit._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.dynaedit._init);
        }
        ElementEventManager.addManagedEventType(LEAP.dynaedit.d, "rowOperationClick");
    };
    LEAP.dynaedit._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.dynaedit.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.dynaedit._init);
    };
    LEAP.dynaedit.uiProcess = function(g) {
        if (g == null) {
            return;
        }
        var n = g.e.srcElement;
        if (n == null) {
            return;
        }
        var m = n.getAttribute(commfields.ctf);
        if (m == "dynaedit_tpo") {
            var h = LEAP._match(n, LEAP.dynaedit.d);
            if (h) {
                var j = n.getAttribute("tpof");
                if (!String.isEmpty(j)) {
                    if (j == "del") {
                        LEAP.dynaedit.removeRow(h, null, n);
                    } else {
                        if (j == "add") {
                            LEAP.dynaedit.addRow(h);
                        } else {
                            var l = LEAP._getRowData(n, h);
                            var d = l.isNew;
                            l = l.data;
                            if (d == null || d == 1) {
                                d = true;
                            } else {
                                d = false;
                            }
                            ElementEventManager.handleEvent(h, "rowOperationClick", {
                                flag: j,
                                data: l,
                                isNew: d
                            });
                        }
                    }
                }
                h = null;
            }
        }
        n = g = null;
    };
    LEAP.dynaedit.setValue = function(g, h) {
        var g = LEAP._check(g, LEAP.dynaedit.d);
        if (g == null) {
            return;
        }
        if (h == null) {
            LEAP.dynaedit.clear(g);
        } else {
            LEAP.dynaedit.clear(g);
            var l = LEAP.convertResult(h);
            var j = l.length;
            if (j > 0) {
                LEAP.dynaedit.setRowValue(LEAP.getElements("[ctf=" + LEAP.dynaedit.e + "]", g), l[0], false);
            }
            for (var d = 1; d < j; d++) {
                LEAP.dynaedit.addRow(g, l[d], false);
            }
        }
        g = null;
    };
    LEAP.dynaedit.getValue = function(r) {
        var r = LEAP._check(r, LEAP.dynaedit.d);
        if (r == null) {
            return;
        }
        var u = {
            change: [],
            create: [],
            del: r._dels
        };
        var d = LEAP.dynaedit._getValue(LEAP.getElements("[ctf=" + LEAP.dynaedit.e + "]", r));
        if (d) {
            if (d.change) {
                u.change.add(d.data);
            } else {
                if (d.data) {
                    u.create.add(d.data);
                }
            }
        }
        var m = LEAP.getElements("[_sn]", r);
        if (m) {
            var h = null;
            var o = [];
            var v = 0;
            var j = m.length;
            for (var q = 0; q < j; q++) {
                var w = m[q];
                var g = w.getAttribute(LEAP.dynaedit.s);
                var n = false;
                if (h != g) {
                    h = g;
                    n = true;
                    v++;
                }
                if ((n && v > 1) || q == j - 1) {
                    if (q == j - 1) {
                        o.add(w);
                    }
                    var p = LEAP.dynaedit._getValue(o);
                    if (p) {
                        if (p.change) {
                            u.change.add(p.data);
                        } else {
                            if (p.data) {
                                u.create.add(p.data);
                            }
                        }
                    }
                    o = [];
                }
                o.add(w);
                w = null;
            }
        }
        if (u.create.length > 0 || u.change.length > 0 || (u.del != null && u.del.length > 0)) {
            if (u.create.length == 0) {
                delete(u.craete);
            }
            if (u.change.length == 0) {
                delete(u.change);
            }
            return u;
        } else {
            return null;
        }
    };
    LEAP.dynaedit._getValue = function(y) {
        var h = y.length;
        var n = null;
        var u = null;
        var d = 1;
        var q = 0;
        var m = [];
        for (var o = 0; o < h; o++) {
            var x = y[o];
            if (o == 0) {
                d = x.getAttribute(LEAP.dynaedit.g);
                if (String.isEmpty(d)) {
                    d = 1;
                }
                n = x.data;
            }
            var p = LEAP.getElements("[md]", x);
            if (p) {
                var v = p.length;
                for (var j = 0; j < v; j++) {
                    m.add(p[j]);
                }
                p = null;
            }
        }
        var g = LEAP.getData(n, null, null, null, null, m, false);
        if (g) {
            if (d == 0) {
                if (!Object.isEmpty(g.change)) {
                    var u = {};
                    for (var w in g.change) {
                        u[w] = g.change[w].value;
                    }
                    if (n && n.id) {
                        u.id = n.id;
                    }
                    var r = {
                        change: true,
                        data: u
                    };
                    return r;
                }
            } else {
                if (!Object.isEmpty(g.data)) {
                    var r = {
                        change: false,
                        data: g.data
                    };
                    return r;
                }
            }
        }
    };
    LEAP.dynaedit.setRowValue = function(u, j, d) {
        if (d == null || d == true) {
            d = 1;
        } else {
            d = 0;
        }
        var g = u.length;
        for (var m = 0; m < g; m++) {
            var r = u[m];
            r.setAttribute(LEAP.dynaedit.g, d);
            r.removeAttribute("data");
            if (m == 0) {
                r.data = j;
            }
            var n = LEAP.getElements("[md]", r);
            if (n) {
                var p = n.length;
                for (var h = 0; h < p; h++) {
                    if (j != null) {
                        var o = n[h].getAttribute(commfields.md);
                        var q = j[o];
                        LEAP.setValue(n[h], q);
                    } else {
                        LEAP.setValue(n[h]);
                    }
                }
                n = null;
            }
        }
        u = null;
    };
    LEAP.dynaedit.addRow = function(n, m, g) {
        var n = LEAP._check(n, LEAP.dynaedit.d);
        if (n == null) {
            return;
        }
        var r = LEAP.getElements("[ctf=" + LEAP.dynaedit.e + "]", n);
        if (r) {
            var h = UUID.cID();
            var j = r.length;
            var p = [];
            for (var o = 0; o < j; o++) {
                var q = r[o];
                var d = document.createElement("div");
                if (q.tagName == "TR") {
                    d.innerHTML = "<table><tbody>" + q.outerHTML + "</tbody></table>";
                } else {
                    d.innerHTML = q.outerHTML;
                }
                var u = d.getElementsByTagName(q.tagName)[0];
                d = null;
                u.setAttribute(LEAP.dynaedit.s, h);
                u.removeAttribute(commfields.ctf);
                u.setAttribute("_seq", o + 1);
                q.parentElement.appendChild(u);
                p.add(u);
                d = u = q = null;
            }
            LEAP.dynaedit.setRowValue(p, m, g);
            p = r = null;
        }
        n = m = null;
    };
    LEAP._getRowData = function(d, j) {
        var q = d.parentNode;
        d = null;
        var g = -1;
        var h = null;
        for (var l = 0; l < 99; l++) {
            g++;
            if (q == null) {
                break;
            }
            if (q.tagName == "BODY") {
                break;
            }
            var o = q.getAttribute(commfields.ctf);
            if (o != null && o == LEAP.dynaedit.e) {
                if (j) {
                    var p = LEAP.getElement("[ctf=dynaedit_template]:first", j);
                    j = null;
                    var m = {
                        data: p.data,
                        isNew: p.getAttribute(LEAP.dynaedit.g)
                    };
                    return m;
                }
                break;
            }
            var n = q.getAttribute(LEAP.dynaedit.s);
            if (!String.isEmpty(n)) {
                if (j) {
                    var p = LEAP.getElement("[_sn=" + n + "]:first", j);

                    j = null;
                    var m = {
                        data: p.data,
                        isNew: p.getAttribute(LEAP.dynaedit.g)
                    };
                    return m;
                }
                h = n;
                break;
            }
            q = q.parentNode;
            if (q == null) {
                return;
            }
        }
    };
    LEAP.dynaedit.removeRow = function(o, v, d) {
        var o = LEAP._check(o, LEAP.dynaedit.d);
        if (o == null) {
            return;
        }
        if (d == null) {
            var m = LEAP.getElements("[_sn]", o);
            if (m) {
                var r = -1;
                var j = null;
                var l = false;
                for (var p = 0; p < m.length; p++) {
                    var w = m[p];
                    var h = w.getAttribute(LEAP.dynaedit.s);
                    var n = false;
                    if (j != h) {
                        n = true;
                        j = h;
                        r++;
                    }
                    if (j == h && v == r) {
                        if (n && w.getAttribute(LEAP.dynaedit.g) == 0 && w.data != null) {
                            if (o._dels == null) {
                                o._dels = [];
                            }
                            o._dels.add(w.data);
                        }
                        LEAP.removeElement(w, false);
                        l = true;
                        continue;
                    }
                    w = null;
                    if (l) {
                        break;
                    }
                }
            }
        } else {
            var x = d.parentNode;
            var g = -1;
            for (var p = 0; p < 99; p++) {
                g++;
                if (x == null) {
                    break;
                }
                if (x.tagName == "BODY") {
                    break;
                }
                var u = x.getAttribute(commfields.ctf);
                if (u != null && u == LEAP.dynaedit.e) {
                    break;
                }
                var q = x.getAttribute(LEAP.dynaedit.s);
                if (!String.isEmpty(q)) {
                    LEAP.removeElement(LEAP.getElements("[_sn=" + q + "]", o), true);
                    break;
                }
                x = x.parentNode;
                if (x == null) {
                    return;
                }
            }
        }
        d = o = null;
    };
    LEAP.dynaedit.clear = function(h) {
        var h = LEAP._check(h, LEAP.dynaedit.d);
        if (h == null) {
            return;
        }
        h._dels = null;
        var d = LEAP.getElements("[_sn]", h);
        if (d) {
            LEAP.removeElement(d, true);
            d = null;
        }
        var g = LEAP.getElements("[ctf=" + LEAP.dynaedit.e + "]", h);
        if (g) {
            LEAP.dynaedit.setRowValue(g, null, true);
        }
        h = null;
    };
    LEAP.dynaedit.init();
    LEAP.echarts = {};
    LEAP.echarts.d = "echarts";
    LEAP.echarts.loads = [];
    LEAP.echarts.isLoading = false;
    LEAP.echarts.isLoaded = false;
    LEAP.echarts.lc = new hashtable();
    LEAP.echarts.getname = function(h) {
        var d = h + "";
        while (d.length < 18) {
            d += "0";
        }
        var g = LEAP.echarts.lc.getvalue(d);
        if (g) {
            if (LEAP.getrealarea(d).length == 6) {
                if (g.name.endsWith("新区")) {
                    return g.name.substring(0, g.name.length - 2);
                }
                if (g.name.endsWith("区")) {
                    return g.name.substring(0, g.name.length - 1);
                }
            }
            return g.name;
        }
        return h;
    };
    LEAP.echarts._getMoveOption = function(j, J, M) {
        if (M && (M.areaid || M.map)) {
            var B = M.map;
            if (B == null || B == "china") {
                B = "china";
            } else {
                B += "";
                while (B.length < 18) {
                    B += "0";
                }
                if (B == "440300000000000000" && echarts.util.mapData.params.params[B] == null) {
                    echarts.util.mapData.params.params[B] = {
                        getGeoJson: function(l) {
                            l((JSON.parse(new base64_2().decode(leapclient.load("LEAP/Resource/data/4403.txt")))));
                        }
                    };
                }
            }
            var D = false;
            if (M.selected) {
                D = M.selected;
            }
            if (J == null) {
                var w = {
                    selectedMode: D ? "single" : null,
                    backgroundColor: M.bgcolor ? M.bgcolor : "#1b1b1b",
                    legend: {
                        data: []
                    },
                    series: [{
                        selectedMode: D ? "single" : null,
                        type: "map",
                        mapType: B,
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    color: M.labelcolor ? M.labelcolor : "#fff",
                                    textStyle: {
                                        color: M.textcolor ? M.textcolor : "#ccc"
                                    },
                                    formatter: function(l) {
                                        return LEAP.echarts.getname(l);
                                    }
                                },
                                borderColor: M.bordercolor ? M.bordercolor : "rgba(100,149,237,1)",
                                borderWidth: 1,
                                areaStyle: {
                                    color: M.areacolor ? M.areacolor : "#1b1b1b"
                                }
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    textStyle: {
                                        color: M.seltextcolor ? M.seltextcolor : "white"
                                    },
                                    formatter: function(l) {
                                        return LEAP.echarts.getname(l);
                                    }
                                }
                            }
                        },
                        data: []
                    }]
                };
                if (M.chartselected) {
                    M.chartselected += "";
                    while (M.chartselected.length < 18) {
                        M.chartselected += "0";
                    }
                    w.series[0].data.add({
                        name: M.chartselected,
                        selected: true
                    });
                }
                return w;
            }
            var N = false;
            if (M.type && M.type == "color") {
                N = true;
            }
            var n = LEAP.echarts.getAttr("showtitle", "1", j, M);
            var R = LEAP.echarts.getAttr("title", "", j, M);
            var p = LEAP.echarts.getAttr("subtitle", "", j, M);
            var O = null;
            var P = 0;
            var I = J.length;
            for (var K = 0; K < I; K++) {
                var m = J[K];
                var u = m.areaid;
                if (u && m.value != null) {
                    u += "";
                    while (u.length < 18) {
                        u += "0";
                    }
                    var x = LEAP.echarts.lc.getvalue(u);
                    if (x) {
                        m.value = Number(m.value);
                        if (O == null) {
                            O = m.value;
                        }
                        if (m.value > P) {
                            P = m.value;
                        }
                        if (m.value < O) {
                            O = m.value;
                        }
                    }
                }
            }
            P = parseInt(P + "");
            O = parseInt(O + "");
            P += 5;
            O -= 5;
            if (O < 0) {
                O = 0;
            }
            var L = {
                selectedMode: D ? "single" : null,
                backgroundColor: M.bgcolor ? M.bgcolor : "#1b1b1b",
                color: ["gold", "aqua", "lime"],
                title: {
                    text: R,
                    subtext: p,
                    x: "center",
                    textStyle: {
                        fontSize: M.tileFontSize ? M.tileFontSize : null,
                        color: "#fff"
                    }
                },
                tooltip: {
                    trigger: "item",
                    formatter: function(l) {
                        var S = l[1].split(" ");
                        var T = Number(l[3]).toFixed(0);
                        if (S.length > 1) {
                            return LEAP.echarts.getname(S[0]) + " 到 " + LEAP.echarts.getname(S[2]) + "<br>    " + LEAP.formatnumber(T);
                        } else {
                            if (isNaN(T)) {
                                T = Number(l[2]).toFixed(0);
                            }
                            if (!isNaN(T)) {
                                return LEAP.echarts.getname(l[1]) + "<br>    " + LEAP.formatnumber(T);
                            } else {
                                return LEAP.echarts.getname(l[1]);
                            }
                        }
                    }
                },
                dataRange: {
                    min: O,
                    max: P,
                    calculable: true,
                    color: M.rangcolors ? M.rangcolors : ["#ff3333", "orange", "yellow", "lime", "aqua"],
                    textStyle: {
                        color: "#fff"
                    },
                    formatter: function(S, l) {}
                }
            };
            if (n == "0") {
                delete(L.title);
            }
            if (N) {
                if (M.rangcolors == null) {
                    L.dataRange.color = [];
                }
                var v = function(l) {
                    this.data = J;
                    return LEAP.echarts.getname(l);
                };
                var o = [{
                    type: "map",
                    selectedMode: D ? "single" : null,
                    mapType: B,
                    itemStyle: {
                        normal: {
                            label: {
                                show: true,
                                formatter: v,
                                textStyle: {
                                    fontSize: M.textFontSize ? M.textFontSize : null,
                                    color: M.textcolor ? M.textcolor : "#fff"
                                }
                            },
                            areaStyle: {
                                color: M.areacolor ? M.areacolor : "grey"
                            },
                            borderColor: M.bordercolor ? M.bordercolor : "rgba(100,149,237,1)",
                            borderWidth: 0.5
                        },
                        emphasis: {
                            label: {
                                show: true,
                                textStyle: {
                                    fontSize: M.selFontSize ? M.selFontSize : null,
                                    color: M.seltextcolor ? M.seltextcolor : "red"
                                },
                                formatter: v
                            }
                        }
                    },
                    data: []
                }];
                L.series = o;
                var I = J.length;
                for (var K = 0; K < I; K++) {
                    var m = J[K];
                    var u = m.areaid;
                    if (u && m.value != null) {
                        u += "";
                        while (u.length < 18) {
                            u += "0";
                        }
                        var x = LEAP.echarts.lc.getvalue(u);
                        if (x) {
                            m.value = Number(m.value);
                            o[0].data.add({
                                name: u,
                                value: m.value,
                                selected: m.chartselected ? m.chartselected : null
                            });
                        }
                    }
                }
                return L;
            }
            if (!M.type) {
                M.type = "in";
            }
            var G = false;
            if (M.type == "in") {
                G = true;
            }
            var g = {};
            var r = [];
            var y = [];
            var d = [];
            var Q = M.areaid + "";
            while (Q.length < 18) {

                Q += "0";
            }
            var h = LEAP.echarts.lc.getvalue(Q);
            if (!h) {
                return null;
            }
            g[h.areaid] = [h.x, h.y];
            var I = J.length;
            var z = 0;
            for (var K = 0; K < I; K++) {
                var m = J[K];
                var u = m.areaid;
                if (u && m.value != null) {
                    u += "";
                    while (u.length < 18) {
                        u += "0";
                    }
                    var x = LEAP.echarts.lc.getvalue(u);
                    if (x) {
                        m.value = Number(m.value);
                        g[x.areaid] = [x.x, x.y];
                        var q = z > 10 ? r : y;
                        q.add([{
                            name: G ? u : Q
                        }, {
                            name: G ? Q : u,
                            value: m.value
                        }]);
                        if (z <= 10) {
                            d.add({
                                name: u,
                                value: m.value
                            });
                        }
                    }
                }
                z++;
            }
            var A = [];
            for (var K = 0; K < y.length; K++) {
                var H = y[K][1].value;
                var F = 1;
                if ((P - O) != 0 && m.value != 0) {
                    F = 1 + 4 * ((H - O) / (P - O));
                }
                var C = {
                    type: "map",
                    mapType: B,
                    data: [],
                    markLine: {
                        smooth: true,
                        effect: {
                            show: true,
                            scaleSize: 1,
                            period: 120,
                            color: "#fff",
                            shadowBlur: 5
                        },
                        itemStyle: {
                            normal: {
                                borderWidth: F,
                                lineStyle: {
                                    type: "solid",
                                    shadowBlur: 10
                                }
                            }
                        },
                        data: [y[K]]
                    }
                };
                A.add(C);
            }
            if (y.length > 1) {
                y = [y[0]];
            }
            var I = d.length;
            for (var K = 0; K < I; K++) {
                var m = d[K];
                if ((P - O) != 0 && m.value != 0) {
                    m.symbolSize = 20 + 40 * (m.value - O) / (P - O);
                } else {
                    m.symbolSize = 20;
                }
            }
            var w = {
                series: [{
                    type: "map",
                    selectedMode: D ? "single" : null,
                    roam: true,
                    hoverable: false,
                    mapType: B,
                    tooltip: {
                        show: true
                    },
                    itemStyle: {
                        normal: {
                            label: {
                                show: true,
                                color: M.labelcolor ? M.labelcolor : "#fff",
                                textStyle: {
                                    fontSize: M.textFontSize ? M.textFontSize : null,
                                    color: M.textcolor ? M.textcolor : "#ccc"
                                },
                                formatter: function(l) {
                                    return LEAP.echarts.getname(l);
                                }
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    textStyle: {
                                        fontSize: M.selFontSize ? M.selFontSize : null,
                                        color: M.seltextcolor ? M.seltextcolor : "white"
                                    },
                                    formatter: function(l) {
                                        return LEAP.echarts.getname(l);
                                    }
                                }
                            },
                            borderColor: M.bordercolor ? M.bordercolor : "rgba(100,149,237,1)",
                            borderWidth: 0.5,
                            areaStyle: {
                                color: M.areacolor ? M.areacolor : "#1b1b1b"
                            }
                        }
                    },
                    data: [],
                    markLine: {
                        smooth: true,
                        symbol: ["none", "circle"],
                        symbolSize: 1,
                        itemStyle: {
                            normal: {
                                color: "#fff",
                                borderWidth: 2,
                                borderColor: "rgba(30,144,255,0.5)"
                            }
                        },
                        data: r
                    },
                    geoCoord: g
                }, {
                    type: "map",
                    mapType: B,
                    data: [],
                    markLine: {
                        smooth: true,
                        effect: {
                            show: true,
                            scaleSize: 1,
                            period: 120,
                            color: "#fff",
                            shadowBlur: 5
                        },
                        itemStyle: {
                            normal: {
                                borderWidth: 1,
                                lineStyle: {
                                    type: "solid",
                                    shadowBlur: 10
                                }
                            }
                        },
                        data: y
                    },
                    markPoint: {
                        symbol: "emptyCircle",
                        symbolSize: 10,
                        effect: {
                            show: true,
                            shadowBlur: 10,
                            scaleSize: 1
                        },
                        itemStyle: {
                            normal: {
                                label: {
                                    show: false,
                                    formatter: function(l) {}
                                }
                            }
                        },
                        data: d
                    }
                }]
            };
            LEAP.mergeObject(w, L);
            for (var K = 0; K < A.length; K++) {
                w.series.add(A[K]);
            }
            return w;
        }
        return null;
    };
    LEAP.echarts.getAttr = function(d, j, h, l) {
        if (j == undefined) {
            j = null;
        }
        var g = null;
        if (l != null && l.chart && l.chart.hasOwnProperty(d)) {
            g = l.chart[d];
        }
        if (g == null) {
            g = String.getString(h.getAttribute(d));
        }
        if (g == null) {
            g = j;
        }
        return g;
    };
    LEAP.echarts.getOption = function(x, K, v) {
        x = LEAP._check(x, LEAP.echarts.d);
        if (x == null) {
            return;
        }
        try {
            var d = LEAP.echarts.getAttr("type", null, x, v);
            var U = LEAP.ctid(x);
            if (K == null && d != "map") {
                x.innerHTML = "";
                return;
            }
            var Z = LEAP.echarts.getAttr("type", "bar", x, v);
            if (Z == "map") {
                var N = LEAP.echarts._getMoveOption(x, K, v);
                if (LEAPBrowser.isAndroid) {
                    N.animation = false;
                }
                return N;
            }
            var P = LEAP.echarts.getAttr("pietype", "radius", x, v);
            if (P == "pie") {
                P = null;
            }
            var u = LEAP.echarts.getAttr("timeline", "0", x, v);
            var M = LEAP.echarts.getAttr("title", "", x, v);
            var G = LEAP.echarts.getAttr("subtitle", "", x, v);
            if (u == "1") {
                u = true;
            } else {
                u = false;
            }
            var C = LEAP.echarts.getAttr("showtitle", "1", x, v);
            var W = LEAP.echarts.getAttr("showlegend", "1", x, v);
            var n = LEAP.echarts.getAttr("showtoolbox", "1", x, v);
            var g = LEAP.echarts.getAttr("showlabe", "1", x, v);
            if (g == "1") {
                g = true;
            } else {
                g = false;
            }
            var y = LEAP.echarts.getAttr("showminmax", "0", x, v);
            if (y == "1") {
                y = true;
            } else {
                y = false;
            }
            var Q = LEAP.echarts.getAttr("showaverage", "0", x, v);
            if (Q == "1") {
                Q = true;
            } else {
                Q = false;
            }
            var z = LEAP.echarts.getAttr("showstack", "0", x, v);
            if (z == "1") {
                z = true;
            } else {
                z = false;
            }
            var L = LEAP.echarts.getAttr("showarea", "0", x, v);
            if (L == "1") {
                L = true;
            } else {
                L = false;
            }
            var H = LEAP.echarts.getAttr("namefiled", null, x, v);
            var B = LEAP.echarts.getAttr("axis", "x", x, v);
            var o = {
                tooltip: {
                    trigger: "axis"
                },
                toolbox: {
                    show: true,
                    feature: {
                        mark: {
                            show: false
                        },
                        dataView: {
                            readOnly: false
                        },
                        magicType: {
                            show: true,
                            type: ["line", "bar"]
                        },
                        restore: {
                            show: true
                        },
                        saveAsImage: {
                            show: true
                        }
                    }
                },
                calculable: true
            };
            if (u) {
                o.dataZoom = {
                    show: u,
                    realtime: true,
                    start: 60,
                    end: 100
                };
            }
            if (z) {
                o.toolbox.feature.magicType.type.push("stack");
                o.toolbox.feature.magicType.type.push("tiled");
            }
            if (!String.isEmpty(M)) {
                o.title = {
                    text: M,
                    x: "center"
                };
                if (!String.isEmpty(G)) {
                    o.title.subtext = G;
                }
            }
            if (Z == "pie") {
                o.legend = {
                    orient: "vertical",
                    x: "left",
                    data: []
                };
                if (o.title) {
                    o.title.x = "center";
                }
                delete(o.toolbox.feature.magicType);
                o.tooltip.trigger = "item";
                o.tooltip.formatter = "{a} <br/>{b} : {c} ({d}%)";
            } else {
                o.legend = {
                    x: "center",
                    y: "bottom",
                    data: []
                };
            }
            var j = {
                type: "category",
                boundaryGap: true,
                power: 1,
                data: []
            };
            var F = -1;
            var D = -1;
            var I = [];
            if (Z != "pie") {
                if (B == "x") {
                    o.xAxis = [j];
                    o.yAxis = [{
                        power: 1,
                        type: "value"
                    }];
                } else {
                    o.yAxis = [j];
                    o.xAxis = [{
                        power: 1,
                        type: "value"
                    }];
                }
            }
            var h = [];
            var J = null;
            var m = null;
            if (K.metaData) {
                m = J = K.metaData;
                for (var T = 0; T < J.length; T++) {
                    J[T] = J[T].name;
                }
            } else {
                J = [];
                for (var A in K[0]) {
                    J.push(A);
                }
            }
            if (K.result) {
                K = K.result;
            }
            var q = K[0];
            var Y = -1;
            for (var T = 0; T < J.length; T++) {
                var A = J[T];
                Y++;
                if (String.isEmpty(H)) {
                    H = A;
                }
                if (H && H == A && D == -1) {
                    D = Y;
                    h.push(Y);
                }
                if (F == -1 && A == "id") {
                    F = Y;
                    h.push(Y);
                }
                if (A == "beanname" || A == "javaClass" || A == "charttype" || A.indexOf("chart") == 0) {
                    h.push(Y);
                }
            }
            Y = -1;
            for (var S = 0; S < J.length; S++) {
                var A = J[S];
                if (!h.contains(S)) {
                    I.push(A);
                    var w = A;
                    if (m != null) {
                        if (!String.isEmpty(m[S].cnName)) {
                            w = m[S].cnName;
                        }
                    }
                    j.data.push(w);
                    if (Z == "pie") {
                        o.legend.data.add(w);
                    }
                }
            }
            o.series = [];
            var R = K.length;
            for (var T = 0; T < R; T++) {
                var q = K[T];
                if (Z != "pie") {
                    o.legend.data.add(q[H]);
                }
                var V = Z;
                if (!String.isEmpty(q.charttype)) {
                    V = q.charttype;
                }
                var X = null;
                if (Z == "pie") {
                    var O = q.chartradius;
                    if (!O) {
                        O = "65%";
                    }
                    var r = q.charttop;
                    var p = q.chartleft;
                    if (!r) {
                        r = "60%";
                    }
                    if (!p) {
                        p = "50%";
                    }
                    X = {
                        name: q[H],
                        type: Z,
                        radius: ["10%", O],
                        center: [p, r],
                        roseType: P,
                        itemStyle: {
                            normal: {
                                label: {
                                    show: g
                                },
                                labelLine: {
                                    show: g
                                }
                            },
                            emphasis: {
                                label: {
                                    show: true
                                },
                                labelLine: {
                                    show: false
                                }
                            }
                        },
                        data: []
                    };
                } else {
                    X = {
                        name: q[H],
                        type: V,
                        data: [],
                        def: q
                    };
                    if (z) {
                        if (q.chartstack) {
                            X.stack = q.chartstack;
                        } else {
                            X.stack = "总量";
                        }
                    }
                    if (Q) {
                        X.markLine = {
                            data: [{
                                type: "average",
                                name: "平均值"
                            }]
                        };
                    }
                    if (y) {
                        X.markPoint = {
                            data: [{
                                type: "max",
                                name: "最大值"
                            }, {
                                type: "min",
                                name: "最小值"
                            }]
                        };
                    }
                    if (L) {
                        X.itemStyle = {
                            normal: {
                                areaStyle: {
                                    type: "default"
                                }
                            }
                        };
                    }
                }
                o.series.push(X);
                for (var S = 0; S < I.length; S++) {
                    if (Z == "pie") {
                        X.data.push({
                            value: Number(q[I[S]]),
                            name: I[S]
                        });
                    } else {
                        X.data.push(Number(q[I[S]]));
                    }
                }
            }
            if (W == "0") {
                delete(o.legend);
            }
            if (C == "0") {
                delete(o.title);
            }
            if (n == "0") {
                delete(o.toolbox);
            }
            if (LEAPBrowser.isAndroid) {
                o.animation = false;
            }
            return o;
        } finally {
            x = null;
        }
    };
    LEAP.echarts.clear = function(h) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h);
        }
        if (h == null) {
            return;
        }
        try {
            var j = LEAP.ctid(h);
            var d = LEAP.echarts.loads.length;
            var m = null;
            for (var g = d - 1; g > -1; g--) {
                if (LEAP.echarts.loads[g].ctid == j) {
                    m = LEAP.echarts.loads[g].obj;
                    m.clear();
                    break;
                }
            }
        } finally {
            h = null;
        }
    };
    LEAP.echarts.checkOption = function(h) {
        if (h && typeof(h) == "object") {
            for (var g in h) {
                var d = h[g];
                if (d == null || (typeof(d) == "string" && d == "")) {
                    delete h[g];
                } else {
                    if (d != null && typeof(d) == "object") {
                        LEAP.echarts.checkOption(d);
                    }
                }
            }
        }
    };
    LEAP.echarts.setValue = function(n, o, y, v) {
        if (n == null) {
            return;
        }
        if (typeof(n) == "string") {
            n = LEAP.getElement(n);
        }
        if (!LEAP.echarts.isLoaded) {
            if (!LEAP.echarts.isLoading) {
                LEAP.echarts.isLoading = true;
                leapclient.loadjs("LEAP/Resource/HTML/echart/src/echarts-all.js");
                LEAP.echarts.isLoaded = true;
            } else {
                var q = LEAP.ctid(n);
                LEAP.asyn(LEAP.echarts.setValue, null, 1000, q, dataSset);
            }
        }
        n = LEAP._check(n, LEAP.echarts.d);
        if (n == null) {
            return;
        }
        try {
            var q = LEAP.ctid(n);
            var u = LEAP.echarts.getAttr("type", null, n, v);
            if (o == null && y == null && u != "map") {
                n.innerHTML = "";
                return;
            }
            var p = null;
            if (y) {
                p = y;
            } else {
                p = LEAP.echarts.getOption(n, o, v);
            }
            if (p == null) {
                return null;
            }
            LEAP.echarts.checkOption(p);
            var j = LEAP.echarts.loads.length;
            var w = null;
            for (var m = j - 1; m > -1; m--) {
                if (LEAP.echarts.loads[m].ctid == q) {
                    w = LEAP.echarts.loads[m].obj;
                    break;
                }
            }
            if (!w) {
                if (v && v.theme && v.theme == "echarts") {
                    w = echarts.init(n, {});
                } else {
                    w = echarts.init(n, LEAP.echarts.macaronstheme);
                }
                w.on("mapSelected", LEAP.echarts.onEvent);
                w.on("click", LEAP.echarts.onEvent);
            }
            var d = false;
            if (v) {
                d = v.refresh ? true : false;
            }
            w.setOption(p, d);
            var h = {
                obj: w,
                ctid: q,
                dispose: function() {
                    w.dipsose();
                }
            };
            LEAP.echarts.loads.add(h);
            var x = n.getAttribute("instance");
            if (x) {
                var g = LEAP.getLoadedModule(x);
                if (g) {
                    if (!g.disposeList) {
                        g.disposeList = [];
                    }
                    g.disposeList.add(w);
                }
            }
            try {
                return w;
            } finally {
                w = null;
            }
        } finally {
            n = o = null;
        }
    };
    LEAP.echarts.onEvent = function(d) {
        var g = null;
        var n = null;
        try {
            if (d) {
                n = d.event.srcElement;
            }
        } catch (m) {}
        try {
            if (n) {
                g = LEAP._match(n, LEAP.echarts.d);
            } else {
                if (d && d.__echartsId) {
                    g = LEAP.getElement("DIV[_echarts_instance_=" + d.__echartsId + "]");
                } else {
                    if (this.id) {
                        g = LEAP.getElement("DIV[_echarts_instance_=" + this.id + "]");
                    }
                }
            }
            if (g != null) {
                var l = {
                    element: g,
                    arg: d
                };
                if (d.type == "click") {
                    var j = LEAP.echarts.getAPI(g);
                    if (j) {
                        try {
                            var h = j.getOption();
                            l.value = d.value;
                            l.data = d.data;
                            l.name = h.series[d.seriesIndex].name;
                            if (h.yAxis && h.yAxis[0] && h.yAxis[0].data) {
                                l.y = h.yAxis[0].data[d.dataIndex];
                            }
                            if (h.xAxis && h.xAxis[0] && h.xAxis[0].data) {
                                l.x = h.xAxis[0].data[d.dataIndex];
                            }
                            if (!l.x && l.data.name) {
                                l.x = l.data.name;
                            }
                            if (!l.name && d.name) {
                                l.name = d.name;
                            }
                        } finally {
                            j = null;
                        }
                    }
                }
                ElementEventManager.handleEvent(g, d.type, l);
            }
            g = null;
        } finally {
            d = n = g = null;
        }
    };
    LEAP.echarts.getAPI = function(h) {
        if (h == null) {
            return;
        }
        var m = LEAP.ctid(h);
        var d = LEAP.echarts.loads.length;
        for (var g = d - 1; g > -1; g--) {
            try {
                if (LEAP.echarts.loads[g].ctid == m) {
                    return LEAP.echarts.loads[g].obj;
                }
            } catch (j) {}
        }
    };
    LEAP.echarts.macaronstheme = {
        color: ["#2ec7c9", "#b6a2de", "#5ab1ef", "#ffb980", "#d87a80", "#8d98b3", "#e5cf0d", "#97b552", "#95706d", "#dc69aa", "#07a2a4", "#9a7fd1", "#588dd5", "#f5994e", "#c05050", "#59678c", "#c9ab00", "#7eb00a", "#6f5553", "#c14089"],
        title: {
            itemGap: 8,
            textStyle: {
                fontWeight: "normal",
                color: "#008acd"
            }
        },
        legend: {
            itemGap: 8
        },
        dataRange: {
            itemWidth: 15,
            color: ["#2ec7c9", "#b6a2de"]
        },
        toolbox: {
            color: ["#1e90ff", "#1e90ff", "#1e90ff", "#1e90ff"],
            effectiveColor: "#ff4500",
            itemGap: 8
        },
        tooltip: {
            backgroundColor: "rgba(50,50,50,0.5)",
            axisPointer: {
                type: "line",
                lineStyle: {
                    color: "#008acd"
                },
                crossStyle: {
                    color: "#008acd"
                },
                shadowStyle: {
                    color: "rgba(200,200,200,0.2)"
                }
            }
        },
        dataZoom: {
            dataBackgroundColor: "#efefff",
            fillerColor: "rgba(182,162,222,0.2)",
            handleColor: "#008acd"
        },
        grid: {
            borderColor: "#eee"
        },
        categoryAxis: {
            axisLine: {
                lineStyle: {
                    color: "#008acd"
                }
            },
            splitLine: {
                lineStyle: {
                    color: ["#eee"]
                }
            }
        },
        valueAxis: {
            axisLine: {
                lineStyle: {
                    color: "#008acd"
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ["rgba(250,250,250,0.1)", "rgba(200,200,200,0.1)"]
                }
            },
            splitLine: {
                lineStyle: {
                    color: ["#eee"]
                }
            }
        },
        polar: {
            axisLine: {
                lineStyle: {
                    color: "#ddd"
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ["rgba(250,250,250,0.2)", "rgba(200,200,200,0.2)"]
                }
            },
            splitLine: {
                lineStyle: {
                    color: "#ddd"
                }
            }
        },
        timeline: {
            lineStyle: {
                color: "#008acd"
            },
            controlStyle: {
                normal: {
                    color: "#008acd"
                },
                emphasis: {
                    color: "#008acd"
                }
            },
            symbol: "emptyCircle",
            symbolSize: 3
        },
        bar: {
            itemStyle: {
                normal: {
                    borderRadius: 5
                },
                emphasis: {
                    borderRadius: 5
                }
            }
        },
        line: {
            smooth: true,
            symbol: "emptyCircle",
            symbolSize: 3
        },
        k: {
            itemStyle: {
                normal: {
                    color: "#d87a80",
                    color0: "#2ec7c9",
                    lineStyle: {
                        width: 1,
                        color: "#d87a80",
                        color0: "#2ec7c9"
                    }
                }
            }
        },
        scatter: {
            symbol: "circle",
            symbolSize: 4
        },
        radar: {
            symbol: "emptyCircle",
            symbolSize: 3
        },
        map: {
            itemStyle: {
                normal: {
                    borderColor: "#fff",
                    borderWidth: 1,
                    areaStyle: {
                        color: "#ccc"
                    },
                    label: {
                        show: false,
                        textStyle: {
                            color: "rgba(139,69,19,1)"
                        }
                    }
                },
                emphasis: {
                    borderColor: "rgba(0,0,0,0)",
                    borderWidth: 1,
                    areaStyle: {
                        color: "#f3d999"
                    },
                    label: {
                        show: false,
                        textStyle: {
                            color: "rgba(139,69,19,1)"
                        }
                    }
                }
            }
        },
        force: {
            itemStyle: {
                normal: {
                    linkStyle: {
                        strokeColor: "#1e90ff"
                    }
                }
            }
        },
        chord: {
            padding: 4,
            itemStyle: {
                normal: {
                    lineStyle: {
                        width: 1,
                        color: "rgba(128, 128, 128, 0.5)"
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: "rgba(128, 128, 128, 0.5)"
                        }
                    }
                },
                emphasis: {
                    lineStyle: {
                        width: 1,
                        color: "rgba(128, 128, 128, 0.5)"
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: "rgba(128, 128, 128, 0.5)"
                        }
                    }
                }
            }
        },
        gauge: {
            startAngle: 225,
            endAngle: -45,
            axisLine: {
                show: true,
                lineStyle: {
                    color: [
                        [0.2, "#2ec7c9"],
                        [0.8, "#5ab1ef"],
                        [1, "#d87a80"]
                    ],
                    width: 10
                }
            },
            axisTick: {
                splitNumber: 10,
                length: 15,
                lineStyle: {
                    color: "auto"
                }
            },
            axisLabel: {
                textStyle: {
                    color: "auto"
                }
            },
            splitLine: {
                length: 22,
                lineStyle: {
                    color: "auto"
                }
            },
            pointer: {
                width: 5,
                color: "auto"
            },
            title: {
                textStyle: {
                    color: "#333"
                }
            },
            detail: {
                textStyle: {
                    color: "auto"
                }
            }
        },
        textStyle: {
            fontFamily: "微软雅黑, Arial, Verdana, sans-serif"
        }
    };
    LEAP.echarts.uninit = function() {
        UIEventManager.removeEvent(window, "unload", LEAP.echarts.uninit);
        var d = LEAP.echarts.loads.length;
        for (var g = d - 1; g > -1; g--) {
            try {
                LEAP.echarts.loads[g].dispose();
            } catch (h) {}
        }
    };
    LEAP.echarts.init = function() {
        ElementEventManager.addManagedEventType(LEAP.echarts.d, "mapSelected");
        ElementEventManager.addManagedEventType(LEAP.echarts.d, "click");
        var g = ["上海市", 31, 121.487899, 31.249162, "贵州省", 52, 106.734996, 26.902826, "甘肃省", 62, 102.457625, 38.103267, "山西省", 14, 112.515496, 37.866566, "江苏省", 32, 119.368489, 33.013797, "天津市", 12, 117.210813, 39.14393, "陕西省", 61, 109.503789, 35.860026, "江西", 36, 115.676082, 27.757258, "海南省", 46, 109.733755, 19.180501, "吉林省", 22, 126.262876, 43.678846, "河南省", 41, 113.486804, 34.157184, "北京市", 11, 116.403874, 39.914889, "黑龙江省", 23, 128.047414, 47.356592, "香港", 81, 114.186124, 22.293586, "四川省", 51, 102.89916, 30.367481, "湖北省", 42, 112.410562, 31.209316, "西藏自治区", 54, 89.137982, 31.367315, "辽宁省", 21, 122.753592, 41.6216, "澳门", 82, 113.557519, 22.204118, "新疆维吾尔自治区", 65, 85.614899, 42.127001, "宁夏回族自治区", 64, 106.155481, 37.321323, "内蒙古自治区", 15, 114.415868, 43.468238, "台湾省", 71, 104.114129, 37.550339, "青海省", 63, 96.202544, 35.499761, "山东省", 37, 118.527663, 36.09929, "云南省", 53, 101.592952, 24.864213, "浙江省", 33, 119.957202, 29.159494, "湖南省", 43, 111.720664, 27.695864, "安徽省", 34, 117.216005, 31.859252, "河北省", 13, 115.661434, 38.61384, "重庆市", 50, 106.530635, 29.544606, "福建省", 35, 117.984943, 26.050118, "广东省", 44, 113.394818, 23.408004, "广西壮族自治区", 45, 108.924274, 23.552255, "坪山新区", 440317, 114.36973, 22.700041, "宝安区", 440306, 113.823116, 22.636788, "龙岗区", 440307, 114.217887, 22.697641, "盐田区", 440308, 114.278483, 22.606981, "福田区", 440304, 114.055321, 22.55222, "光明新区", 440316, 113.94215, 22.770739, "龙华新区", 440326, 114.042818, 22.692377, "罗湖区", 440303, 114.156359, 22.58162, "大鹏新区", 440327, 114.516603, 22.566368, "南山区", 440305, 113.887076, 22.468417, "深圳市", 4403, 114.025974, 22.546054];
        for (var d = 0; d < g.length; d += 4) {
            var h = g[d + 1] + "";
            while (h.length < 18) {
                h += "0";
            }
            LEAP.echarts.lc.add(h, {
                areaid: h,
                name: g[d],
                x: g[d + 2],
                y: g[d + 3]
            });
        }
        UIEventManager.addEvent(window, "unload", LEAP.echarts.uninit);
    }();
    LEAP.flashchart = {};
    LEAP.flashchart.d = "chart";
    LEAP.flashchart.defaultChartType = "Column3D";
    LEAP.flashchart.defaultColors = ["FF9940", "7FBF00", "00C1E7", "FF66FF", "FF8A73", "1FBF6F", "4CA6FF", "FFC61A", "B366FF", "E52E2E", "37A600", "4C6AFF", "CCBB02", "884CFF", "FFEE33"];
    LEAP.flashchart.w1chart = ["Thermometer", "Cylinder", "HLinearGauge", "HLinearGauge2", "AngularGauge", "AngularGauge2", "AngularGauge4"];
    LEAP.flashchart.w2chart = ["DragNode", "Funnel", "AngularGauge3", "FCF_Column3D", "Column2D", "Column3D", "Pie2D", "Pie3D", "Line", "Area2D", "Bar2D", "Doughnut2D", "Doughnut3D", "Pyramid", "Spline", "SplineArea", "SSGrid", "StackedArea2D", "StackedBar3D"];
    LEAP.flashchart.w3chart = ["MSColumn2D", "MSColumn3D", "MSArea", "MSBar2D", "MSBar3D", "MSColumn3DLineDY", "MSColumnLine3D", "MSCombi2D", "MSCombi3D", "MSCombiDY2D", "MSLine", "MSSpline", "MSSplineArea", "StackedBar3D"];
    ElementEventManager.addManagedEventType(LEAP.flashchart.d, "click");
    LEAP.flashchart.getfontdef = function(h) {
        if (!String.isEmpty(h)) {
            var g = h.split(" ");
            var d = {};
            if (g.length > 0) {
                d.font = g[0];
            }
            if (g.length > 1) {
                d.size = g[1];
            }
            if (g.length > 2) {
                d.color = g[2];
            }
            return d;
        }
    };
    LEAP.flashchart.onClick = function(l, m, d, j, h) {
        if (m) {
            m = unescape(decodeURIComponent(base64decode(m)));
        }
        if (d) {
            d = unescape(decodeURIComponent(base64decode(d)));
        }
        if (j) {
            j = unescape(decodeURIComponent(base64decode(j)));
        }
        if (h) {
            h = unescape(decodeURIComponent(base64decode(h)));
        }
        var g = LEAP.getElement("div[ctid=" + l + "]:first");
        if (g != null) {
            ElementEventManager.handleEvent(g, "click", {
                id: m,
                name: d,
                value: j,
                key: h
            });
        }
        g = null;
    };
    LEAP.flashchart.setValue = function(w, M) {
        w = LEAP._check(w, LEAP.flashchart.d);
        if (w == null) {
            return;
        }
        try {
            var ag = LEAP.ctid(w);
            if (M == null) {
                w.innerHTML = "";
                return;
            }
            var C = {};
            var an = C.type = String.getString(w.getAttribute("type"), LEAP.flashchart.defaultChartType);
            C.caption = w.getAttribute("caption");
            C.cylFillColor = String.getString(w.getAttribute("cylFillColor"), "0");
            C.labelStep = String.getString(w.getAttribute("labelStep"), "1");
            C.transparent = w.getAttribute("transparent");
            if (C.transparent == null) {
                C.transparent = false;
            }
            C.is2D = String.getString(w.getAttribute("is2D"), "0");
            C.divLineColor = String.getString(w.getAttribute("divLineColor"), "");
            C.divLineAlpha = String.getString(w.getAttribute("divLineAlpha"), "");
            C.alternateHGridColor = String.getString(w.getAttribute("alternateHGridColor"), "");
            C.hoverCapBgColor = String.getString(w.getAttribute("hoverCapBgColor"), "");
            C.hoverCapBorderColor = String.getString(w.getAttribute("hoverCapBorderColor"), "");
            C.showLegend = w.getAttribute("showLegend");
            C.legendBgColor = w.getAttribute("legendBgColor");
            C.legendPosition = w.getAttribute("gaugeStartAngle");
            C.showLabels = w.getAttribute("showLabels");
            C.ranglabels = String.getString(w.getAttribute("ranglabels"), "");
            C.gaugeStartAngle = w.getAttribute("gaugeStartAngle");
            C.gaugeEndAngle = w.getAttribute("gaugeEndAngle");
            C.useRoundEdges = w.getAttribute("useRoundEdges");
            C.canvasbgColor = w.getAttribute("canvasbgColor");
            C.canvasBorderAlpha = w.getAttribute("canvasBorderAlpha");
            C.canvasbgAlpha = w.getAttribute("canvasbgAlpha");
            C.numDivlines = w.getAttribute("numDivlines");
            var V = String.getString(w.getAttribute("linkevent"), "1");
            C.subCaption = w.getAttribute("subcaption");
            C.xAxisName = w.getAttribute("xname");
            C.yAxisName = w.getAttribute("yname");
            C.yAxisNameWidth = String.getString(w.getAttribute("ywidth"), "16");
            C.rotateYAxisName = String.getString(w.getAttribute("yrote"), "0");
            var I = w.getAttribute("namefiled");
            if (String.getString(w.getAttribute("xrote"), "0") == "1") {
                C.labelDisplay = "ROTATE";
                C.slantLabels = "1";
                C.rotateLabels = "1";
            }
            C.numberPrefix = w.getAttribute("prefix");
            C.numberSuffix = w.getAttribute("subfix");
            C.decimalPrecision = String.getString(w.getAttribute("decimalplace"), "0");
            C.majorTMNumber = String.getString(w.getAttribute("parts"), "10");
            C.formatNumberScale = String.getString(w.getAttribute("formatnumber"), "1");
            C.formatnumber = "1";
            C.numberScaleValue = "10000,10000";
            C.numberScaleUnit = "万,亿";
            C.decimals = "3";
            C.thousandSeparator = "";
            C.inThousandSeparator = "";
            C.defaultNumberScale = "";
            C.animation = String.getString(w.getAttribute("animation"), "1");
            C.setAdaptiveYMin = String.getString(w.getAttribute("automin"), "1");
            C.bgColor = String.getString(w.getAttribute("bgColor"), "FFFFFF,FFFFFF");
            C.showBorder = 0;
            C.showValues = String.getString(w.getAttribute("showValues"), "1");
            C.anchorRadius = String.getString(w.getAttribute("anchorRadius", 5));
            C.showLimits = "1";
            C.showhovercap = "1";
            C.hoverCapSepChar = " : ";
            C.showToolTipShadow = 1;
            C.showDivLineValues = 1;
            C.showShadow = 1;
            C.showNames = "1";
            if (C.useRoundEdges == null || C.useRoundEdges == "") {
                C.useRoundEdges = "1";
            }
            if (C.numDivlines == null || C.numDivlines == "") {
                C.numVdivlines = 0;
            }
            C.unescapeLinks = "0";
            var g = w.getAttribute("rangs");
            var aa = w.getAttribute("colors");
            var Y = String.getString(w.getAttribute("max"));
            var Q = String.getString(w.getAttribute("min"));
            var ai = w.getAttribute("font");
            ai = LEAP.flashchart.getfontdef(ai);
            if (ai != null) {
                C.baseFont = ai.font;
                C.baseFontSize = ai.size;
                C.baseFontColor = ai.color;
            }
            C.manageResize = "1";
            C.majorTMColor = String.getString(w.getAttribute("majorTMColor"));
            C.majorTMNumber = String.getString(w.getAttribute("majorTMNumber"));
            C.majorTMHeight = String.getString(w.getAttribute("majorTMHeight"));
            C.minorTMNumber = String.getString(w.getAttribute("minorTMNumber"));
            C.minorTMHeight = String.getString(w.getAttribute("minorTMHeight"));
            var ab = w.getAttribute("outfont");
            ab = LEAP.flashchart.getfontdef(ab);
            if (ab != null) {
                C.outCnvBaseFont = ab.font;
                C.outCnvBaseFontSize = ab.size;
                C.outCnvBaseFontColor = ab.color;
            }
            var x = LEAP.flashchart.defaultColors;
            if (!String.isEmpty(aa)) {
                x = aa.split(",");
            }
            if (an == "HLinearGauge") {
                C.lowerLimit = Q;
                C.upperLimit = Y;
                C.colorRange = {};
                C.colorRange.color = [];
                var R = String.getString(w.getAttribute("rangdefs"));
                var N = R.split(",");
                for (var af = 0; af < N.length; af++) {
                    var m = N[af].split(":");
                    var q = m[0].split("-");
                    C.colorRange.color.add({
                        minValue: q[0],
                        maxValue: q[1],
                        label: m[1],
                        code: m[2],
                        borderColor: m[2]
                    });
                }
            } else {
                if (an == "Cylinder") {
                    C.lowerLimit = Q;
                    C.upperLimit = Y;
                } else {
                    if (an == "HLinearGauge2") {
                        C.lowerLimit = Q;
                        C.upperLimit = Y;
                        C.colorRange = {};
                        C.colorRange.color = [];
                        var R = String.getString(w.getAttribute("rangdefs"));
                        var N = R.split(",");
                        var m = N[0].split(":");
                        var q = m[0].split("-");
                        C.colorRange.color.add({
                            minValue: q[0],
                            maxValue: q[1]
                        });
                    } else {
                        if (LEAP.flashchart.w1chart.contains(an) || an == "AngularGauge3") {
                            C.lowerLimit = Q;
                            C.upperLimit = Y;
                            C.colorRange = {};
                            C.colorRange.color = [];
                            if (!String.isEmpty(g)) {
                                var N = g.split(",");
                                var h = N.length;
                                for (var af = 0; af < h; af++) {
                                    var o = null;
                                    if (x.length + 1 < af) {
                                        o = "";
                                    } else {
                                        o = x[af];
                                    }
                                    C.colorRange.color.add({
                                        maxValue: N[af],
                                        code: o
                                    });
                                }
                            } else {
                                C.colorRange.color.add({
                                    code: LEAP.flashchart.defaultColors[0]
                                });
                            }
                        } else {
                            C.yAxisMinValue = Q;
                            C.yAxisMaxValue = Y;
                        }
                    }
                }
            }
            var aj = [];
            var am = [];
            var D = LEAP.convertResult(M);
            var n = D;
            if (!(D instanceof Array)) {
                n = [n];
            }
            var ac = n.length;
            for (var af = 0; af < ac; af++) {
                var m = n[af];
                for (var r in m) {
                    if (r == "javaClass" || r == "beanname") {
                        delete m[r];
                        continue;
                    }
                }
            }
            if (I == null) {
                if (LEAP.flashchart.w3chart.contains(an)) {
                    if (D instanceof Array) {
                        for (var y in D[0]) {
                            I = y;
                            break;
                        }
                    } else {
                        for (var y in D) {
                            I = y;
                            break;
                        }
                    }
                } else {
                    if (LEAP.flashchart.w2chart.contains(an)) {
                        var ak = D;
                        if (ak instanceof Array) {
                            ak = ak[0];
                        }
                        for (var y in ak) {
                            X = LEAP.parsenum(ak[y]);
                            if (X == null) {
                                I = y;
                            }
                            break;
                        }
                    }
                }
            }
            if (M.javaClass != null && M.metaData != null) {
                var T = D.length;
                if (M.metaData.contains("id")) {
                    M.metaData.remove("id");
                }
                for (var ad = 0; ad < T; ad++) {
                    var m = D[ad];
                    var U = m.id;
                    am.add(U);
                    delete m.id;
                }
                var u = M.metaData.length;
                for (var af = 0; af < u; af++) {
                    var z = M.metaData[af];
                    var p = z.cnName;
                    var r = z.name;
                    if (String.isEmpty(p)) {
                        p = r;
                    }
                    if (!String.isEmpty(p)) {
                        for (var ad = 0; ad < T; ad++) {
                            var m = D[ad];
                            var X = m[r];
                            delete m[r];
                            if (r == "javaClass" || r == "beanname") {
                                continue;
                            }
                            if (I != null && r == I) {
                                aj.add(X);
                                continue;
                            }
                            X = LEAP.parsenum(X);
                            if (X == null) {
                                continue;
                            }
                            m[p] = X;
                        }
                    }
                }
            } else {
                var n = D;
                if (!(D instanceof Array)) {
                    n = [n];
                }
                var ac = n.length;
                for (var af = 0; af < ac; af++) {
                    var m = n[af];
                    var U = m.id;
                    am.add(U);
                    delete m.id;
                    for (var r in m) {
                        if (r == "javaClass" || r == "beanname") {
                            delete m[r];
                            continue;
                        }
                        if (I != null && r == I) {
                            aj.add(m[r]);
                            delete m[r];
                            continue;
                        }
                        var X = m[r];
                        X = LEAP.parsenum(X);

                        if (X == null) {
                            delete m[r];
                            continue;
                        }
                    }
                }
            }
            var B = String.getString(w.getAttribute("swaprc"), "0");
            if (B == "1") {
                if (!LEAP.flashchart.w1chart.contains(an)) {
                    if (!(D instanceof Array)) {
                        D = [D];
                    }
                    var ac = D.length;
                    var al = aj.length;
                    var J = [];
                    var G = [];
                    for (var y in D[0]) {
                        J.add(y);
                        var m = {};
                        G.add(m);
                        for (var af = 0; af < ac; af++) {
                            m[aj[af]] = D[af][y];
                        }
                    }
                    D = G;
                    aj = J;
                }
            }
            if (an == "HLinearGauge" || an == "HLinearGauge2") {
                C.pointers = {};
                C.pointers.pointer = [];
                if (D instanceof Array) {
                    var ac = D.length;
                    for (var af = 0; af < ac; af++) {
                        var o = null;
                        if (x.length + 1 < af) {
                            o = "";
                        } else {
                            o = x[af];
                        }
                        C.pointers.pointer.add({
                            value: D[af]
                        });
                    }
                } else {
                    C.pointers.pointer.add({
                        value: D,
                        showvalue: 0,
                        toolText: D
                    });
                }
                if (an == "HLinearGauge") {
                    C.showShadow = "0";
                    C.pointerRadius = "9";
                    C.pointerBgColor = "FFFFFF";
                    C.pointerBorderColor = "000000";
                    C.gaugeBorderThickness = "3";
                    C.gaugeFillMix = "{color},{FFFFFF}";
                    C.gaugeFillRatio = "50,50";
                } else {
                    if (an == "HLinearGauge2") {
                        C.type = "HLinearGauge";
                        C.st = "HLinearGauge2";
                        C.manageresize = "1",
                            C.origw = "420",
                            C.origh = "90",
                            C.lowerlimit = "0",
                            C.upperlimit = "100",
                            C.numbersuffix = "%",
                            C.showborder = "0",
                            C.bgcolor = "FFFFFF",
                            C.ticksbelowgauge = "1",
                            C.valuepadding = "0",
                            C.gaugefillmix = "",
                            C.showgaugeborder = "0",
                            C.pointerontop = "0",
                            C.pointerradius = "5",
                            C.pointerbordercolor = "000000",
                            C.pointerbgcolor = "000000",
                            C.annrenderdelay = "0",
                            C.showshadow = "0",
                            C.minortmnumber = "0",
                            C.basefontcolor = "000000",
                            C.animation = "0";
                        C.colorrange = {
                                color: [{
                                    minvalue: "0",
                                    maxvalue: "100",
                                    alpha: "0"
                                }]
                            },
                            C.annotations = {
                                annotationGroup: [{
                                    id: "Grp1",
                                    showbelow: "0",
                                    x: "$chartCenterX",
                                    y: "-765",
                                    annotation: [{
                                        type: "circle",
                                        radius: "800",
                                        color: "FFFFFF"
                                    }]
                                }, {
                                    id: "Grp2",
                                    showbelow: "1",
                                    annotation: [{
                                        type: "rectangle",

                                        x: "$gaugeStartX",
                                        y: "$gaugeStartY",
                                        tox: "$gaugeEndX",
                                        toy: "$gaugeEndY",
                                        fillcolor: "678000,FCEF27,E00000"
                                    }]
                                }, {
                                    id: "Grp3",
                                    showbelow: "0",
                                    annotation: [{
                                        type: "text",
                                        x: "$gaugeStartX+25",
                                        y: "40",
                                        size: "10",
                                        color: "FFFFFF",
                                        bold: "1",
                                        label: "Good"
                                    }, {
                                        type: "text",
                                        x: "$gaugeEndX-25",
                                        y: "40",
                                        size: "10",
                                        color: "FFFFFF",
                                        bold: "1",
                                        label: "Bad"
                                    }]
                                }]
                            };
                        C.styles = {
                            definition: [{
                                style: {
                                    name: "LabelShadow",
                                    type: "shadow",
                                    distance: "1",
                                    strength: "3",
                                    color: "333333"
                                }
                            }],
                            application: [{
                                apply: {
                                    toobject: "Grp3",
                                    styles: "LabelShadow"
                                }
                            }]
                        };
                    }
                }
            } else {
                if (an == "Cylinder" || an == "Thermometer") {
                    C.value = D;
                    if (an == "Thermometer") {
                        C.majorTMThickness = "1";
                        C.decmials = "0";
                        C.tickMarkDecmials = "0";
                        C.thmFillColor = "FF5904";
                        C.chartLeftMargin = "30";
                        C.chartTopMargin = "40";
                        C.chartBottomMargin = "40";
                        if (!C.numberSuffix) {
                            C.numberSuffix = "°";
                        }
                        C.borderThickness = "2";
                        C.thmbulbRadius = "20";
                        C.gaugeOriginX = "30";
                    }
                } else {
                    if (LEAP.flashchart.w1chart.contains(an) || an == "AngularGauge3") {
                        C.dials = {};
                        C.dials.dial = [];
                        if (an == "AngularGauge3") {
                            if (D instanceof Array) {
                                D = D[0];
                            }
                            var af = 0;
                            for (var y in D) {
                                var Z = D[y];
                                var o = null;
                                if (x.length + 1 < af) {
                                    o = "";
                                } else {
                                    o = x[af];
                                }
                                C.dials.dial.add({
                                    name: y,
                                    value: Z,
                                    showvalue: 0,
                                    bordercolor: "#FF3333",
                                    bgColor: "bebcb0," + o + ",bebcb0",
                                    borderAlpha: "0",
                                    toolText: y + " : " + Z
                                });
                                af++;
                            }
                        } else {
                            if (D instanceof Array) {
                                var ac = D.length;
                                for (var af = 0; af < ac; af++) {
                                    var o = null;
                                    if (x.length + 1 < af) {
                                        o = "";
                                    } else {
                                        o = x[af];
                                    }
                                    C.dials.dial.add({
                                        value: D[af],
                                        showvalue: 0,
                                        bordercolor: "#FF3333",
                                        bgColor: "bebcb0," + o + ",bebcb0",
                                        borderAlpha: "0",
                                        toolText: D[af]
                                    });
                                }
                            } else {
                                C.dials.dial.add({
                                    value: D,
                                    showvalue: 0,
                                    toolText: D
                                });
                            }
                        }
                    } else {
                        if (an == "DragNode") {
                            C.dataset = [];
                            for (var y in D) {
                                var o = null;
                                var U = null;
                                if (B == 1) {
                                    U = am[af];
                                } else {
                                    U = am[0];
                                }
                                if (!U) {
                                    U = "";
                                }
                                var A = {};
                                C.dataset.add(A);
                            }
                        } else {
                            if (LEAP.flashchart.w2chart.contains(an)) {
                                C.set = [];
                                if (D instanceof Array) {
                                    D = D[0];
                                }
                                var af = 0;
                                for (var y in D) {
                                    var o = null;
                                    var U = null;
                                    if (B == 1) {
                                        U = am[af];
                                    } else {
                                        U = am[0];
                                    }
                                    if (!U) {
                                        U = "";
                                    }
                                    if (x.length + 1 < af) {
                                        o = "";
                                    } else {
                                        o = x[af];
                                    }
                                    af++;
                                    var A = {
                                        name: y,
                                        value: D[y],
                                        color: o,
                                        toolText: y + "  :  " + D[y]
                                    };
                                    if (V == "1") {
                                        A.link = 'javascript:LEAP.flashchart.onClick("' + ag + '","' + base64encode(encodeURIComponent(escape(U))) + '","' + base64encode(encodeURIComponent(escape(y))) + '","' + base64encode(encodeURIComponent(escape(D[y]))) + '","' + base64encode(encodeURIComponent(escape(y))) + '");';
                                    }
                                    C.set.add(A);
                                }
                            } else {
                                if (LEAP.flashchart.w3chart.contains(an)) {
                                    var P = w.getAttribute("catfont");
                                    P = LEAP.flashchart.getfontdef(P);
                                    if (P != null) {
                                        C.categories = {
                                            font: P.font,
                                            fontSize: P.size,
                                            fontColor: P.color
                                        };
                                    } else {
                                        C.categories = {
                                            font: "Arial",
                                            fontSize: "12",
                                            fontColor: "000000"
                                        };
                                    }
                                    C.categories.category = [];
                                    C.dataset = [];
                                    if (!(D instanceof Array)) {
                                        D = [D];
                                    }
                                    var T = D.length;
                                    var ad = 0;
                                    var K = String.getString(w.getAttribute("percentfield", ""));
                                    var F = 0;
                                    var ah = 0;
                                    var O = -1;
                                    if (K && (O = aj.indexof(K)) != -1) {
                                        for (var af = 0; af < T; af++) {
                                            if (O == af) {
                                                continue;
                                            }
                                            var m = D[af];
                                            for (var y in m) {
                                                var Z = m[y];
                                                if (Z < F) {
                                                    F = Z;
                                                }
                                                if (Z > ah) {
                                                    ah = Z;
                                                }
                                            }
                                        }
                                    }
                                    for (var af = 0; af < T; af++) {
                                        var o = null;
                                        if (x.length + 1 < af) {
                                            o = "";
                                        } else {
                                            o = x[af];
                                        }
                                        var m = D[af];
                                        var L = aj[af];
                                        var H = {
                                            seriesname: aj[af],
                                            color: o,
                                            set: []
                                        };
                                        if (an == "MSColumnLine3D") {
                                            if (af > 0) {
                                                H.renderas = "line";
                                            }
                                            C.lineThickness = "3";
                                            if (!C.anchorRadius) {
                                                C.anchorRadius = "5";
                                            }
                                        }
                                        var ae = 0;
                                        C.dataset.add(H);
                                        var W = String.getString(w.getAttribute("percentup", "100"));
                                        var d = String.getString(w.getAttribute("minpercent", ""));
                                        for (var y in m) {
                                            if (B == 0) {
                                                U = am[af];
                                            } else {
                                                U = am[ae];
                                            }
                                            var Z = m[y];
                                            var S = H.seriesname + " . " + y + "  :  " + Z;
                                            if (O == af) {
                                                if (Z > W) {
                                                    Z = W;
                                                }
                                                Z = Z / W * 100;
                                                Z = (ah - F) / 100 * Z + F;
                                                S += "%";
                                                if (d >= Z) {
                                                    Z = d;
                                                }
                                            }
                                            if (!U) {
                                                U = "";
                                            }
                                            if (af == 0) {
                                                C.categories.category.add({
                                                    name: y
                                                });
                                            }
                                            H.set.add({
                                                value: Z,
                                                link: 'javascript:LEAP.flashchart.onClick("' + ag + '","' + base64encode(encodeURIComponent(escape(U))) + '","' + base64encode(encodeURIComponent(escape(aj[af]))) + '","' + base64encode(encodeURIComponent(escape(Z))) + '","' + base64encode(encodeURIComponent(escape(y))) + '");',
                                                toolText: S
                                            });
                                            ad++;
                                            ae++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            for (var y in C) {
                if (C[y] == null) {
                    delete(C[y]);
                }
            }
            if (C.type == "AngularGauge3") {
                C.type = "AngularGauge";
                C.st = "AngularGauge3";
            }
            if (C.type == "AngularGauge2") {
                C.type = "AngularGauge";
                C.gaugeInnerRadius = "10";
                C.pivotRadius = "10";
                C.displayValueDistance = 10;
                C.showShadow = 1;
                C.majorTMHeight = "8";
                C.showGaugeBorder = "1";
                C.tickMarkDecimalPrecision = "1";
                C.showPivotBorder = "1";
                C.pivotBorderColor = "94B7EB";
                C.pivotBorderThickness = "2";
            }
            if (C.type == "AngularGauge4") {
                C.type = "AngularGauge";
                C.st = "AngularGauge4";
            }
            w.setAttribute("id", ag);
            w.innerHTML = "";
            LEAP.asyn(LEAP.flashchart.__setValue, null, 500, ag, C);
            return ag;
        } finally {
            w = null;
        }
    };
    LEAP.flashchart.__setValue = function(D, x) {
        var g = x.type;
        var j = document.getElementById(D);
        if (!j) {
            return;
        }
        var p = j.offsetWidth;
        var L = j.offsetHeight;
        var I = [];
        var u = null;
        var q = [];
        var z = null;
        var C = L;
        if (p > 0 && p > 300) {
            if (g == "AngularGauge" && x.dials != null && x.dials.dial != null) {
                if (!x.st || x.st && x.st != "AngularGauge4") {
                    var H = x.dials.dial.length;
                    for (var J = 0; J < H; J++) {
                        if (x.st == "AngularGauge3") {
                            if (J == 0) {
                                z = [];
                            }
                            z.add(x.dials.dial[J].name);
                        }
                        u = x.dials.dial[J].value;
                        var M = x.dials.dial[J].bgColor;
                        if (x.formatNumberScale != null && x.formatNumberScale == "1") {
                            if (u > 1000000) {
                                u = Math.round(u / 10000) / 100 + "百万";
                            } else {
                                if (u > 1000) {
                                    u = Math.round(u / 100) / 10 + "K";
                                }
                            }
                        }
                        I.add(u);
                        q.add(M);
                    }
                }
            }
            if (x.st == "AngularGauge3") {
                C = (L - 50) + "px";
            }
        }
        if (x.st) {
            delete(x.st);
        }
        var B = null;
        var r = p;
        var K = C;
        if (r == 0) {
            r = "100%";
        }
        if (K == 0) {
            K = "100%";
        }
        B = new FusionCharts(leapconfig.server + "LEAP/Resource/flash/chart/swf/" + g + ".swf", "swf_" + D, r, K, "0", "0");
        if (x.transparent) {
            B.addParam("wmode", "transparent");
        } else {
            B.addParam("wmode", "Opaque");
        }
        B.setDataJSON(x);
        B.render(D);
        if (I.length > 0) {
            var G = 0;
            if (I.length > 0) {
                if (I.length % 2 == 0) {
                    G = 25;
                }
            }
            var o = null;
            if (z != null) {
                o = document.createElement("div");
                o.style.width = "auto";
                o.style.textAlign = "center";
                j.appendChild(o);
            }
            for (var J = 0; J < I.length; J++) {
                var m = q[J];
                if (m != null && m.indexOf(",") > -1) {
                    m = m.split(",")[1].trim();
                }
                if (m != null && m.trim().charAt(0) != "#") {
                    m = "#" + m.trim();
                }
                var u = I[J];
                if (z != null) {
                    var F = z[J];
                    var y = document.createElement("span");
                    y.style.height = "16px";
                    y.style.width = "auto";
                    y.style.border = "1px solid #999999";
                    y.style.marginRight = "20px";
                    y.style.fontFamily = "宋体";
                    y.style.fontSize = "14px";
                    o.appendChild(y);
                    if (m != null) {
                        y.style.color = m;
                    } else {
                        y.style.color = "#000000";
                    }
                    y.innerHTML = F + "&nbsp;:&nbsp;" + u;
                } else {
                    var d = 0;
                    var M = Math.floor(I.length / 2);
                    if (J + 1 <= M) {
                        if (G != 0) {
                            d -= (M - (J + 1)) * 45 + G;
                        } else {
                            d -= (M + 1 - (J + 1)) * 45 + G;
                        }
                    } else {
                        if (G == 0 && (J + 1) - M == 1) {
                            d = 0;
                        } else {
                            d += ((J) - M) * 45 + G;
                        }
                    }
                    j.style.position = "relative";
                    var y = document.createElement("div");
                    y.style.position = "absolute";
                    y.style.height = "20px";
                    y.style.border = "1px solid #999999";
                    if (I.length > 1) {
                        y.style.bottom = "0px";
                    } else {
                        y.style.bottom = "40px";
                    }
                    j.appendChild(y);
                    var A = document.createElement("font");
                    A.style.fontFamily = "宋体";
                    A.style.fontSize = "14px";
                    A.style.lineHeight = "20px";
                    A.style.marginLeft = "3px";
                    A.style.marginRight = "3px";
                    if (m != null) {
                        A.style.color = m;
                        y.style.borderColor = m;
                    } else {
                        A.style.color = "#000000";
                    }
                    A.innerHTML = u;
                    y.appendChild(A);
                    y.style.left = (p / 2 - y.offsetWidth / 2 + d) + "px";
                }
            }
        }
        j = null;
        B = null;
    };
    if (typeof infosoftglobal == "undefined") {
        var infosoftglobal = new Object();
    }
    if (typeof infosoftglobal.FusionChartsUtil == "undefined") {
        infosoftglobal.FusionChartsUtil = new Object();
    }
    infosoftglobal.FusionCharts = function(j, d, q, n, u, l, o, r, g, m, p) {
        if (!document.getElementById) {
            return;
        }
        this.initialDataSet = false;
        this.params = new Object();
        this.variables = new Object();
        this.attributes = new Array();
        if (j) {
            this.setAttribute("swf", j);
        }
        if (d) {
            this.setAttribute("id", d);
        }
        q = q.toString().replace(/\%$/, "%25");
        if (q) {
            this.setAttribute("width", q);
        }
        n = n.toString().replace(/\%$/, "%25");
        if (n) {
            this.setAttribute("height", n);
        }
        if (o) {
            this.addParam("bgcolor", o);
        }
        this.addParam("quality", "high");
        this.addParam("allowScriptAccess", "always");
        this.addVariable("chartWidth", q);
        this.addVariable("chartHeight", n);
        u = u ? u : 0;
        this.addVariable("debugMode", u);
        this.addVariable("DOMId", d);
        l = l ? l : 0;
        this.addVariable("registerWithJS", l);
        r = r ? r : "noScale";
        this.addVariable("scaleMode", r);
        g = g ? g : "EN";
        this.addVariable("lang", g);
        this.detectFlashVersion = m ? m : 1;
        this.autoInstallRedirect = p ? p : 1;
        this.installedVer = infosoftglobal.FusionChartsUtil.getPlayerVersion();
        if (!window.opera && document.all && this.installedVer.major > 7) {
            infosoftglobal.FusionCharts.doPrepUnload = true;
        }
    };
    infosoftglobal.FusionCharts.prototype = {
        setAttribute: function(d, g) {
            this.attributes[d] = g;
        },
        getAttribute: function(d) {
            return this.attributes[d];
        },
        addParam: function(d, g) {
            this.params[d] = g;
        },
        getParams: function() {
            return this.params;
        },
        addVariable: function(d, g) {
            this.variables[d] = g;
        },
        getVariable: function(d) {
            return this.variables[d];
        },
        getVariables: function() {
            return this.variables;
        },
        getVariablePairs: function() {
            var d = new Array();
            var g;
            var h = this.getVariables();
            for (g in h) {
                d.push(g + "=" + h[g]);
            }
            return d;
        },
        getSWFHTML: function() {
            var j = "";
            if (navigator.plugins && navigator.mimeTypes && navigator.mimeTypes.length) {
                j = '<embed type="application/x-shockwave-flash" src="' + this.getAttribute("swf") + '" width="' + this.getAttribute("width") + '" height="' + this.getAttribute("height") + '"  ';
                j += ' id="' + this.getAttribute("id") + '" name="' + this.getAttribute("id") + '" ';
                var h = this.getParams();
                for (var d in h) {
                    j += [d] + '="' + h[d] + '" ';
                }
                var g = this.getVariablePairs().join("&");
                if (g.length > 0) {
                    j += 'flashvars="' + g + '"';
                }
                j += "/>";
            } else {
                j = '<object id="' + this.getAttribute("id") + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + this.getAttribute("width") + '" height="' + this.getAttribute("height") + '">';
                j += '<param name="movie" value="' + this.getAttribute("swf") + '" />';
                var h = this.getParams();
                for (var d in h) {
                    j += '<param name="' + d + '" value="' + h[d] + '" />';
                }
                var g = this.getVariablePairs().join("&");
                if (g.length > 0) {
                    j += '<param name="flashvars" value="' + g + '" />';
                }
                j += "</object>";
            }
            return j;
        },
        setDataURL: function(d) {
            if (this.initialDataSet == false) {
                this.addVariable("dataURL", d);
                this.initialDataSet = true;
            } else {
                var g = infosoftglobal.FusionChartsUtil.getChartObject(this.getAttribute("id"));
                if (!g.setDataURL) {
                    __flash__addCallback(g, "setDataURL");
                }
                g.setDataURL(d);
            }
        },
        encodeDataXML: function(j) {
            var n = ["\\$", "\\+"];
            var h = j.match(/=\s*\".*?\"/g);
            if (h) {
                for (var l = 0; l < h.length; l++) {
                    var o = h[l].replace(/^=\s*\"|\"$/g, "");
                    o = o.replace(/\'/g, "%26apos;");
                    var m = j.indexOf(h[l]);
                    var d = "='" + o + "'";
                    var g = j.substring(0, m);
                    var p = j.substring(m + h[l].length);
                    var j = g + d + p;
                }
            }
            j = j.replace(/\"/g, "%26quot;");
            j = j.replace(/%(?![\da-f]{2}|[\da-f]{4})/ig, "%25");
            j = j.replace(/\&/g, "%26");
            return j;
        },
        setDataXML: function(d) {
            if (this.initialDataSet == false) {
                this.addVariable("dataXML", this.encodeDataXML(d));
            } else {
                var g = infosoftglobal.FusionChartsUtil.getChartObject(this.getAttribute("id"));
                g.setDataXML(d);
            }
        },
        setTransparent: function(d) {
            if (typeof d == "undefined") {
                d = true;
            }
            if (d) {
                this.addParam("WMode", "transparent");
            } else {
                this.addParam("WMode", "Opaque");
            }
        },
        render: function(d) {
            if ((this.detectFlashVersion == 1) && (this.installedVer.major < 6)) {
                if (this.autoInstallRedirect == 1) {
                    var g = window.confirm("You need Adobe Flash Player 6 (or above) to view the charts. It is a free and lightweight installation from Adobe.com. Please click on Ok to install the same.");
                    if (g) {
                        __s__3.href = "http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash";
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                var h = (typeof d == "string") ? document.getElementById(d) : d;
                h.innerHTML = this.getSWFHTML();
                if (!document.embeds[this.getAttribute("id")] && !window[this.getAttribute("id")]) {
                    window[this.getAttribute("id")] = document.getElementById(this.getAttribute("id"));
                }
                return true;
            }
        },
        parseJSON: function(l, o) {
            var n, m;
            for (var g in o) {
                var h = typeof o[g];
                if (h == "function") {
                    continue;
                }
                if (h == "object") {
                    if (o[g].hasOwnProperty("length")) {
                        for (var d in o[g]) {
                            if (typeof o[g][d] == "function") {
                                continue;
                            }
                            m = this.XML.createElement(g);
                            this.parseJSON(m, o[g][d]);
                            l.appendChild(m);
                        }
                    } else {
                        m = this.XML.createElement(g);
                        this.parseJSON(m, o[g]);
                        l.appendChild(m);
                    }
                } else {
                    if (h == "string" || h == "number" || h == "boolean") {
                        n = this.XML.createAttribute(g);
                        if (h == "boolean") {
                            o[g] = (o[g] ? "1" : "0");
                        }
                        n.nodeValue = o[g];
                        l.setAttributeNode(n);
                    }
                }
            }
        },
        newXMLDocument: function(d) {
            if (!d) {
                d = "graph";
            }
            if (document.implementation && document.implementation.createDocument) {
                return document.implementation.createDocument("", d, null);
            } else {
                var g = new ActiveXObject("MSXML2.DOMDocument");
                var h = "<" + d + "/>";
                g.loadXML(h);
            }
            return g;
        },
        setDataJSON: function(g) {
            this.XML = this.newXMLDocument("graph");
            if (g.hasOwnProperty("value")) {
                var d = this.XML.createElement("value");
                d.appendChild(this.XML.createTextNode(g.value));
                this.XML.documentElement.appendChild(d);
                delete(g.value);
            }
            this.parseJSON(this.XML.documentElement, g);
            var h;
            if (typeof XMLSerializer == "function") {
                h = (new XMLSerializer()).serializeToString(this.XML);
            } else {
                h = this.XML.xml;
            }
            h = h.replace(/\'/g, "%26apos;");
            h = h.replace(/\"/g, "'");
            this.setDataXML(h);
        }
    };
    infosoftglobal.FusionChartsUtil.getPlayerVersion = function() {
        var h = new infosoftglobal.PlayerVersion([0, 0, 0]);
        if (navigator.plugins && navigator.mimeTypes.length) {
            var d = navigator.plugins["Shockwave Flash"];
            if (d && d.description) {
                h = new infosoftglobal.PlayerVersion(d.description.replace(/([a-zA-Z]|\s)+/, "").replace(/(\s+r|\s+b[0-9]+)/, ".").split("."));
            }
        } else {
            if (navigator.userAgent && navigator.userAgent.indexOf("Windows CE") >= 0) {
                var j = 1;
                var g = 3;
                while (j) {
                    try {
                        g++;
                        j = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + g);
                        h = new infosoftglobal.PlayerVersion([g, 0, 0]);
                    } catch (l) {
                        j = null;
                    }
                }
            } else {
                try {
                    var j = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
                } catch (l) {
                    try {
                        var j = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
                        h = new infosoftglobal.PlayerVersion([6, 0, 21]);
                        j.AllowScriptAccess = "always";
                    } catch (l) {
                        if (h.major == 6) {
                            return h;
                        }
                    }
                    try {
                        j = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
                    } catch (l) {}
                }
                if (j != null) {
                    h = new infosoftglobal.PlayerVersion(j.GetVariable("$version").split(" ")[1].split(","));
                }
            }
        }
        return h;
    };
    infosoftglobal.PlayerVersion = function(d) {
        this.major = d[0] != null ? parseInt(d[0]) : 0;
        this.minor = d[1] != null ? parseInt(d[1]) : 0;
        this.rev = d[2] != null ? parseInt(d[2]) : 0;
    };
    infosoftglobal.FusionChartsUtil.cleanupSWFs = function() {
        var h = document.getElementsByTagName("OBJECT");
        for (var g = h.length - 1; g >= 0; g--) {
            h[g].style.display = "none";
            for (var d in h[g]) {
                if (typeof h[g][d] == "function") {
                    h[g][d] = function() {};
                }
            }
        }
    };
    if (infosoftglobal.FusionCharts.doPrepUnload) {
        if (!infosoftglobal.unloadSet) {
            infosoftglobal.FusionChartsUtil.prepUnload = function() {
                __flash_unloadHandler = function() {};
                __flash_savedUnloadHandler = function() {};
                window.attachEvent("onunload", infosoftglobal.FusionChartsUtil.cleanupSWFs);
            };
            window.attachEvent("onbeforeunload", infosoftglobal.FusionChartsUtil.prepUnload);
            infosoftglobal.unloadSet = true;
        }
    }
    if (!document.getElementById && document.all) {
        document.getElementById = function(d) {
            return document.all[d];
        };
    }
    if (Array.prototype.push == null) {
        Array.prototype.push = function(d) {
            this[this.length] = d;
            return this.length;
        };
    }
    infosoftglobal.FusionChartsUtil.getChartObject = function(g) {
        var d = null;
        if (navigator.appName.indexOf("Microsoft Internet") == -1) {
            if (document.embeds && document.embeds[g]) {
                d = document.embeds[g];
            } else {
                d = window.document[g];
            }
        } else {
            d = window[g];
        }
        if (!d) {
            d = document.getElementById(g);
        }
        return d;
    };
    infosoftglobal.FusionChartsUtil.updateChartXML = function(h, g) {
        var d = infosoftglobal.FusionChartsUtil.getChartObject(h);
        d.SetVariable("_root.dataURL", "");
        d.SetVariable("_root.isNewData", "1");
        d.SetVariable("_root.newData", g);
        d.TGotoLabel("/", "JavaScriptHandler");
    };
    var getChartFromId = infosoftglobal.FusionChartsUtil.getChartObject;
    var updateChartXML = infosoftglobal.FusionChartsUtil.updateChartXML;
    var FusionCharts = infosoftglobal.FusionCharts;
    LEAP.gispoint = {};
    LEAP.gispoint.d = "gispoint";
    LEAP.gispoint.pointForm = null;
    LEAP.gispoint.polyForm = null;
    LEAP.gispoint.f = null;
    LEAP.gispoint.init = function() {
        if (document != null && document.body != null) {
            LEAP.gispoint._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.gispoint._init);
        }
    };
    LEAP.gispoint._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.gispoint.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.gispoint._init);
    };
    LEAP.gispoint.setAreaid = function(d, g) {
        try {
            d = LEAP._check(d, LEAP.gispoint.d);
            if (null == d) {
                return null;
            }
            d.setAttribute("_gis_areaid", g);
        } finally {
            d = null;
        }
    };
    LEAP.gispoint.uiProcess = function(m) {
        var n = m.e.srcElement;
        var j = m.e.type;
        if (null == j) {
            return;
        }
        try {
            var z = null;
            var y = null;
            var B = null;
            var d = n.getAttribute("ctf");
            if (d == "gis_button_p" && j == "click") {
                var A = n.parentNode;
                if (A == null || A.getAttribute("ct") != LEAP.gispoint.d) {
                    return;
                }
                var r = LEAP.getElement("[md=gisp_x]", A);
                var o = LEAP.getElement("[md=gisp_y]", A);
                var v = LEAP.getElement("[md=gisp_points]", A);
                var w = "point";
                if (r == null || o == null) {
                    alert("中心坐标点控件不存在");
                    return;
                }
                LEAP.gispoint.f = A;
                if (r != null && r.getAttribute) {
                    z = r.getAttribute("value");
                }
                if (o != null && o.getAttribute) {
                    y = o.getAttribute("value");
                }
                if (v != null && v.getAttribute) {
                    B = v.getAttribute("value");
                    w = "polygon";
                }
                var h = LEAP.getLoadedModule(r.getAttribute("instance"));
                if (h == null) {
                    return;
                }
                var l = h.moduleName;
                if (w == "polygon" && l == null) {
                    alert("模型名称为空");
                    return;
                }
                var u = null;
                var q = null;
                var g = h.getPageData();
                var C = false;
                if (g != null && g.data != null) {
                    u = g.data.areaid;
                    q = g.data.id;
                }
                if (A.getAttribute) {
                    if (A.getAttribute("_gis_areaid") != null) {
                        u = A.getAttribute("_gis_areaid");
                        if (u != null && u.length > 0) {
                            C = true;
                        }
                    }
                }
                if (u == null) {
                    u = LEAP.userInfo.areaid;
                }
                var x = {};
                x.moduleLoadArg = null;
                x.autodispose = false;
                if (w == "point") {
                    if (h.__mform == null) {
                        x.name = "gis_centerpoint";
                        x.title = "设置中心坐标";
                        h.__mform = h.loadForm3(x);
                        h.__mform.module.regEvent("onGisSubmit", LEAP.gispoint.dsubmit);
                        LEAP.form.maxSize(h.__mform.form);
                    } else {
                        LEAP.form.show(h.__mform.form);
                    }
                    h.__mform.module.setPoints(z, y, u, C, h.pageMode);
                } else {
                    if (w == "polygon") {
                        if (h.__mform == null) {
                            x.name = "gis_polygonpoints";
                            x.title = "设置区域范围";
                            h.__mform = h.loadForm3(x);
                            h.__mform.module.regEvent("onGisSubmit", LEAP.gispoint.dsubmit);
                            LEAP.form.maxSize(h.__mform.form);
                        } else {
                            LEAP.form.show(h.__mform.form);
                        }
                        h.__mform.module.setPoints(l, B, q, u, C, h.pageMode);
                    }
                }
            }
        } finally {
            n = j = r = o = v = null;
        }
    };
    LEAP.gispoint.dsubmit = function(j) {
        if (LEAP.gispoint.f != null && j != null) {
            var l = LEAP.gispoint.f;
            var g = LEAP.getElement("[md=gisp_x]", l);
            var d = LEAP.getElement("[md=gisp_y]", l);
            var h = LEAP.getElement("[md=gisp_points]", l);
            if (g != null && j.x != null) {
                LEAP.setValue(g, j.x);
            }
            if (d != null && j.y != null) {
                LEAP.setValue(d, j.y);
            }
            if (h != null && j.points != null) {
                LEAP.setValue(h, j.points);
            }
        }
        LEAP.gispoint.f = null;
    };
    LEAP.gispoint.init();
    LEAP.imgattach = {};
    LEAP.imgattach.d = "imgattach";
    LEAP.imgattach.listimg = '<li ctf="li_row" dataid="@dataid" datauser="@datauser"><div class="imgannex_imglist_del" ctf="li_del" dataid="@dataid" datauser="@datauser"></div><div ctf="li_mask" dataid="@dataid" datauser="@datauser" class="@class"></div><img ctf="li_img" dataid="@dataid" datauser="@datauser" src="@src" class="@imgclass"></li>';
    LEAP.imgattach.imgli = '<img ctf="img_view" class="@class" src="@src" datauser="@datauser">';
    LEAP.imgattach.flag = false;
    LEAP.imgattach.init = function() {
        if (document != null && document.body != null) {
            LEAP.imgattach._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.imgattach._init);
        }
        ElementEventManager.addManagedEventType(LEAP.imgattach.d, "click");
    };
    LEAP.imgattach._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.imgattach._init);
        LEAP.addEvent(document.body, "click", LEAP.imgattach.uiProcess, null, null, true);
    };
    LEAP.imgattach.initbtn = function(p, d) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (p != null) {
            var x = function() {
                LEAP.imgattach.initbtn(null, d);
                d = null;
            };
            setTimeout(x, p);
            return;
        }
        var n = d.parentElement;
        if (n != null) {
            var g = n.getAttribute("ch");
            if (g != null && g != "") {
                n.style.height = (parseInt(g) - 10) + "px";
            } else {
                var q = n.parentElement.parentElement.parentElement.clientHeight;
                n.style.height = (parseInt(q) - 10) + "px";
            }
            var o = LEAP.getElement("[ctf=imgannex_main]", n);
            if (o != null) {
                var w = new StringBuffer('<DIV style="HEIGHT: 100%; WIDTH: 100%" ctf="imgmain"><DIV class=lg_p_lr_right style="WIDTH: 110px"><DIV __target="go1" onresize=LEAPLG.bct(); class=lg_p2_bct><DIV onresize=LEAPLG.bct_layout(); class=lg_p2_bct_top>');
                w.append('<div class="imgannex_up"><img src="' + leapconfig.server + 'LEAP/Resource/images/itemstyle/imgattach/upimg.png" ctf="listup"></div>');
                var l = n.getAttribute("btntype");
                if (l == "false") {
                    w.append('<div ct="uploadbtn" class="imgannexupload1" img="LEAP/Resource/images/itemstyle/imgattach/add1.jpg" imgwidth="80" imgheight="50">');
                } else {
                    w.append('<div ct="uploadbtn" class="imgannexupload" img="LEAP/Resource/images/itemstyle/imgattach/add1.jpg" imgwidth="80" imgheight="50">');
                }
                w.append('<img style="display:none" src="data:image:png,base64" onerror="LEAP.uploadbtn.i(0);" style="float:left;" ></div></DIV>');
                w.append('<DIV class=lg_p2_bct_center style="HEIGHT: 100%"><div class="imgannex_imglist" ctf="gundong"><ul ctf="listimg"></ul></div></DIV>');
                w.append('<DIV onresize=LEAPLG.bct_layout(); class=lg_p2_bct_bottom style="HEIGHT: 15px"><div class="imgannex_dowm"><img src="' + leapconfig.server + 'LEAP/Resource/images/itemstyle/imgattach/dowmimg.png" ctf="listdowm"></div></DIV>');
                w.append('<IMG onerror=LEAPLG.bct_img(0); style="DISPLAY: none" src="data:image:png,base64"></DIV></DIV>');
                w.append('<DIV class=lg_p_lr_fill><DIV class=lg_p_lr_fill_c><DIV onresize=LEAPLG.bct(); class=lg_p2_bct><DIV onresize=LEAPLG.bct_layout(); class=lg_p2_bct_top style="HEIGHT: 30px"></DIV>');
                w.append('<DIV class=lg_p2_bct_center style="HEIGHT: 100%"><DIV style="HEIGHT: 100%; WIDTH: 100%"><DIV class=lg_p_lr_left style="WIDTH: 30px"></DIV><DIV class=lg_p_lr_right style="WIDTH: 30px"></DIV>');
                w.append('<DIV class=lg_p_lr_fill><DIV class=lg_p_lr_fill_c><div class="imgannex_imgmain" ctf="imglist"></div></DIV></DIV></DIV></DIV>');
                w.append('<DIV onresize=LEAPLG.bct_layout(); class=lg_p2_bct_bottom style="HEIGHT: 30px"></DIV><IMG onerror=LEAPLG.bct_img(0); style="DISPLAY: none" src="data:image:png,base64"></DIV></DIV></DIV></DIV>');
                o.innerHTML = w.toString();
            }
            var z = n.getAttribute("quality");
            var m = n.getAttribute("viewsize");
            var v = n.getAttribute("viewwidth");
            var j = n.getAttribute("viewheight");
            var y = LEAP.getElement("[ct=uploadbtn]", n);
            if (z != null) {
                y.setAttribute("quality", z);
            }
            if (m != null) {
                y.setAttribute("viewsize", m);
            }
            if (v != null) {
                y.setAttribute("viewwidth", v);
            }
            if (j != null) {
                y.setAttribute("viewheight", j);
            }
            LEAP.addEvent(y, "uploadBtnComplete", LEAP.imgattach.uploadComplete);
            var r = LEAP.getElement("[ctf=gundong]", n);
            LEAP.addEvent(r, "mousewheel", LEAP.imgattach.onScroll);
            var u = LEAP.getElement("[ctf=imgmain]", n);
            LEAP.addEvent(u, "mouseover", LEAP.imgattach.uiover, null, null, true);
            LEAP.imgattach.flag = true;
        }
    };
    LEAP.imgattach.uiProcess = function(m) {
        if (m == null) {
            return;
        }
        var p = m.e.srcElement;
        if (p == null) {
            return;
        }
        var l = m.e.type;
        if (l == null) {
            return;
        }
        var F = p.tagName;
        if (F == null) {
            return;
        }
        try {
            var g = p.getAttribute(commfields.ctf);
            var h = null;
            if (g == "li_mask") {
                h = LEAP._match(p, LEAP.imgattach.d);
                var w = p.getAttribute("dataid");
                if (w != null) {
                    var o = h.getAttribute("btndel");
                    p.className = "curre";
                    var A = LEAP.getElements("[ctf=li_mask]", h);
                    var j = LEAP.getElements("[ctf=img_view]", h);
                    var u = LEAP.getElements("[ctf=li_del]", h);
                    var r = LEAP.getElements("[ctf=li_img]", h);
                    for (var B = 0; B < A.length; B++) {
                        var x = A[B].getAttribute("dataid");
                        if (x != w) {
                            A[B].className = "";
                            r[B].className = "";
                            j[B].className = "";
                            j[B].style.display = "none";
                            if (o == "false") {
                                u[B].className = "imgannex_imglist_del";
                            } else {
                                u[B].className = "imgannex_imglist_del";
                            }
                        } else {
                            r[B].className = "imgcurre";
                            j[B].className = "curre";
                            j[B].style.display = "block";
                            if (o == "false") {
                                u[B].className = "imgannex_imglist_del";
                            } else {
                                u[B].className = "imgannex_imglist_del1";
                            }
                        }
                    }
                }
            } else {
                if (g == "listup") {
                    h = LEAP._match(p, LEAP.imgattach.d);
                    var y = LEAP.getElement("[ctf=gundong]", h);
                    y.scrollTop -= 55;
                } else {
                    if (g == "listdowm") {
                        h = LEAP._match(p, LEAP.imgattach.d);
                        var y = LEAP.getElement("[ctf=gundong]", h);
                        y.scrollTop += 55;
                    } else {
                        if (g == "li_del") {
                            if (window.confirm("确定删除该图片?")) {
                                h = LEAP._match(p, LEAP.imgattach.d);
                                var v = LEAP.getElement("[ctf=listimg]", h);
                                var d = LEAP.getElements("[ctf=li_row]", h);
                                var q = LEAP.getElement("[ctf=imglist]", h);
                                var r = LEAP.getElements("[ctf=img_view]", h);
                                var n = p.getAttribute("dataid");
                                v.removeChild(d[parseInt(n) - 1]);
                                q.removeChild(r[parseInt(n) - 1]);
                                var z = h.value;
                                var C = JSON.parse(z);
                                C.removeindex(parseInt(n) - 1);
                                h.value = JSON.stringify(C);
                                var D = h.value;
                                LEAP.imgattach.flag = true;
                                LEAP.imgattach.setValue(h, D);
                            }
                        }
                    }
                }
            }
        } finally {}
    };
    LEAP.imgattach.onScroll = function() {
        var g = LEAP.getElement("[ct=imgattach]");
        if (g != null) {
            var d = LEAP.getElement("[ctf=gundong]", g);
            if (d != null) {
                if (event.wheelDelta == -120) {
                    d.scrollTop += 55;
                } else {
                    if (event.wheelDelta == 120) {
                        d.scrollTop -= 55;
                    }
                }
            }
        }
    };
    LEAP.imgattach.setValue = function(p, w) {
        if (p == null) {
            return;
        }
        if (typeof(p) == "string") {
            p = LEAP.getElement(p);
        }
        if (p == null) {
            return;
        }
        if (LEAP.imgattach.flag == false) {
            LEAP.asyn(LEAP.imgattach.setValue, null, 100, p, w);
            if (w != null) {
                LEAP.imgattach.flag = true;
            }
            return;
        }
        var r = p.getAttribute("ct");
        if (r == "imgattach") {
            var z = w;
            var q = null;
            if (w != null && w != "") {
                q = JSON.parse(z);
                p.value = z;
            } else {
                p.value = "";
            }
            if (q != null) {
                var n = q.length;
                var h = LEAP.getElement("[ctf=listimg]", p);
                var x = LEAP.getElement("[ctf=imglist]", p);
                var v = new StringBuffer();
                var m = new StringBuffer();
                for (var o = 0; o < n; o++) {
                    var y = q[o];
                    var g = LEAP.upload.getPath(y);
                    var j = null;
                    if (y.userName != null && y.userName != "") {
                        j = y.userName;
                    } else {
                        j = y.creator;
                    }
                    var u = null;
                    var d = null;
                    if (o == 0) {
                        u = LEAP.imgattach.listimg.replaceall("@dataid", (o + 1)).replace("@class", "curre").replace("@src", g).replace("@imgclass", "imgcurre").replaceall("@datauser", j);
                        d = LEAP.imgattach.imgli.replace("@class", "curre").replace("@src", g).replaceall("@datauser", j);
                    } else {
                        u = LEAP.imgattach.listimg.replaceall("@dataid", (o + 1)).replace("@class", "").replace("@src", g).replace("@imgclass", "").replaceall("@datauser", j);
                        d = LEAP.imgattach.imgli.replace("@class", "").replace("@src", g).replaceall("@datauser", j);
                    }
                    v.append(u);
                    m.append(d);
                }
                h.innerHTML = v.toString();
                x.innerHTML = m.toString();
                imageindex = 1;
                for (var o = 0; o < x.childNodes.length; o++) {
                    LEAP.loadIMG(x.childNodes[o].src, x.childNodes[o], LEAP.imgattach.setimgwh, null);
                }
            }
            LEAP.imgattach.flag = false;
        }
    };
    LEAP.imgattach.getValue = function(d) {
        if (d == null) {
            return;
        }
        if (typeof(d) == "string") {
            d = LEAP.getElement(d);
        }
        if (d == null) {
            return;
        }
        var g = d.value;
        return g;
    };
    LEAP.imgattach.uploadComplete = function(u) {
        var m = LEAP.getElement("[ct=imgattach]");
        var h = LEAP.getElement("[ctf=listimg]", m);
        var v = LEAP.getElement("[ctf=imglist]", m);
        var q = m.value;
        var o = null;
        var w = u.arg2.result;
        var n = 1;
        if (q != null && q != "") {
            var o = JSON.parse(q);
            if (o != null) {
                o[o.length] = w;
            }
            n = o.length;
        } else {
            o = [];
            o[0] = w;
        }
        var g = LEAP.upload.getPath(w);
        var r = document.createElement("li");
        r.setAttribute("ctf", "li_row");
        r.setAttribute("dataid", n);
        var d = document.createElement("div");
        d.className = "imgannex_imglist_del";
        d.setAttribute("ctf", "li_del");
        d.setAttribute("dataid", n);
        r.appendChild(d);
        var p = document.createElement("div");
        if (n == 1) {
            p.className = "curre";
        }
        p.setAttribute("ctf", "li_mask");
        p.setAttribute("dataid", n);
        r.appendChild(p);
        var l = document.createElement("img");
        if (n == 1) {
            l.className = "imgcurre";
        }
        l.src = g;
        l.setAttribute("ctf", "li_img");
        l.setAttribute("dataid", n);
        r.appendChild(l);
        h.appendChild(r);
        var j = document.createElement("img");
        j.setAttribute("ctf", "img_view");
        j.src = g;
        v.appendChild(j);
        if (n == 1) {
            j.className = "curre";
        }
        LEAP.loadIMG(g, j, LEAP.imgattach.setimgwh, null);
        m.value = JSON.stringify(o);
    };
    var imageindex = 1;
    LEAP.imgattach.setimgwh = function(l) {
        var h = LEAP.getElement("[ctid=" + l.target + "]");
        if (imageindex == 1) {
            h.style.display = "block";
        }
        if (l.height != null && l.width != null && l.height != 0 && l.width != 0) {
            var o = h.parentNode.clientHeight;
            var g = h.parentNode.clientWidth;
            var j = l.width;
            var d = l.height;
            scale = j / d;
            if (j > g) {
                j = g;
                d = j / scale;
                if (d > o) {
                    d = o;
                    j = d * scale;
                }
            }
            if (d > o) {
                d = o;
                j = d * scale;
            }
            var n = null;
            var m = null;
            if (d < o) {
                m = (o - d) / 2;
            }
            if (j < g) {
                n = (g - j) / 2;
            }
            h.style.width = j + "px";
            h.style.height = d + "px";
            if (n != null) {
                h.style.left = n + "px";
            }
            if (m != null) {
                h.style.top = m + "px";
            }
        }
        if (h.style.width.toLowerCase() == "0px") {
            h.style.width = "100%";
        }
        if (h.style.height.toLowerCase() == "0px") {
            h.style.height = "100%";
        }
        imageindex++;
    };
    LEAP.imgattach.uiover = function(u) {
        if (u == null) {
            return;
        }
        var d = u.e.srcElement;
        if (d == null) {
            return;
        }
        var p = u.e.type;
        if (p == null) {
            return;
        }
        var w = d.tagName;
        if (w == null) {
            return;
        }
        try {
            var r = d.getAttribute(commfields.ctf);
            var o = null;
            o = LEAP._match(d, LEAP.imgattach.d);
            if (o != null) {
                var v = o.getAttribute("btntype");
                var q = o.getAttribute("btnuser");
                if (v == "false") {
                    return;
                } else {
                    if (q == "1") {
                        var m = null;
                        if (LEAP.userInfo.userflag != null && LEAP.userInfo.userflag != "") {
                            m = LEAP.userInfo.userflag;
                        } else {
                            if (LEAP.userInfo.fullName != null && LEAP.userInfo.fullName != "") {
                                m = LEAP.userInfo.fullName;
                            }
                        }
                        var j = d.getAttribute("datauser");
                        if (m != j) {
                            return;
                        }
                    }
                }
            }
            if (r == "li_mask" || r == "li_img" || r == "li_del") {
                var l = d.getAttribute("dataid");
                if (l != null) {
                    var h = LEAP.getElements("[ctf=li_del]", o);
                    if (h != null) {
                        for (var n = 0; n < h.length; n++) {
                            var g = h[n].getAttribute("dataid");
                            if (g != l) {
                                h[n].className = "imgannex_imglist_del";
                            } else {
                                h[n].className = "imgannex_imglist_del1";
                            }
                        }
                    }
                }
            } else {
                var h = LEAP.getElements("[ctf=li_del]", o);
                if (h != null) {
                    for (var n = 0; n < h.length; n++) {
                        h[n].className = "imgannex_imglist_del";
                    }
                }
            }
        } finally {}
    };
    LEAP.imgattach.init();
    LEAP.inputext = {};
    LEAP.inputext.div = null;
    LEAP.inputext._init = function() {
        LEAP.addEvent(document.body, "mousedown", LEAP.inputext.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keypress", LEAP.inputext.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "keyup", LEAP.inputext.uiProcess, null, null, true);
        if (LEAP.isIE) {
            LEAP.addEvent(document.body, "focusin", LEAP.inputext.uiProcess, null, null, true);
            LEAP.addEvent(document.body, "focusout", LEAP.inputext.uiProcess, null, null, true);
        } else {
            document.addEventListener("focus", LEAP.inputext.uiProcess, true);
            document.addEventListener("blur", LEAP.inputext.uiProcess, true);
        }
        var d = document.createElement("div");
        d.className = "bdsug bdsugbg";
        d.style.height = "auto";
        d.style.display = "none";
        d.style.position = "absolute";
        d.setAttribute("ctf", "inputext_list");
        d.innerHTML = '<ul ctf="inputext_list_con"></ul>';
        document.body.appendChild(d);
        LEAP.inputext.div = d;
        d = null;
        LEAP.addEvent(LEAP.inputext.div, "mouseover", LEAP.inputext.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.inputext._init);
    };
    LEAP.inputext.lastctid = null;
    LEAP.inputext.uiProcess = function(r) {
        var m = null;
        var d = null;
        var h = null;
        var n = null;
        if (r != null && r.e != null && r.e.type != null) {
            n = r.e.type;
        }
        if (n != null) {
            d = r.e.srcElement;
            m = r.e;
            if (LEAP.isIE) {
                h = m.keyCode;
            } else {
                h = m.which;
            }
        } else {
            m = r;
            d = r.target;
            h = m.which;
            n = r.type;
        }
        var o = d.getAttribute("ctf");
        try {
            if (!o || o.indexOf("inputext") != 0) {
                return;
            }
            if (n == "mousedown") {
                if (o == "inputext_lif") {
                    d = d.parentElement;
                }
                if (d.tagName == "LI") {
                    LEAP.inputext._autosetv(LEAP.getElement("[ctid=" + LEAP.inputext.lastctid + "]"), true);
                    LEAP.stopEvent(m);
                    return;
                }
            }
            if (n == "keypress") {
                if (h == 40 || h == 38) {
                    LEAP.stopEvent(m);
                }
                if (h == 27) {
                    LEAP.inputext._autosetv(d, false);
                    LEAP.stopEvent(m);
                }
                return;
            }
            if (n == "focusout" || n == "blur") {
                LEAP.inputext._autosetv(d, true);
                return;
            }
            if (n == "focusin" || n == "focus") {
                LEAP.inputext.lastctid = LEAP.ctid(d);
                LEAP.inputext.show(d, true);
                return;
            }
            if (n == "mouseover" && o && o.indexOf("inputext_") == 0) {
                if (o == "inputext_lif") {
                    d = d.parentElement;
                }
                if (d.tagName == "LI") {
                    LEAP.removeCSS(LEAP.getElement(".bdsug-s", LEAP.inputext.div), "bdsug-s", false);
                    LEAP.addCSS(d, "bdsug-s", false);
                }
                return;
            }
            if (n == "keyup" && o == "inputext_main") {
                if (h == 13) {
                    LEAP.inputext._autosetv(d, true);
                    LEAP.stopEvent(m);
                    return;
                }
                LEAP.inputext.lastctid = LEAP.ctid(d);
                if (h == 40) {
                    var q = LEAP.getElement(".bdsug-s", LEAP.inputext.div);
                    if (q) {
                        var g = q.getAttribute("_sn");
                        var l = LEAP.getElement("[_sn=" + (g * 1 + 1) + "]", LEAP.inputext.div);
                        if (!l) {
                            l = LEAP.getElement("[_sn=1]", LEAP.inputext.div);
                        }
                        if (l) {
                            LEAP.addCSS(l, "bdsug-s", false);
                        }
                        LEAP.removeCSS(q, "bdsug-s", false);
                        l = q = null;
                    } else {
                        var j = LEAP.getElement("li:first", LEAP.inputext.div.children[0]);
                        if (j) {
                            LEAP.addCSS(j, "bdsug-s", false);
                        }
                    }
                    LEAP.stopEvent(m);
                    return;
                } else {
                    if (h == 38) {
                        var q = LEAP.getElement(".bdsug-s", LEAP.inputext.div);
                        if (q) {
                            var g = q.getAttribute("_sn");
                            var l = LEAP.getElement("[_sn=" + (g * 1 - 1) + "]", LEAP.inputext.div);
                            if (!l) {
                                l = LEAP.getElement("li:last", LEAP.inputext.div);
                            }
                            if (l) {
                                LEAP.addCSS(l, "bdsug-s", false);
                            }
                            LEAP.removeCSS(q, "bdsug-s", false);
                            l = q = null;
                        } else {
                            var p = LEAP.getElement("li:last", LEAP.inputext.div.children[0]);
                            if (p) {
                                LEAP.addCSS(p, "bdsug-s", false);
                            }
                        }
                        LEAP.stopEvent(m);
                        return;
                    }
                }
                if (h == 27) {
                    LEAP.inputext._autosetv(d, false);
                    return;
                } else {
                    if (h == 39 || h == 40) {
                        return;
                    }
                }
                LEAP.inputext.show(d);
            }
        } finally {
            d = r = null;
        }
    };
    LEAP.inputext._autosetv = function(h, g) {
        if (!h) {
            return;
        }
        LEAP.inputext.div.style.display = "none";
        if (g) {
            var d = LEAP.getElement(".bdsug-s", LEAP.inputext.div);
            if (d) {
                h.value = d.getAttribute("_text");
                h.setAttribute("_value", d.getAttribute("_value"));
                h.setAttribute("_text", d.getAttribute("_text"));
            } else {
                h.value = "";
                h.setAttribute("_value", "");
                h.setAttribute("_text", "");
            }
        } else {
            h.value = h.getAttribute("_text");
        }
    };
    LEAP.inputext.lastsn = 0;
    LEAP.inputext.show = function(d, g) {
        if (d.value) {
            var r = d.getAttribute("_pv");
            if (r == d.value && !g) {
                return;
            }
            d.setAttribute("_pv", d.value);
            LEAP.inputext.lastsn++;
            var m = LEAP.ctid(d);
            var n = d.getAttribute("service");
            if (String.isEmpty(n)) {
                n = "systemui_searchorg";
            }
            var p = d.getAttribute("showfield");
            if (String.isEmpty(p)) {
                p = "cnname";
            }
            var l = d.getAttribute("valuefield");
            if (String.isEmpty(l)) {
                l = "syscode";
            }
            var h = null;
            var q = d.getAttribute("filterfn");
            if (!String.isEmpty(q)) {
                var j = LEAP.getLoadedModule(d.getAttribute("instance"));
                if (j != null && j[q]) {
                    try {
                        h = j[q](d);
                    } catch (o) {}
                }
            }
            LEAP.request2({
                name: n,
                par: {
                    showfield: p,
                    valuefield: l,
                    value: d.value,
                    sp: h
                },
                callback: LEAP.inputext.callback,
                arg: {
                    ctid: "[ctid=" + m + "]",
                    sn: LEAP.inputext.lastsn
                }
            });
            LEAP.request("systemui_searchorg", {
                par: d.value
            });
        } else {
            LEAP.inputext.div.children[0].innerHTML = "";
            LEAP.inputext.div.style.display = "none";
        }
        d = null;
    };
    LEAP.inputext.callback = function(j, g) {
        var n = LEAP.getElement(g.ctid);
        if (!n) {
            return;
        }
        if (LEAP.inputext.lastsn != g.sn) {
            return;
        }
        if (j) {
            var o = LEAP.getAbsolutePos(n);
            LEAP.inputext.div.style.zIndex = "9999";
            LEAP.inputext.div.style.left = o.x + "px";
            LEAP.inputext.div.style.top = (o.y + n.offsetHeight) + "px";
            LEAP.inputext.div.style.display = "block";
            var d = n.getAttribute("showfield");
            if (String.isEmpty(d)) {
                d = "cnname";
            }
            var l = n.getAttribute("valuefield");
            if (String.isEmpty(l)) {
                l = "syscode";
            }
            var m = new StringBuffer();
            for (var h = 0; h < j.length; h++) {
                m.append('<li _text="' + j[h][d] + '" style="cursor:pointer;" ctf="inputext_li" _value="');
                m.append(j[h][l]);
                m.append('" class="bdsug-overflow');
                if (h == 0) {
                    m.append(" bdsug-s");
                }
                m.append('" _sn=' + (h + 1) + ">");
                m.append(j[h].cnname);
                if (j[h].parent) {
                    m.append('<font ctf="inputext_lif" style="color:grey;float:right">< ').append(j[h].parent).append("</font>");
                }
                m.append("</li>");
            }
            LEAP.inputext.div.children[0].innerHTML = m.toString();
        } else {
            LEAP.inputext.div.children[0].innerHTML = "";
            LEAP.inputext.div.style.display = "none";
        }
    };
    LEAP.inputext.getValue = function(g) {
        try {
            var d = g.getAttribute("_value");
            if (String.isEmpty(d)) {
                return null;
            }
            return d;
        } finally {
            g = null;
        }
    };
    LEAP.inputext.setValue = function(d) {
        try {
            d.value = "";
            d.setAttribute("_value", "");
            d.setAttribute("_text", "");
            d.setAttribute("_pv", "");
        } finally {
            d = null;
        }
    };
    LEAP.inputext.init = function() {
        if (document != null && document.body != null) {
            LEAP.inputext._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.inputext._init);
        }
        ElementEventManager.addManagedEventType(LEAP.inputext.d, "valueChange");
    }();
    LEAP.linkmodule2 = new Object();
    LEAP.linkmodule2.d = "linkmodule2";
    LEAP.linkmodule2.dtpos = [{
        text: "查看",
        flag: 1,
        issys: 1
    }, {
        text: "修改",
        flag: 2,
        issys: 1
    }, {
        text: "删除",
        flag: 3,
        issys: 1
    }];
    LEAP.linkmodule2.menu = null;
    LEAP.linkmodule2.menuItemStr = '<li issys=@issys ctf=linkmodule2_menuitem flag=@flag class="lg2menu_item"><a ctf=linkmodule2_menuitem flag=@flag href="javascript:">@text</a></li>';
    LEAP.linkmodule2._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.linkmodule2.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.linkmodule2._init);
        ElementEventManager.addManagedEventType(LEAP.linkmodule2.d, "rowOperationClick");
    };
    LEAP.linkmodule2.init = function() {
        if (document != null && document.body != null) {
            LEAP.linkmodule2._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.linkmodule2._init);
        }
    }();
    LEAP.linkmodule2.onRowOP = function(p, n, F, B, q, I, r, u, y, H) {
        if (p != null && p == "1") {
            var A = LEAP.linkmodule2.getdef(n);
            if (A != null) {
                var z = null;
                var C = null;
                var G = n.getAttribute(commfields.instance);
                var l = null;
                if (G != null) {
                    l = LEAP.getLoadedModule(G);
                }
                if (l != null) {
                    if (F == "1") {
                        z = "view";
                        C = A.viewmodule;
                        if (C == null) {
                            C = A.infomodule;
                        }
                    } else {
                        if (F == "2" && !LEAP.linkmodule2.isReadOnly(n)) {
                            z = "modify";
                            C = A.modifymodule;
                            if (C == null) {
                                C = A.infomodule;
                            }
                        } else {
                            if (F == "3" && !LEAP.linkmodule2.isReadOnly(n)) {
                                if (window.confirm("确定删除该数据?")) {
                                    if (!B) {
                                        var D = A.deletemodule;
                                        if (D == null) {
                                            D = A.datamodule;
                                        }
                                        I.beanname = D;
                                        if (l.WFMode != null && l.WFMode) {
                                            var o = l.getDeleteBean(I, [A.deletepk]);
                                            var d = A.service_delete;
                                            if (String.isEmpty(d)) {
                                                d = "beanDelete";
                                            }
                                            var J = l.childModuleSubmit(d, I, 2);
                                            if (J == true) {
                                                LEAP.linkmodule2.removeRow(q);
                                            }
                                        } else {
                                            if (l.beanDelete(I, [A.deletepk]) == true) {
                                                LEAP.linkmodule2.removeRow(q);
                                            }
                                        }
                                    } else {
                                        LEAP.linkmodule2.removeRow(q);
                                    }
                                }
                            }
                        }
                    }
                    if (z != null) {
                        var j = l.forms(C, z);
                        j.module.sysBeforeSubmit = null;
                        j.module.sysSubmitSucess = null;
                        j.module.___linkct = null;
                        j.module.___linkrow = null;
                        j.module.outerSubmit = null;
                        j.module.isInLinkModule2 = null;
                        if (l.WFMode != null && l.WFMode) {
                            j.module.isInLinkModule2 = true;
                        }
                        if (z == "modify") {
                            j.module.___linkct = n;
                            j.module.sysBeforeSubmit = LEAP.linkmodule2.sysBeforeSubmit;
                            j.module.sysSubmitSucess = LEAP.linkmodule2.sysSubmitSucess;
                            j.module.___linkrow = q;
                            if (B != null && B == "1") {
                                j.module.submitMode = 2;
                                j.module.outerSubmit = LEAP.linkmodule2.outerSubmit;
                            } else {
                                j.module.submitMode = 1;
                            }
                        }
                        j.module.setPageData(I);
                        j.show();
                        j = null;
                    }
                }
            }
        } else {
            var v = null;
            var g = n.parentElement;
            var x = LEAP.getElements("tr", g);
            var h = null;
            if (x != null && x.length >= 2) {
                h = x[1];
                var w = h.children[u.cellIndex];
                if (w != null) {
                    v = w.getAttribute("st");
                }
            }
            ElementEventManager.handleEvent(n, "rowOperationClick", {
                row: q,
                cell: u,
                flag: F,
                src: r,
                index: q.sectionRowIndex,
                cellIndex: u.cellIndex,
                data: I,
                md: H,
                text: y,
                hasSaveData: B == null || B != "1",
                srcst: v
            });
        }
        p = n = F = B = q = I = r = u = y = H = null;
    };
    LEAP.linkmodule2.uiProcess = function(n) {
        var q = n.e.srcElement;
        var I = n.e;
        var l = n.e.type;
        var N = q.tagName;
        var h = null;
        var j = null;
        try {
            var g = q.getAttribute(commfields.ctf);
            if (l == "click") {
                LEAP.linkmodule2.hideMenu();
            }
            if (g != null && l == "click" && g == "linkmodule2_tpo2" && q.tagName == "A") {
                var j = LEAP.getElement(q.getAttribute("elementFind"));
                var p = q.parentNode.parentNode;
                var M = p.data;
                var G = q.getAttribute("flag");
                var o = q.getAttribute("issys");
                var r = q.parentNode;
                var x = q.innerText;
                var L = null;
                var B = p.getAttribute("___islinknewrow");
                LEAP.linkmodule2.onRowOP(o, j, G, B, p, M, q, r, x, L);
                q = j = p = M = G = null;
            }
            if (g != null && l == "click" && g.startWith("linkmodule2_btn")) {
                var j = LEAP.getElement(q.parentNode.getAttribute("elementfind"));
                if (j) {
                    var K = j.getAttribute("page_num");
                    if (K == null) {
                        K = 1;
                    }
                    var z = j.getAttribute("page_count");
                    if (z == null) {
                        z = -1;
                    }
                    K = LEAP.tonum(K);
                    z = LEAP.tonum(z);
                    if (g == "linkmodule2_btnfirst") {
                        K = 1;
                    } else {
                        if (g == "linkmodule2_btnprev") {
                            K -= 1;
                        } else {
                            if (g == "linkmodule2_btnnext") {
                                K += 1;
                            } else {
                                if (g == "linkmodule2_btnlast") {
                                    K = z;
                                }
                            }
                        }
                    }
                    if (K < 1) {
                        K = 1;
                    }
                    if (K > z) {
                        K = 1;
                    }
                    LEAP.linkmodule2.refresh(j, K);
                }
            }
            if (g != null && l == "click" && g == "linkmodule2_menuitem") {
                LEAP.linkmodule2.hideMenu();
                var w = q;
                if (w.tagName != "LI") {
                    w = q.parentNode;
                }
                if (w.tagName != "LI") {
                    w = w.parentNode;
                }
                var v = w.parentNode;
                var j = LEAP.getElement(v.getAttribute("elementFind"));
                var r = LEAP.getElement(v.getAttribute("TDFind"));
                var p = r.parentNode;
                var F = LEAP.ctid(p);
                var H = "TR[ctid=" + F + "]";
                var M = p.data;
                var x = LEAP.getElement("A:first", w).innerText;
                var G = w.getAttribute("flag");
                var L = r.getAttribute("md");
                var o = w.getAttribute("issys");
                var B = p.getAttribute("___islinknewrow");
                LEAP.linkmodule2.onRowOP(o, j, G, B, p, M, q, r, x, L);
                w = v = j = r = p = M = null;
            } else {
                if (g != null && g == LEAP.linkmodule2.d + "_tpo") {
                    var y = q.tpos;
                    if (y != null) {
                        var D = q.getAttribute("elementctid");
                        j = LEAP.getElement("[ctid=" + D + "]:first");
                        if (j != null) {
                            var C = j.getAttribute("enablemenu");
                            if (C == null || C != 0) {
                                var u = LEAP.ctid(q);
                                LEAP.linkmodule2.showMenu("[ctid=" + D + "]:first", q.tagName + "[ctid=" + u + "]:first", y, I.clientX, I.clientY);
                            }
                        }
                    }
                }
            }
            if (g != null && g.indexOf(LEAP.linkmodule2.d + "_") == 0) {
                j = LEAP._match(q, LEAP.linkmodule2.d);
                if (j != null) {
                    var J = j.getAttribute(commfields.instance);
                    if (J != null) {
                        h = LEAP.getLoadedModule(J);
                    }
                    if (h != null) {
                        if (g == "linkmodule2_add" && !LEAP.linkmodule2.isReadOnly(j)) {
                            var A = q.getAttribute("module");
                            if (A != null) {
                                var d = h.forms(A, "insert");
                                d.module.outerSubmit = LEAP.linkmodule2.outerSubmit;
                                d.module.sysBeforeSubmit = null;
                                d.module.sysSubmitSucess = null;
                                d.module.isInLinkModule2 = null;
                                if (h.pageMode != "insert" && h.WFMode != null && h.WFMode) {
                                    d.module.isInLinkModule2 = true;
                                }
                                if (h.pageMode == "insert") {
                                    d.module.submitMode = 2;
                                } else {
                                    d.module.sysBeforeSubmit = LEAP.linkmodule2.sysBeforeSubmit;
                                    d.module.sysSubmitSucess = LEAP.linkmodule2.sysSubmitSucess;
                                    d.module.submitMode = 1;
                                }
                                d.module.___linkct = j;
                                d.module.clearPageData();
                                d.show();
                                d = null;
                            }
                        }
                    }
                }
            }
        } finally {
            I = q = n = h = j = null;
        }
    };
    LEAP.linkmodule2.removeRow = function(j) {
        var h = j.getAttribute("isinrange");
        if (h == null || h != "1") {
            j.parentNode.removeChild(j);
        } else {
            var d = j;
            var g = false;
            while (true) {
                if (d != null && d.tagName == "TR") {
                    var h = d.getAttribute("isinrange");
                    if (h == null || h != "1") {
                        break;
                    }
                    d = LEAP.linkmodule2._nextRow(d);
                } else {
                    g = true;
                    break;
                }
            }
            LEAP.linkmodule2.clearRowData(j);
            if (g) {
                j.parentNode.appendChild(j);
            } else {
                j.parentNode.insertBefore(j, d);
            }
        }
        j = null;
    };
    LEAP.linkmodule2.hideMenu = function() {
        if (LEAP.linkmodule2.menu != null && LEAP.linkmodule2.menu.style.display != "none") {
            LEAP.linkmodule2.menu.style.display = "none";
        }
    };
    LEAP.linkmodule2.showMenu = function(n, w, p, v, q) {
        var m = LEAP.getElement(n);
        if (m && p && p.length > 0) {
            if (LEAP.linkmodule2.menu == null) {
                var g = LEAP.linkmodule2.menu = document.createElement("UL");
                g.className = "lg2menu_ul";
                LEAP.addEvent(g, "mouseleave ", LEAP.linkmodule2.hideMenu, null, null, true);
                document.body.appendChild(g);
                g = null;
            }
            LEAP.linkmodule2.menu.style.width = "146px";
            LEAP.linkmodule2.menu.innerHTML = "";
            LEAP.linkmodule2.menu.style.left = v - 10 + "px";
            LEAP.linkmodule2.menu.style.top = q - 10 + "px";
            LEAP.linkmodule2.menu.setAttribute("elementFind", n);
            LEAP.linkmodule2.menu.setAttribute("TDFind", w);
            var h = p.length;
            var o = new StringBuffer();
            var d = LEAP.linkmodule2.isReadOnly(m);
            for (var j = 0; j < h; j++) {
                var A = p[j];
                var u = 0;
                if (A.issys != null) {
                    u = A.issys;
                }
                if (d && u != null && u == 1) {
                    if (A.flag == 2 || A.flag == 3) {
                        continue;
                    }
                }
                var z = LEAP.linkmodule2.menuItemStr.replaceall("@flag", A.flag).replace("@text", A.text).replace("@issys", u);
                o.append(z);
            }
            LEAP.linkmodule2.menu.innerHTML = o.toString();
            LEAP.linkmodule2.menu.style.display = "block";
        }
        m = null;
    };
    LEAP.linkmodule2._nextRow = function(g) {
        if (g) {
            var d = g.nextSibling;
            if (d && d.tagName == "TR") {
                return d;
            }
        }
        return null;
    };
    LEAP.linkmodule2.clear = function(j) {
        var g = null;
        var q = null;
        if (j == null) {
            return null;
        }
        try {
            j = LEAP._check(j, LEAP.linkmodule2.d);
            if (j == null) {
                return;
            }
            var q = j;
            if (j.tagName != "TR") {
                q = LEAP._match(j, "TD", "tagName", 9);
            }
            if (q == null) {
                return;
            }
            var d = LEAP.linkmodule2.getdef(j);
            if (d == null) {
                return;
            }
            if (d && d.datamodule && d.filtername) {
                var n = j.getAttribute(commfields.instance);
                if (n) {
                    g = LEAP.getLoadedModule(n);
                    if (!g) {
                        return;
                    }
                    var p = g.getElement(d.resultfind);
                    var m = d.skiprow;
                    var q = p;
                    for (var l = 0; l < m; l++) {
                        if (q.getAttribute("iswaitrow") && q.getAttribute("iswaitrow") == 1) {
                            q = rowLEAP.linkmodule2._nextRow(q);
                        }
                        if (q == null) {
                            break;
                        }
                        LEAP.linkmodule2.clearRowData(q);
                        if (LEAP.linkmodule2._nextRow(q) == null) {
                            break;
                        }
                        q = LEAP.linkmodule2._nextRow(q);
                    }
                    if (m == 0) {
                        m = 1;
                    }
                    var h = q.parentNode.parentNode.rows[p.rowIndex + m];
                    if (h != null) {
                        if (h.getAttribute("iswaitrow") && h.getAttribute("iswaitrow") == 1 && LEAP.linkmodule2._nextRow(h)) {
                            h = LEAP.linkmodule2._nextRow(h);
                        }
                        while (h.getAttribute("linmodule2_row") == "1") {
                            var o = LEAP.linkmodule2._nextRow(h);
                            h.parentNode.removeChild(h);
                            if (o == null) {
                                break;
                            }
                            h = o;
                        }
                        h = null;
                    }
                }
            }
        } finally {
            g = q = j = null;
        }
    };
    LEAP.linkmodule2.clearRowData = function(j) {
        j.data = null;
        var g = j.cells.length;
        j.data = null;
        j.parameter = null;
        j.removeAttribute("___isbinddatarow");
        j.removeAttribute("___islinknewrow");
        j.removeAttribute("linmodule2_row");
        j.removeAttribute("data");
        for (var h = 0; h < g; h++) {
            var d = j.cells[h];
            j.cells[h].innerHTML = "";
            d.removeAttribute("title");
            d.removeAttribute("tpos");
        }
        j = null;
    };
    LEAP.linkmodule2.isReadOnly = function(d) {
        try {
            if (d) {
                var g = d.getAttribute("readonly");
                if (g && g == "1") {
                    return true;
                }
                return false;
            }
            return false;
        } finally {
            d = null;
        }
    };
    LEAP.linkmodule2.getdef = function(h) {
        var x = null;
        var o = h.getAttribute(commfields.ct);
        if (o == LEAP.linkmodule2.d) {
            x = h._def;
            if (x == null) {
                x = new Object();
                h._def = x;
                x.lcv = h.getAttribute("lcv");
                x.headerrow = h.getAttribute("headerrow");
                x.resultrow = h.getAttribute("resultrow");
                x.skiprow = h.getAttribute("skiprow");
                x.datamodule = h.getAttribute("datamodule");
                x.filtername = h.getAttribute("filtername");
                x.instance = h.getAttribute(commfields.instance);
                x.tpo = h.getAttribute("tpo");
                x.infomodule = h.getAttribute("infomodule");
                x.viewmodule = h.getAttribute("viewmodule");
                x.modifymodule = h.getAttribute("modifymodule");
                x.deletemodule = h.getAttribute("deletemodule");
                x.deletepk = h.getAttribute("deletepk");
                x.search_fields = h.getAttribute("search_fields");
                var A = h.getAttribute("parentfield");
                if (A) {
                    x.parentfield = A;
                } else {
                    x.parentfield = "id";
                }
                try {
                    var P = h.getAttribute("initvalue");
                    if (P) {
                        var R = P.split(",");
                        x.initvalue = {};
                        for (var K = 0; K < R.length; K++) {
                            var L = R[K].split("=");
                            x.initvalue[L[0]] = L[1];
                        }
                    }
                } catch (w) {}
                if (!String.isEmpty(x.search_fields)) {
                    x.search_fields = x.search_fields.split(",");
                } else {
                    x.search_fields = null;
                }
                x.service_delete = h.getAttribute("service_delete");
                x.btnpart = h.getAttribute("btnpart");
                if (!String.isEmpty(x.btnpart)) {
                    var g = LEAP.getLoadedModule(h.getAttribute(commfields.instance));
                    if (g != null) {
                        var U = g.getST(x.btnpart);
                        if (U) {
                            x.useSplitPage = true;
                            U.setAttribute("elementfind", h.tagName + "[ctid=" + LEAP.ctid(h) + "]");
                        }
                    }
                }
                x.pageSize = h.getAttribute("pageSize");
                if (String.isEmpty(x.deletepk)) {
                    x.deletepk = "id";
                }
                x.searchpar = h.getAttribute("searchpar");
                x.order = h.getAttribute("order");
                var J = LEAP.getElement("[ctf=linkmodule2_add]:first", h);
                if (J != null) {
                    var C = J.getAttribute("module");
                    if (!String.isEmpty(C)) {
                        x.insertmodule = C;
                    }
                    if (x.infomodule == null) {
                        x.infomodule = x.insertmodule;
                    }
                }
                if (x.infomodule != null && String.isEmpty(x.infomodule)) {
                    delete(x.infomodule);
                }
                if (x.viewmodule != null && String.isEmpty(x.viewmodule)) {
                    delete(x.viewmodule);
                }
                if (x.modifymodule != null && String.isEmpty(x.modifymodule)) {
                    delete(x.modifymodule);
                }
                if (x.deletemodule != null && String.isEmpty(x.deletemodule)) {
                    delete(x.deletemodule);
                }
                if (x.headerrow == null) {
                    x.headerrow = 0;
                }
                if (x.resultrow == null) {
                    x.resultrow = 1;
                }
                if (x.skiprow == null) {
                    x.skiprow = 0;
                }
                x.resultrow = x.resultrow * 1;
                x.skiprow = x.skiprow * 1;
                x.headerrow = x.headerrow * 1;
                var O = LEAP.ctid(h);
                x.ctid = O;
                var q = h;
                if (h.tagName != "TR") {
                    q = LEAP._match(h, "TD", "tagName", 9);
                }
                var D = q.getAttribute("ctid");
                if (D == null) {
                    D = UUID.cID();
                    q.setAttribute("ctid", D);
                }
                x.rowfind = "TR[ctid=" + D + "]:first";
                var T = q.parentNode.parentNode.rows[x.resultrow + q.rowIndex];
                var y = T.getAttribute("ctid");
                if (y == null) {
                    y = UUID.cID();
                    T.setAttribute("ctid", y);
                }
                x.resultfind = "TR[ctid=" + y + "]:first";
                x.headers = [];
                var N = q.parentNode.parentNode.rows[x.headerrow + q.rowIndex];
                var M = N.cells;
                var B = M.length;
                for (var K = 0; K < B; K++) {
                    var I = new Object();
                    var d = M[K];
                    var m = d.getAttribute("colSpan");
                    var n = d.getAttribute("rowSpan");
                    I.colorexp = d.getAttribute("colorexp");
                    I.imgexp = d.getAttribute("imgexp");
                    var S = d.getAttribute("tpo");
                    if (!String.isEmpty(S)) {
                        I.tpos = [];
                        var z = S.split("|");
                        var r = z.length;
                        for (var F = 0; F < r; F++) {
                            var Q = z[F];
                            var v = Q.split(":");
                            var u = v[0];
                            var H = v[1];
                            var p = 0;
                            if (v.length > 2 && v[2] == "1") {
                                p = 1;
                            }
                            I.tpos.add({
                                text: u,
                                flag: H,
                                issys: p
                            });
                        }
                    }
                    if (n != null && x.skiprow > 2 && n >= x.skiprow) {
                        I.isskip = true;
                        var G = UUID.cID();
                        d.setAttribute("ctid", G);
                        I.find = "TD[ctid=" + G + "]:first";
                    } else {
                        I.isskip = false;
                    }
                    I.rowspan = n;
                    I.colspan = m;
                    I.bt = d.getAttribute("bt");
                    I.md = d.getAttribute("md");
                    I.code = d.getAttribute("code");
                    x.headers.add(I);
                }
            }
            return x;
        }
        h = null;
    };
    LEAP.linkmodule2.refresh = function(h, I) {
        var g = null;
        var n = null;
        if (h == null) {
            return null;
        }
        try {
            h = LEAP._check(h, LEAP.linkmodule2.d);
            if (h == null) {
                return;
            }
            LEAP.linkmodule2.clear(h);
            var n = h;
            if (h.tagName != "TR") {
                n = LEAP._match(h, "TD", "tagName", 9);
            }
            if (n == null) {
                return;
            }
            var w = LEAP.linkmodule2.getdef(h);
            if (w == null) {
                return;
            }
            if (w && w.datamodule && w.filtername) {
                var H = h.getAttribute(commfields.instance);
                if (H) {
                    g = LEAP.getLoadedModule(H);
                    if (!g || !g.data) {
                        return;
                    }
                }
                var y = g.data[w.parentfield];
                var D = new SearchParameters();
                D.setName(w.datamodule);
                D.addParameter(w.filtername, y, 11);
                if (w.order) {
                    D.setOrder(w.order);
                }
                if (w.search_fields != null) {
                    var u = w.search_fields.length;
                    for (var C = 0; C < u; C++) {
                        var x = w.search_fields[C];
                        if (!String.isEmpty(x)) {
                            x = x.trim();
                            D.addField(x);
                        }
                    }
                }
                var o = w.searchpar;
                if (!String.isEmpty(o)) {
                    D.extendQuery = o;
                }
                var z = h.getAttribute("st");
                if (z != null) {
                    var A = "buildSearchQuery_" + z;
                    var r = g[A];
                    if (r != null) {
                        try {
                            r.call(g, D);
                        } catch (G) {}
                    }
                }
                var O = h.getAttribute("service_search");
                if (O == null) {
                    O = "DynaSearch";
                }
                if (O.toLowerCase().startWith("lwfp")) {
                    D = [D];
                }
                if (z != null) {
                    var A = "onGetSearchParameter_" + z;
                    var r = g[A];
                    if (r != null) {
                        try {
                            var M = r.call(g, D);
                            if (M != null) {
                                D = M;
                            }
                        } catch (G) {}
                    }
                }
                h.removeAttribute("page_num");
                h.removeAttribute("page_count");
                var L = h.getAttribute("btnpart");
                if (!String.isEmpty(L)) {
                    var g = LEAP.getLoadedModule(h.getAttribute(commfields.instance));
                    if (g != null) {
                        L = g.getST(L);
                        if (L) {
                            var q = LEAP.getElement("LABEL:first", L);
                            if (q) {
                                q.innerHTML = "正在查询...";
                            }
                        }
                    }
                }
                var K = h.getAttribute("hasmask");
                if (K == null) {
                    h.setAttribute("hasmask", "1");
                    var n = null;
                    n = document.createElement("tr");
                    var m = h.getAttribute("_cellcount");
                    if (m == null) {
                        var B = h.cells.length;
                        for (var C = 0; C < B; C++) {
                            var J = h.cells[C];
                            m += J.colSpan;
                        }
                    }
                    var p = document.createElement("td");
                    p.colSpan = m;
                    n.setAttribute("iswaitrow", "1");
                    n.appendChild(p);
                    p.style.textAlign = "center";
                    p.innerHTML = '<img src="' + leapconfig.server + 'LEAP/Resource/images/info/p.gif" style="width:50px;height:16px;">&nbsp&nbsp正在加载数据...';
                    if (h.rowIndex == h.parentNode.rows.length - 1) {
                        h.parentNode.appendChild(n);
                    } else {
                        h.parentNode.insertBefore(n, h.parentNode.rows[h.parentNode.rows.length - 1]);
                    }
                    var j = "TR[ctid=" + LEAP.ctid(n) + "]:first";
                    h.setAttribute("maskfind", j);
                } else {
                    var d = LEAP.getElement(h.getAttribute("maskfind"), h.parentNode);
                    d.style.display = "block";
                    var N = LEAP.getElement("img:first", d);
                    N.src = "";
                    N.src = leapconfig.server + "LEAP/Resource/images/info/p.gif";
                }
                var F = h.getAttribute("_lsn");
                if (F == null) {
                    F = 0;
                }
                F = F + 1;
                h.setAttribute("_lsn", F);
                if (w.useSplitPage) {
                    if (I != null) {
                        D.pageNum = I;
                    }
                    if (w.pageSize != null) {
                        D.pageSize = w.pageSize * 1;
                    }
                    if (D.pageNum == null || D.pageNum < 1) {
                        D.pageNum = 1;
                    }
                    if (D.pageSize == null || D.pageSize < 1) {
                        D.pageSize = 6;
                    }
                }
                var v = g.request2({
                    name: O,
                    par: {
                        par: D
                    },
                    callback: LEAP.linkmodule2.beginBindData,
                    arg: {
                        ctid: LEAP.ctid(h),
                        sn: F
                    }
                });
            }
        } finally {
            n = g = h = null;
        }
    };
    LEAP.linkmodule2.setValue = function(j, l, g, h) {
        if (l == null) {
            LEAP.linkmodule2.clear(j);
        }
        var m = LEAP.ctid(j);
        var n = j.getAttribute("_lsn");
        if (n == null) {
            n = 0;
        }
        n = n + 1;
        j.setAttribute("_lsn", n);
        var d = {
            ctid: LEAP.ctid(j),
            sn: n
        };
        LEAP.linkmodule2.beginBindData(l, d, g, h);
    };
    LEAP.linkmodule2.beginBindData = function(w, v, p, h) {
        var o = v.ctid;
        var g = v.sn;
        var l = LEAP.getElement("[ctid=" + o + "]");
        try {
            if (g == l.getAttribute("_lsn")) {
                if (w != null) {
                    l.setAttribute("page_num", w.pageNum);
                    l.setAttribute("page_count", w.pageCount);
                } else {
                    l.removeAttribute("page_num");
                    l.removeAttribute("page_count");
                }
                var n = l.getAttribute("btnpart");
                if (!String.isEmpty(n)) {
                    var d = LEAP.getLoadedModule(l.getAttribute(commfields.instance));
                    if (d != null) {
                        n = d.getST(n);
                        if (n) {
                            var r = LEAP.getElement("LABEL:first", n);
                            if (r) {
                                if (w == null) {
                                    var u = LEAP.table.getPageText(l).replace("@pageNum", 0).replace("@endNum", 0).replace("@beginNum", 0).replace("@pageCount", 0).replace("@size", 0).replace("@count", 0).replaceall("@pageSize", 0);
                                    r.innerHTML = u;
                                } else {
                                    var u = LEAP.table.getPageText(l).replace("@pageNum", w.pageNum).replace("@endNum", w.endNum).replace("@beginNum", w.beginNum).replace("@pageCount", w.pageCount).replace("@pageSize", w.size).replace("@count", w.count);
                                    r.innerHTML = u;
                                }
                            }
                        }
                    }
                }
                var q = LEAP.getElement(l.getAttribute("maskfind"), l.parentNode);
                if (q) {
                    q.style.display = "none";
                }
                if (w != null) {
                    var m = LEAP.convertResult(w);
                    if (p == null) {
                        p = false;
                    }
                    for (var j = 0; j < m.length; j++) {
                        LEAP.linkmodule2.addRow(l, null, m[j], p, h);
                    }
                }
            }
        } finally {
            l.data = LEAP.convertResult(w);
        }
    };
    LEAP.linkmodule2.addRow = function(p, u, o, g, m) {
        var h = LEAP.linkmodule2.getdef(p);
        if (h != null) {
            var w = p.getAttribute(commfields.instance);
            var j = LEAP.getLoadedModule(w);
            var x = j.getElement(h.resultfind);
            var z = x;
            var v = 0;
            var r = false;
            while (true) {
                var d = z.getAttribute("___isbinddatarow");
                if (!r && d != null && d == "1") {
                    if (LEAP.linkmodule2._nextRow(z) != null) {
                        z = LEAP.linkmodule2._nextRow(z);
                    } else {
                        r = true;
                    }
                    v++;
                    continue;
                } else {
                    if (r) {
                        var y = document.createElement("TR");
                        for (var n = 0; n < z.cells.length; n++) {
                            var l = document.createElement("TD");
                            l.setAttribute("rowspan", z.cells[n].getAttribute("rowspan"));
                            l.setAttribute("colspan", z.cells[n].getAttribute("colspan"));
                            l.className = z.cells[n].className;
                            y.appendChild(l);
                        }
                        z.parentNode.appendChild(y);
                        LEAP.linkmodule2.bindDataToRow(o, u, y, h, true, g, p, m);
                        break;
                    } else {
                        if (v < h.skiprow) {
                            LEAP.linkmodule2.bindDataToRow(o, u, z, h, false, g, p, m);
                            z.setAttribute("isinrange", "1");
                            break;
                        } else {
                            if (z.tagName == "TR") {
                                var y = document.createElement("TR");
                                var q = z.previousSibling;
                                if (q == null || q.tagName != "TR") {
                                    q = z;
                                }
                                for (var n = 0; n < q.cells.length; n++) {
                                    var l = document.createElement("TD");
                                    l.setAttribute("rowspan", q.cells[n].getAttribute("rowspan"));
                                    l.setAttribute("colspan", q.cells[n].getAttribute("colspan"));
                                    y.appendChild(l);
                                }
                                q.parentNode.insertBefore(y, z);
                                LEAP.linkmodule2.bindDataToRow(o, u, y, h, true, g, p, m);
                                break;
                            } else {
                                var y = document.createElement("TR");
                                var q = z.previousSibling;
                                if (q == null || q.tagName != "TR") {
                                    q = z;
                                }
                                for (var n = 0; n < q.cells.length; n++) {
                                    var l = document.createElement("TD");
                                    l.setAttribute("rowspan", q.cells[n].getAttribute("rowspan"));
                                    l.setAttribute("colspan", q.cells[n].getAttribute("colspan"));
                                    y.appendChild(l);
                                }
                                z.previousSibling.parentNode.appendChild(y);
                                LEAP.linkmodule2.bindDataToRow(o, u, y, h, true, g, p, m);
                                break;
                            }
                        }
                    }
                }
            }
        }
        p = o = null;
    };
    LEAP.linkmodule2.getValue = function(g) {
        if (g == null) {
            return null;
        }
        g = LEAP._check(g, LEAP.linkmodule2.d);
        if (g == null) {
            return;
        }
        var u = g.getAttribute("ctid");
        if (u == null) {
            return null;
        }
        var H = g.getAttribute(commfields.instance);
        var d = LEAP.getLoadedModule(H);
        if (d == null) {
            return null;
        }
        var v = LEAP.linkmodule2.getdef(g);
        var I = d.getElements("TR[elementctid=" + u + "]");
        if (I != null) {
            var M = {
                change: [],
                create: [],
                del: [],
                result: []
            };
            var C = I.length;
            var o = g.data;
            var J = 0;
            if (o != null) {
                J = o.length;
            }
            var K = new Array();
            for (var G = 0; G < C; G++) {
                var h = I[G];
                var p = h.getAttribute("isRealNew");
                var x = false;
                if (h.data != null) {
                    if (d.pageMode == "insert" && h.data[v.parentfield]) {}
                    if (d.moduleVersion > 1) {
                        var m = h.data;
                        m.beanname = v.datamodule;
                        m.parentField = v.filtername;
                        var z = h.getAttribute("___islinknewrow");
                        if (z != null && z == "1" && p && p == "1") {
                            z = "1";
                            var r = LEAP.converObject(m);
                            var y = r[v.parentfield];
                            if (y != null) {
                                for (var F = 0; F < J; F++) {
                                    var w = o[F];
                                    if (w[v.parentfield] == y) {
                                        z = null;
                                        break;
                                    }
                                }
                            }
                            z = "1";
                        } else {
                            z = null;
                        }
                        if (z != null && z == "1") {
                            m.beanname = v.datamodule;
                            m.parentField = v.filtername;
                            M.create.add(m);
                            x = true;
                            var r = LEAP.converObject(m);
                            var y = r[v.parentfield];
                            if (y != null) {
                                for (var F = 0; F < J; F++) {
                                    var w = o[F];
                                    if (w[v.parentfield] == y) {
                                        K.add(r[v.parentfield]);
                                        break;
                                    }
                                }
                            }
                        } else {
                            if (o != null) {
                                var r = LEAP.converObject(m);
                                var y = r[v.parentfield];
                                if (y == null) {
                                    m.name = v.datamodule;
                                    m.parentField = v.filtername;
                                    M.create.add(m);
                                    x = true;
                                } else {
                                    var n = false;
                                    var L = false;
                                    for (var F = 0; F < J; F++) {
                                        var w = o[F];
                                        if (w[v.parentfield] == y) {
                                            n = true;
                                            var B = false;
                                            for (var D in w) {
                                                if (D == "javaClass" || D == "parentField" || D == "beanname" || D == "name") {
                                                    continue;
                                                }
                                                if (w[D] != r[D]) {
                                                    L = true;
                                                    B = true;
                                                    break;
                                                }
                                            }
                                            if (B) {
                                                break;
                                            }
                                        }
                                    }
                                    if (n) {
                                        K.add(r[v.parentfield]);
                                        if (L) {
                                            if (L) {
                                                m.beanname = v.datamodule;
                                                m.parentField = v.filtername;
                                                M.change.add(m);
                                                x = true;
                                            }
                                        }
                                    } else {
                                        if (!n) {
                                            m.beanname = v.datamodule;
                                            m.parentField = v.filtername;
                                            M.create.add(m);
                                            x = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (!x) {
                            M.result.add(m);
                        }
                    } else {
                        var m = LEAP.convertDataResult(h.data);
                        m.name = v.datamodule;
                        m.parentField = v.filtername;
                        var z = h.getAttribute("___islinknewrow");
                        if (z != null && z == "1" && p && p == "1") {
                            z = "1";
                            var r = LEAP.converObject(m);
                            var y = r[v.parentfield];
                            if (y != null) {
                                for (var F = 0; F < J; F++) {
                                    var w = o[F];
                                    if (w[v.parentfield] == y) {
                                        z = null;
                                        break;
                                    }
                                }
                            }
                        } else {
                            z = null;
                        }
                        if (z != null && z == "1") {
                            m.name = v.datamodule;
                            m.parentField = v.filtername;
                            M.create.add(m);
                            x = true;
                            var r = LEAP.converObject(m);
                            var y = r[v.parentfield];
                            if (y != null) {
                                for (var F = 0; F < J; F++) {
                                    var w = o[F];
                                    if (w[v.parentfield] == y) {
                                        K.add(r[v.parentfield]);
                                        break;
                                    }
                                }
                            }
                        } else {
                            if (o != null) {
                                var r = LEAP.converObject(m);
                                var y = r[v.parentfield];
                                if (y == null) {
                                    m.name = v.datamodule;
                                    m.parentField = v.filtername;
                                    M.create.add(m);
                                    x = true;
                                } else {
                                    var n = false;
                                    var L = false;
                                    for (var F = 0; F < J; F++) {
                                        var w = o[F];
                                        if (w[v.parentfield] == y) {
                                            n = true;
                                            var B = false;
                                            for (var D in w) {
                                                if (D == "javaClass" || D == "parentField" || D == "beanname" || D == "name") {
                                                    continue;
                                                }
                                                if (w[D] != r[D]) {
                                                    L = true;
                                                    B = true;
                                                    break;
                                                }
                                            }
                                            if (B) {
                                                break;
                                            }
                                        }
                                    }
                                    if (n) {
                                        K.add(r[v.parentfield]);
                                        if (L) {
                                            if (L) {
                                                m.name = v.datamodule;
                                                m.parentField = v.filtername;
                                                M.change.add(m);
                                                x = true;
                                            }
                                        }
                                    } else {
                                        if (!n) {
                                            m.name = v.datamodule;
                                            m.parentField = v.filtername;
                                            M.create.add(m);
                                            x = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (!x) {
                            M.result.add(m);
                        }
                    }
                    h = null;
                }
            }
            if (o != null) {
                for (var G = 0; G < J; G++) {
                    var h = o[G];
                    h.parentField = v.filtername;
                    var r = LEAP.converObject(h);
                    var q = r[v.parentfield];
                    if (q != null) {
                        if (!K.contains(r[v.parentfield])) {
                            if (d.moduleVersion > 1) {
                                h.beanname = v.datamodule;
                                M.del.add(h);
                            } else {
                                var A = LEAP.convertDataResult(h);
                                A.name = v.datamodule;
                                A.parentField = v.filtername;
                                M.del.add(A);
                            }
                        }
                    }
                }
            }
            if (M.create.length > 0 || M.result.length > 0 || M.change.length > 0) {
                if (v.initvalue != null) {
                    if (M.create.length > 0) {
                        for (var G = 0; G < M.create.length; G++) {
                            for (var N in v.initvalue) {
                                M.create[G][N] = v.initvalue[N];
                            }
                        }
                    }
                    if (M.result.length > 0) {
                        for (var G = 0; G < M.result.length; G++) {
                            for (var N in v.initvalue) {
                                M.result[G][N] = v.initvalue[N];
                            }
                        }
                    }
                    if (M.change.length > 0) {
                        for (var G = 0; G < M.change.length; G++) {
                            for (var N in v.initvalue) {
                                M.change[G][N] = v.initvalue[N];
                            }
                        }
                    }
                }
                return M;
            } else {
                return null;
            }
        }
    };
    LEAP.linkmodule2.processExp = function(data, header, cell) {
        if (header != null && !String.isEmpty(header.colorexp)) {
            cell.style.color = "black";
            var exp = header.colorexp;
            var ts = exp.split(";");
            var l = ts.length;
            for (var i = 0; i < l; i++) {
                var ce = ts[i];
                var ces = ce.split(":");
                ce = "(data." + ces[0] + ")";
                var color = null;
                if (ces.length > 1) {
                    color = ces[1];
                } else {
                    continue;
                }
                var ret = false;
                try {
                    ret = eval(ce);
                } catch (e) {}
                if (ret == true) {
                    cell.style.color = color;
                    break;
                }
            }
        }
        if (header != null && !String.isEmpty(header.imgexp)) {
            var exp = header.imgexp;
            var ts = exp.split(";");
            var l = ts.length;
            for (var i = 0; i < l; i++) {
                var ce = ts[i];
                var ces = ce.split(":");
                ce = "(data." + ces[0] + ")";
                var img = null;
                if (ces.length > 1) {
                    img = ces[1];
                    if (!img.toLowerCase().startWith("http://")) {
                        img = leapconfig.server + img;
                    }
                } else {
                    continue;
                }
                var ret = false;
                try {
                    ret = eval(ce);
                } catch (e) {}
                if (ret == true) {
                    cell.innerHTML = "<img src=" + img + ' style="width:18px;height:18px;">' + cell.innerHTML;
                    break;
                }
            }
        }
        header = cell = null;
    };
    LEAP.linkmodule2.bindDataToRow = function(Z, L, w, z, g, aa, u, I) {
        w.setAttribute("linmodule2_row", "1");
        w.setAttribute("___isbinddatarow", "1");
        w.setAttribute("elementctid", z.ctid);
        var X = true;
        var x = "auto";
        var ab = u.getAttribute("hideoverflow");
        if (ab != null && ab == "0") {
            w.style.height = "auto";
        } else {
            X = false;
            if (ab > 1) {
                x = w.style.height = ab + "px";
            } else {
                w.style.height = "24px";
            }
            w.style.overflow = "hidden";
        }
        if (I == null) {
            I = true;
        }
        if (!I) {
            w.removeAttribute("isRealNew");
        } else {
            w.setAttribute("isRealNew", "1");
        }
        if (w.style.height != "auto") {
            w.style.minHeight = w.clientHeight + "px";
        }
        if (aa != null) {
            if (aa == true) {
                w.setAttribute("___islinknewrow", "1");
            } else {
                w.removeAttribute("___islinknewrow");
            }
        }
        w.data = Z;
        w.parameter = L;
        var A = w.cells;
        var R = A.length;
        var N = 0;
        for (var U = 0; U < R; U++) {
            var m = z.headers[U];
            var y = m.md;
            var h = m.code;
            var F = A[U];
            F.style.width = "auto";
            F.style.height = x;
            try {
                F.removeAttribute("md");
                if (g && m.isskip && m.rowspan > 0 && m.find != null) {
                    var n = LEAP.getElement(m.find, w.parentNode);
                    var G = n.getAttribute("rowSpan");
                    G = G * 1;
                    if (G > 1) {
                        n.setAttribute("rowSpan", (G + 1) + "");
                    }
                    n = null;
                }
                if (String.isEmpty(y) && m.tpos == null) {
                    continue;
                }
                N++;
                var p = m.tpos;
                if (N == 1) {
                    if (p == null) {
                        p = LEAP.linkmodule2.dtpos;
                    }
                }
                var H = null;
                if (p != null) {
                    if (N == 1) {
                        F.style.textDecoration = "underline";
                        F.style.cursor = "pointer";
                        F.style.color = "blue";
                        F.setAttribute(commfields.ctf, LEAP.linkmodule2.d + "_tpo");
                        F.tpos = p;
                        var q = F.getAttribute("elementctid");
                        if (q == null) {
                            var V = u.getAttribute("ctid");
                            if (V == null) {
                                V = UUID.cID();
                                u.setAttribute("ctid", V);
                            }
                            q = V;
                            F.setAttribute("elementctid", q);
                        }
                    } else {
                        F.style.textDecoration = "";
                        F.style.cursor = "pointer";
                        F.style.color = "blue";
                        var d = p.length;
                        var K = new StringBuffer();
                        for (var S = 0; S < d; S++) {
                            var Q = p[S];
                            var D = Q.text;
                            var C = Q.issys;
                            if (C == null) {
                                C = 0;
                            }
                            var J = Q.flag;
                            K.append('<A style="color:blue;height:14px;width:auto;margin-left:5px;font-size:12px" href="javascript:void(0)" ctf="linkmodule2_tpo2" flag="').append(J);
                            K.append('" issys="').append(C);
                            K.append('" elementFind="').append("[ctid=" + LEAP.ctid(u) + "]");
                            K.append('">').append(D).append("</A>");
                        }
                        F.innerHTML = K.toString("");
                        continue;
                    }
                } else {
                    F.style.textDecoration = "";
                    F.style.cursor = "";
                    F.style.color = "";
                    F.removeAttribute(commfields.ctf);
                    F.tpos = null;
                    F.removeAttribute("tpos");
                }
                F.style.fontSize = "12px";
                F.style.paddingLeft = "5px";
                F.setAttribute("md", y);
                var M = Z[y];
                var B = null;
                var o = null;
                o = M;
                B = Z[commfields.rsccv + y];
                if (o != null) {
                    o = o + "";
                }
                if (B != null) {
                    B = B + "";
                }
                if (M != null) {
                    M = M + "";
                }
                if (B != null) {
                    M = B;
                } else {
                    if (h != null && M != null) {
                        var P = LEAP.getCodeText(h, M);
                        if (P == null) {
                            var r = M.split(",");
                            P = "";
                            for (var T = 0; T < r.length; T++) {
                                var W = r[T];
                                if (W != null && W.Trim() != "") {
                                    var O = LEAP.getCodeText(h, W);
                                    if (O != null && O.Trim() != "") {
                                        if (P != "") {
                                            P += ",";
                                        }
                                        P += O;
                                    }
                                }
                            }
                        }
                        M = P;
                    }
                    if (M == null) {
                        M = o;
                    }
                }
                if (!String.isEmpty(M) && m != null && m.bt != null && !String.isEmpty(m.bt)) {
                    if (m.bt == "date") {
                        var Y = M.indexOf(" ");
                        if (Y > -1) {
                            M = M.substring(0, Y);
                        }
                    } else {
                        if (m.bt == "datetime") {
                            var Y = M.lastIndexOf(".");
                            if (Y > -1) {
                                M = M.substring(0, Y);
                            }
                        } else {
                            if (m.bt == "date_mon") {
                                var Y = M.lastIndexOf("-");
                                if (Y > -1) {
                                    M = M.substring(0, Y);
                                }
                            }
                        }
                    }
                }
                if (M == null || M == "" || M.Trim() == "") {
                    M = "&nbsp";
                }
                if (M != "&nbsp") {
                    if (M.length >= 100) {
                        M = M.substring(0, 100) + "...";
                        H = M;
                    }
                    if (H == null) {
                        F.setAttribute("title", M);
                    } else {
                        F.setAttribute("title", H);
                    }
                } else {
                    F.removeAttribute("title");
                }
                F.innerHTML = M;
            } finally {
                LEAP.linkmodule2.processExp(Z, m, F);
                F = null;
            }
        }
    };
    LEAP.linkmodule2.outerSubmit = function(d, l, m, h) {
        if (h != null && h == 2 && d.pageMode == "insert") {
            var j = null;
            if (d.moduleVersion < 2) {
                j = LEAP.converObject(m);
            } else {
                j = m;
            }
            LEAP.linkmodule2.addRow(d.___linkct, m, j, true);
        }
        if (d.pageMode == "modify") {
            var g = this.___linkrow.getAttribute("isRealNew");
            if (g == null) {
                g = false;
            } else {
                if (g == 1) {
                    g = true;
                }
            }
            LEAP.linkmodule2.bindDataToRow(this.getPageData().data, null, this.___linkrow, LEAP.linkmodule2.getdef(this.___linkct), false, null, this.___linkct, g);
        }
    };
    LEAP.linkmodule2.sysBeforeSubmit = function(m, o) {
        var l = this.___linkct;
        var n = LEAP.linkmodule2.getdef(l);
        var j = null;
        if (n) {
            if (this.pageMode == "insert" && (this.submitMode == null || this.submitMode == 1)) {
                var d = l.getAttribute(commfields.instance);
                if (d != null) {
                    j = LEAP.getLoadedModule(d);
                }
                if (j && j.data && j.data[n.parentfield]) {
                    var h = n.filtername;
                    var g = j.data[n.parentfield];
                    m.parentField = h;
                    if (j.moduleVersion > 1) {
                        if (m.javaClass && m.javaClass == "com.longrise.LEAP.Base.Objects.DataResult") {
                            m.add(h, g);
                        } else {
                            m[h] = g;
                        }
                    } else {
                        m.add(h, g);
                    }
                }
                j = null;
            }
        }
        j = l = m = o = null;
    };
    LEAP.linkmodule2.sysSubmitSucess = function(d) {
        var j = LEAP.linkmodule2.getdef(this.___linkct);
        if (this.pageMode == "insert" && (this.submitMode == null || this.submitMode == 1)) {
            if (d) {
                if (d[j.parentfield]) {
                    LEAP.linkmodule2.addRow(this.___linkct, null, d, false);
                } else {
                    var h = this.getPageData().data;
                    h[j.parentfield] = d;
                    LEAP.linkmodule2.addRow(this.___linkct, null, h, false);
                }
            }
        }
        if (this.pageMode == "modify") {
            var g = this.___linkrow.getAttribute("isRealNew");
            if (g == null) {
                g = false;
            } else {
                if (g == 1) {
                    g = true;
                }
            }
            if (d == true) {
                LEAP.linkmodule2.bindDataToRow(this.getPageData().data, null, this.___linkrow, LEAP.linkmodule2.getdef(this.___linkct), false, null, this.___linkct, g);
            } else {
                if (d[j.parentfield]) {
                    LEAP.linkmodule2.bindDataToRow(d, null, this.___linkrow, LEAP.linkmodule2.getdef(this.___linkct), false, null, this.___linkct, g);
                }
            }
        }
    };
    LEAP.linkmodule2.requestCallBack = function(g, d) {};
    LEAP.linksearch = {};
    LEAP.linksearch.d = "linksearch";
    LEAP.linksearch.preModule = null;
    LEAP.linksearch._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.linksearch.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.linksearch._init);
    };
    LEAP.linksearch.init = function() {
        if (document != null && document.body != null) {
            LEAP.linksearch._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.linksearch._init);
        }
    }();
    LEAP.linksearch.uiProcess = function(m) {
        var z = null;
        var o = null;
        var w = null;
        var h = null;
        if (m != null && m.e != null && m.e.type != null) {
            h = m.e.type;
        }
        if (h != null) {
            o = m.e.srcElement;
            z = m.e;
            if (LEAP.isIE) {
                w = z.keyCode;
            } else {
                w = z.which;
            }
        } else {
            z = m;
            o = m.target;
            w = z.which;
        }
        if (o == null || o.getAttribute == null) {
            return;
        }
        var j = o.getAttribute(commfields.ct);
        if (j == null || j != LEAP.linksearch.d) {
            return;
        }
        try {
            var r = o.getAttribute("linkmd");
            var y = o.getAttribute("linkmodule");
            if (r && y) {
                var A = o.getAttribute(commfields.instance);
                if (A == null) {
                    return;
                }
                var d = LEAP.getLoadedModule(A);
                if (d) {
                    var p = o.getAttribute("linkmoduletype");
                    var q = o.getAttribute("linkmoduleheight");
                    var n = o.getAttribute("linkmodulewidth");
                    if (p == null) {
                        p = "view";
                    }
                    var v = null;
                    if (d.data) {
                        v = d.data[r];
                    }
                    if (v) {
                        if (LEAP.linksearch.preModule && LEAP.linksearch.preModule.dispose) {
                            LEAP.linksearch.preModule.dispose();
                        }
                        var u = {
                            name: y,
                            title: "关联查询",
                            autodispose: true,
                            moduleLoadArg: null,
                            pageMode: "search",
                            height: q,
                            width: n,
                            moduleLoadArg: {
                                refreshonpageload: false
                            }
                        };
                        var l = null;
                        if (p == "simpleview") {
                            l = LEAP.linksearch.preModule = d.loadSimpleModule(u);
                        } else {
                            try {
                                var g = d.loadForm3(u);
                                l = g.module;
                            } finally {
                                u = null;
                            }
                        }
                        if (l) {
                            var x = l.md(r);
                            if (x && x.element.tagName != "TH") {
                                x.setValue(v);
                            } else {
                                l.buildSearchQueryStep3 = function(B) {
                                    B.addParameter(r, v, 11);
                                };
                                if (l.buildSearchQuery) {
                                    l.buildSearchQueryStep2 = l.buildSearchQuery;
                                    l.buildSearchQuery = function(B) {
                                        l.buildSearchQueryStep3(B);
                                        return l.buildSearchQueryStep2(B);
                                    };
                                } else {
                                    l.buildSearchQuery = l.buildSearchQueryStep3;
                                }
                            }
                            l.innerSearch();
                        }
                    } else {
                        LEAP.messagebox.alert("值为空,不能进行关联查询", 2);
                    }
                }
            }
        } finally {
            o = m = null;
        }
    };
    LEAP.listattach = {};
    LEAP.listattach.d = "listattach";
    LEAP.listattach.flag = false;
    LEAP.listattach.init = function() {
        if (document != null && document.body != null) {
            LEAP.partIndex._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.listattach._init);
        }
        ElementEventManager.addManagedEventType(LEAP.listattach.d, "click");
    };
    LEAP.listattach.initbtn = function(l, m) {
        if (!m) {
            if (!event) {
                return;
            }
            m = event.srcElement;
        }
        if (!m) {
            return;
        }
        if (l != null) {
            var h = function() {
                LEAP.listattach.initbtn(null, m);
                m = null;
            };
            setTimeout(h, l);
            return;
        }
        var g = m.parentElement;
        if (g != null) {
            LEAP.addCSS(g, "listannexmain", false);
            var j = LEAP.getElement("[ct=uploadbtn]", g);
            var d = g.getAttribute("btntype");
            if (d == "false") {
                j.style.display = "none";
            } else {
                LEAP.addEvent(j, "uploadBtnComplete", LEAP.listattach.uploadComplete);
            }
            LEAP.listattach.flag = true;
        }
    };
    LEAP.listattach._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.listattach._init);
        LEAP.addEvent(document.body, "click", LEAP.listattach.uiProcess, null, null, true);
    };
    LEAP.listattach.__addManagedEventType = function(d) {
        ElementEventManager.addManagedEventType(LEAP.listattach.d, d);
    };
    LEAP.listattach.uiProcess = function(r) {
        if (r == null) {
            return;
        }
        var d = r.e.srcElement;
        if (d == null) {
            return;
        }
        var n = r.e.type;
        if (n == null) {
            return;
        }
        var u = d.tagName;
        if (u == null) {
            return;
        }
        try {
            var o = d.getAttribute(commfields.ctf);
            var h = null;
            if (o == "listattach_del") {
                if (window.confirm("确定删除该附件?")) {
                    h = LEAP._match(d, LEAP.listattach.d);
                    var q = LEAP.getElement(">table:first", h);
                    var m = LEAP.getElements("[ctf=listattach_row]", h);
                    var l = d.getAttribute("index");
                    q.removeChild(m[parseInt(l)]);
                    var p = h.value;
                    var j = JSON.parse(p);
                    j.removeindex(parseInt(l));
                    h.value = JSON.stringify(j);
                    var g = h.value;
                    LEAP.listattach.clear(h);
                    LEAP.listattach.flag = true;
                    LEAP.listattach.setValue(h, g);
                }
            }
        } finally {}
    };
    LEAP.listattach.clear = function(h) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h);
        }
        if (h == null) {
            return;
        }
        var j = LEAP.getElement(">table:first", h);
        var d = LEAP.getElements("[ctf=listattach_row]", h);
        if (d != null) {
            for (var g = 0; g < d.length; g++) {
                j.removeChild(d[g]);
            }
        }
    };
    LEAP.listattach.setValue = function(h, A) {
        if (h == null) {
            return;
        }
        if (typeof(h) == "string") {
            h = LEAP.getElement(h);
        }
        if (h == null) {
            return;
        }
        if (LEAP.listattach.flag == false) {
            LEAP.asyn(LEAP.listattach.setValue, null, 100, h, A);
            if (A != null) {
                LEAP.listattach.flag = true;
            }
            return;
        }
        LEAP.listattach.clear(h);
        var o = h.getAttribute("ct");
        if (o == "listattach") {
            var q = A;
            var F = null;
            if (A != null && A != "") {
                F = JSON.parse(q);
                h.value = q;
            } else {
                h.value = "";
            }
            if (F != null) {
                var B = F.length;
                var D = LEAP.getElement(">table:first", h);
                for (var C = 0; C < B; C++) {
                    var y = F[C];
                    var u = y.showName;
                    var x = null;
                    if (y.userName != null && y.userName != "") {
                        x = y.userName;
                    } else {
                        x = y.creator;
                    }
                    var v = y.time;
                    if (typeof v == "number") {
                        v = LEAP.formatdate(v, "yyyy-MM-dd hh:mm:ss");
                    }
                    var p = LEAP.upload.getShowPath(y);
                    var d = document.createElement("tr");
                    d.setAttribute("ctf", "listattach_row");
                    var w = document.createElement("td");
                    w.innerHTML = (C + 1);
                    d.appendChild(w);
                    var n = document.createElement("td");
                    n.innerHTML = u;
                    d.appendChild(n);
                    var m = document.createElement("td");
                    m.innerHTML = x;
                    d.appendChild(m);
                    var j = document.createElement("td");
                    j.innerHTML = v;
                    d.appendChild(j);
                    var g = document.createElement("td");
                    var G = document.createElement("a");
                    G.href = p;
                    G.target = "_blank";
                    G.innerHTML = "下载";
                    g.appendChild(G);
                    var z = h.getAttribute("btntype");
                    var r = h.getAttribute("btnuser");
                    if (z == "true") {
                        if (r == "0") {
                            var I = document.createElement("a");
                            I.href = "javascript:";
                            I.setAttribute("ctf", "listattach_del");
                            I.style.marginLeft = "10px";
                            I.innerHTML = "删除";
                            I.setAttribute("index", C);
                            g.appendChild(I);
                        } else {
                            var H = null;
                            if (LEAP.userInfo.userflag != null && LEAP.userInfo.userflag != "") {
                                H = LEAP.userInfo.userflag;
                            } else {
                                if (LEAP.userInfo.fullName != null && LEAP.userInfo.fullName != "") {
                                    H = LEAP.userInfo.fullName;
                                }
                            }
                            if (H == x) {
                                var I = document.createElement("a");
                                I.href = "javascript:";
                                I.setAttribute("ctf", "listattach_del");
                                I.style.marginLeft = "10px";
                                I.innerHTML = "删除";
                                I.setAttribute("index", C);
                                g.appendChild(I);
                            }
                        }
                    }
                    d.appendChild(g);
                    D.appendChild(d);
                }
            }
            LEAP.listattach.flag = false;
        }
    };
    LEAP.listattach.getValue = function(d) {
        if (d == null) {
            return;
        }
        if (typeof(d) == "string") {
            d = LEAP.getElement(d);
        }
        if (d == null) {
            return;
        }
        var g = d.value;
        return g;
    };
    LEAP.listattach.uploadComplete = function(o) {
        var g = LEAP.getElement("[ct=listattach]");
        var z = LEAP.getElement(">table:first", g);
        var x = g.value;
        var A = null;
        var v = o.arg2.result;
        var y = 1;
        if (x != null && x != "") {
            var A = JSON.parse(x);
            if (A != null) {
                A[A.length] = v;
            }
            y = A.length;
        } else {
            A = [];
            A[0] = v;
        }
        var p = v.showName;
        var u = null;
        if (v.userName != null && v.userName != "") {
            u = v.userName;
        } else {
            u = v.creator;
        }
        var q = LEAP.formatdate(v.time, "yyyy-MM-dd hh:mm:ss");
        var n = LEAP.upload.getShowPath(v);
        var d = document.createElement("tr");
        d.setAttribute("ctf", "listattach_row");
        var r = document.createElement("td");
        r.innerHTML = y;
        d.appendChild(r);
        var m = document.createElement("td");
        m.innerHTML = p;
        d.appendChild(m);
        var l = document.createElement("td");
        l.innerHTML = u;
        d.appendChild(l);
        var j = document.createElement("td");
        j.innerHTML = q;
        d.appendChild(j);
        var h = document.createElement("td");
        var B = document.createElement("a");
        B.href = n;
        B.target = "_blank";
        B.innerHTML = "下载";
        h.appendChild(B);
        var w = g.getAttribute("btntype");
        if (w == "true") {
            var C = document.createElement("a");
            C.href = "javascript:";
            C.setAttribute("ctf", "listattach_del");
            C.style.marginLeft = "10px";
            C.innerHTML = "删除";
            C.setAttribute("index", y - 1);
            h.appendChild(C);
        }
        d.appendChild(h);
        z.appendChild(d);
        g.value = JSON.stringify(A);
    };
    LEAP.listattach.init();
    LEAP.messagebox = {};
    LEAP.messagebox.str = '<div class="leap_floatmessage_con"><img class="leap_floatmessage_img" src="' + leapconfig.server + 'LEAP/Resource/images/itemstyle/messagebox/email2.png"><div class="leap_floatmessage_toptitle"></div><div class="leap_floatmessage_text"></div></div>';
    LEAP.messagebox.closestr = '<div class="leap_floatmessage_close" ctf="messageclose"></div>';
    LEAP.messagebox.titlestr = '<div class="leap_floatmessage_tdiv"></div>';
    LEAP.messagebox.buttonstr = '<div class="leap_floatmessage_buttons"></div>';
    LEAP.messagebox.div = null;
    LEAP.messagebox.t = null;
    LEAP.messagebox.lm = null;
    LEAP.messagebox.scope = null;
    LEAP.messagebox.stoptime = 7;
    LEAP.messagebox.init = function() {
        if (document != null && document.body != null) {
            LEAP.messagebox._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.messagebox._init);
        }
    };
    LEAP.messagebox._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.messagebox._init);
        var d = document.createElement("div");
        document.body.appendChild(d);
        d.style.display = "none";
        d.className = "leap_floatmessage";
        d.innerHTML = LEAP.messagebox.titlestr + LEAP.messagebox.closestr + LEAP.messagebox.buttonstr + LEAP.messagebox.str;
        LEAP.addEvent(d, "mouseover", LEAP.messagebox.uiProcess, null, null, true);
        LEAP.addEvent(d, "mouseleave", LEAP.messagebox.uiProcess, null, null, true);
        LEAP.addEvent(d, "click", LEAP.messagebox.uiProcess, null, null, true);
        LEAP.messagebox.div = d;
        d = null;
    };
    LEAP.messagebox.bool = false;
    LEAP.messagebox.uiProcess = function(g) {
        var l = g.e.srcElement;
        var h = g.e.type;
        var d = l.tagName;
        var j = l.getAttribute(commfields.ctf);
        if (l.className && l.className == "leap_floatmessage") {
            if (h == "mouseover") {
                window.clearInterval(LEAP.messagebox.t);
                LEAP.messagebox.div.style.right = "10px";
                LEAP.messagebox.div.style.opacity = 100;
                LEAP.messagebox.div.style.filter = "Alpha(Opacity=100)";
            } else {
                if (h == "mouseleave") {
                    if (LEAP.messagebox.bool == false) {
                        LEAP.messagebox.alert(LEAP.messagebox.lm.msg, LEAP.messagebox.lm.type, LEAP.messagebox.lm.title, LEAP.messagebox.lm.mtype, LEAP.messagebox.lm.id, LEAP.messagebox.lm.arg, LEAP.messagebox.lm.topimg, LEAP.messagebox.lm.toptitle, LEAP.messagebox.lm.topcolor, LEAP.messagebox.lm.titlecolor, LEAP.messagebox.lm.centercolor, LEAP.messagebox.lm.buttons);
                    }
                    LEAP.messagebox.bool = false;
                }
            }
        } else {
            if (h == "click") {
                if (j == "messageclose") {
                    LEAP.messagebox.close();
                    LEAP.messagebox.bool = true;
                } else {
                    if (j == "messagetitle" || j == "messagecenter") {
                        var m = l.getAttribute("dataid");
                        if (LEAP.messagebox.scope) {
                            if (LEAP.messagebox.scope.messageclick) {
                                LEAP.messagebox.scope.messageclick(LEAP.messagebox.lm);
                            }
                        }
                        LEAP.messagebox.close();
                        LEAP.messagebox.bool = true;
                    }
                }
            }
        }
    };
    LEAP.messagebox.alert = function(l, g, H, p, x, n, o, v, j, u, r, C) {
        if (g == null) {
            g = 1;
        }
        if (LEAP.messagebox.t != null) {
            window.clearInterval(LEAP.messagebox.t);
        }
        LEAP.messagebox.tc = 0;
        LEAP.messagebox.scope = n;
        var B = LEAP.getElement(".leap_floatmessage_text", LEAP.messagebox.div);
        if (B == null) {
            return;
        }
        var q = LEAP.getElement(".leap_floatmessage_close", LEAP.messagebox.div);
        var F = LEAP.getElement(".leap_floatmessage_img", LEAP.messagebox.div);
        var w = LEAP.getElement(".leap_floatmessage_tdiv", LEAP.messagebox.div);
        var h = LEAP.getElement(".leap_floatmessage_toptitle", LEAP.messagebox.div);
        var D = LEAP.getElement(".leap_floatmessage_buttons", LEAP.messagebox.div);
        if (p == "1") {
            q.style.display = "block";
            if (C) {
                D.innerHTML = C;
                D.style.display = "block";
                LEAP.messagebox.div.style.height = "260px";
            } else {
                D.innerHTML = "";
                D.style.display = "none";
                LEAP.messagebox.div.style.height = "220px";
            }
            B.style.height = "180px";
            B.style.left = "20px";
            B.style.top = "30px";
            B.style.width = "260px";
            LEAP.messagebox.stoptime = 2000;
            F.style.marginTop = "0px";
            F.style.height = "30px";
            w.style.display = "block";
            if (v != null) {
                h.innerHTML = v;
                h.style.display = "inline-block";
            } else {
                h.innerHTML = "";
                h.style.display = "none";
            }
        } else {
            q.style.display = "none";
            LEAP.messagebox.div.style.height = "65px";
            B.style.height = "45px";
            B.style.left = "60px";
            B.style.top = "15px";
            B.style.width = "235px";
            LEAP.messagebox.stoptime = 7;
            F.style.marginTop = "15px";
            F.style.height = "35px";
            w.style.display = "none";
            h.style.display = "none";
            h.innerHTML = "";
            D.innerHTML = "";
            D.style.display = "none";
        }
        var z = null;
        if (p == "1") {
            var d = "#4D4D4D";
            if (g == 2) {
                d = "#3797FC";
            } else {
                if (g == 3) {
                    d = "red";
                }
            }
            if (H != null) {
                z = "<a href='javascript:' class='leap_floatmessage_title' style='color:" + d + "' title='" + H + "' ctf='messagetitle' dataid='" + x + "'>" + H + "</a><br><br><a ctf='messagecenter' href='javascript:' style='color:" + d + "' class='leap_floatmessage_center' dataid='" + x + "'>" + l.replaceall("\n", "<br>").replaceall(" ", "&nbsp") + "</a>";
            } else {
                z = l.replaceall("\n", "<br>").replaceall(" ", "&nbsp");
            }
            if (z == null) {
                return;
            }
        } else {
            if (H != null) {
                z = H + "<br>" + l;
            } else {
                z = l;
            }
            if (z == null) {
                return;
            }
            z = z.replaceall("\n", "<br>").replaceall(" ", "&nbsp");
        }
        B.innerHTML = z;
        LEAP.messagebox.lm = {
            msg: l,
            title: H,
            type: g,
            mtype: p,
            id: x,
            arg: n,
            topimg: o,
            toptitle: v,
            topcolor: j,
            titlecolor: u,
            centercolor: r,
            buttons: C
        };
        if (n) {
            if (n.messageButtonLoadEvent) {
                n.messageButtonLoadEvent(n, LEAP.messagebox.lm);
            }
        }
        var A = LEAP.messagebox.div.style;
        A.right = "10px";
        A.opacity = 1;
        A.filter = "Alpha(Opacity=100)";
        A.display = "block";
        if (p == "1") {
            var G = LEAP.getElement(".leap_floatmessage_title", LEAP.messagebox.div);
            var y = LEAP.getElement(".leap_floatmessage_center", LEAP.messagebox.div);
            if (u != null) {
                G.style.color = u;
            } else {
                G.style.color = "#4D4D4D";
            }
            if (r != null) {
                y.style.color = r;
            } else {
                y.style.color = "#4D4D4D";
            }
            if (j != null) {
                A.color = j;
            } else {
                A.color = "#4D4D4D";
            }
            if (o != null) {
                LEAP.getElement(".leap_floatmessage_img", LEAP.messagebox.div).src = leapconfig.server + o;
            }
        } else {
            if (g == 2) {
                A.color = "#3797FC";
                LEAP.getElement(".leap_floatmessage_img", LEAP.messagebox.div).src = leapconfig.server + "LEAP/Resource/images/itemstyle/messagebox/email2.png";
            } else {
                if (g == 3) {
                    A.color = "red";
                    LEAP.getElement(".leap_floatmessage_img", LEAP.messagebox.div).src = leapconfig.server + "LEAP/Resource/images/itemstyle/messagebox/email3.png";
                } else {
                    A.color = "#4D4D4D";
                    LEAP.getElement(".leap_floatmessage_img", LEAP.messagebox.div).src = leapconfig.server + "LEAP/Resource/images/itemstyle/messagebox/email1.png";
                }
            }
        }
        LEAP.messagebox.t = setInterval(LEAP.messagebox._m1, 150);
    };
    LEAP.messagebox.tc = 0;
    LEAP.messagebox.close = function() {
        LEAP.messagebox.div.style.display = "none";
        if (LEAP.messagebox.t != null) {
            window.clearInterval(LEAP.messagebox.t);
        }
        LEAP.messagebox.tc = 0;
    };
    LEAP.messagebox._m1 = function() {
        LEAP.messagebox.tc++;
        if (LEAP.messagebox.tc > LEAP.messagebox.stoptime) {
            var d = (10 - (LEAP.messagebox.tc - LEAP.messagebox.stoptime)) * 30;
            if (d < 10) {
                LEAP.messagebox.div.style.display = "none";
                if (LEAP.messagebox.t != null) {
                    window.clearInterval(LEAP.messagebox.t);
                }
                LEAP.messagebox.tc = 0;
            } else {
                LEAP.messagebox.div.style.right = (10 - 310 / (d / 30)) + "px";
                LEAP.messagebox.div.style.opacity = d / 100;
                LEAP.messagebox.div.style.filter = "Alpha(Opacity=" + d + ")";
            }
        }
    };
    LEAP.messagebox.init();
    LEAP.newsearch = {};
    LEAP.newsearch.d = "newsearch";
    LEAP.newsearch.res = null;
    LEAP.newsearch.childli = '<li ctf="setlist_li" nodevalue="@nodevalue" nodefield="@nodefield" nodetext="@nodetext" dataid="@dataid"><span nodetext="@nodetext" nodevalue="@nodevalue" nodefield="@nodefield" nodetype="@nodetype" ctf="setlist_span">@text</span><span style="padding-right: 10px;color: #A5A5A5;font-size: 12px">@text1</span><img style="@style" src="' + leapconfig.server + 'LEAP/Resource/images/itemstyle/newsearch/jiantou1.png"></li>';
    LEAP.newsearch.childpagediv = '<div ctf="child_div" dataid="@dataid" nodevalue="@nodevalue" nodefield="@nodefield" nodetext="@nodetext" nodetype="@nodetype">@text</div>';
    LEAP.newsearch.childpagetime = '<div ctf="child_time" datatype="newdate">今天</div><div ctf="child_time"  datatype="newmonth">当月</div><div ctf="child_time" datatype="newji">当季</div><div ctf="child_time" datatype="newyear">今年</div><div ctf="child_time" datatype="olddate">上一天</div><div ctf="child_time" datatype="oldmonth">上一月</div><div ctf="child_time" datatype="oldji">上一季</div><div ctf="child_time" datatype="oldyear">上一年</div><span style="width: 100%;float: left;background-color: transparent;border:none"><label style="float: left;margin-left: 10px;margin-right: 10px;margin-top: 10px;">从</label><span class="date lgiact" style="WIDTH: 80% !important;margin-top: 10px;" ct="date" mdcn="" mdtype="date" bt="date" md="" search="12"><INPUT class="date_y " maxLength=4 ctf="date_1"><A>-</A><INPUT class=date_i maxLength=2 ctf="date_2"><A>-</A><INPUT class=date_i maxLength=2 ctf="date_3"><span class=date_img ctf="date_show"></span></span><label style="float: left;margin-left: 10px;margin-right: 10px;margin-top: 10px;">到</label><span class="date lgiact" style="WIDTH: 80% !important;margin-top: 10px;" ct="date" mdcn="" mdtype="date" bt="date" md="" search="12"><INPUT class="date_y " maxLength=4 ctf="date_1"><A>-</A><INPUT class=date_i maxLength=2 ctf="date_2"><A>-</A><INPUT class=date_i maxLength=2 ctf="date_3"><span class=date_img ctf="date_show"></span></span></span>';
    LEAP.newsearch.valuehash = new hashtable();
    LEAP.newsearch.init = function() {
        if (document != null && document.body != null) {
            LEAP.newsearch._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.newsearch._init);
        }
        ElementEventManager.addManagedEventType(LEAP.newsearch.d, "click");
    };
    LEAP.newsearch._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.newsearch._init);
        LEAP.addEvent(document.body, "click", LEAP.newsearch.uiProcess, null, null, true);
    };
    LEAP.newsearch.uiProcess = function(q) {
        if (q == null) {
            return;
        }
        var u = q.e.srcElement;
        if (u == null) {
            return;
        }
        var n = q.e.type;
        if (n == null) {
            return;
        }
        var J = u.tagName;
        if (J == null) {
            return;
        }
        try {
            var h = u.getAttribute(commfields.ctf);
            var m = null;
            if (h == "date_show") {
                return;
            } else {
                if (h == "child_time") {} else {
                    if (h == "tip") {
                        m = LEAP._match(u, LEAP.newsearch.d);
                        var y = LEAP.getElement("[ctf=tip]", m);
                        var C = LEAP.getElement("[ctf=searchinput]", m);
                        y.style.display = "none";
                        C.focus();
                    } else {
                        if (h == "searchinput") {
                            m = LEAP._match(u, LEAP.newsearch.d);
                            var y = LEAP.getElement("[ctf=tip]", m);
                            y.style.display = "none";
                            if (u.value != null && u.value != "") {
                                var x = LEAP.newsearch.getPositionForInput(u);
                                var o = null;
                                if (x.indexOf(":") > -1) {
                                    var F = LEAP.getElement("[ctf=setlist]", m);
                                    var H = LEAP.getElement("[ctf=titlets]", m);
                                    H.innerHTML = '搜索"' + u.value + '"相关内容  回车键发起搜索   空格键添加搜索条件';
                                    F.style.marginTop = "24px";
                                    H.style.display = "block";
                                    var j = m.getAttribute("modulename");
                                    if (j == null || j == "") {
                                        var w = LEAP.getElement("[moduletype=search]");
                                        j = w.getAttribute("module");
                                    }
                                    var D = x.split(":");
                                    if (D.length == 1) {
                                        o = D[0];
                                    } else {
                                        o = D[1];
                                    }
                                    var p = m.getAttribute("likefields");
                                    var d = m.getAttribute("searchfields");
                                    if (p == null || p == "") {
                                        p = "";
                                    }
                                    if (d == null || d == "") {
                                        d = "";
                                    }
                                    var z = null;
                                    if (d == "" && p == "") {
                                        z = "";
                                    } else {
                                        if (p != "" && d == "") {
                                            z = p;
                                        } else {
                                            if (p == "" && d != "") {
                                                z = d;
                                            } else {
                                                z = p + "," + d;
                                            }
                                        }
                                    }
                                    var l = LEAP.newsearch.getFields(z);
                                    z = z + "," + l;
                                    LEAP.newsearch.xuh++;
                                    LEAP.request2({
                                        name: "pagemodule_searchKeyword",
                                        par: {
                                            key: o,
                                            name: j,
                                            fields: z,
                                            xuh: LEAP.newsearch.xuh
                                        },
                                        callback: LEAP.newsearch.callbackbuilding,
                                        arg: LEAP.ctid(m)
                                    });
                                    u.removeAttribute("search");
                                }
                                var g = LEAP.getElement("[ctf=newsearchset]", m);
                                g.style.display = "block";
                            } else {
                                var g = LEAP.getElement("[ctf=newsearchset]", m);
                                var F = LEAP.getElement("[ctf=setlist]", m);
                                var H = LEAP.getElement("[ctf=titlets]", m);
                                H.innerHTML = "回车键发起搜索   空格键添加搜索条件";
                                F.style.marginTop = "24px";
                                H.style.display = "block";
                                g.style.display = "block";
                            }
                        } else {
                            if (h == "setlist_li" || h == "setlist_span") {
                                m = LEAP._match(u, LEAP.newsearch.d);
                                var C = LEAP.getElement("[ctf=searchinput]", m);
                                var B = null;
                                if (h == "setlist_li") {
                                    B = LEAP.newsearch.changestr(C.value, u.childNodes[0], m);
                                } else {
                                    B = LEAP.newsearch.changestr(C.value, u, m);
                                }
                                C.value = B;
                                C.focus();
                                var v = u.getAttribute("nodetext");
                                var G = u.getAttribute("nodevalue");
                                var r = u.getAttribute("nodefield");
                                var I = {};
                                I.value = G;
                                I.field = r;
                                I.text = v;
                                var A = B.split(" ");
                                LEAP.newsearch.valuehash.add(A[A.length - 1], I);
                                C.setAttribute("search", "1");
                            } else {
                                if (h == "child_div") {
                                    m = LEAP._match(u, LEAP.newsearch.d);
                                    var C = LEAP.getElement("[ctf=searchinput]", m);
                                    var B = LEAP.newsearch.changestr(C.value, u, m);
                                    C.value = B;
                                    C.focus();
                                    var v = u.getAttribute("nodetext");
                                    var G = u.getAttribute("nodevalue");
                                    var r = u.getAttribute("nodefield");
                                    var I = {};
                                    I.value = G;
                                    I.field = r;
                                    I.text = v;
                                    var A = B.split(" ");
                                    LEAP.newsearch.valuehash.add(A[A.length - 1], I);
                                    C.setAttribute("search", "1");
                                } else {
                                    m = LEAP._match(u, LEAP.newsearch.d);
                                    if (m != null) {
                                        var C = LEAP.getElement("[ctf=searchinput]", m);
                                        if (C.value != null && C.value != "") {
                                            var y = LEAP.getElement("[ctf=tip]", m);
                                            y.style.display = "none";
                                        } else {
                                            var y = LEAP.getElement("[ctf=tip]", m);
                                            y.style.display = "block";
                                        }
                                        var g = LEAP.getElement("[ctf=newsearchset]", m);
                                        g.style.display = "none";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } finally {
            m = null;
        }
    };
    LEAP.newsearch.getValue = function(m, o) {
        if (o == null) {
            o = new SearchParameters();
        }
        var d = LEAP.getElement("[ctf=searchinput]", m);
        var r = m.getAttribute("likefields");
        var q = m.getAttribute("searchfields");
        var h = null;
        var g = null;
        if (r != null && r != "") {
            h = r.split(",");
        }
        if (q != null && q != "") {
            g = q.split(",");
        }
        var u = d.value;
        if (u != null && u != "") {
            var w = u.split(" ");
            for (var l = 0; l < w.length; l++) {
                var v = LEAP.newsearch.valuehash.getvalue(w[l]);
                if (v != null) {
                    if (r == null || r == "") {
                        r = "";
                    }
                    if (q == null || q == "") {
                        q = "";
                    }
                    var p = null;
                    if (q == "" && r == "") {
                        p = "";
                    } else {
                        if (r != "" && q == "") {
                            p = r;
                        } else {
                            if (r == "" && q != "") {
                                p = q;
                            } else {
                                p = r + "," + q;
                            }
                        }
                    }
                    var j = LEAP.newsearch.getFields(p);
                    p = p + "," + j;
                    if (p.indexOf(v.field.toLowerCase()) > -1) {
                        o.addParameter(v.field, v.value, 12);
                    } else {
                        if (v.field == "areaid") {
                            var x = LEAP.getrealarea(v.value);
                            var n = x;
                            while (x.length < 18) {
                                x += "0";
                            }
                            while (n.length < 18) {
                                n += "9";
                            }
                            o.addParameter(v.field, x, 16);
                            o.addParameter(v.field, n, 17);
                        } else {
                            o.addParameter(v.field, v.value, 11);
                        }
                    }
                }
            }
        }
        return o;
    };
    LEAP.newsearch.getValue1 = function(o, q) {
        if (q == null) {
            q = new SearchParameters();
        }
        var d = LEAP.getElement("[ctf=searchinput]", o);
        var v = o.getAttribute("likefields");
        var u = o.getAttribute("searchfields");
        var h = null;
        var g = null;
        if (v != null && v != "") {
            h = v.split(",");
        }
        if (u != null && u != "") {
            g = u.split(",");
        }
        var w = d.value;
        if (w != null && w != "") {
            var y = w.split(" ");
            for (var n = 0; n < y.length; n++) {
                var x = LEAP.newsearch.valuehash.getvalue(y[n]);
                if (x != null) {
                    if (v == null || v == "") {
                        v = "";
                    }
                    if (u == null || u == "") {
                        u = "";
                    }
                    var r = null;
                    if (u == "" && v == "") {
                        r = "";
                    } else {
                        if (v != "" && u == "") {
                            r = v;
                        } else {
                            if (v == "" && u != "") {
                                r = u;
                            } else {
                                r = v + "," + u;
                            }
                        }
                    }
                    var m = LEAP.newsearch.getFields(r);
                    r = r + "," + m;
                    if (r.indexOf(x.field.toLowerCase()) > -1) {
                        q.addParameter(x.field, x.value, 12);
                    } else {
                        if (x.field == "areaid") {
                            var z = LEAP.getrealarea(x.value);
                            var p = z;
                            while (z.length < 18) {
                                z += "0";
                            }
                            while (p.length < 18) {
                                p += "9";
                            }
                            q.addParameter(x.field, z, 16);
                            q.addParameter(x.field, p, 17);
                        } else {
                            q.addParameter(x.field, x.value, 11);
                        }
                    }
                } else {
                    if (h != null) {
                        for (var l = 0; l < h.length; l++) {
                            q.addParameter(h[l], y[n], 218).setGroup("sys.ft_ctx");
                        }
                    }
                    if (g != null) {
                        for (var l = 0; l < g.length; l++) {
                            q.addParameter(g[l], y[n], 21).setGroup("sys.ft_ctx");
                        }
                    }
                }
            }
        }
        return q;
    };
    LEAP.newsearch.initControl = function(p, d) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (p != null) {
            var r = function() {
                LEAP.newsearch.initControl(null, d);
                d = null;
            };
            setTimeout(r, p);
            return;
        }
        var n = d.parentElement;
        if (n != null) {
            var l = LEAP.getElement("[ctf=newsearchset]", n);
            var q = new StringBuffer('<div class="newsearchset_title" ctf="titlets"></div>');
            q.append('<div class="newsearchset_childpage" ctf="childpage">');
            q.append('<div class="newsearchset_childpage_title" ctf="restitle"></div>');
            q.append('<div class="newsearchset_childpage_main" ctf="reschilds"></div></div>');
            q.append('<ul ctf="setlist"></ul>');
            l.innerHTML = q.toString();
            var j = LEAP.getElement("[ctf=searchinput]", n);
            var u = LEAP.getElement("[ctf=setlist]", n);
            var g = LEAP.getElement("[ctf=reschilds]", n);
            var m = LEAP.getElement("[ctf=gjsstj]", n);
            var h = LEAP.getElement("[ctf=gjss]", n);
            LEAP.addEvent(j, "keyup", LEAP.newsearch.keyup, null, true);
            LEAP.addEvent(h, "mouseover", LEAP.newsearch.mouseover, null, true);
            LEAP.addEvent(m, "mouseleave", LEAP.newsearch.mouseout, null, true);
            LEAP.addEvent(u, "mouseout", LEAP.newsearch.ulmouseover, null, true);
            LEAP.addEvent(l, "keyup", LEAP.newsearch.ulkeyup, null, true);
            LEAP.addEvent(g, "mouseover", LEAP.newsearch.reschildsover, null, true);
            var y = j.style.width;
            var x = y.replace("px", "");
            var v = parseInt(x) + 78;
            var o = parseInt(x) + 76;
            l.style.width = o + "px";
            var m = LEAP.getElement("[ctf=gjsstj]", n);
            m.style.left = v + "px";
            LEAP.newsearch.isfocus(n);
        }
    };
    LEAP.newsearch.ulkeyup = function(l) {
        if (l == null) {
            return;
        }
        var n = l.e.srcElement;
        if (n == null) {
            return;
        }
        var j = l.e.type;
        if (j == null) {
            return;
        }
        var G = n.tagName;
        if (G == null) {
            return;
        }
        var g = n.getAttribute("ctf");
        var h = null;
        if (g == "newsearchset") {
            h = LEAP._match(n, LEAP.newsearch.d);
            if (h == null) {
                return;
            }
            var B = LEAP.getElement("[ctf=setlist]", h);
            var A = LEAP.getElement("[ctf=searchinput]", h);
            var y = LEAP.getElements("[ctf=setlist_li]", h);
            var q = LEAP.getElements("[ctf=child_div]", h);
            var H = window.event.keyCode;
            if (H == 37) {
                LEAP.newsearch.keyevent(H, null, A, y, B, q, h);
            } else {
                if (H == 39) {
                    LEAP.newsearch.keyevent(H, null, A, y, B, q, h);
                } else {
                    if (H == 38) {
                        LEAP.newsearch.keyevent(H, LEAP.newsearch.res, A, y, B, q, h);
                    } else {
                        if (H == 40) {
                            LEAP.newsearch.keyevent(H, LEAP.newsearch.res, A, y, B, q, h);
                        } else {
                            if (H == 13) {
                                if (y != null) {
                                    for (var z = 0; z < y.length; z++) {
                                        y[z].style.backgroundColor = "transparent";
                                    }
                                }
                                var x = null;
                                var v = A.getAttribute("childid");
                                var u = A.getAttribute("dataid");
                                if (v != null) {
                                    var r = q[parseInt(v)];
                                    x = LEAP.newsearch.changestr(A.value, r, h);
                                    A.value = x;
                                    A.focus();
                                    var o = r.getAttribute("nodetext");
                                    var C = r.getAttribute("nodevalue");
                                    var m = r.getAttribute("nodefield");
                                    var D = {};
                                    D.value = C;
                                    D.field = m;
                                    D.text = o;
                                    var w = x.split(" ");
                                    LEAP.newsearch.valuehash.add(w[w.length - 1], D);
                                } else {
                                    if (u != null) {
                                        var F = LEAP.newsearch.res[parseInt(u)];
                                        if (F.type == "time") {
                                            return;
                                        }
                                        var p = y[parseInt(u)];
                                        x = LEAP.newsearch.changestr(A.value, p.childNodes[0], h);
                                        A.value = x;
                                        A.focus();
                                        var o = p.getAttribute("nodetext");
                                        var C = p.getAttribute("nodevalue");
                                        var m = p.getAttribute("nodefield");
                                        var D = {};
                                        D.value = C;
                                        D.field = m;
                                        D.text = o;
                                        var w = x.split(" ");
                                        LEAP.newsearch.valuehash.add(w[w.length - 1], D);
                                    }
                                }
                                A.setAttribute("search", "1");
                                A.removeAttribute("dataid");
                                A.removeAttribute("childid");
                                var d = LEAP.getElement("[ctf=newsearchset]", h);
                                d.style.display = "none";
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.newsearch.keyevent = function(w, r, g, q, v, p, n) {
        if (w == 37) {
            var j = g.getAttribute("childid");
            if (p != null) {
                for (var m = 0; m < p.length; m++) {
                    p[m].style.backgroundColor = "white";
                    p[m].style.color = "#4B4B4B";
                }
                if (j == null) {
                    p[p.length - 1].style.backgroundColor = "#FF7700";
                    p[p.length - 1].style.color = "#FFFFFF";
                    g.setAttribute("childid", p.length - 1);
                    g.setAttribute("childid1", p.length - 1);
                } else {
                    if (j > 0) {
                        j = parseInt(j) - 1;
                        p[j].style.backgroundColor = "#FF7700";
                        p[j].style.color = "#FFFFFF";
                        g.setAttribute("childid", j);
                        g.setAttribute("childid1", j);
                    } else {
                        if (j == 0) {
                            p[p.length - 1].style.backgroundColor = "#FF7700";
                            p[p.length - 1].style.color = "#FFFFFF";
                            g.setAttribute("childid", p.length - 1);
                            g.setAttribute("childid1", p.length - 1);
                        }
                    }
                }
                var l = LEAP.getElement("[ctf=newsearchset]", n);
                l.focus();
                g.blur();
            }
        } else {
            if (w == 39) {
                var j = g.getAttribute("childid");
                if (p != null) {
                    for (var m = 0; m < p.length; m++) {
                        p[m].style.backgroundColor = "white";
                        p[m].style.color = "#4B4B4B";
                    }
                    if (j == null) {
                        p[0].style.backgroundColor = "#FF7700";
                        p[0].style.color = "#FFFFFF";
                        g.setAttribute("childid", 0);
                        g.setAttribute("childid1", 0);
                    } else {
                        if (j < p.length - 1) {
                            j = parseInt(j) + 1;
                            p[j].style.backgroundColor = "#FF7700";
                            p[j].style.color = "#FFFFFF";
                            g.setAttribute("childid", j);
                            g.setAttribute("childid1", j);
                        } else {
                            if (j == p.length - 1) {
                                p[0].style.backgroundColor = "#FF7700";
                                p[0].style.color = "#FFFFFF";
                                g.setAttribute("childid", 0);
                                g.setAttribute("childid1", 0);
                            }
                        }
                    }
                    var l = LEAP.getElement("[ctf=newsearchset]", n);
                    l.focus();
                    g.blur();
                }
            } else {
                if (w == 38) {
                    var d = g.getAttribute("dataid");
                    if (q != null) {
                        for (var m = 0; m < q.length; m++) {
                            q[m].style.backgroundColor = "transparent";
                            q[m].childNodes[2].className = "";
                        }
                        if (d == null) {
                            q[q.length - 1].style.backgroundColor = "#EEEEEE";
                            g.setAttribute("dataid", q.length - 1);
                            LEAP.newsearch.buildchildpage(r, q[q.length - 1], q.length - 1, n);
                        } else {
                            if (d > 0) {
                                d = parseInt(d) - 1;
                                q[d].style.backgroundColor = "#EEEEEE";
                                g.setAttribute("dataid", d);
                                LEAP.newsearch.buildchildpage(r, q[d], d, n);
                                v.scrollTop -= 24;
                            } else {
                                if (d == 0) {
                                    q[q.length - 1].style.backgroundColor = "#EEEEEE";
                                    g.setAttribute("dataid", q.length - 1);
                                    LEAP.newsearch.buildchildpage(r, q[q.length - 1], q.length - 1, n);
                                    v.scrollTop = parseInt(q.length) * 24;
                                }
                            }
                        }
                        g.removeAttribute("childid");
                        var l = LEAP.getElement("[ctf=newsearchset]", n);
                        l.focus();
                        g.blur();
                    }
                } else {
                    if (w == 40) {
                        var d = g.getAttribute("dataid");
                        if (q != null) {
                            for (var m = 0; m < q.length; m++) {
                                q[m].style.backgroundColor = "transparent";
                                q[m].childNodes[2].className = "";
                            }
                            if (d == null) {
                                q[0].style.backgroundColor = "#EEEEEE";
                                g.setAttribute("dataid", 0);
                                LEAP.newsearch.buildchildpage(r, q[0], 0, n);
                            } else {
                                if (d < q.length - 1) {
                                    d = parseInt(d) + 1;
                                    q[d].style.backgroundColor = "#EEEEEE";
                                    g.setAttribute("dataid", d);
                                    LEAP.newsearch.buildchildpage(r, q[d], d, n);
                                } else {
                                    if (d == q.length - 1) {
                                        q[0].style.backgroundColor = "#EEEEEE";
                                        g.setAttribute("dataid", 0);
                                        LEAP.newsearch.buildchildpage(r, q[0], 0, n);
                                        v.scrollTop = 0;
                                    }
                                }
                                g.removeAttribute("childid");
                                var l = LEAP.getElement("[ctf=newsearchset]", n);
                                l.focus();
                                g.blur();
                                var o = 11 * 24;
                                var u = (parseInt(d) + 1) * 24;
                                if (u > o) {
                                    v.scrollTop += 24;
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.newsearch.isfocus = function(d) {
        try {
            if (document.activeElement && document.activeElement.getAttribute) {
                var j = document.activeElement.getAttribute("ctf");
                if (j == "searchinput") {
                    var g = LEAP.getElement("[ctf=tip]", d);
                    g.style.display = "none";
                }
            }
        } catch (h) {}
        d = null;
    };
    LEAP.newsearch.reschildsover = function(p) {
        if (p == null) {
            return;
        }
        var d = p.e.srcElement;
        if (d == null) {
            return;
        }
        var n = p.e.type;
        if (n == null) {
            return;
        }
        var q = d.tagName;
        if (q == null) {
            return;
        }
        var o = d.getAttribute("ctf");
        var j = null;
        if (o == "child_div") {
            j = LEAP._match(d, LEAP.newsearch.d);
            var g = LEAP.getElement("[ctf=searchinput]", j);
            var m = d.getAttribute("dataid");
            var l = LEAP.getElements("[ctf=child_div]", j);
            if (l != null) {
                for (var h = 0; h < l.length; h++) {
                    l[h].style.backgroundColor = "white";
                    l[h].style.color = "#4B4B4B";
                }
                d.style.backgroundColor = "#FF7700";
                d.style.color = "#FFFFFF";
                g.setAttribute("childid", m);
            }
        }
    };
    LEAP.newsearch.ulmouseover = function(q) {
        if (q == null) {
            return;
        }
        var d = q.e.srcElement;
        if (d == null) {
            return;
        }
        var n = q.e.type;
        if (n == null) {
            return;
        }
        var r = d.tagName;
        if (r == null) {
            return;
        }
        var o = d.getAttribute("ctf");
        var l = null;
        if (o == "setlist_li") {
            l = LEAP._match(d, LEAP.newsearch.d);
            var h = LEAP.getElement("[ctf=searchinput]", l);
            var g = h.getAttribute("dataid");
            var p = d.getAttribute("dataid");
            var m = LEAP.getElements("[ctf=setlist_li]", l);
            if (m != null) {
                for (var j = 0; j < m.length; j++) {
                    m[j].style.backgroundColor = "transparent";
                    m[j].childNodes[1].className = "";
                }
                d.style.backgroundColor = "#EEEEEE";
                h.setAttribute("dataid", p);
                LEAP.newsearch.buildchildpage(LEAP.newsearch.res, d, p, l);
            }
        }
    };
    LEAP.newsearch.xuh = 0;
    LEAP.newsearch.keyup = function(B) {
        if (B == null) {
            return;
        }
        var A = B.e.srcElement;
        if (A == null) {
            return;
        }
        var Y = B.e.type;
        if (Y == null) {
            return;
        }
        var P = A.tagName;
        if (P == null) {
            return;
        }
        var F = A.getAttribute("ctf");
        var q = null;
        if (F == "searchinput") {
            q = LEAP._match(A, LEAP.newsearch.d);
            if (q == null) {
                return;
            }
            var l = LEAP.getElement("[ctf=setlist]", q);
            var y = LEAP.getElement("[ctf=searchinput]", q);
            var W = LEAP.getElements("[ctf=setlist_li]", q);
            var m = LEAP.getElements("[ctf=child_div]", q);
            var w = window.event.keyCode;
            if (w == 37) {
                LEAP.newsearch.keyevent(w, null, y, W, l, m, q);
            } else {
                if (w == 39) {
                    LEAP.newsearch.keyevent(w, null, y, W, l, m, q);
                } else {
                    if (w == 38) {
                        LEAP.newsearch.keyevent(w, LEAP.newsearch.res, y, W, l, m, q);
                    } else {
                        if (w == 40) {
                            LEAP.newsearch.keyevent(w, LEAP.newsearch.res, y, W, l, m, q);
                        } else {
                            if (w == 13) {
                                var S = y.getAttribute("search");
                                if (S == null) {
                                    if (W != null) {
                                        var G = LEAP.newsearch.res[0];
                                        if (G.type == "time") {
                                            return;
                                        }
                                        var I = W[0];
                                        if (I.childNodes.length != 0) {
                                            var H = LEAP.newsearch.changestr(y.value, I.childNodes[0], q);
                                            y.value = H;
                                            var x = I.getAttribute("nodetext");
                                            var K = I.getAttribute("nodevalue");
                                            var n = I.getAttribute("nodefield");
                                            var V = {};
                                            V.value = K;
                                            V.field = n;
                                            V.text = x;
                                            var u = H.split(" ");
                                            LEAP.newsearch.valuehash.add(u[u.length - 1], V);
                                        }
                                    }
                                }
                                var O = q.getAttribute("instance");
                                try {
                                    if (O) {
                                        try {
                                            var j = LEAP.getLoadedModule(O);
                                            j.innerSearch();
                                        } finally {
                                            j = null;
                                        }
                                    }
                                } catch (T) {}
                                if (W != null) {
                                    for (var R = 0; R < W.length; R++) {
                                        W[R].style.backgroundColor = "transparent";
                                    }
                                }
                                y.removeAttribute("dataid");
                                y.removeAttribute("childid");
                                var o = LEAP.getElement("[ctf=newsearchset]", q);
                                o.style.display = "none";
                            } else {
                                if (w == 27) {
                                    var L = y.value;
                                    y.value = L;
                                    var o = LEAP.getElement("[ctf=newsearchset]", q);
                                    o.style.display = "none";
                                } else {
                                    var L = y.value;
                                    if (w == 8) {
                                        var X = L.split(" ");
                                        if (X != null) {
                                            var p = false;
                                            var D = "";
                                            for (var R = 0; R < X.length; R++) {
                                                if (X[R] != "") {
                                                    var z = X[R].split(":");
                                                    if (z[1] != "") {
                                                        D += X[R] + " ";
                                                    } else {
                                                        p = true;
                                                    }
                                                }
                                            }
                                            if (p == true) {
                                                y.value = D;
                                                L = y.value;
                                            }
                                        }
                                    }
                                    if (L == null || L == "") {
                                        l.style.marginTop = "0px";
                                        var r = LEAP.getElement("[ctf=titlets]", q);
                                        r.innerHTML = "";
                                        r.style.display = "none";
                                        l.innerHTML = "";
                                        l.style.width = "100%";
                                        var d = LEAP.getElement("[ctf=childpage]", q);
                                        d.style.display = "none";
                                        var o = LEAP.getElement("[ctf=newsearchset]", q);
                                        o.style.display = "none";
                                        return;
                                    }
                                    if (L.lastIndexOf(" ") == L.length - 1) {
                                        var Q = LEAP.newsearch.getPositionForInput1(y);
                                        if (w != 8) {
                                            if (L.length > Q) {
                                                var J = LEAP.newsearch.getPositionForInput(y);
                                                var h = null;
                                                if (J.indexOf(":") > -1) {
                                                    var l = LEAP.getElement("[ctf=setlist]", q);
                                                    var r = LEAP.getElement("[ctf=titlets]", q);
                                                    r.innerHTML = '搜索"' + y.value + '"相关内容  回车键发起搜索   空格键添加搜索条件';
                                                    l.style.marginTop = "24px";
                                                    r.style.display = "block";
                                                    var j = q.getAttribute("modulename");
                                                    if (j == null || j == "") {
                                                        var S = LEAP.getElement("[moduletype=search]");
                                                        j = S.getAttribute("module");
                                                    }
                                                    var U = J.split(":");
                                                    if (U.length == 1) {
                                                        h = U[0];
                                                    } else {
                                                        h = U[1];
                                                    }
                                                    var M = q.getAttribute("likefields");
                                                    var N = q.getAttribute("searchfields");
                                                    if (M == null || M == "") {
                                                        M = "";
                                                    }
                                                    if (N == null || N == "") {
                                                        N = "";
                                                    }
                                                    var g = null;
                                                    if (N == "" && M == "") {
                                                        g = "";
                                                    } else {
                                                        if (M != "" && N == "") {
                                                            g = M;
                                                        } else {
                                                            if (M == "" && N != "") {
                                                                g = N;
                                                            } else {
                                                                g = M + "," + N;
                                                            }
                                                        }
                                                    }
                                                    var C = LEAP.newsearch.getFields(g);
                                                    g = g + "," + C;
                                                    LEAP.newsearch.xuh++;
                                                    LEAP.request2({
                                                        name: "pagemodule_searchKeyword",
                                                        par: {
                                                            key: h,
                                                            name: j,
                                                            fields: g,
                                                            xuh: LEAP.newsearch.xuh
                                                        },
                                                        callback: LEAP.newsearch.callbackbuilding,
                                                        arg: LEAP.ctid(q)
                                                    });
                                                }
                                            }
                                            var S = y.getAttribute("search");
                                            if (S == null) {
                                                if (W != null) {
                                                    var G = LEAP.newsearch.res[0];
                                                    if (G.type == "time") {
                                                        return;
                                                    }
                                                    var I = W[0];
                                                    if (I.childNodes.length != 0) {
                                                        var v = y.getAttribute("childid1");
                                                        if (v == null) {
                                                            var H = LEAP.newsearch.changestr(y.value, I.childNodes[0], q);
                                                            y.value = H;
                                                            var x = I.getAttribute("nodetext");
                                                            var K = I.getAttribute("nodevalue");
                                                            var n = I.getAttribute("nodefield");
                                                            var V = {};
                                                            V.value = K;
                                                            V.field = n;
                                                            V.text = x;
                                                            H = LEAP.newsearch.trim(H);
                                                            var u = H.split(" ");
                                                            LEAP.newsearch.valuehash.add(u[u.length - 1], V);
                                                        }
                                                        y.removeAttribute("childid1");
                                                    }
                                                }
                                            }
                                        }
                                        if (L.length <= Q) {
                                            l.innerHTML = "";
                                            l.style.width = "100%";
                                            var d = LEAP.getElement("[ctf=childpage]", q);
                                            d.style.display = "none";
                                            var r = LEAP.getElement("[ctf=titlets]", q);
                                            r.innerHTML = "";
                                            r.style.display = "none";
                                            var o = LEAP.getElement("[ctf=newsearchset]", q);
                                            o.style.display = "none";
                                            y.removeAttribute("search");
                                        }
                                    } else {
                                        if (L != null && L != "") {
                                            var J = null;
                                            var X = L.split(" ");
                                            if (X.length > 1) {
                                                J = X[X.length - 1];
                                            } else {
                                                J = L;
                                            }
                                            var r = LEAP.getElement("[ctf=titlets]", q);
                                            r.innerHTML = '搜索"' + y.value + '"相关内容  回车键发起搜索   空格键添加搜索条件';
                                            l.style.marginTop = "24px";
                                            r.style.display = "block";
                                            var j = q.getAttribute("modulename");
                                            if (j == null || j == "") {
                                                var S = LEAP.getElement("[moduletype=search]");
                                                j = S.getAttribute("module");
                                            }
                                            var h = null;
                                            var U = J.split(":");
                                            if (U.length == 1) {
                                                h = U[0];
                                            } else {
                                                h = U[1];
                                            }
                                            var M = q.getAttribute("likefields");
                                            var N = q.getAttribute("searchfields");
                                            if (M == null || M == "") {
                                                M = "";
                                            }
                                            if (N == null || N == "") {
                                                N = "";
                                            }
                                            var g = null;
                                            if (N == "" && M == "") {
                                                g = "";
                                            } else {
                                                if (M != "" && N == "") {
                                                    g = M;
                                                } else {
                                                    if (M == "" && N != "") {
                                                        g = N;
                                                    } else {
                                                        g = M + "," + N;
                                                    }
                                                }
                                            }
                                            var C = LEAP.newsearch.getFields(g);
                                            g = g + "," + C;
                                            LEAP.newsearch.xuh++;
                                            LEAP.request2({
                                                name: "pagemodule_searchKeyword",
                                                par: {
                                                    key: h,
                                                    name: j,
                                                    fields: g,
                                                    xuh: LEAP.newsearch.xuh
                                                },
                                                callback: LEAP.newsearch.callbackbuilding,
                                                arg: LEAP.ctid(q)
                                            });
                                            y.removeAttribute("search");
                                        } else {
                                            l.style.marginTop = "0px";
                                            var r = LEAP.getElement("[ctf=titlets]", q);
                                            r.innerHTML = "";
                                            r.style.display = "none";
                                            l.innerHTML = "";
                                            l.style.width = "100%";
                                            var d = LEAP.getElement("[ctf=childpage]", q);
                                            d.style.display = "none";
                                        }
                                        var o = LEAP.getElement("[ctf=newsearchset]", q);
                                        o.style.display = "block";
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.newsearch.getFields = function(d) {
        var h = LEAP.getElements("[ctf=table_header]");
        if (h != null) {
            var l = "";
            for (var g = 0; g < h.length; g++) {
                if (h[g].getAttribute("bt") != null) {
                    if (h[g].getAttribute("bt") == "text" && h[g].getAttribute("code") == null) {
                        if (d.indexOf(h[g].getAttribute("md")) == -1) {
                            if (g == 0) {
                                l = h[g].getAttribute("md");
                            } else {
                                l += "," + h[g].getAttribute("md");
                            }
                        }
                    }
                }
            }
            var j = l.substring(0, 1);
            if (j == ",") {
                l = l.substring(1, l.length);
            }
            return l;
        }
    };
    LEAP.newsearch.getPositionForInput = function(m) {
        var j = 0;
        if (document.selection) {
            m.focus();
            var h = document.selection.createRange();
            h.moveStart("character", -m.value.length);
            j = h.text.length;
            var l = m.value;
            l = l.substring(0, j);
            var g = null;
            var d = l.split(" ");
            if (d.length > 1) {
                g = d[d.length - 1];
            } else {
                g = l;
            }
            return g;
        } else {
            if (m.selectionStart || m.selectionStart == "0") {
                j = m.selectionStart;
            }
        }
        return j;
    };
    LEAP.newsearch.getPositionForInput1 = function(h) {
        var g = 0;
        if (document.selection) {
            h.focus();
            var d = document.selection.createRange();
            d.moveStart("character", -h.value.length);
            g = d.text.length;
        } else {
            if (h.selectionStart || h.selectionStart == "0") {
                g = h.selectionStart;
            }
        }
        return g;
    };
    LEAP.newsearch.trim = function(d) {
        return d.replace(/(^\s*)|(\s*$)/g, "");
    };
    LEAP.newsearch.callbackbuilding = function(p, o) {
        var j = LEAP.getElement("[ctid=" + o + "]");
        var u = LEAP.getElement("[ctf=setlist]", j);
        var g = LEAP.getElement("[ctf=searchinput]", j);
        if (p != null) {
            if (p[0].xuhao != LEAP.newsearch.xuh) {
                return;
            }
            LEAP.newsearch.res = p;
            var h = new StringBuffer();
            for (var l = 0; l < LEAP.newsearch.res.length; l++) {
                var v = LEAP.newsearch.res[l];
                var r = null;
                if (v.type == null || v.type == "time") {
                    r = "";
                } else {
                    r = v.type;
                }
                var q = null;
                if (v.childnode != null) {
                    q = LEAP.newsearch.childli.replace("@text", v.text).replace("@style", "").replace("@dataid", l).replaceall("@nodevalue", v.value).replaceall("@nodefield", v.fieldname).replaceall("@nodetext", v.text).replace("@text1", r).replace("@nodetype", v.type);
                } else {
                    q = LEAP.newsearch.childli.replace("@text", v.text).replace("@style", "display:none").replace("@dataid", l).replaceall("@nodevalue", v.value).replaceall("@nodefield", v.fieldname).replaceall("@nodetext", v.text).replace("@text1", r).replace("@nodetype", v.type);
                }
                h.append(q);
            }
            u.innerHTML = h.toString();
            if (LEAP.newsearch.res.length > 11) {
                u.style.height = (11 * 24) + "px";
                u.style.overflowY = "auto";
                u.style.overflowX = "hidden";
            } else {
                u.style.height = "";
                u.style.overflow = "hidden";
            }
            var n = LEAP.getElements("[ctf=setlist_li]", j);
            LEAP.newsearch.keyevent(40, p, g, n, u, null, j);
            g.removeAttribute("dataid");
            g.removeAttribute("childid");
        } else {
            u.style.marginTop = "0px";
            var m = LEAP.getElement("[ctf=titlets]", j);
            m.innerHTML = '搜索"' + g.value + '"相关内容  回车键发起搜索   空格键添加搜索条件';
            u.innerHTML = "";
            u.style.width = "100%";
            var d = LEAP.getElement("[ctf=childpage]", j);
            d.style.display = "none";
        }
    };
    LEAP.newsearch.buildchildpage = function(p, n, o, m) {
        if (p != null) {
            if (p[o].childnode == "timechild") {
                var g = LEAP.getElement("[ctf=reschilds]", m);
                g.innerHTML = LEAP.newsearch.childpagetime;
                var r = LEAP.getElement("[ctf=setlist]", m);
                r.style.width = "60%";
                n.childNodes[2].className = "curre";
                var d = LEAP.getElement("[ctf=childpage]", m);
                d.style.display = "block";
            } else {
                if (p[o].childnode != null) {
                    var h = LEAP.getElement("[ctf=restitle]", m);
                    h.innerHTML = n.childNodes[0].innerHTML;
                    var j = new StringBuffer();
                    for (var l = 0; l < p[o].childnode.length; l++) {
                        var u = p[o].childnode[l];
                        var q = null;
                        q = LEAP.newsearch.childpagediv.replace("@text", u.text).replace("@nodevalue", u.value).replace("@dataid", l).replace("@nodefield", u.fieldname).replace("@nodetext", u.text).replace("@nodetype", u.type);
                        j.append(q);
                    }
                    var g = LEAP.getElement("[ctf=reschilds]", m);
                    g.innerHTML = j.toString();
                    var r = LEAP.getElement("[ctf=setlist]", m);
                    r.style.width = "60%";
                    n.childNodes[2].className = "curre";
                    var d = LEAP.getElement("[ctf=childpage]", m);
                    d.style.display = "block";
                } else {
                    var r = LEAP.getElement("[ctf=setlist]", m);
                    r.style.width = "100%";
                    var d = LEAP.getElement("[ctf=childpage]", m);
                    d.style.display = "none";
                }
            }
        }
    };
    LEAP.newsearch.changestr = function(v, l, h) {
        var m = h.getAttribute("likefields");
        var d = h.getAttribute("searchfields");
        var g = null;
        if (m == null || m == "") {
            m = "";
        }
        if (d == null || d == "") {
            d = "";
        }
        if (d == "" && m == "") {
            g = "";
        } else {
            if (m != "" && d == "") {
                g = m;
            } else {
                if (m == "" && d != "") {
                    g = d;
                } else {
                    g = m + "," + d;
                }
            }
        }
        var B = LEAP.newsearch.getFields(g);
        g = g + "," + B;
        var n = l.getAttribute("nodefield");
        var o = l.getAttribute("nodetext");
        var y = l.getAttribute("nodevalue");
        var C = l.getAttribute("nodetype");
        var A = v.length;
        var j = v.split(" ");
        var x = j.length;
        var r = j[x - 1];
        var p = false;
        if (r == "") {
            j.removeindex(j.length - 1);
            p = true;
        }
        var z = LEAP.newsearch.getPositionForInput1(LEAP.getElement("[ctf=searchinput]", h));
        if (A > z) {
            if (j.length > 1) {
                var u = "";
                for (var w = 0; w < j.length; w++) {
                    if (w == j.length - 1) {
                        if (g.indexOf(n.toLowerCase()) > -1) {
                            var q = o.substring(0, o.indexOf("包含"));
                            u += " " + q + ":" + y;
                        } else {
                            if (n == "areaid") {
                                u += " 区域:" + l.innerHTML;
                            } else {
                                u += " " + C + ":" + l.innerHTML;
                            }
                        }
                    } else {
                        if (w == 0) {
                            u += j[w];
                        } else {
                            u += " " + j[w];
                        }
                    }
                }
                if (p == true) {
                    return u + " ";
                } else {
                    return u;
                }
            } else {
                if (g.indexOf(n.toLowerCase()) > -1) {
                    var q = o.substring(0, o.indexOf("包含"));
                    if (p == true) {
                        return q + ":" + y + " ";
                    } else {
                        return q + ":" + y;
                    }
                } else {
                    if (n == "areaid") {
                        if (p == true) {
                            return "区域:" + l.innerHTML + " ";
                        } else {
                            return "区域:" + l.innerHTML;
                        }
                    } else {
                        if (p == true) {
                            return C + ":" + l.innerHTML + " ";
                        } else {
                            return C + ":" + l.innerHTML;
                        }
                    }
                }
            }
        } else {
            if (j.length > 1) {
                var u = "";
                for (var w = 0; w < j.length; w++) {
                    if (w == j.length - 1) {
                        if (g.indexOf(n.toLowerCase()) > -1) {
                            var q = o.substring(0, o.indexOf("包含"));
                            u += " " + q + ":" + y;
                        } else {
                            if (n == "areaid") {
                                u += " 区域:" + l.innerHTML;
                            } else {
                                u += " " + C + ":" + l.innerHTML;
                            }
                        }
                    } else {
                        if (w == 0) {
                            u += j[w];
                        } else {
                            u += " " + j[w];
                        }
                    }
                }
                if (p == true) {
                    return u + " ";
                } else {
                    return u;
                }
            } else {
                if (g.indexOf(n.toLowerCase()) > -1) {
                    var q = o.substring(0, o.indexOf("包含"));
                    if (p == true) {
                        return q + ":" + y + " ";
                    } else {
                        return q + ":" + y;
                    }
                } else {
                    if (n == "areaid") {
                        if (p == true) {
                            return "区域:" + l.innerHTML + " ";
                        } else {
                            return "区域:" + l.innerHTML;
                        }
                    } else {
                        if (p == true) {
                            return C + ":" + l.innerHTML + " ";
                        } else {
                            return C + ":" + l.innerHTML;
                        }
                    }
                }
            }
        }
    };
    LEAP.newsearch.mouseout = function(g) {
        if (g == null) {
            return;
        }
        var o = g.e.srcElement;
        if (o == null) {
            return;
        }
        var j = g.e.type;
        if (j == null) {
            return;
        }
        var d = o.tagName;
        if (d == null) {
            return;
        }
        var m = o.getAttribute("ctf");

        var h = null;
        if (m == "gjsstj") {
            h = LEAP._match(o, LEAP.newsearch.d);
            var l = LEAP.getElement("[ctf=gjss]", h);
            var n = LEAP.getElement("[ctf=gjsstj]", h);
            n.style.display = "none";
            l.style.cssText = "background:url('" + leapconfig.server + "LEAP/Resource/images/itemstyle/newsearch/down.png') 72px center no-repeat !important;background-color:#EEEEEE !important;border-bottom-color: #d4d4d4";
        }
    };
    LEAP.newsearch.mouseover = function(o) {
        if (o == null) {
            return;
        }
        var d = o.e.srcElement;
        if (d == null) {
            return;
        }
        var m = o.e.type;
        if (m == null) {
            return;
        }
        var p = d.tagName;
        if (p == null) {
            return;
        }
        var n = d.getAttribute("ctf");
        var l = null;
        l = LEAP._match(d, LEAP.newsearch.d);
        var g = LEAP.getElement("[ctf=gjss]", l);
        var j = LEAP.getElement("[ctf=gjsstj]", l);
        g.style.cssText = "background:url('" + leapconfig.server + "LEAP/Resource/images/itemstyle/newsearch/up.png') 72px center no-repeat !important;background-color:#EEEEEE !important;border-bottom-color: #EEEEEE";
        j.style.display = "block";
        var h = LEAP.getElement("[ctf=newsearchset]", l);
        h.style.display = "none";
    };
    LEAP.newsearch.inputblur = function(d) {
        var h = d.arg;
        var l = LEAP.getElement("[ctf=searchinput]", h);
        var j = LEAP.getElement("[ctf=tip]", d.arg);
        var g = LEAP.getElement("[ctf=newsearchset]", h);
        if (l.value == "") {
            j.style.display = "block";
        }
        g.style.display = "none";
    };
    LEAP.newsearch.inputfocus = function(d) {
        var g = d.arg;
        var h = LEAP.getElement("[ctf=tip]", g);
        h.style.display = "none";
    };
    LEAP.newsearch.setTipText = function(d, j) {
        var h = LEAP.getElement("[ctf=tip]", d);
        h.innerHTML = j;
        h.style.display = "block";
        var g = LEAP.getElement("[ctf=tip]", d);
        g.value = "";
    };
    LEAP.newsearch.setModule = function(g, h, j, d) {
        if (g != null) {
            if (h != null) {
                g.setAttribute("modulename", h);
            }
            if (j != null) {
                g.setAttribute("likefields", j);
            }
            if (d != null) {
                g.setAttribute("searchfields", d);
            }
        }
    };
    LEAP.newsearch.init();
    LEAP.popupMenu = {};
    LEAP.popupMenu.d = "popupmenu";
    LEAP.popupMenu.it = null;
    LEAP.popupMenu.icons = null;
    LEAP.popupMenu.tp = null;
    LEAP.popupMenu.currentut = null;
    LEAP.popupMenu.init = function() {
        if (document != null && document.body != null) {
            LEAP.popupMenu._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.popupMenu._init);
        }
        UIEventManager.addEvent(window, "unload", LEAP.popupMenu._unload);
        ElementEventManager.addManagedEventType(LEAP.popupMenu.d, "OnClick");
    };
    LEAP.popupMenu._unload = function() {
        var item = null;
        var sid = null;
        try {
            UIEventManager.removeEvent(window, "unload", LEAP.popupMenu._unload);
            ElementEventManager.removeEvent(LEAP.popupMenu.d, "OnClick");
            if (null != LEAP.popupMenu.it) {
                for (sid in LEAP.popupMenu.it.keys) {
                    LEAP.popupMenu.dispose(LEAP.popupMenu.it.getvalue(sid));
                }
            }
            for (sid in LEAP.popupMenu) {
                eval("LEAP.popupMenu." + sid + "=null;");
            }
        } finally {
            item = sid = null;
        }
    };
    LEAP.popupMenu._init = function() {
        var n = null;
        var l = null;
        var g = null;
        var m = null;
        var p = null;
        var h = null;
        var o = null;
        var d = null;
        try {
            LEAP.addEvent(document.body, "click", LEAP.popupMenu.uiProcess, null, null, true);
            UIEventManager.removeEvent(window, "load", LEAP.popupMenu._init);
            n = LEAP.getElements("[ctf=pop_item]");
            if (null != n) {
                for (l = 0; l < n.length; l++) {
                    n[l].onmouseover = function() {
                        this.className += (this.className.length > 0 ? " " : "") + "sfhover";
                    };
                    n[l].onmouseout = function() {
                        this.className = this.className.replace(new RegExp("( ?|^)sfhover\\b"), "");
                    };
                }
            }
            n = LEAP.getElements("ul[ct=popupmenu]");
            if (null != n) {
                LEAP.popupMenu.it = new hashtable();
                for (l = 0; l < n.length; l++) {
                    m = n[l].getAttribute("ut");
                    if (null != m) {
                        h = LEAP.getElements("[popupmenubtn]");
                        if (null != h) {
                            for (g = 0; g < h.length; g++) {
                                o = h[g].getAttribute("popupmenubtn");
                                if (null != o) {
                                    o = o.split(" ");
                                    if (m == o[0]) {
                                        if (null != o[1]) {
                                            d = {
                                                p: o[1],
                                                obj: n[l]
                                            };
                                        } else {
                                            d = {
                                                p: null,
                                                obj: n[l]
                                            };
                                        }
                                        LEAP.addEvent(h[g], "click", LEAP.popupMenu.click, d, null, true);
                                    }
                                }
                            }
                        }
                        LEAP.popupMenu.it.add(m, n[l]);
                    }
                }
            }
        } finally {
            d = h = o = m = p = l = g = n = null;
        }
    };
    LEAP.popupMenu.click = function(d) {
        var h = 0;
        var j = 0;
        var m = null;
        var g = null;
        try {
            if (null == d) {
                return;
            }
            if (null == d.arg) {
                return;
            }
            if (null == d.arg.obj) {
                return;
            }
            if (null != d.arg.p) {
                m = LEAP.getElement("[popupmenusl=" + d.arg.p + "]");
            }
            if (null == m) {
                m = d.caller;
            }
            g = m;
            while (true) {
                if (null == g) {
                    break;
                }
                h += g.offsetLeft;
                j += g.offsetTop;
                g = g.offsetParent;
            }
            d.arg.obj.style.display = "block";
            d.arg.obj.style.left = ((h + d.arg.obj.offsetWidth) > document.body.offsetWidth ? (h + m.offsetWidth - d.arg.obj.offsetWidth) : h) + "px";
            d.arg.obj.style.top = ((j + m.offsetHeight + d.arg.obj.offsetHeight) > document.body.offsetHeight ? (j - d.arg.obj.offsetHeight) : j + m.offsetHeight) + "px";
        } finally {
            h = j = d = null;
        }
    };
    LEAP.popupMenu.uiProcess = function(u) {
        var d = null;
        var l = null;
        var m = null;
        var g = null;
        var n = null;
        var j = null;
        var o = null;
        var r = false;
        var q = null;
        var p = null;
        var h = null;
        try {
            d = u.e.srcElement;
            if (null == d) {
                return;
            }
            n = LEAP._match(d, LEAP.popupMenu.d);
            if (null == n) {
                if (null != LEAP.popupMenu.it) {
                    if (null == LEAP.popupMenu.currentut) {
                        for (g in LEAP.popupMenu.it.keys) {
                            m = LEAP.popupMenu.it.getvalue(g);
                            if (null != m) {
                                h = d.getAttribute("popupmenubtn");
                                if (null != h) {
                                    h = h.split(" ");
                                    if (g != h[0] && !r) {
                                        m.style.display = "none";
                                    }
                                } else {
                                    m.style.display = "none";
                                }
                            }
                        }
                    } else {
                        for (g in LEAP.popupMenu.it.keys) {
                            m = LEAP.popupMenu.it.getvalue(g);
                            if (null != m) {
                                if (g != LEAP.popupMenu.currentut) {
                                    m.style.display = "none";
                                }
                            }
                        }
                        LEAP.popupMenu.currentut = null;
                    }
                }
                return;
            }
            while (true) {
                if (null == d) {
                    break;
                }
                if ("BODY" == d.tagName) {
                    break;
                }
                if ("pop_item" == d.getAttribute("ctf")) {
                    o = d.getAttribute("itemname");
                    break;
                }
                d = d.parentNode;
            }
            if (null != o) {
                ElementEventManager.handleEvent(n, "OnClick", {
                    itemname: o,
                    data: d.data,
                    eventobj: d
                });
                if (m != null) {
                    m.style.display = "none";
                }
            }
        } finally {
            h = q = p = r = n = j = g = l = d = null;
        }
    };
    LEAP.popupMenu.getPop = function(g, j) {
        var h = null;
        try {
            if (null == g || "" == g) {
                g = "_globle_popbutton_v1.0";
            }
            h = LEAP.getElement("ul[ut=" + g + "][ct=popupmenu]");
            if (null != h) {
                return h;
            }
            if (null == j) {
                if ("CSS1Compat" == document.compatMode) {
                    j = "nav_pop_DOCTYPE";
                } else {
                    if (LEAP.isIE) {
                        j = "nav_pop";
                    } else {
                        j = "nav_pop_DOCTYPE";
                    }
                }
            }
            h = document.createElement("UL");
            document.body.appendChild(h);
            h.setAttribute("ut", g);
            h.setAttribute("ct", "popupmenu");
            h.className = j;
            if (null == LEAP.popupMenu.it) {
                LEAP.popupMenu.it = new hashtable();
            }
            LEAP.popupMenu.it.add(g, h);
            return h;
        } catch (d) {
            return null;
        } finally {
            j = h = g = null;
        }
    };
    LEAP.popupMenu.rf = function() {
        var m = null;
        var o = null;
        var u = null;
        var q = null;
        var x = null;
        var r = null;
        var A = null;
        var h = null;
        var g = null;
        var d = null;
        var v = null;
        var n = 0;
        var B = 0;
        var y = null;
        var z = null;
        try {
            if (null != LEAP.popupMenu.it) {
                for (m in LEAP.popupMenu.it.keys) {
                    r = LEAP.popupMenu.it.getvalue(m);
                    if (null == r) {
                        continue;
                    }
                    x = r[ElementEventManager.e];
                    if (null == x) {
                        LEAP.addEvent(r, "OnClick", LEAP.popupMenu.itemclick);
                    } else {
                        if (0 == x.keys.length) {
                            LEAP.addEvent(r, "OnClick", LEAP.popupMenu.itemclick);
                        }
                    }
                }
            }
            A = LEAP.getElements("[popupmenuicon]");
            if (null != A) {
                for (u = 0; u < A.length; u++) {
                    d = false;
                    if (null != LEAP.popupMenu.icons) {
                        for (q = 0; q < LEAP.popupMenu.icons.length; q++) {
                            if (A[u] == LEAP.popupMenu.icons[q]) {
                                d = true;
                                break;
                            }
                        }
                    }
                    if (d) {
                        continue;
                    }
                    h = A[u].getAttribute("popupmenuicon");
                    g = h.split(" ");
                    h = null;
                    if (2 > g.length) {
                        continue;
                    }
                    v = document.createElement("div");
                    A[u].parentNode.insertBefore(v, A[u]);
                    if (null != g[3] && "" != g[3]) {
                        v.className = g[3];
                    } else {
                        v.className = "nav_pop_icon";
                    }
                    v.style.display = "block";
                    v.setAttribute("title", "选择常用语");
                    v.iconposition = g[2];
                    v.style.width = "16px";
                    v.style.height = "16px";
                    if (null == LEAP.popupMenu.icons) {
                        LEAP.popupMenu.icons = new Array();
                    }
                    LEAP.popupMenu.icons.add(A[u]);
                    LEAP.addEvent(v, "click", LEAP.popupMenu.icclick, {
                        pic: g[0],
                        pm: g[1]
                    }, null, true);
                    if (null == A[u].onresize) {
                        LEAP.addEvent(A[u], "resize", LEAP.popupMenu.icresize, {
                            obj: v,
                            trgobj: A[u],
                            type: g[2]
                        }, null, true);
                    }
                    n = 0;
                    B = 0;
                    if ("CSS1Compat" == document.compatMode || !LEAP.isIE) {
                        y = A[u];
                        while (true) {
                            if (null == y) {
                                break;
                            }
                            n += y.offsetLeft;
                            B += y.offsetTop;
                            y = y.offsetParent;
                        }
                        y = null;
                    }
                    switch (g[2]) {
                        case "lefttop":
                            v.style.left = n + "px";
                            v.style.top = B + "px";
                            break;
                        case "righttop":
                            v.style.left = (n + A[u].offsetWidth - v.offsetWidth) + "px";
                            v.style.top = B + "px";
                            break;
                        case "bottomleft":
                            v.style.left = n + "px";
                            v.style.top = (B + A[u].offsetHeight - v.offsetHeight) + "px";
                            break;
                        case "bottomright":
                            v.style.left = (n + A[u].offsetWidth - v.offsetWidth) + "px";
                            v.style.top = (B + A[u].offsetHeight - v.offsetHeight) + "px";
                            break;
                        default:
                            v.style.left = (n + A[u].offsetWidth - v.offsetWidth) + "px";
                            v.style.top = B + "px";
                    }
                    o = LEAP.getElements("[popupmenuvalue=" + g[0] + "]");
                    if (null != o) {
                        r = LEAP.getElement("UL[ut=" + g[1] + "][ct=popupmenu]");
                        if (null != r) {
                            if (1 < o.length) {
                                v.setAttribute("isprivite", false);
                                for (q = 0; q < o.length; q++) {
                                    if (null == o[q].onfocus) {
                                        o[q].tag_obj = r;
                                        LEAP.addEvent(o[q], "focus", LEAP.popupMenu.ckv, null, null, true);
                                    }
                                }
                            } else {
                                v.setAttribute("isprivite", true);
                            }
                        }
                        r = null;
                    }
                }
            }
        } catch (w) {} finally {
            z = g = y = v = d = A = x = u = q = o = m = null;
        }
    };
    LEAP.popupMenu.icresize = function(d) {
        var m = null;
        var n = null;
        var g = 0;
        var j = 0;
        try {
            if (null == d) {
                return;
            }
            if (null == d.arg) {
                return;
            }
            if (null == d.arg.obj) {
                return;
            }
            if (null == d.arg.trgobj) {
                return;
            }
            if ("CSS1Compat" == document.compatMode) {
                n = d.arg.trgobj;
                while (true) {
                    if (null == n) {
                        break;
                    }
                    g += n.offsetLeft;
                    j += n.offsetTop;
                    n = n.offsetParent;
                }
                n = null;
            }
            switch (d.arg.type) {
                case "lefttop":
                    d.arg.obj.style.left = g + "px";
                    d.arg.obj.style.top = j + "px";
                    break;
                case "righttop":
                    d.arg.obj.style.left = (g + d.arg.trgobj.offsetWidth - d.arg.obj.offsetWidth) + "px";
                    d.arg.obj.style.top = j + "px";
                    break;
                case "bottomleft":
                    d.arg.obj.style.left = g + "px";
                    d.arg.obj.style.top = (j + d.arg.trgobj.offsetHeight - d.arg.obj.offsetHeight) + "px";
                    break;
                case "bottomright":
                    d.arg.obj.style.left = (g + d.arg.trgobj.offsetWidth - d.arg.obj.offsetWidth) + "px";
                    d.arg.obj.style.top = (j + d.arg.trgobj.offsetHeight - d.arg.obj.offsetHeight) + "px";
                    break;
                default:
                    d.arg.obj.style.left = (g + d.arg.trgobj.offsetWidth - d.arg.obj.offsetWidth) + "px";
                    d.arg.obj.style.top = j + "px";
            }
        } catch (h) {} finally {
            n = m = d = null;
        }
    };
    LEAP.popupMenu.icclick = function(d) {
        var l = null;
        var h = null;
        var j = null;
        try {
            if (null == d.caller) {
                return;
            }
            if (null == d.arg || "" == d.arg) {
                return;
            }
            if (null == d.arg.pm || "" == d.arg.pm) {
                return;
            }
            l = LEAP.getElement("UL[ut=" + d.arg.pm + "][ct=popupmenu]");
            if (null == l) {
                return;
            }
            l.iconbtn = d.caller;
            if (d.caller.getAttribute("isprivite")) {
                if (null == d.arg.pic || "" == d.arg.pic) {
                    return;
                }
                h = LEAP.getElement("[popupmenuvalue=" + d.arg.pic + "]");
                if (null == h) {
                    return;
                }
                l.tag_obj = h;
            }
            j = d.caller.iconposition;
            switch (j) {
                case "lefttop":
                    LEAP.popupMenu.show(l, d.caller, null, "leftbottomright");
                    break;
                case "righttop":
                    LEAP.popupMenu.show(l, d.caller, null, "rightbottomleft");
                    break;
                case "bottomleft":
                    LEAP.popupMenu.show(l, d.caller, null, "lefttopright");
                    break;
                case "bottomright":
                    LEAP.popupMenu.show(l, d.caller, null, "righttopleft");
                    break;
                default:
                    LEAP.popupMenu.show(l, d.caller, null, "rightbottomleft");
            }
        } catch (g) {} finally {
            l = d = null;
        }
    };
    LEAP.popupMenu.itemclick = function(d) {
        var g = null;
        try {
            if (null == d) {
                return;
            }
            if (null == d.caller) {
                return;
            }
            if (null == d.arg2) {
                return;
            }
            if (null == d.arg2.eventobj) {
                return;
            }
            if (null == d.caller.tag_obj) {
                return;
            }
            g = LEAP.popupMenu.getText(d.arg2.eventobj);
            g = null == g ? "" : g;
            if (null != d.caller.tag_obj.value) {
                d.caller.tag_obj.value += g;
            } else {
                d.caller.tag_obj.innerText += g;
            }
            if (null == d.caller.iconbtn) {
                return;
            }
            if (!d.caller.iconbtn.getAttribute("isprivite")) {
                d.caller.tag_obj = null;
            }
        } catch (h) {
            return;
        } finally {
            g = d = null;
        }
    };
    LEAP.popupMenu.ckv = function(d) {
        try {
            if (null == d) {
                return;
            }
            if (null == d.caller) {
                return;
            }
            if (null == d.caller.tag_obj) {
                return;
            }
            d.caller.tag_obj.tag_obj = d.caller;
        } catch (g) {
            return;
        } finally {
            d = null;
        }
    };
    LEAP.popupMenu.getText = function(h) {
        var g = null;
        var j = null;
        try {
            j = LEAP._match(h, LEAP.popupMenu.d);
            if (null == j) {
                return null;
            }
            g = LEAP.getElement("[ctf=pop_text]", h);
            if (null == g) {
                return null;
            }
            return g.innerText;
        } catch (d) {
            return null;
        } finally {
            h = g = j = null;
        }
    };
    LEAP.popupMenu.show = function(o, d, q, r) {
        var h = null;
        var n = null;
        var j = 0;
        var u = 0;
        var m = null;
        var g = null;
        try {
            o = LEAP._match(o, LEAP.popupMenu.d);
            if (null == o) {
                return;
            }
            h = o.getAttribute("ut");
            if (null == h) {
                return;
            }
            m = "CSS1Compat" == document.compatMode ? document.documentElement : document.body;
            if (null != d && "object" == typeof(d)) {
                if (null != q && "object" == typeof(q)) {
                    q.setAttribute("popupmenubtn", h);
                } else {
                    d.setAttribute("popupmenubtn", h);
                }
                n = d;
                while (true) {
                    if (null == n) {
                        break;
                    }
                    j += n.offsetLeft;
                    u += n.offsetTop;
                    n = n.offsetParent;
                }
                o.style.display = "block";
                switch (r) {
                    case "lefttopleft":
                        o.style.left = (j > o.offsetWidth ? j - o.offsetWidth : j) + "px";
                        o.style.top = (u > o.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "lefttopright":
                        o.style.left = (j + o.offsetWidth > m.offsetWidth ? j - o.offsetWidth : j) + "px";
                        o.style.top = (u > o.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "righttopleft":
                        o.style.left = (j + d.offsetWidth > o.offsetWidth ? j + d.offsetWidth - o.offsetWidth : j + d.offsetWidth) + "px";
                        o.style.top = (u > o.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "righttopright":
                        o.style.left = (j + d.offsetWidth + o.offsetWidth > m.offsetWidth ? j + d.offsetWidth - o.offsetWidth : j + d.offsetWidth) + "px";
                        o.style.top = (u > o.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "rightbottomleft":
                        o.style.left = (j + d.offsetWidth > o.offsetWidth ? j + d.offsetWidth - o.offsetWidth : j + d.offsetWidth) + "px";
                        o.style.top = (u + d.offsetHeight + o.offsetHeight > m.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "rightbottomright":
                        o.style.left = (j + d.offsetWidth + o.offsetWidth > m.offsetWidth ? j + d.offsetWidth - o.offsetWidth : j + d.offsetWidth) + "px";
                        o.style.top = (u + d.offsetHeight + o.offsetHeight > m.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "leftbottomleft":
                        o.style.left = (j > o.offsetWidth ? j - o.offsetWidth : j) + "px";
                        o.style.top = (u + d.offsetHeight + o.offsetHeight > m.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    case "leftbottomright":
                        o.style.left = (j + o.offsetWidth > m.offsetWidth ? j - o.offsetWidth : j) + "px";
                        o.style.top = (u + d.offsetHeight + o.offsetHeight > m.offsetHeight ? u - o.offsetHeight : u + d.offsetHeight) + "px";
                        break;
                    default:
                        o.style.left = ((j + o.offsetWidth) > m.offsetWidth ? (j + d.offsetWidth - o.offsetWidth) : j) + "px";
                        o.style.top = ((u + d.offsetHeight + o.offsetHeight) > m.offsetHeight ? (u - o.offsetHeight) : u + d.offsetHeight) + "px";
                }
            } else {
                g = LEAP.popupMenu._getEvent();
                LEAP.popupMenu.currentut = h;
                o.style.display = "block";
                o.style.left = ((o.offsetWidth + g.clientX > window.screen.width ? g.clientX - o.offsetWidth : g.clientX) + m.scrollLeft) + "px";
                o.style.top = ((o.offsetHeight + g.clientY > window.screen.height ? g.clientY - o.offsetHeight : g.clientY) + m.scrollTop) + "px";
            }
        } catch (p) {} finally {
            g = m = j = u = n = h = o = d = q = null;
        }
    };
    LEAP.popupMenu._getEvent = function() {
        var h = null;
        try {
            if (LEAPBrowser.isIE && LEAPBrowser.IEVersion < 10) {
                return window.event;
            }
            h = LEAP.popupMenu._getEvent.caller;
            while (h != null) {
                var g = h.arguments[0];
                if (g) {
                    if ((g.constructor == Event || g.constructor == MouseEvent) || (typeof(g) == "object" && g.preventDefault && g.stopPropagation)) {
                        return g;
                    }
                }
                h = h.caller;
            }
            return null;
        } catch (d) {} finally {
            h = null;
        }
    };
    LEAP.popupMenu.setWidth = function(l, d) {
        var g = null;
        var j = null;
        try {
            l = LEAP._match(l, LEAP.popupMenu.d);
            if (null == l) {
                return false;
            }
            l.style.width = d + "px";
            g = LEAP.getElements("LI", l);
            if (null != g) {
                for (j = 0; j < g.length; j++) {
                    g[j].style.width = d + "px";
                }
            }
            g = LEAP.getElements("[ctf=pop_text]", l);
            if (null != g) {
                for (j = 0; j < g.length; j++) {
                    g[j].style.width = d + "px";
                }
            }
            return true;
        } catch (h) {
            return false;
        } finally {
            j = g = l = d = null;
        }
    };
    LEAP.popupMenu.setHeight = function(j, g) {
        try {
            j = LEAP._match(j, LEAP.popupMenu.d);
            if (null == j) {
                return false;
            }
            j.style.overflowY = "auto";
            if (!LEAP.isIE) {
                j.style.overflowX = "hidden";
            }
            j.style.height = g + "px";
        } catch (d) {
            return false;
        } finally {
            j = g = null;
        }
    };
    LEAP.popupMenu.getChildNodesCount = function(g) {
        try {
            g = LEAP._match(g, LEAP.popupMenu.d);
            if (null == g) {
                return 0;
            }
            return g.childNodes.length;
        } catch (d) {
            return 0;
        } finally {
            g = null;
        }
    };
    LEAP.popupMenu._getnewitem = function(l, h, g) {
        var m = null;
        var d = null;
        try {
            if (null != LEAP.popupMenu.tp && "" != LEAP.popupMenu.tp) {
                m = document.createElement("ul");
                m.innerHTML = LEAP.popupMenu.tp;
                m = m.childNodes[0];
            } else {
                m = document.createElement("LI");
            }
            m.style.width = l.style.width;
            m.style.height = "16px";
            m.setAttribute("ctf", "pop_item");
            m.setAttribute("itemname", h);
            m.setAttribute("title", g);
            m.className = "nav_pop_li";
            d = LEAP.getElement("A[ctf=pop_text]", m);
            if (null == d) {
                d = document.createElement("A");
                if (LEAP.isIE) {
                    d.className = "nav_pop_a";
                }
                d.setAttribute("ctf", "pop_text");
                d.style.width = l.style.width;
                d.style.height = "16px";
                m.appendChild(d);
            }
            d.appendChild(document.createTextNode(g));
            if (null == m.onmouseover) {
                m.onmouseover = function() {
                    this.className += (this.className.length > 0 ? " " : "") + "sfhover";
                };
            }
            if (null == m.onmouseout) {
                m.onmouseout = function() {
                    this.className = this.className.replace(new RegExp("( ?|^)sfhover\\b"), "");
                };
            }
            return m;
        } catch (j) {
            return null;
        } finally {
            m = l = h = g = null;
        }
    };
    LEAP.popupMenu.insertBefore = function(o, h, g, m) {
        var p = null;
        var d = null;
        var l = null;
        try {
            o = LEAP._match(o, LEAP.popupMenu.d);
            if (null == o) {
                return false;
            }
            p = LEAP.popupMenu._getnewitem(o, h, g);
            if (null == p) {
                return false;
            }
            d = LEAP.getElement("LI[itemname=" + m + "]", o);
            if (null == d) {
                return false;
            }
            l = d.parentNode;
            if (null == l) {
                return false;
            }
            if ("UL" != l.tagName) {
                return false;
            }
            l.insertBefore(p, d);
            return true;
        } catch (j) {
            return false;
        } finally {
            l = d = p = o = h = g = m = null;
        }
    };
    LEAP.popupMenu.addItem = function(r, g, l, q) {
        var h = null;
        var m = null;
        var o = null;
        var j = null;
        try {
            m = LEAP._match(r, LEAP.popupMenu.d);
            if (null == m) {
                return null;
            }
            if (LEAP.popupMenu.d == r.getAttribute("ct")) {
                o = m;
            } else {
                for (j = 0; j < r.childNodes.length; j++) {
                    if ("UL" == r.childNodes[j].tagName) {
                        o = r.childNodes[j];
                        break;
                    }
                }
                if (null == o) {
                    o = document.createElement("UL");
                    r.appendChild(o);
                }
            }
            if (null == o) {
                return null;
            }
            if ("UL" != o.tagName) {
                return null;
            }
            h = LEAP.popupMenu._getnewitem(m, g, l);
            if (null == h) {
                return null;
            }
            if (null != q) {
                h.data = q;
            }
            o.appendChild(h);
            return h;
        } catch (p) {
            return null;
        } finally {
            j = q = h = o = m = g = l = r = null;
        }
    };
    LEAP.popupMenu.removeItem = function(l, d) {
        var m = null;
        var j = null;
        var h = null;
        try {
            l = LEAP._match(l, LEAP.popupMenu.d);
            if (null == l) {
                return false;
            }
            m = LEAP.getElement("LI[itemname=" + d + "]", l);
            if (null == m) {
                return false;
            }
            j = m.parentNode;
            if (null == j) {
                return false;
            }
            for (h = 0; h < m.childNodes.length; h++) {
                if ("UL" == m.childNodes[h].tagName) {
                    LEAP.popupMenu._removeF(m.childNodes[h]);
                }
            }
            m.onmouseout = null;
            m.onmouseover = null;
            j.removeChild(m);
            return true;
        } catch (g) {
            return false;
        } finally {
            h = m = l = d = null;
        }
    };
    LEAP.popupMenu.dispose = function(j) {
        var d = null;
        var h = null;
        try {
            j = LEAP._match(j, LEAP.popupMenu.d);
            if (null == j) {
                return;
            }
            h = j.getAttribute("ut");
            d = j.parentNode;
            if (null == d) {
                return;
            }
            LEAP.popupMenu._removeF(j);
            d.removeChild(j);
            if (null != LEAP.popupMenu.it) {
                LEAP.popupMenu.it.remove(h);
            }
        } catch (g) {} finally {
            j = null;
        }
    };
    LEAP.popupMenu.removeAll = function(h) {
        var g = null;
        try {
            h = LEAP._match(h, LEAP.popupMenu.d);
            if (null == h) {
                return;
            }
            LEAP.popupMenu._removeF(h);
            for (g = h.childNodes.length - 1; g >= 0; g--) {
                h.removeChild(h.childNodes[g]);
            }
        } catch (d) {
            return false;
        } finally {
            g = h = null;
        }
    };
    LEAP.popupMenu.removeChild = function(j, d) {
        var l = null;
        var h = null;
        try {
            j = LEAP._match(j, LEAP.popupMenu.d);
            if (null == j) {
                return false;
            }
            l = LEAP.getElement("LI[itemname=" + d + "]", j);
            if (null == l) {
                return false;
            }
            for (h = l.childNodes.length - 1; h >= 0; h--) {
                if ("UL" == l.childNodes[h].tagName) {
                    LEAP.popupMenu._removeF(l.childNodes[h]);
                    l.removeChild(l.childNodes[h]);
                }
            }
            return true;
        } catch (g) {
            return false;
        } finally {
            h = l = j = d = null;
        }
    };
    LEAP.popupMenu.updateText = function(l, g, j) {
        var m = null;
        var d = null;
        try {
            l = LEAP._match(l, LEAP.popupMenu.d);
            if (null == l) {
                return false;
            }
            m = LEAP.getElement("LI[itemname=" + g + "]", l);
            if (null == m) {
                return false;
            }
            d = m.getElementsByTagName("A");
            if (null == d) {
                if (null != m.firstChild) {
                    m.firstChild.nodeValue = j;
                } else {
                    m.innerText = j;
                }
            } else {
                if (d.length > 0) {
                    d[0].innerText = j;
                } else {
                    if (null != m.firstChild) {
                        m.firstChild.nodeValue = j;
                    } else {
                        m.innerText = j;
                    }
                }
            }
            return true;
        } catch (h) {
            return false;
        } finally {
            d = m = l = g = j = null;
        }
    };
    LEAP.popupMenu._removeF = function(j) {
        var d = null;
        var h = null;
        try {
            if (null == j) {
                return false;
            }
            d = LEAP.getElements("LI[ctf=pop_item]", j);
            if (null == d) {
                return false;
            }
            for (h = 0; h < d.length; h++) {
                d[h].onmouseout = null;
                d[h].onmouseover = null;
            }
        } catch (g) {
            return false;
        } finally {
            h = d = j = null;
        }
    };
    LEAP.popupMenu.hidden = function() {
        var d = null;
        var g = null;
        try {
            if (null != LEAP.popupMenu.it) {
                for (d in LEAP.popupMenu.it.keys) {
                    g = LEAP.popupMenu.it.getvalue(d);
                    if (null != g) {
                        g.style.display = "none";
                    }
                }
            }
        } finally {
            g = d = null;
        }
    };
    LEAP.popupMenu.init();
    LEAP.simplecheck = {};
    LEAP.simplecheck.d = "simplecheck";
    LEAP.simplecheck.init = function() {
        if (document != null && document.body != null) {
            LEAP.simplecheck._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.simplecheck._init);
        }
        ElementEventManager.addManagedEventType(LEAP.simplecheck.d, "valueChange");
    };
    LEAP.simplecheck._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.simplecheck.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.simplecheck._init);
    };
    LEAP.simplecheck.uiProcess = function(A) {
        var d = A.e.srcElement;
        var u = A.e.type;
        var z = null;
        try {
            z = LEAP.simplecheck.getGroupItems(d);
            var n = null;
            var h = null;
            if (z != null) {
                var m = z.length;
                var y = null;
                if (m > 0) {
                    var v = d.getAttribute("checktype");
                    if (v == null || v != "check") {
                        v = "radio";
                    }
                    var r = true;
                    if (v == "check") {
                        r = false;
                    }
                    var w = d.checked;
                    if (w) {
                        d.checked = false;
                        h = LEAP.simplecheck.getValue(d);
                        d.checked = true;
                    } else {
                        d.checked = true;
                        h = LEAP.simplecheck.getValue(d);
                        d.checked = false;
                    }
                    if (r) {
                        if (w) {
                            for (var p = 0; p < m; p++) {
                                var x = z[p];
                                if (x != d && x.checked) {
                                    x.checked = false;
                                }
                                x = null;
                            }
                        }
                    } else {}
                    var g = false;
                    for (var o = 0; o < m; o++) {
                        y = z[o];
                        var q = y[ElementEventManager.e];
                        if (q != null && q.contains("valueChange")) {
                            g = true;
                            break;
                        }
                    }
                    n = LEAP.simplecheck.getValue(d);
                    if (g) {
                        ElementEventManager.handleEvent(y, "valueChange", {
                            newvalue: n,
                            oldvalue: h,
                            src: d,
                            pv: h,
                            lv: n
                        });
                    }
                }
            }
        } finally {
            z = d = A = n = h = q = null;
        }
    };
    LEAP.simplecheck.getGroupItems = function(d, o) {
        var j = null;
        try {
            var l = d.getAttribute(commfields.ctg);
            if (l == null || l != LEAP.simplecheck.d) {
                return;
            }
            var m = d.getAttribute(commfields.md);
            if (m == null) {
                return;
            }
            var p = d.getAttribute(commfields.instance);
            if (p == null) {
                return;
            }
            var n = d.getAttribute(commfields.value);
            if (n == null) {
                return;
            }
            var g = LEAP.getLoadedModule(p);
            if (g == null) {
                return;
            }
            var h = "input[md=" + m + "][instance=" + p + "]";
            if (o != null) {
                h += ":checked";
            }
            j = LEAP.getElements(h, g.parentElement);
            return j;
        } finally {
            d = g = null;
        }
    };
    LEAP.simplecheck.getValue = function(m) {
        var n = null;
        try {
            n = LEAP.simplecheck.getGroupItems(m, true);
            if (n != null) {
                var d = n.length;
                var h = [];
                for (var j = 0; j < d; j++) {
                    var o = n[j];
                    var g = o.getAttribute(commfields.value);
                    if (!String.isEmpty(g)) {
                        h.add(g);
                    }
                    o = null;
                }
                if (h.length > 0) {
                    return h.join(",");
                }
                return null;
            } else {
                return null;
            }
        } finally {
            n = m = null;
        }
    };
    LEAP.simplecheck.setValue = function(m, o) {
        var n = null;
        try {
            n = LEAP.simplecheck.getGroupItems(m);
            if (n != null) {
                var h = null;
                if (!String.isEmpty(o)) {
                    h = o.trim().split(",");
                }
                var d = n.length;
                for (var j = 0; j < d; j++) {
                    var p = n[j];
                    var g = p.getAttribute(commfields.value);
                    if (h == null) {
                        p.checked = false;
                    } else {
                        if (!String.isEmpty(g) && h.contains(g)) {
                            p.checked = true;
                        } else {
                            p.checked = false;
                        }
                    }
                    p = null;
                }
            }
        } finally {
            n = m = null;
        }
    };
    LEAP.simplecheck.init();
    LEAP.stat = {};
    LEAP.stat.d = "stat";
    LEAP.stat.init = function() {
        ElementEventManager.addManagedEventType(LEAP.stat.d, "statclick");
        if (document != null && document.body != null) {
            LEAP.stat._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.stat._init);
        }
    };
    LEAP.stat._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.stat.uiProcess, null, null, true);
    };
    LEAP.stat.uiProcess = function(d) {
        var o = d.e.srcElement;
        var n = o.getAttribute("ctf");
        var l = d.e.type;
        if (n != null && o.getAttribute("canclick") == "1" && n.startsWith("stat_")) {
            var j = LEAP._match(o, LEAP.stat.d);
            if (j != null && j.getAttribute("ct") == "stat") {
                var m = o.getAttribute("_cols");
                var g = o.getAttribute("_cells");
                if (String.isEmpty(m)) {
                    m = null;
                } else {
                    m = m.split(",");
                }
                if (String.isEmpty(g)) {
                    g = null;
                } else {
                    g = g.split(",");
                }
                var h = null;
                if (m != null) {
                    h = m[m.length - 1];
                }
                ElementEventManager.handleEvent(j, "statclick", {
                    caller: o,
                    type: n.substring(5),
                    cols: m,
                    cells: g,
                    x: o.getAttribute("x"),
                    y: o.getAttribute("y"),
                    value: o.innerHTML,
                    id: o.getAttribute("_id"),
                    name: o.getAttribute("_name"),
                    key: h
                });
            }
            j = null;
        }
        d = o = null;
    };
    LEAP.stat.clear = function(h) {
        var j = LEAP.getElement("thead", h);
        LEAP.removeElement(j.rows, true);
        j = null;
        var g = LEAP.getElement("tbody", h);
        LEAP.removeElement(g.rows, true);
        g = null;
        var d = LEAP.getElement("div.flashchart:first", h);
        if (d != null) {
            LEAP.flashchart.setValue(d, null);
            d = null;
        }
    };
    LEAP.stat.setValue = function(y, af) {
        if (af == null) {
            LEAP.stat.clear(y);
            return;
        }
        var o = af.javaClass != null && af.javaClass == commfields.rsc;
        if (!o) {
            LEAP.messagebox.alert("统计分析表格只支持ResultSet类型的数据集!", 2);
            return;
        }
        var ai = null;
        var K = af.metaData;
        var h = y.getAttribute("namefiled");
        var ab = af.result.length;
        var U = null;
        var Q = null;
        var ae = null;
        if (af.metaData != null) {
            var x = af.metaData.length;
            for (var ad = 0; ad < x; ad++) {
                var B = af.metaData[ad];
                var w = B.name;
                if (w == "id") {
                    ai = [];
                    for (var ac = 0; ac < ab; ac++) {
                        ai.add(af.result[ac][ad]);
                    }
                    U = ad;
                } else {
                    if (String.isEmpty(h)) {
                        h = w;
                    }
                    if (h == w) {
                        ae = [];
                        for (var ac = 0; ac < ab; ac++) {
                            ae.add(af.result[ac][ad]);
                        }
                        Q = ad;
                    }
                }
                if (ai != null && !String.isEmpty(h)) {
                    break;
                }
            }
            if (U != null) {
                af.metaData.removeindex(U);
                for (var ac = 0; ac < ab; ac++) {
                    af.result[ac].removeindex(U);
                }
            }
        }
        var Z = LEAP.convertResult(af);
        var C = String.getString(y.getAttribute("swaprc"), "0");
        if (C == "1") {
            if (!(D instanceof Array)) {
                D = [D];
            }
            var aa = D.length;
            var ag = af.metaData.length;
            var K = [];
            var G = [];
            for (var ad = 0; ad < ag; ad++) {
                var B = af.metaData[ad];
                var p = B.cnName;
                if (String.isEmpty(p)) {
                    p = B.name;
                }
                if (ad == 0) {
                    K[0] = {
                        name: B.name,
                        cnName: B.cnName
                    };
                } else {
                    G[ad - 1] = [];
                    G[ad - 1][0] = p;
                }
            }
            var o = af.javaClass != null && af.javaClass == commfields.rsc;
            if (!o) {
                var D = Z;
                for (var ad = 0; ad < aa; ad++) {
                    var q = D[ad];
                    var X = 0;
                    for (var A in q) {
                        var V = q[A];
                        if (X == 0) {
                            K[ad + 1] = {
                                name: V
                            };
                        } else {
                            G[X - 1][ad + 1] = V;
                        }
                        X++;
                    }
                }
            } else {
                var aa = af.result.length;
                var x = af.metaData.length;
                for (var ad = 0; ad < aa; ad++) {
                    var q = af.result[ad];
                    var X = 0;
                    for (var ac = 0; ac < x; ac++) {
                        var V = q[ac];
                        if (ac == 0) {
                            K[ad + 1] = {
                                name: V
                            };
                        } else {
                            G[ac - 1][ad + 1] = V;
                        }
                        X++;
                    }
                }
            }
            af = {
                metaData: K,
                result: G,
                javaClass: commfields.rsc
            };
            Z = LEAP.convertResult(af);
        } else {
            C = 0;
        }
        var W = y.getAttribute("headers");
        var F = y.getAttribute("cells");
        var v = y.getAttribute("headerclick");
        var T = y.getAttribute("cellclick");
        var P = y.getAttribute("resultclick");
        var r = String.getString(y.getAttribute("rowspan"), "1") == "1";
        if (v == null) {
            v = 0;
        }
        if (T == null) {
            v = 0;
        }
        if (P == null) {
            v = 0;
        }
        y[LEAP.table.a] = null;
        dyna = true;
        if (String.isEmpty(W)) {
            W = 0;
        } else {
            W = W * 1;
        }
        if (String.isEmpty(F)) {
            F = 0;
        } else {
            F = F * 1;
        }
        var m = LEAP.getElement("thead", y);
        LEAP.removeElement(m.rows, true);
        var u = [];
        if (W == 0) {
            var z = document.createElement("TR");
            m.appendChild(z);
            var x = af.metaData.length;
            var S = null;
            for (var ad = 0; ad < x; ad++) {
                var B = af.metaData[ad];
                var w = B.name;
                u[ad] = [];
                u[ad].add(w);
                if (S != null && w == S.innerHTML) {
                    S.colSpan += 1;
                    continue;
                }
                var p = B.cnName;
                if (String.isEmpty(p)) {
                    p = w;
                }
                var g = document.createElement("TH");
                z.appendChild(g);
                g.innerText = p;
                g.md = w;
                g.setAttribute("isstat", "1");
                g._colspan = "1";
                if ((ad + 1) < F) {
                    g._rowspan = "1";
                }
                S = g;
                g.style.borderTopWidth = "0px";
                if (ad == 0) {
                    g.style.borderLeft = "1px solid #8ca2c9";
                } else {
                    g.style.borderLeftWidth = "0px";
                }
                g.setAttribute("ctf", "stat_header");
                g.x = 1;
                g.y = ad + 1;
                if (v == 1) {
                    g.setAttribute("canclick", "1");
                    g.style.textDecoration = "underline";
                    g.style.cursor = "pointer";
                }
                if (C == 1 && ad > 0) {
                    if (ai != null) {
                        g.setAttribute("_id", ai[ad]);
                    }
                    if (ae != null) {
                        g.setAttribute("_name", ae[ad]);
                    }
                }
            }
            S = null;
        }
        if (W > 0) {
            var x = af.metaData.length;
            var S = null;
            var I = [];
            for (var ad = 0; ad < W; ad++) {
                if (ad >= af.result.length) {
                    break;
                }
                I[ad] = [];
                var z = document.createElement("TR");
                m.appendChild(z);
                var J = af.result[ad];
                for (var ac = 0; ac < x; ac++) {
                    var w = J[ac];
                    if (ad == 0) {
                        u[ac] = [];
                    }
                    u[ac].add(w);
                    if (r && S != null && w == S.innerHTML) {
                        S.colSpan += 1;
                        I[ad][ac] = S;
                        continue;
                    }
                    var L = document.createElement("TH");
                    I[ad][ac] = L;
                    L.innerHTML = w;
                    L.setAttribute("isstat", "1");
                    L.setAttribute("ctf", "stat_header");
                    z.appendChild(L);
                    S = L;
                    L.style.borderTopWidth = "0px";
                    if (ad == 0) {
                        L.style.backgroundColor = "#cbe4fa";
                    } else {
                        if (ad == 1) {
                            L.style.backgroundColor = "#DFEDFC";
                        } else {
                            L.style.backgroundColor = "#EDF4FC";
                        }
                    }
                    if (ac == 0) {
                        L.style.borderLeft = "1px solid #8ca2c9";
                    } else {
                        L.style.borderLeftWidth = "0px";
                    }
                    if (v == 1) {
                        L.setAttribute("canclick", "1");
                        L.style.textDecoration = "underline";
                        L.style.cursor = "pointer";
                    }
                    if (ac == 0) {
                        L.style.borderLeftWidth = "1px";
                        L.style.borderLeftColor = "#8ca2c9";
                    }
                    L.x = ad + 1;
                    L.y = ac + 1;
                    if (C == 0) {
                        if (ai != null) {
                            L.setAttribute("_id", ai[ad]);
                        }
                        if (ae != null) {
                            L.setAttribute("_name", ae[ad]);
                        }
                    } else {
                        if (ac > 0) {
                            if (ai != null) {
                                L.setAttribute("_id", ai[ac]);
                            }
                        }
                    }
                    if (ae != null) {
                        L.setAttribute("_name", ae[ac]);
                    }
                }
            }
            if (W > 1) {
                for (var ad = 0; ad < W - 1; ad++) {
                    for (var ac = 0; ac < x; ac++) {
                        var L = I[ad][ac];
                        var M = I[ad + 1][ac];
                        if (L == M) {
                            continue;
                        }
                        if (L.innerHTML == M.innerHTML) {
                            L.rowSpan += 1;
                            I[ad + 1][ac] = L;
                            LEAP.removeElement(M);
                        }
                    }
                }
            }
            S = null;
        }
        var N = af.result.length;
        var R = LEAP.getElement("tbody", y);
        LEAP.removeElement(R.rows, true);
        var O = [];
        for (var ad = W; ad < N; ad++) {
            var z = document.createElement("TR");
            R.appendChild(z);
            if ((ad % 2) == 0) {
                z.style.backgroundColor = LEAP.table.spcolor;
            } else {
                z.style.backgroundColor = LEAP.table.scolor;
            }
            O[ad] = [];
            var J = af.result[ad];
            var H = null;
            for (var ac = 0; ac < x; ac++) {
                var w = J[ac];
                if (F > ac) {
                    if (H == null) {
                        H = [];
                    }
                    H.add(w);
                }
                if (r && F > ac && ad > W) {
                    var d = O[ad - 1][ac];
                    if (w == d.innerHTML) {
                        d.setAttribute("_cells", H.toString());
                        O[ad][ac] = d;
                        d.rowSpan += 1;
                        continue;
                    }
                }

                var L = document.createElement("TD");
                L.setAttribute("_cols", u[ac].toString());
                if (H != null) {
                    L.setAttribute("_cells", H.toString());
                }
                if (String.isEmpty(w)) {
                    w = "0";
                }
                L.innerHTML = w;
                L.style.textAlign = "center";
                z.appendChild(L);
                if (F > 0) {
                    O[ad][ac] = L;
                }
                L.x = ad + 1;
                L.y = ac + 1;
                L.style.borderTopWidth = "0px";
                if (ac == 0) {
                    L.style.borderLeft = "1px solid #ccc";
                } else {
                    L.style.borderLeftWidth = "0px";
                }
                if (F > ac) {
                    L.setAttribute("ctf", "stat_cell");
                    L.setAttribute("iscol", "1");
                    if (T == 1) {
                        L.setAttribute("canclick", "1");
                        L.style.textDecoration = "underline";
                        L.style.cursor = "pointer";
                    }
                    L.style.color = "#999999";
                } else {
                    L.setAttribute("ctf", "stat_result");
                    var Y = LEAP.tonum(w);
                    if (Y != 0) {
                        L.style.color = "blue";
                        if (P == 1) {
                            L.setAttribute("canclick", "1");
                            L.style.textDecoration = "underline";
                            L.style.cursor = "pointer";
                        }
                    }
                }
                if (C == 0) {
                    if (ai != null) {
                        L.setAttribute("_id", ai[ad]);
                    }
                    if (ae != null) {
                        L.setAttribute("_name", ae[ad]);
                    }
                } else {
                    if (ac > 0) {
                        if (ai != null) {
                            L.setAttribute("_id", ai[ac]);
                        }
                        if (ae != null) {
                            L.setAttribute("_name", ae[ac]);
                        }
                    }
                }
            }
        }
        for (var ad = W; ad < N; ad++) {
            for (var ac = 1; ac < x; ac++) {
                if (F > ac) {
                    var L = O[ad][ac];
                    var d = O[ad][ac - 1];
                    if (L.rowSpan > 1 || d.rowSpan > 1) {
                        continue;
                    }
                    if (r && L.innerHTML == d.innerHTML) {
                        LEAP.removeElement(L);
                        d.colSpan += 1;
                        O[ad][ac] = d;
                    }
                }
            }
        }
        O = m = R = null;
        var ah = LEAP.getElement("div.flashchart:first", y);
        if (ah != null) {
            ah.setAttribute("namefield", h);
            if (W > 0) {
                var K = [];
                var x = af.metaData.length;
                af.metaData = K;
                for (var ad = 0; ad < x; ad++) {
                    var B = {
                        name: af.result[W - 1][ad]
                    };
                    K.add(B);
                }
                for (var ad = 0; ad < W; ad++) {
                    af.result.removeindex(0);
                }
            }
            if (af.result.length > 0) {
                LEAP.flashchart.setValue(ah, af);
            } else {
                LEAP.flashchart.setValue(ah, null);
            }
        }
    };
    LEAP.stat.init();
    LEAP.statchart = {};
    LEAP.statchart.d = "statchart";
    LEAP.statchart.init = function() {
        ElementEventManager.addManagedEventType(LEAP.statchart.d, "click");
    }();
    LEAP.statchart.initLinkChart = function(d) {
        if (d == null) {
            return;
        }
        d = LEAP._check(d, LEAP.statchart.d);
        if (null == d) {
            return;
        }
        var h = d.getAttribute("linkstatname");
        if (h == null || h == "" || h.indexOf(".") < 0) {
            return;
        }
        var g = h.split(".");
        if (g == null || g.length != 2) {
            return;
        }
        if (!g[0] || !g[1]) {
            return;
        }
        LEAP.request2({
            name: "stat_searchStatResult",
            par: {
                headname: g[0],
                statname: g[1]
            },
            callback: LEAP.statchart.initChartConfig,
            arg: d
        });
    };
    LEAP.statchart.initChartConfig = function(bean, element) {
        if (bean == null) {
            return;
        }
        var viewpanel = false;
        var values = bean.data;
        if (values == null) {
            viewpanel = true;
        }
        var statsource = bean.statsource;
        var conditions = bean.conditions;
        if (conditions == null) {
            return;
        }
        var config = {};
        config.stattype = conditions.stattype;
        var statx = conditions.statx;
        if (statx != null && statx.length > 0) {
            config.statx = statx.split(";");
        }
        var staty = conditions.staty;
        if (staty != null) {
            config.staty = staty.split(";");
        }
        var fieldsBean = bean.fields;
        var fields = {};
        if (fieldsBean != null && fieldsBean.length > 0) {
            var stype = config.stattype;
            var fieldvalue = null;
            for (var i = 0; i < fieldsBean.length; i++) {
                if (stype.indexof("map") > -1) {
                    fieldvalue = fieldsBean[i].fieldtype;
                } else {
                    fieldvalue = fieldsBean[i].cnname;
                }
                fields[fieldsBean[i].name] = fieldvalue;
            }
        }
        config.fields = fields;
        config.hassaved = true;
        config.statsource = statsource;
        if (conditions.option) {
            config.option = eval("(" + conditions.option + ")");
        }
        config.viewpanel = viewpanel;
        LEAP.statchart.setValue(element, config, values);
    };
    LEAP.statchart.setValue = function(l, d, o) {
        if (l == null) {
            return;
        }
        l = LEAP._check(l, LEAP.statchart.d);
        if (null == l) {
            return;
        }
        var n = d.stattype;
        var g = "<div ut='_stateditor' style='width:100%;height: 100%;overflow:auto'></div>";
        var m = "<div ut='_stateditor' ct='echarts' style='width:100%;height: 100%;' timeline=0 showminmax='0' showaverage='0' showtoolbox=0></div>";
        var p = "<div ut='_stateditor' style='width:100%;height: 100%;' ct='GIS'></div>";
        var j = null;
        var h = d.statx;
        if (!h || h.length == 0) {
            LEAP.countStat.setValue(l, d.staty, o);
        } else {
            if (n.indexOf("table") > -1) {
                l.innerHTML = g;
                j = LEAP.getElement("[ut=_stateditor]", l);
                LEAP.tableStat.setValue(j, d, o);
            } else {
                if (n.indexOf("map") > -1) {
                    l.innerHTML = p;
                    j = LEAP.getElement("[ut=_stateditor]", l);
                    LEAP.mapStat.setValue(j, d, o);
                } else {
                    l.innerHTML = m;
                    j = LEAP.getElement("[ut=_stateditor]", l);
                    if (!j) {
                        return;
                    }
                    if (n.indexOf("bar") > -1) {
                        LEAP.barStat.setValue(j, d, o);
                    } else {
                        if (n.indexOf("line") > -1) {
                            LEAP.lineStat.setValue(j, d, o);
                        } else {
                            if (n.indexOf("pie") > -1) {
                                LEAP.pieStat.setValue(j, d, o);
                            } else {
                                if (n.indexOf("mashup") > -1) {
                                    LEAP.mashupStat.setValue(j, d, o);
                                }
                            }
                        }
                    }
                    LEAP.addEvent(j, "click", LEAP.statchart.subProcess, null, null, true);
                }
            }
        }
    };
    LEAP.statchart.subProcess = function(d) {
        if (d == null || d.arg2 == null) {
            return;
        }
        var h = d.arg2;
        var l = h.element;
        if (!l) {
            return;
        }
        var g = LEAP._match(l, LEAP.statchart.d);
        if (!g) {
            return;
        }
        var j = {
            element: g
        };
        j.data = h.data;
        j.name = h.name;
        j.value = h.value;
        j.x = h.x;
        j.arg = h.arg;
        ElementEventManager.handleEvent(g, "click", j);
    };
    LEAP.tableUtil = function(g, d) {
        this.selectedTDClassName = d;
        this.defaultContent = "";
        this.targetDocument = g;
        if (this.targetDocument == null) {
            this.targetDocument = document;
        }
        this.dispose = function() {
            this.targetDocument = null;
        };
        this.getTableDef = function(F) {
            var h = F.rows[0];
            var m = 0;
            for (var D = 0; D < h.cells.length; D++) {
                var l = h.cells[D];
                m += l.colSpan;
            }
            var o = F.rows.length;
            var z = [];
            for (var D = 0; D < o; D++) {
                var y = [];
                y.length = m;
                z.add(y);
            }
            for (var D = 0; D < F.rows.length; D++) {
                var u = F.rows[D];
                var x = u.rowIndex;
                var q = u.cells;
                var B = z[D];
                var n = 0;
                for (var A = 0; A < m; A++) {
                    if (B[A] == null) {
                        break;
                    }
                    n = A + 1;
                }
                for (var C = 0; C < q.length; C++) {
                    var l = q[C];
                    var w = C;
                    var r = l.rowSpan;
                    var v = l.colSpan;
                    for (var A = 0; A < v; A++) {
                        for (var p = 0; p < r; p++) {
                            while (z[x + p][n + C + A] != null) {
                                n += 1;
                            }
                            z[x + p][n + C + A] = {
                                rowIndex: x,
                                cellIndex: w,
                                rowSpan: r,
                                colSpan: v,
                                y: x + p,
                                x: n + C + A
                            };
                        }
                    }
                    n += v - 1;
                }
            }
            var G = {
                tableArray: z,
                cellBound: m,
                rowBound: o
            };
            return G;
        };
        this.getCellsBound = function(o, A) {
            var n = 99999;
            var y = 999999;
            var l = 0;
            var z = 0;
            var u = [];
            var x = A.length;
            for (var v = 0; v < A.length; v++) {
                u.add({
                    cellIndex: A[v].cellIndex,
                    rowIndex: A[v].parentNode.rowIndex
                });
            }
            var h = o.tableArray;
            for (var v = 0; v < o.rowBound; v++) {
                for (var q = 0; q < o.cellBound; q++) {
                    var p = h[v][q];
                    for (var r = 0; r < x; r++) {
                        var m = u[r];
                        if (m.cellIndex == p.cellIndex && m.rowIndex == p.rowIndex) {
                            if (n > p.x) {
                                n = p.x;
                            }
                            if (y > p.y) {
                                y = p.y;
                            }
                            if (z < p.x) {
                                z = p.x;
                            }
                            if (l < p.y) {
                                l = p.y;
                            }
                        }
                    }
                }
            }
            var w = {
                left: n,
                top: y,
                bottom: l,
                right: z,
                rowBound: l - y + 1,
                cellBound: z - n + 1
            };
            return w;
        };
        this.validateRect = function(l, w) {
            var j = this.getCellsBound(l, w);
            var r = [];
            for (var p = 0; p < j.rowBound; p++) {
                var q = [];
                q.length = j.cellBound;
                r.add(q);
            }
            for (var p = j.top; p <= j.bottom; p++) {
                var o = l.tableArray[p];
                for (var n = j.left; n <= j.right; n++) {
                    var m = o[n];
                    r[p - j.top][n - j] = o[n];
                    var v = false;
                    for (var h = 0; h < w.length; h++) {
                        var u = w[h];
                        if (m.cellIndex == u.cellIndex && u.parentNode.rowIndex == m.rowIndex) {
                            v = true;
                            break;
                        }
                    }
                    if (v == false) {
                        return false;
                    }
                }
            }
            return true;
        };
        this.fixSelectRect = function(j, u, r) {
            var h = this.getCellsBound(j, u);
            var p = null;
            for (var o = h.top; o <= h.bottom; o++) {
                var n = j.tableArray[o];
                for (var m = h.left; m <= h.right; m++) {
                    if (p == null) {
                        p = [];
                    }
                    var l = n[m];
                    var q = r.rows[l.rowIndex].cells[l.cellIndex];
                    p.add(q);
                    if (this.selectedTDClassName != null) {
                        LEAP.addCSS(q, this.selectedTDClassName, false);
                    }
                }
            }
            try {
                return p;
            } finally {
                p = null;
            }
        };
        this.mergeCells = function(q, r, j) {
            if (r == null) {
                return;
            }
            if (j == null) {
                j = this.getTableDef(q);
            }
            r = this.fixSelectRect(j, r, q);
            if (this.validateRect(j, r) == false) {
                return;
            }
            var h = this.getCellsBound(j, r);
            var n = 0;
            var m = 0;
            for (var l = r.length - 1; l > 0 - 1; l--) {
                var p = r[l];
                m += p.colSpan;
                var o = p.parentNode.rowIndex;
                if (l == 0) {
                    p.rowSpan = h.rowBound;
                    p.colSpan = h.cellBound;
                }
                if (l != 0) {
                    p.parentNode.removeChild(p);
                }
            }
        };
        this.splitCells = function(F, o) {
            if (o == null) {
                return;
            }
            var n = this.getTableDef(F);
            var y = o.length;
            for (var C = y - 1; C > -1; C--) {
                var h = o[C];
                var v = h.cellIndex;
                var r = h.colSpan - 1;
                var p = h.rowSpan - 1;
                var w = h.parentNode.rowIndex;
                if (r > 0 && p == 0) {
                    var q = h.parentNode;
                    h.colSpan = 1;
                    for (var z = 0; z < r; z++) {
                        var u = null;
                        if (q.cells.length == 0) {
                            u = this.targetDocument.createElement("td");
                        } else {
                            u = this.targetDocument.createElement(q.cells[0].tagName);
                        }
                        u.innerHTML = this.defaultContent;
                        if (h == q.cells[q.cells.length - 1]) {
                            q.appendChild(u);
                        } else {
                            q.insertBefore(u, q.cells[v + 1]);
                        }
                    }
                } else {
                    if (r == 0 && p > 0) {
                        for (var z = 1; z < p + 1; z++) {
                            var q = F.rows[z + w];
                            var D = z + w;
                            var A = n.tableArray[z + w];
                            var G = null;
                            for (var B = n.cellBound - 1; B > -1; B--) {
                                var x = A[B];
                                if (x.rowIndex == D && x.cellIndex == v) {
                                    if (B != n.cellBound - 1) {
                                        for (var m = B; m < n.cellBound; m++) {
                                            if (A[m].rowIndex == q.rowIndex) {
                                                G = q.cells[x.cellIndex];
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                            var u = null;
                            if (q.cells.length == 0) {
                                u = this.targetDocument.createElement("td");
                            } else {
                                u = this.targetDocument.createElement(q.cells[0].tagName);
                            }
                            u.innerHTML = this.defaultContent;
                            if (G != null) {
                                q.insertBefore(u, G);
                            } else {
                                q.appendChild(u);
                            }
                            h.rowSpan = 1;
                        }
                    } else {
                        if (r > 0 && p > 0) {
                            var q = h.parentNode;
                            for (var z = 0; z < r; z++) {
                                var u = null;
                                if (q.cells.length == 0) {
                                    u = this.targetDocument.createElement("td");
                                } else {
                                    u = this.targetDocument.createElement(q.cells[0].tagName);
                                }
                                u.innerHTML = this.defaultContent;
                                if (h == q.cells[q.cells.length - 1]) {
                                    q.appendChild(u);
                                } else {
                                    q.insertBefore(u, q.cells[v + 1]);
                                }
                            }
                            for (var z = 1; z < p + 1; z++) {
                                var q = F.rows[z + w];
                                var D = z + w;
                                var A = n.tableArray[z + w];
                                var G = null;
                                for (var B = n.cellBound - 1; B > -1; B--) {
                                    var x = A[B];
                                    if (x.rowIndex == D && x.cellIndex == v) {
                                        if (B != n.cellBound - 1) {
                                            for (var m = B; m < n.cellBound; m++) {
                                                if (A[m].rowIndex == q.rowIndex) {
                                                    G = q.cells[x.cellIndex];
                                                    break;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                }
                                for (var m = 0; m < r + 1; m++) {
                                    var u = null;
                                    if (q.cells.length == 0) {
                                        u = this.targetDocument.createElement("td");
                                    } else {
                                        u = this.targetDocument.createElement(q.cells[0].tagName);
                                    }
                                    u.innerHTML = this.defaultContent;
                                    if (G != null) {
                                        q.insertBefore(u, G);
                                    } else {
                                        q.appendChild(u);
                                    }
                                }
                                h.rowSpan = 1;
                                h.colSpan = 1;
                            }
                        }
                    }
                }
            }
        };
        this.insertCol = function(F, j, h) {
            var l = this.getTableDef(F);
            var w = l.tableArray;
            var z = null;
            for (var C = 0; C < l.rowBound; C++) {
                var G = false;
                for (var B = 0; B < l.cellBound; B++) {
                    var A = w[C][B];
                    if (A.cellIndex == j.cellIndex && A.rowIndex == j.parentNode.rowIndex) {
                        z = A;
                        G = true;
                        break;
                    }
                }
                if (G) {
                    break;
                }
            }
            var m = z.x;
            var y = z.y;
            try {
                var r = LEAP.getElement(">colgroup:last", F);
                var u = null;
                if (r != null) {
                    u = LEAP.getElements("col", r);
                    if (u != null) {
                        var x = null;
                        var v = false;
                        if (h) {
                            if (u.length >= m) {
                                x = m;
                            }
                        } else {
                            if (u.length >= m + 1) {
                                if (u.length > m + 1) {
                                    x = m + 1;
                                } else {
                                    v = true;
                                }
                            }
                        }
                        if (x != null || v) {
                            var o = F.document.createElement("COL");
                            if (o) {
                                if (v) {
                                    r.appendChild(o);
                                } else {
                                    r.insertBefore(o, u[x]);
                                }
                            }
                            o = null;
                        }
                    }
                }
                r = cools = null;
            } catch (D) {}
            if (h) {} else {
                m = m + z.colSpan;
            }
            if (m == 0) {
                for (var C = 0; C < l.rowBound; C++) {
                    var q = this.targetDocument.createElement("td");
                    q.innerHTML = this.defaultContent;
                    if (F.rows[C].cells.length > 0) {
                        F.rows[C].insertBefore(q, F.rows[C].cells[0]);
                    } else {
                        F.rows[C].appendChild(q);
                    }
                }
            } else {
                if (m == l.cellBound) {
                    for (var C = 0; C < l.rowBound; C++) {
                        var q = this.targetDocument.createElement("td");
                        q.innerHTML = this.defaultContent;
                        F.rows[C].appendChild(q);
                    }
                } else {
                    var n = false;
                    for (var C = 0; C < l.rowBound; C++) {
                        if (w[C][m].colSpan > 1 || w[C][m].rowSpan > 1) {
                            n = true;
                            break;
                        }
                    }
                    if (!n) {
                        for (var C = 0; C < l.rowBound; C++) {
                            if (w[C][m].rowIndex == C) {
                                var q = this.targetDocument.createElement("td");
                                q.innerHTML = this.defaultContent;
                                F.rows[C].insertBefore(q, F.rows[C].cells[w[C][m].cellIndex]);
                            }
                        }
                    } else {
                        var p = [];
                        for (var C = l.rowBound - 1; C > -1; C--) {
                            var A = w[C][m];
                            var H = A.rowIndex + "_" + A.cellIndex;
                            if (p.contains(H)) {
                                continue;
                            }
                            if (A.rowIndex == C && A.colSpan) {
                                var q = this.targetDocument.createElement("td");
                                q.innerHTML = this.defaultContent;
                                F.rows[C].insertBefore(q, F.rows[C].cells[w[C][m].cellIndex]);
                            } else {
                                F.rows[A.rowIndex].cells[A.cellIndex].colSpan += 1;
                                p.add(H);
                            }
                        }
                    }
                }
            }
        };
        this.insertRow = function(B, j, r) {
            var l = this.getTableDef(B);
            var u = l.tableArray;
            var w = null;
            var A = B.getAttribute("istexttable");
            if (A == "1") {
                A = true;
            }
            for (var z = 0; z < l.rowBound; z++) {
                var C = false;
                for (var y = 0; y < l.cellBound; y++) {
                    var x = u[z][y];
                    if (x.cellIndex == j.cellIndex && x.rowIndex == j.parentNode.rowIndex) {
                        w = x;
                        C = true;
                        break;
                    }
                }
                if (C) {
                    break;
                }
            }
            var m = w.x;
            var v = w.y;
            if (r) {} else {
                v = v + w.rowSpan;
            }
            if (v == 0) {
                var h = LEAP.getElement("tbody", B);
                var p = this.targetDocument.createElement("tr");
                for (var z = 0; z < l.cellBound; z++) {
                    var q = this.targetDocument.createElement("td");
                    q.innerHTML = this.defaultContent;
                    if (z % 2 == 0 && A) {
                        q.className = "lg3tabletext";
                    }
                    p.appendChild(q);
                }
                if (B.rows.length == 0) {
                    h.appendChild(p);
                } else {
                    h.insertBefore(p, B.rows[0]);
                }
            } else {
                if (v == l.rowBound) {
                    var h = LEAP.getElement("tbody", B);
                    var p = this.targetDocument.createElement("tr");
                    for (var z = 0; z < l.cellBound; z++) {
                        var q = this.targetDocument.createElement("td");
                        q.innerHTML = this.defaultContent;
                        if (z % 2 == 0 && A) {
                            q.className = "lg3tabletext";
                        }
                        p.appendChild(q);
                    }
                    h.appendChild(p);
                } else {
                    var n = false;
                    for (var z = 0; z < l.cellBound; z++) {
                        if (u[v][z].colSpan > 1 || u[v][z].rowSpan > 1) {
                            n = true;
                            break;
                        }
                    }
                    if (!n) {
                        var h = LEAP.getElement("tbody", B);
                        var p = this.targetDocument.createElement("tr");
                        for (var z = 0; z < l.cellBound; z++) {
                            var q = this.targetDocument.createElement("td");
                            q.innerHTML = this.defaultContent;
                            if (z % 2 == 0 && A) {
                                q.className = "lg3tabletext";
                            }
                            p.appendChild(q);
                        }
                        h.insertBefore(p, B.rows[v]);
                    } else {
                        var o = [];
                        var h = LEAP.getElement("tbody", B);
                        var p = this.targetDocument.createElement("tr");
                        for (var z = l.cellBound - 1; z > -1; z--) {
                            var x = u[v][z];
                            var D = x.rowIndex + "_" + x.cellIndex;
                            if (o.contains(D)) {
                                continue;
                            }
                            if (x.rowIndex == x.y) {
                                var q = this.targetDocument.createElement("td");
                                q.innerHTML = this.defaultContent;
                                if (z % 2 == 0 && A) {
                                    q.className = "lg3tabletext";
                                }
                                p.appendChild(q);
                            } else {
                                B.rows[x.rowIndex].cells[x.cellIndex].rowSpan += 1;
                                o.add(D);
                            }
                        }
                        h.insertBefore(p, B.rows[v]);
                    }
                }
            }
        };
        this.removeCol = function(y, x) {
            var j = this.getTableDef(y);
            if (j.cellBound == 1) {
                alert("当前表格只有一列,不允许删除!");
                return;
            }
            var h = j.tableArray;
            var q = x.cellIndex;
            var u = x.parentNode.rowIndex;
            var o = [];
            for (var n = 0; n < j.rowBound; n++) {
                var l = h[n][q];
                if (n == 0) {
                    try {
                        var m = LEAP.getElement(">colgroup:last", y);
                        var r = null;
                        if (m != null) {
                            r = LEAP.getElements("col", m);
                            if (r != null) {
                                var v = l.x;
                                if (v <= r.length) {
                                    m.removeChild(r[v]);
                                }
                            }
                        }
                        m = cools = null;
                    } catch (p) {}
                }
                var w = l.rowIndex + "_" + l.cellIndex;
                if (o.contains(w)) {
                    continue;
                }
                if (l.colSpan == 1) {
                    y.rows[n].removeChild(y.rows[n].cells[q]);
                    o.add(w);
                } else {
                    if (l.colSpan > 1) {
                        y.rows[l.rowIndex].cells[l.cellIndex].colSpan -= 1;
                        o.add(w);
                    }
                }
            }
        };
        this.removeRow = function(y, x) {
            var l = this.getTableDef(y);
            if (l.rowBound == 1) {
                alert("当前表格只有一行,不允许删除!");
                return;
            }
            var h = l.tableArray;
            var v = x.parentNode.rowIndex;
            var p = h[v];
            var r = [];
            for (var q = 0; q < l.cellBound; q++) {
                var n = p[q];
                var w = n.rowIndex + "_" + n.cellIndex;
                if (r.contains(w)) {
                    continue;
                }
                if (n.rowSpan > 1) {
                    if (n.rowIndex == n.y) {
                        y.rows[n.rowIndex].cells[n.cellIndex].rowSpan -= 1;
                        r.add(w);
                        var j = this.targetDocument.createElement("td");
                        j.innerHTML = y.rows[n.rowIndex].cells[n.cellIndex].innerHTML;
                        j.colSpan = y.rows[n.rowIndex].cells[n.cellIndex].colSpan;
                        j.rowSpan = y.rows[n.rowIndex].cells[n.cellIndex].rowSpan;
                        var o = false;
                        for (var m = n.x; m < l.cellBound; m++) {
                            var u = h[n.y + 1][m];
                            if (u.rowIndex == u.y && u.cellIndex == u.y) {
                                y.rows[u.rowIndex].insertBefore(j, y.rows[u.rowIndex].cells[u.cellIndex]);
                                o = true;
                                break;
                            }
                        }
                        if (!o) {
                            y.rows[u.rowIndex].appendChild(j);
                        }
                        r.add(w);
                    } else {
                        y.rows[n.rowIndex].cells[n.cellIndex].rowSpan -= 1;
                        r.add(w);
                    }
                }
            }
            y.rows[v].parentElement.removeChild(y.rows[v]);
        };
        this.removeCols = function(m, j) {
            if (j == null) {
                return;
            }
            var n = [];
            for (var l = 0; l < j.length; l++) {
                var h = j[l];
                if (n.contains(h.cellIndex)) {
                    continue;
                }
                this.removeCol(m, h);
            }
        };
        this.removeRows = function(m, j) {
            if (j == null) {
                return;
            }
            var n = [];
            for (var l = 0; l < j.length; l++) {
                var h = j[l];
                if (h.parentNode == null || n.contains(h.parentNode.rowIndex)) {
                    continue;
                }
                this.removeRow(m, h);
            }
            this.restoreDevCellHeaderText(m);
        };
    };
    LEAP.tableUtil.selectedTDClassName = "tableUtilDevSelected";
    LEAP.tip = {};
    LEAP.tip.d = "tip";
    LEAP.tip.str = '<div class="leap_floattip_con"></div>';
    LEAP.tip.div = null;
    LEAP.tip.t = null;
    LEAP.tip.lm = null;
    LEAP.tip.close = false;
    LEAP.tip.init = function() {
        if (document != null && document.body != null) {
            LEAP.tip._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.tip._init);
        }
    };
    LEAP.tip._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.tip._init);
        var d = document.createElement("div");
        document.body.appendChild(d);
        d.style.display = "none";
        d.className = "leap_floattip";
        d.setAttribute("ct", LEAP.tip.d);
        d.innerHTML = LEAP.tip.str;
        LEAP.addEvent(d, "mouseleave", LEAP.tip.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "click", LEAP.tip.uiProcess, null, null, true);
        ElementEventManager.addManagedEventType(LEAP.tip.d, "tipClick");
        LEAP.tip.div = d;
        d = null;
    };
    LEAP.tip.uiProcess = function(h) {
        var m = h.e.srcElement;
        var j = h.e.type;
        var g = m.tagName;
        if (j == "mouseleave" && m.className && m.className == "leap_floattip" && LEAP.tip.close == false) {
            LEAP.tip.div.style.display = "none";
            return;
        } else {
            if (j == "click") {
                var l = m.getAttribute(commfields.ctf);
                if (l && l.indexOf("tip_") > -1) {
                    ElementEventManager.handleEvent(LEAP.tip.div, "tipClick", {
                        data: LEAP.tip.lastData,
                        ctf: l
                    });
                } else {
                    if (l == "tipc_sendsms") {
                        var d = LEAP.getElement("[ctf=tipc_text]", LEAP.tip.div).value;
                        if (String.isEmpty(d)) {
                            LEAP.messagebox.alert("未输入短信内容!", 3, "发送短信");
                        } else {
                            if (LEAP.request("system_sendsms", {
                                    tel: LEAP.tip.tel,
                                    content: d
                                })) {
                                LEAP.messagebox.alert("发送成功!", 1, "发送短信");
                                LEAP.tip.div.style.display = "none";
                            } else {
                                LEAP.messagebox.alert("发送失败!", 3, "发送短信");
                            }
                        }
                    } else {
                        if (l == "tipc_close") {
                            LEAP.tip.hidden();
                        }
                    }
                }
            }
        }
    };
    LEAP.tip.hidden = function() {
        if (LEAP.tip.div) {
            LEAP.tip.div.style.display = "none";
        }
    };
    LEAP.tip.sendsms = function(g) {
        LEAP.tip.tel = g;
        var j = new StringBuffer();
        j.append("<br>&nbsp&nbsp请输入短信内容:").append("<br>");
        j.append('<textarea style="width:150px;height:60px;" ctf=tipc_text></textarea><br>');
        j.append('<input ctf="tipc_sendsms" type=button value=发送><input ctf="tipc_close" type=button value=关闭>');
        var h = window.event;
        LEAP.tip.close = true;
        var d = h.clientX - 100;
        var l = h.clientY - 60;
        LEAP.tip.alert(j.toString(), null, null, d, l);
    };
    LEAP.tip.lastT = null;
    LEAP.tip.alert = function(n, m, h, d, o, l) {
        if (d == null || o == null) {
            if (!h) {
                h = window.event;
            }
            d = h.clientX;
            o = h.clientY;
        }
        d -= 10;
        o -= 10;
        var g = LEAP.getElement(".leap_floattip_con", LEAP.tip.div);
        g.innerHTML = n;
        LEAP.tip.lastData = m;
        LEAP.tip.div.style.left = d + "px";
        LEAP.tip.div.style.top = o + "px";
        LEAP.tip.div.style.display = "block";
        try {
            if (d + LEAP.tip.div.offsetWidth > document.body.offsetWidth) {
                d = document.body.offsetWidth - LEAP.tip.div.offsetWidth - 20;
                LEAP.tip.div.style.left = d + "px";
            }
        } catch (j) {}
        if (LEAP.tip.lastT) {
            window.clearTimeout(LEAP.tip.lastT);
        }
        if (l) {
            LEAP.tip.lastT = setTimeout(LEAP.tip.hidden, l);
        }
    };
    LEAP.tip.init();
    LEAP.tree2 = {};
    LEAP.tree2.d = "tree2";
    LEAP.tree2.sli = '<li _dataid="@id" _codelevel="@level"><a title="@tip" _dataid="@id" _codelevel="@level" ctf="tree2_item" href="javascript:void(0)"><b></b><i></i><img _dataid="@id" _codelevel="@level" ctf="tree2_item" src="@icon"><font _dataid="@id" _codelevel="@level" ctf="tree2_item">@text</font><span style="font-size:14px;position: absolute;right:30px;top:9px" id="@numberid"></span><img _dataid="@id" _codelevel="@level" class="ls_tree2_status" src="@status" ctf="tree2_item_status"></a><!--childs--></li>';
    LEAP.tree2.slic = '<li _dataid="@id" _codelevel="@level"><a title="@tip" style="@style" _dataid="@id" _codelevel="@level" ctf="tree2_item" href="javascript:void(0)"><b></b><i></i><img _dataid="@id" _codelevel="@level" ctf="tree2_item" src="@icon"><input class="@_class" type="checkbox"><font style="margin-left:60px;line-height:33px" _dataid="@id" _codelevel="@level" ctf="tree2_item">@text</font><span style="font-size:14px;position: absolute;right:30px;top:9px" id="@numberid"></span><img _dataid="@id" _codelevel="@level" class="ls_tree2_status" src="@status" ctf="tree2_item_status"></a><!--childs--></li>';
    LEAP.tree2.slisz = '<li _dataid="@id" _codelevel="@level"><a title="@tip" style="@style" _dataid="@id" _codelevel="@level" ctf="tree2_item" href="javascript:void(0)"><b></b><i></i><img _dataid="@id" _codelevel="@level" ctf="tree2_item" src="@icon"><font style="margin-left:60px;line-height:33px" _dataid="@id" _codelevel="@level" ctf="tree2_item">@text</font><span style="font-size:14px;position: absolute;right:30px;top:9px" id="@numberid"></span><img _dataid="@id" _codelevel="@level" class="ls_tree2_status" src="@status" ctf="tree2_item_status"></a><!--childs--></li>';
    LEAP.tree2.cf = "<!--childs-->";
    LEAP.tree2.setValue = function(w, N, M) {
        if (N == null) {
            return;
        }
        if (typeof(N) == "string") {
            N = LEAP.getElement(N, w);
        }
        if (N == null) {
            return;
        }
        if (N == null || !N.length || N[0].syscode == null) {
            return;
        }
        var T = new hashtable();
        var B = new hashtable();
        if (M == null) {
            M = w.getAttribute("closeLevel");
        }
        if (M != null && M != "0") {
            try {
                M = parseInt(M);
            } catch (V) {}
            if (M == undefined || (M != null && isNaN(M))) {
                M = null;
            }
        }
        var O = N.length;
        var J = 0;
        var z = null;
        var h = null;
        z = new Array();
        h = new hashtable();
        for (var U = 0; U < O; U++) {
            var C = N[U];
            var S = C.customize;
            var L = C.showname ? C.showname : C.name;
            var r = null;
            if (window.treetype == true) {
                r = C.icon ? C.icon : "LEAP/Resource/images/itemstyle/tree/nav2.png";
            } else {
                r = C.icon ? C.icon : "LEAP/Resource/images/itemstyle/tree/li.png";
            }
            r = leapconfig.server + r;
            var j = C.remarks ? C.remarks : "";
            if (!j) {
                j = C.tip ? C.tip : "";
            }
            if (!j) {
                j = L;
            }
            var Q = C.id;
            if (!Q) {
                Q = C.id = UUID.randomUUID().replaceall("-", "");
            }
            var y = null;
            var g = 0;
            y = LEAP.getRealSyscode(C.syscode);
            if (y != null && y.indexOf(".") > -1) {
                var I = y.substring(y.indexOf(".") + 1);
                g = I.length / 3;
                g += 1;
            } else {
                g = 1;
            }
            if (U == 0) {
                J = g;
            }
            var x = (C.showCheck == true);
            var D = LEAP.tree2.sli;
            if (x) {
                D = LEAP.tree2.slic;
                D = D.replace("@_class", "ls_tree2_sub_input");
            }
            var v = UUID.cID();
            if (!String.isEmpty(S)) {
                if (S.indexOf("client:") > -1 || S.indexOf("server:")) {
                    z.add(v);
                    h.add(v, C);
                }
            }
            if (window.imgtype == true) {
                D = LEAP.tree2.slisz;
                var u = "";
                if (g - J + 1 >= 3) {
                    u = "height:33px;";
                    var n = L;
                    var o = g - J + 1 - 3 + 1;
                    for (var H = 0; H < o; H++) {
                        n = "&nbsp&nbsp&nbsp&nbsp" + n;
                    }
                    L = n;
                }
                C._html = D.replaceall("@id", Q).replaceall("@status", leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/111.png").replaceall("@level", g - J + 1).replace("@tip", j).replace("@icon", r).replace("@numberid", v).replace("@style", u).replace("@text", L);
            } else {
                C._html = D.replaceall("@id", Q).replaceall("@status", leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/1.png").replaceall("@level", g - J + 1).replace("@tip", j).replace("@text", L).replace("@icon", r).replace("@numberid", v);
            }
            C._syscode = y;
            T.add(y, C);
            B.add(C.id, C);
            slic = null;
        }
        var G = new StringBuffer();
        G.append('<ul class="ls_tree2">');
        for (var U = O - 1; U > -1; U--) {
            var C = N[U];
            var y = C._syscode;
            var R = LEAP.getParentSyscode(y);
            if (R != null) {
                var q = T.getvalue(R);
                if (q != null) {
                    C._html = C._html.replace(LEAP.tree2.cf, "");
                    if (q.hassetul != true) {
                        q.hassetul = true;
                        q._html = q._html.replace(LEAP.tree2.cf, '<UL class="ls_tree2 ls_tree2_sub">' + LEAP.tree2.cf + "</UL>");
                    }
                    q._html = q._html.replace(LEAP.tree2.cf, LEAP.tree2.cf + C._html);
                    N[U] = null;
                }
            }
        }
        for (var U = 0; U < O; U++) {
            var C = N[U];
            if (C == null) {
                continue;
            }
            G.append(C._html);
        }
        G.append("</ul>");
        w.innerHTML = G.toString();
        var K = B.keys;
        for (var A in B.keys) {
            delete(B.getvalue(A)["_html"]);
        }
        w._def = B;
        var d = LEAP.getElements(".ls_tree2_sub>li:last-child>A>B", w);
        LEAP.setStyle(d, {
            display: "none"
        }, true);
        d = LEAP.getElements(".ls_tree2_sub>li:last-child>UL", w);
        LEAP.setStyle(d, {
            borderLeft: "0"
        }, true);
        d = LEAP.getElements(".ls_tree2_sub", w);
        if (d) {
            if (d) {
                var O = d.length;
                for (var U = 0; U < O; U++) {
                    var m = d[U];
                    var F = m.previousSibling.getElementsByTagName("IMG")[1];
                    F.style.display = "inline-block";
                }
            }
            if (M != null) {
                var p = [];
                var O = d.length;
                for (var U = 0; U < d.length; U++) {
                    var m = d[U];
                    var P = m.previousSibling;
                    var l = P.getAttribute("_codelevel");
                    if (l >= M) {
                        p.push(m);
                    } else {
                        if (window.imgtype == true) {
                            m.style.display = "inline-block";
                            LEAP.getElement(".ls_tree2_status", P).src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/222.png";
                        } else {
                            m.style.display = "inline-block";
                            LEAP.getElement(".ls_tree2_status", P).src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/2.png";
                        }
                    }
                }
                if (p.length > 0) {
                    d = p;
                } else {
                    d = null;
                }
            }
            LEAP.setStyle(d, {
                display: "none"
            }, true);
        }
        LEAP.tree2.numberInit(z, h);
    };
    LEAP.tree2.numberSN = 0;
    LEAP.tree2.showNumberList = new hashtable();
    LEAP.tree2.showNumberList_map = new hashtable();
    LEAP.tree2.refreshItemNumbers = function() {
        var q = arguments.length;
        for (var n = 0; n < q; n++) {
            var d = arguments[n];
            var p = LEAP.tree2.showNumberList_map.getvalue(d);
            if (p) {
                var r = 0;
                var h = p.length;
                for (var o = h - 1; o > -1; o--) {
                    var m = p[o];
                    if (m != null) {
                        if (document.getElementById(m) == null) {
                            p[o] = null;
                        } else {
                            var g = LEAP.tree2.showNumberList.getvalue(m);
                            if (g.isend) {
                                g.isend = false;
                                r++;
                                LEAP.asyn(LEAP.tree2.startNumber, null, 1000 + 100 * r, g);
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.tree2.refreshItemNumber = function(n, j) {
        if (!n) {
            return;
        }
        var p = LEAP.tree2.showNumberList_map.getvalue(j);
        if (p) {
            var h = p.length;
            for (var m = h - 1; m > -1; m--) {
                var g = p[m];
                if (g != null) {
                    if (document.getElementById(g) == null) {
                        p[m] = null;
                    } else {
                        var o = LEAP.tree2.showNumberList.getvalue(g);
                        var d = 0;
                        if (o.isend) {
                            o.isend = false;
                            d++;
                            LEAP.asyn(LEAP.tree2.startNumber, null, 1000 + 100 * d, o);
                        }
                    }
                }
            }
        }
        n = null;
    };
    LEAP.tree2.showNumberTask = function() {
        var g = LEAP.tree2.showNumberList.size();
        if (g > 0) {
            var j = LEAP.tree2.showNumberList.keys;
            var d = 0;
            for (var h in j) {
                var m = LEAP.tree2.showNumberList.getvalue(h);
                if (m && m.isend) {
                    m.isend = false;
                    d++;
                    LEAP.asyn(LEAP.tree2.startNumber, null, 1000 + 100 * d, m);
                }
            }
        }
    };
    LEAP.tree2.startNumber = function(def) {
        if (document.getElementById(def.numberid) == null) {
            LEAP.tree2.showNumberList.remove(def.numberid);
            return;
        }
        var customize = def.customize;
        var numberid = def.numberid;
        var cus = customize.split(":");
        if (cus && cus.length > 1) {
            var mode = cus[0];
            var method = cus[1];
            var arg = null;
            if (cus.length == 3) {
                arg = cus[2];
            }
            if (mode == "server") {
                var par = {
                    par: arg
                };
                if (arg == null) {
                    par = null;
                }
                LEAP.request2({
                    name: method,
                    par: par,
                    callback: LEAP.tree2.setNumber,
                    arg: numberid
                });
            } else {
                if (mode == "client") {
                    try {
                        var fn = eval("(" + method + ")");
                        if (fn) {
                            LEAP.asyn(fn, null, 10, arg, numberid);
                        }
                    } catch (e) {}
                }
            }
        }
    };
    LEAP.tree2.numberInit = function(m, u) {
        if (m != null && u != null) {
            var r = 0;
            for (var l = 0; l < m.length; l++) {
                var v = u.getvalue(m[l]);
                var o = v.customize;
                var j = m[l];
                var h = {
                    isend: false,
                    customize: o,
                    numberid: j
                };
                LEAP.tree2.showNumberList.add(j, h);
                document.getElementById(j).parentElement.parentElement.setAttribute("__isnumbertask", "1");
                document.getElementById(j).setAttribute("_codelevel", document.getElementById(j).parentElement.parentElement.getAttribute("_codelevel"));
                var d = null;
                var g = v.resourcetype;
                if (g != null) {
                    var q = g != null && g == 4;
                    var p = g != null && g == 3;
                    var d = null;
                    if (p) {
                        d = v.url;
                    } else {
                        if (q) {
                            d = v.name;
                        }
                    }
                    if (d) {
                        var n = LEAP.tree2.showNumberList_map.getvalue(d);
                        if (n != null) {
                            n.add(j);
                        } else {
                            LEAP.tree2.showNumberList_map.add(d, [j]);
                        }
                    }
                }
                r++;
                LEAP.asyn(LEAP.tree2.startNumber, null, 1000 + 50 * r, h);
            }
        }
    };
    LEAP.tree2.testNumber = function(g, d) {
        LEAP.tree2.setNumber(Math.floor(Math.random() * 10 + 1), d);
    };
    LEAP.tree2.setNumberByModuleName = function(j, n) {
        var p = LEAP.tree2.showNumberList_map.getvalue(j);
        if (p) {
            var h = p.length;
            for (var m = h - 1; m > -1; m--) {
                var g = p[m];
                if (g != null) {
                    if (document.getElementById(g) == null) {
                        p[m] = null;
                    } else {
                        var o = LEAP.tree2.showNumberList.getvalue(g);
                        var d = 0;
                        if (o.isend) {
                            o.isend = false;
                            d++;
                            LEAP.asyn(LEAP.tree2.setNumber, null, 100 * d, n, g);
                        }
                    }
                    el = null;
                }
            }
        }
    };
    LEAP.tree2.setNumber = function(o, d) {
        if (o != null) {
            var h = document.getElementById(d);
            if (h != null) {
                h.innerHTML = o;
                LEAP.tree2.showNumberList.getvalue(d).isend = true;
                var q = h.getAttribute("_codelevel") * 1;
                if (q > 1) {
                    var g = LEAP._match(h.parentElement.parentElement, q - 1 + "", "_codelevel");
                    if (g && !g.getAttribute("__isnumbertask")) {
                        var m = LEAP.getElement(">a>span", g);
                        if (m) {
                            var n = LEAP.getElements(">ul>li>a>span", g);
                            if (n) {
                                var l = 0;
                                for (var j = 0; j < n.length; j++) {
                                    if (!String.isEmpty(n[j].innerText)) {
                                        l += n[j].innerText.replace("(", "").replace(")", "") * 1;
                                    }
                                }
                                if (l == 0) {
                                    l = "";
                                }
                                m.innerHTML = l;
                                n = null;
                            }
                        }
                        g = null;
                    }
                }
            } else {
                LEAP.tree2.showNumberList.remove(d);
            }
            h = null;
        }
    };
    LEAP.tree2._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.tree2.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.tree2._init);
        LEAP.asynfoo(LEAP.tree2.showNumberTask, null, 20 * 1000);
    };
    LEAP.tree2.uiProcess = function(r) {
        var d = r.e.srcElement;
        var n = r.e.type;
        var u = d.tagName;
        if (n == "click") {
            var m = d.getAttribute(commfields.ct);
            var o = d.getAttribute(commfields.ctf);
            if (o && o == "tree2_item_status") {
                var h = d.parentElement.nextSibling;
                if (h && h.tagName == "UL") {
                    if (h.style.display == "inline-block") {
                        h.style.display = "none";
                        var l = LEAP._match(d, LEAP.tree2.d, "ct", 99);
                        ElementEventManager.handleEvent(l, "closeNode", {
                            tree: d,
                            id: d.getAttribute("_dataid")
                        });
                        if (window.imgtype == true) {
                            d.src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/111.png";
                        } else {
                            d.src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/1.png";
                        }
                    } else {
                        h.style.display = "inline-block";
                        var l = LEAP._match(d, LEAP.tree2.d, "ct", 99);
                        ElementEventManager.handleEvent(l, "expandNode", {
                            tree: d,
                            id: d.getAttribute("_dataid")
                        });
                        if (window.imgtype == true) {
                            d.src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/222.png";
                            var p = LEAP.getElements("LI[_codelevel=1]", l);
                            if (p) {
                                for (var j = 0; j < p.length; j++) {
                                    var g = p[j].getAttribute("_dataid");
                                    if (d.getAttribute("_dataid") != g) {
                                        if (p[j].childNodes[1].nodeName == "UL") {
                                            p[j].childNodes[0].childNodes[4].src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/111.png";
                                        } else {
                                            p[j].childNodes[0].childNodes[4].src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/111.png";
                                        }
                                    }
                                }
                            }
                        } else {
                            d.src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/2.png";
                        }
                    }
                }
            } else {
                var q = LEAP._match(d, "tree2_item", "ctf", 99);
                if (q != null) {
                    var q = LEAP._match(q, "LI", "tagName", 99);
                    if (q) {
                        var l = LEAP._match(q, LEAP.tree2.d, "ct", 99);
                        LEAP.tree2.setSelectedItem(l, q.getAttribute("_dataid"));
                    }
                }
            }
        }
        d = r = null;
    };
    LEAP.tree2.clear = function(d) {
        if (d == null) {
            return;
        }
        d = LEAP._check(d, LEAP.tree2.d);
        if (d == null) {
            return;
        }
        d._def = null;
        d.innerHTML = "";
        d = null;
    };
    LEAP.tree2.getChild = function(l, d) {
        if (l == null && d != null) {
            return;
        }
        l = LEAP._check(l, LEAP.tree2.d);
        if (l == null) {
            return;
        }
        var n = LEAP.getElement("LI[_dataid=" + d + "]", l);
        if (n) {
            var j = LEAP.getElement("ul:first", n);
            if (j) {
                var m = LEAP.getElements(">li[_dataid]", j);
                if (m != null) {
                    var g = [];
                    for (var h = 0; h < m.length; h++) {
                        g.push(m[h].getAttribute("_dataid"));
                    }
                    try {
                        return g;
                    } finally {
                        m = null;
                        g = null;
                        n = null;
                        l = null;
                    }
                }
            }
        }
    };
    LEAP.tree2.setSelectedItem = function(o, h, j) {
        if (o == null && h != null) {
            return;
        }
        if (typeof(o) == "string") {
            o = LEAP.getElement(o);
        }
        o = LEAP._check(o, LEAP.tree2.d);
        if (o == null) {
            return;
        }
        var u = LEAP.getElement("LI[_dataid=" + h + "]", o);
        if (u) {
            if (window.treetype == true) {
                var d = u.getAttribute("_codelevel");
                var r = h;
                if (j && d > 1) {
                    var l = u.parentElement.parentElement;
                    d = l.getAttribute("_codelevel");
                    r = l.getAttribute("_dataid");
                }
                if (d == "1") {
                    var q = LEAP.getElements("LI[_codelevel=1]", o);
                    if (q) {
                        for (var n = 0; n < q.length; n++) {
                            var g = q[n].getAttribute("_dataid");
                            if (r == g) {
                                if (q[n].childNodes[1].nodeName == "UL") {
                                    q[n].childNodes[1].style.display = "inline-block";
                                    q[n].childNodes[0].childNodes[4].src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/222.png";
                                } else {
                                    q[n].childNodes[0].childNodes[4].src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/222.png";
                                }
                            } else {
                                if (q[n].childNodes[1].nodeName == "UL") {
                                    q[n].childNodes[1].style.display = "none";
                                    q[n].childNodes[0].childNodes[4].src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/111.png";
                                } else {
                                    q[n].childNodes[0].childNodes[4].src = leapconfig.server + "LEAP/Resource/images/itemstyle/tree2/111.png";
                                }
                            }
                        }
                    }
                }
            }
            var p = LEAP.getElement("A:first", u);
            if (p) {
                if (!LEAP.hasCSS(p, "ls_tree2_item_selected")) {
                    LEAP.removeCSS(LEAP.getElements(".ls_tree2_item_selected", o), "ls_tree2_item_selected", true);
                    LEAP.addCSS(p, "ls_tree2_item_selected");
                    var m = o._def.getvalue(h);
                    ElementEventManager.handleEvent(o, "selectedItemChange", {
                        tree: o,
                        id: h,
                        data: m
                    });
                }
            }
        }
        u = o = null;
    };
    LEAP.tree2.getCheckedValues = function(m) {
        m = LEAP._check(m, LEAP.tree2.d);
        if (m == null) {
            return;
        }
        var g = LEAP.getElements("input:checked", m);
        if (g != null) {
            var d = g.length;
            var h = [];
            for (var j = 0; j < d; j++) {
                var n = LEAP._match(g[j], "tree2_item", commfields.ctf, 99);
                h.push(n._dataid != null ? n._dataid : n.getAttribute("_dataid"));
                n = g[j] = null;
            }
            return h;
        }
        return null;
    };
    LEAP.tree2.getCheckedItems = function(m) {
        m = LEAP._check(m, LEAP.tree2.d);
        if (m == null) {
            return;
        }
        var g = LEAP.getElements("input:checked", m);
        if (g != null) {
            var d = g.length;
            var h = [];
            for (var j = 0; j < d; j++) {
                var n = LEAP._match(g[j], "tree2_item", commfields.ctf, 99);
                if (n.getAttribute("ctid") == null) {
                    n.setAttribute("ctid", UUID.cID());
                }
                h.push("[ctid=" + n.getAttribute("ctid") + "]");
                n = g[j] = null;
            }
            return h;
        }
        return null;
    };
    LEAP.tree2.setItemChecked = function(h, l, j) {
        if (l == null) {
            return;
        }
        h = LEAP._check(h, LEAP.tree2.d);
        if (h == null) {
            return;
        }
        if (typeof(l) == "string") {
            l = LEAP.getElement(l, h);
        }
        if (l == null) {
            return;
        }
        if (l.getAttribute("ctid") == null) {
            l.setAttribute("ctid", UUID.cID());
        }
        if (j == null) {
            j = true;
        }
        var g = l;
        var d = LEAP.getElement("input", g);
        if (d != null) {
            if (j != false) {
                LEAP.tree2._setInputChecked(d, true);
            } else {
                LEAP.tree2._setInputChecked(d, false);
            }
        }
        h = l = d = null;
    };
    LEAP.tree2._setInputChecked = function(d, j) {
        if (d && d.tagName && d.tagName == "INPUT") {
            if (d.parentElement) {
                var m = document.createElement("input");
                m.type = "checkbox";
                m.className = d.className;
                m.setAttribute("ct", d.getAttribute("ct"));
                m.setAttribute("ctf", d.getAttribute("ctf"));
                var h = d.getAttribute("disabled");
                if (d.nextSibling) {
                    var g = d.nextSibling;
                    var l = d.parentElement;
                    l.removeChild(d);
                    l.insertBefore(m, g);
                    l = g = null;
                } else {
                    var l = d.parentElement;
                    l.removeChild(d);
                    l.appendChild(m);
                    l = null;
                }
                if (j) {
                    m.setAttribute("checked", "true");
                }
                if (h && h != "false") {
                    m.setAttribute("disabled", "true");
                }
                m = null;
            }
        }
        d = null;
    };
    LEAP.tree2.getItemByValue = function(h, d) {
        if (d == null) {
            return;
        }
        h = LEAP._check(h, LEAP.tree2.d);
        if (h == null) {
            return;
        }
        if (d == null) {
            return;
        }
        var j = LEAP.getElement('a[ctf=tree2_item][_dataid="' + d + '"]', h);
        if (j == null) {
            return;
        }
        var l = j.getAttribute("ctid");
        if (l == null) {
            l = UUID.cID();
            j.setAttribute("ctid", l);
        }
        var g = "[ctid=" + l + "]";
        j = null;
        return g;
    };
    LEAP.tree2.setCheckedItems = function(h, l) {
        if (l == null || l.length == 0) {
            return;
        }
        h = LEAP._check(h, LEAP.tree2.d);
        if (h == null) {
            return;
        }
        var m = LEAP.getElements("[ctf=tree2_item]", h);
        if (m) {
            for (var j = 0; j < m.length; j++) {
                var p = m[j];
                var d = p._dataid != null ? p._dataid : p.getAttribute("_dataid");
                var n = false;
                for (var g = 0; g < l.length; g++) {
                    if (l[g] == d) {
                        n = true;
                        break;
                    }
                }
                var o = LEAP.getElement("input", p);
                if (o) {
                    if (n) {
                        LEAP.tree2._setInputChecked(o, true);
                    } else {
                        LEAP.tree2._setInputChecked(o, false);
                    }
                }
            }
        }
    };
    LEAP.tree2.init = function() {
        if (document != null && document.body != null) {
            LEAP.tree._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.tree2._init);
        }
        ElementEventManager.addManagedEventType(LEAP.tree2.d, "selectedItemChange");
        ElementEventManager.addManagedEventType(LEAP.tree2.d, "expandNode");
        ElementEventManager.addManagedEventType(LEAP.tree2.d, "closeNode");
    }();
    LEAP.tree3 = {};
    LEAP.tree3.d = "tree3";
    LEAP.tree3.level1 = '<div class="tree3_level1" ctf="tree3_level1"><ul><!--childs--></ul></div>';
    LEAP.tree3.level1_li = '<li _dataid="@id" _codelevel="@level" cf="level1" ctf="level1_li"><img _dataid="@id" _codelevel="@level" src="@icon" ctf="level1_li"><div _dataid="@id" _codelevel="@level" ctf="level1_li">@text</div></li>';
    LEAP.tree3.level2 = '<div class="tree3_level2" ctf="tree3_level2"><ul><!--childs--></ul></div>';
    LEAP.tree3.level2_li = '<li _dataid="@id" _codelevel="@level" cf="level2" ctf="level2_li"><div _dataid="@id" _codelevel="@level" ctf="level2_li">@text</div></li>';
    LEAP.tree3.level3 = '<div class="tree3_level3" ctf="tree3_level3"><ul><!--childs--></ul></div>';
    LEAP.tree3.level3_li = '<li _dataid="@id" _codelevel="@level" cf="level3" ctf="level3_li"><div _dataid="@id" _codelevel="@level" ctf="level3_li">@text</div></li>';
    LEAP.tree3.cf = "<!--childs-->";
    LEAP.tree3.hash = new hashtable();
    LEAP.tree3._def = new hashtable();
    LEAP.tree3.dataid = null;
    LEAP.tree3.level2_def = new hashtable();
    LEAP.tree3._init = function() {
        LEAP.addEvent(document.body, "click", LEAP.tree3.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "mouseover", LEAP.tree3.uiProcess, null, null, true);
        UIEventManager.removeEvent(window, "load", LEAP.tree3._init);
    };
    LEAP.tree3.initControl = function(j, l) {
        if (!l) {
            if (!event) {
                return;
            }
            l = event.srcElement;
        }
        if (!l) {
            return;
        }
        if (j != null) {
            var h = function() {
                LEAP.tree3.initControl(null, l);
                l = null;
            };
            setTimeout(h, j);
            return;
        }
        var g = l.parentElement;
        if (g != null) {
            var d = LEAP.getElement("[ctf=treemain]", g);
            LEAP.addEvent(d, "mouseleave", LEAP.tree3.mainout, null, true);
        }
    };
    LEAP.tree3.setValue = function(h, v) {
        var A = null;
        if (v != null) {
            A = v;
        } else {
            A = LEAP.request("app_getUIResource2", {
                id: null,
                includeParentResource: false,
                getDeep: null,
                fields: ["indexpagemodulestyle", "indexpagemodulemargin", "expendtreenode", "refappserver"]
            });
            if (A != null) {
                A = LEAP.convertResult(A);
            }
        }
        if (A != null) {
            var g = new StringBuffer();
            var w = 0;
            for (var x = 0; x < A.length; x++) {
                var q = A[x];
                var r = q.customize;
                var p = q.showname ? q.showname : q.name;
                var y = null;
                y = q.onicon ? q.onicon : "LEAP/Resource/images/itemstyle/tree3/li1.png";
                y = leapconfig.server + y;
                var u = q.id;
                if (!u) {
                    u = q.id = UUID.randomUUID().replaceall("-", "");
                }
                var o = null;
                var m = 0;
                o = LEAP.getRealSyscode(q.syscode);
                if (o != null && o.indexOf(".") > -1) {
                    var n = o.substring(o.indexOf(".") + 1);
                    m = n.length / 3;
                    m += 1;
                } else {
                    m = 1;
                }
                if (x == 0) {
                    w = m;
                }
                var j = LEAP.tree3.level1;
                var z = UUID.cID();
                q._html = LEAP.tree3.level1_li.replaceall("@id", u).replaceall("@level", m - w + 1).replace("@text", p).replace("@icon", y);
                q._syscode = o;
                q._syscodelevel = m - w + 1;
                LEAP.tree3.hash.add(o, q);
                LEAP.tree3._def.add(q.id, q);
                g.append(q._html);
            }
            var l = LEAP.tree3.level1.replace(LEAP.tree3.cf, g.toString());
            var d = LEAP.getElement("[ctf=treemain]", h);
            d.innerHTML = l + LEAP.tree3.level2 + LEAP.tree3.level3;
        }
    };
    LEAP.tree3.setItemValue = function(h, j, g, d) {
        LEAP.tree3.level2_def.add(g + "_level" + d, j);
    };
    LEAP.tree3.mainover = function(g) {
        if (g == null) {
            return;
        }
        var l = g.e.srcElement;
        if (l == null) {
            return;
        }
        var h = g.e.type;
        if (h == null) {
            return;
        }
        var d = l.tagName;
        if (d == null) {
            return;
        }
        var j = l.getAttribute("ctf");
    };
    LEAP.tree3.mainout = function(o) {
        if (o == null) {
            return;
        }
        var d = o.e.srcElement;
        if (d == null) {
            return;
        }
        var l = o.e.type;
        if (l == null) {
            return;
        }
        var p = d.tagName;
        if (p == null) {
            return;
        }
        var j = null;
        j = LEAP._match(d, LEAP.tree3.d);
        var m = LEAP.getElement("[ctf=tree3_level3]", j);
        if (m != null) {
            var h = m.className;
            m.className = h + " tree3_level3_dis";
        }
        var n = LEAP.getElement("[ctf=tree3_level2]", j);
        if (n != null) {
            var g = n.className;
            n.className = g + " tree3_level2_dis";
        }
    };
    LEAP.tree3.uiProcess = function(q) {
        var r = q.e.srcElement;
        var o = q.e.type;
        var M = r.tagName;
        var l = r.getAttribute(commfields.ctf);
        var m = LEAP._match(r, LEAP.tree3.d, "ct", 99);
        if (!m) {
            return;
        }
        if (o == "click") {
            var p = m.getAttribute("parentclick");
            if (p != null && p == "1") {
                var N = r.getAttribute("_dataid");
                LEAP.tree3.setSelectedItem(m, N);
            } else {
                if (l == "level1_li" || l == "level2_li") {
                    var C = r.getAttribute("haschild");
                    if (C == "0") {
                        var N = r.getAttribute("_dataid");
                        LEAP.tree3.setSelectedItem(m, N);
                    }
                } else {
                    if (l == "level3_li") {
                        var N = r.getAttribute("_dataid");
                        LEAP.tree3.setSelectedItem(m, N);
                    }
                }
            }
        } else {
            if (o = "mouseover") {
                var D = r.getAttribute("_dataid");
                if (!D) {
                    return;
                }
                var A = LEAP.tree3._def.getvalue(D);
                var m = null;
                m = LEAP._match(r, LEAP.tree3.d);
                var L = null;
                if (LEAP.tree3.dataid != D) {
                    ElementEventManager.handleEvent(m, "expandNode", {
                        tree: r,
                        id: r.getAttribute("_dataid"),
                        level: A._syscodelevel,
                        data: A
                    });
                    LEAP.tree3.dataid = D;
                }
                var O = LEAP.tree3.level2_def.getvalue(D + "_level" + (A._syscodelevel + 1));
                if (O != null) {
                    L = O;
                } else {
                    L = LEAP.request("app_getUIResource2", {
                        id: D,
                        includeParentResource: false,
                        getDeep: 1,
                        fields: ["indexpagemodulestyle", "indexpagemodulemargin", "expendtreenode", "refappserver"]
                    });
                    if (L != null) {
                        L = LEAP.convertResult(L);
                    }
                    LEAP.tree3.level2_def.add(D + "_level" + (A._syscodelevel + 1), L);
                }
                var d = LEAP.getElement("[ctf=treemain]", m);
                if (l == "level1_li") {
                    LEAP.removeCSS(LEAP.getElement("[ctf=tree3_level2]", m), "tree3_level2_dis", false);
                    LEAP.addCSS(LEAP.getElement("[ctf=tree3_level3]", m), "tree3_level3_dis");
                    var g = null;
                    g = A.officon ? A.officon : "LEAP/Resource/images/itemstyle/tree3/li2.png";
                    g = leapconfig.server + g;
                    var h = LEAP.getElements("[cf=level1]", m);
                    var I = 0;
                    var x = h.length;
                    for (var J = 0; J < x; J++) {
                        var B = A.id;
                        var N = h[J].getAttribute("_dataid");
                        var n = LEAP.tree3._def.getvalue(N);
                        var K = null;
                        K = n.onicon ? n.onicon : "LEAP/Resource/images/itemstyle/tree3/li1.png";
                        K = leapconfig.server + K;
                        if (B == N) {
                            h[J].className = "tree3_level1_curre";
                            h[J].childNodes[0].src = g;
                        } else {
                            h[J].className = "";
                            h[J].childNodes[0].src = K;
                        }
                        I += h[J].scrollHeight;
                    }
                    if (L != null) {
                        r.setAttribute("haschild", "1");
                        var H = 0;
                        var j = new StringBuffer();
                        for (var J = 0; J < L.length; J++) {
                            var G = L[J];
                            var w = null;
                            var v = 0;
                            var z = G.showname ? G.showname : G.name;
                            w = LEAP.getRealSyscode(G.syscode);
                            if (w != null && w.indexOf(".") > -1) {
                                var u = w.substring(w.indexOf(".") + 1);
                                v = u.length / 3;
                                v += 1;
                            } else {
                                v = 1;
                            }
                            if (J == 0) {
                                H = v;
                            }
                            var F = LEAP.tree3.level2_li.replaceall("@id", G.id).replaceall("@level", A._syscodelevel + 1).replace("@text", z);
                            j.append(F);
                            G._syscodelevel = A._syscodelevel + 1;
                            G._html = F;
                            LEAP.tree3._def.add(G.id, G);
                        }
                        LEAP.getElement("[ctf=tree3_level2]", m).childNodes[0].innerHTML = j.toString();
                        if (x > L.length) {
                            LEAP.getElement("[ctf=tree3_level2]", m).style.minHeight = I + "px";
                        }
                    } else {
                        r.setAttribute("haschild", "0");
                        if (LEAP.getElement("[ctf=tree3_level2]", m).className.indexOf("tree3_level2_dis") == -1) {
                            LEAP.addCSS(LEAP.getElement("[ctf=tree3_level2]", m), "tree3_level2_dis");
                        }
                    }
                } else {
                    if (l == "level2_li") {
                        LEAP.removeCSS(LEAP.getElement("[ctf=tree3_level3]", m), "tree3_level3_dis", false);
                        var y = LEAP.getElements("[cf=level2]", m);
                        var x = y.length;
                        for (var J = 0; J < x; J++) {
                            var B = A.id;
                            var N = y[J].getAttribute("_dataid");
                            var n = LEAP.tree3._def.getvalue(N);
                            if (B == N) {
                                y[J].className = "tree3_level2_curre";
                            } else {
                                y[J].className = "";
                            }
                        }
                        if (L != null) {
                            r.setAttribute("haschild", "1");
                            var j = new StringBuffer();
                            for (var J = 0; J < L.length; J++) {
                                var G = L[J];
                                var w = null;
                                var v = 0;
                                var z = G.showname ? G.showname : G.name;
                                w = LEAP.getRealSyscode(G.syscode);
                                if (w != null && w.indexOf(".") > -1) {
                                    var u = w.substring(w.indexOf(".") + 1);
                                    v = u.length / 3;
                                    v += 1;
                                } else {
                                    v = 1;
                                }
                                if (J == 0) {
                                    H = v;
                                }
                                var F = LEAP.tree3.level3_li.replaceall("@id", G.id).replaceall("@level", A._syscodelevel + 1).replace("@text", z);
                                j.append(F);
                                G._syscodelevel = A._syscodelevel + 1;
                                G._html = F;
                                LEAP.tree3._def.add(G.id, G);
                            }
                            LEAP.getElement("[ctf=tree3_level3]", m).childNodes[0].innerHTML = j.toString();
                            LEAP.getElement("[ctf=tree3_level3]", m).style.minHeight = LEAP.getElement("[ctf=tree3_level2]", m).scrollHeight + "px";
                        } else {
                            r.setAttribute("haschild", "0");
                            if (LEAP.getElement("[ctf=tree3_level3]", m).className.indexOf("tree3_level3_dis") == -1) {
                                LEAP.addCSS(LEAP.getElement("[ctf=tree3_level3]", m), "tree3_level3_dis");
                            }
                        }
                    }
                }
            }
        }
    };
    LEAP.tree3.setSelectedItem = function(h, g, d) {
        var j = LEAP.tree3._def.getvalue(g);
        ElementEventManager.handleEvent(h, "selectedItemChange", {
            tree: h,
            id: g,
            data: j
        });
    };
    LEAP.tree3.init = function() {
        if (document != null && document.body != null) {
            LEAP.tree3._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.tree3._init);
        }
        ElementEventManager.addManagedEventType(LEAP.tree3.d, "selectedItemChange");
        ElementEventManager.addManagedEventType(LEAP.tree3.d, "expandNode");
    }();
    LEAP.upload = {};
    LEAP.upload.d = "upload";
    LEAP.upload.s = null;
    LEAP.upload.p = "LEAP/Resource/HTML/Control/upload.html";
    LEAP.upload.r = true;
    LEAP.upload.control = "[ct=upload]";
    LEAP.upload.z = "<TABLE isnew=1 class='upload_photolist_item' cellSpacing=0 cellPadding=0 border=0>  <TR><TD class='upload_photolist_item_imgtd'><div style='position:relative;height:94px;width:100px;overflow:auto'><div ctf='upload_btn_delete' class='upload_btn upload_btn_delete' style='position:absolute;left:0px;top:0px;' ctt='upload_control_photolist' title='删除'></div><img align=absmiddle class='upload_photolist_item_imgview' style='height:94px;width:100px;' ctf='upload_control_photo_view' ctt=upload_control_photolist src='@src'/></td></TD></TR><TR><TD class='upload_photolist_item_text'>@showname</TD></TR></TABLE>";
    LEAP.upload.l = null;
    LEAP.upload.u = null;
    LEAP.upload.showimage = "<img align='absmiddle' ctf='upload_control_photolist_img' src='@imgsrc'/>";
    LEAP.upload._uploadBtnParentNode = null;
    var ____hasinitscanbtn = false;
    LEAP.upload.autoShowMSG = true;
    LEAP.upload._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.upload._init);
        LEAP.addEvent(document.body, "click", LEAP.upload.uiProcess, null, null, true);
        LEAP.addEvent(document.body, "mouseover", LEAP.upload.uiover, null, null, true);
        LEAP.addCodeType("upload_receipt", [{
            codeid: "0",
            codevalue: "未收"
        }, {
            codeid: "1",
            codevalue: "已收"
        }]);
        LEAP.addCodeType("upload_mustreceipt", [{
            codeid: "0",
            codevalue: "可选件"
        }, {
            codeid: "1",
            codevalue: "必收件"
        }]);
    };
    LEAP.upload.__addManagedEventType = function(d) {
        ElementEventManager.addManagedEventType(LEAP.upload.d, d);
        ElementEventManager.addManagedEventType("upload_control_photo", d);
        ElementEventManager.addManagedEventType("upload_control_list", d);
        ElementEventManager.addManagedEventType("upload_control_tree", d);
        ElementEventManager.addManagedEventType("upload_control_photolist", d);
    };
    LEAP.upload.init = function() {
        if (document != null && document.body != null) {
            LEAP.upload._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.upload._init);
        }
        LEAP.upload.__addManagedEventType("addUploadItem");
        LEAP.upload.__addManagedEventType("removeUploadItem");
    }();
    LEAP.upload.download = function(d, g, h) {
        if (d != null) {
            LEAP.asyn(LEAP.upload._download, window, 100, d, h);
        }
    };
    LEAP.upload._download = function(g, h) {
        if (g != null) {
            var d = LEAP.upload.getPath(g.nameedPath, g.name, g.uuid, g.showName, g.title);
            if (h) {
                if (d.indexOf("?") == -1) {
                    d += "?open=1";
                } else {
                    d += "&open=1";
                }
            }
            LEAP.asyn(window.open, null, 100, d);
        }
    };
    LEAP.upload.uiover = function(v) {
        if (v == null) {
            return;
        }
        var d = v.e.srcElement;
        if (d == null) {
            return;
        }
        var m = v.e.type;
        if (m == null) {
            return;
        }
        var x = d.tagName;
        if (x == null) {
            return;
        }
        try {
            var o = d.getAttribute(commfields.ctf);
            var j = null;
            j = LEAP._match(d, "upload_control_photolist");
            if (j != null) {
                if (o == "upload_control_photo_view") {
                    var y = d.parentElement.parentElement.parentElement.parentElement.parentElement.up__value;
                    var q = LEAP.getElement("[ctf=upload_control_photolist_show]", j);
                    var g = j.getAttribute("showwidth");
                    var u = j.getAttribute("showheight");
                    var r = window.screenTop;
                    var h = window.screen.width;
                    var p = window.screen.height;
                    var n = null;
                    var l = null;
                    if (g != null) {
                        if (q) {
                            q.style.width = g + "px";
                        }
                        n = (h - parseInt(g)) / 2;
                    } else {
                        if (q) {
                            q.style.width = "800px";
                        }
                        n = (h - 800) / 2;
                    }
                    if (u != null) {
                        if (q) {
                            q.style.height = u + "px";
                        }
                        l = ((p - r) - parseInt(u)) / 2;
                    } else {
                        if (q) {
                            q.style.height = "600px";
                        }
                        l = ((p - r) - 600) / 2;
                    }
                    if (q) {
                        q.style.left = n + "px";
                        q.style.top = l + "px";
                        q.style.display = "block";
                    }
                    var w = d.getAttribute("src");
                    if (q) {
                        q.innerHTML = LEAP.upload.showimage.replace("@imgsrc", w);
                        LEAP.upload.setShowImg(y, LEAP.getElement("[ctf=upload_control_photolist_img]", q));
                    }
                } else {
                    var q = LEAP.getElement("[ctf=upload_control_photolist_show]", j);
                    if (q) {
                        q.style.display = "none";
                    }
                }
            }
        } finally {}
    };
    LEAP.upload.getPath = function(v, x, d, n, q, g, w) {
        if (v && x && (v.indexOf("http://") == 0 || v.indexOf("https://") == 0)) {
            while (v.endsWith("/")) {
                v = v.substring(0, v.length - 1);
            }
            while (x.startsWith("/")) {
                x = x.substring(1, x.length);
            }
            return v + "/" + x;
        }
        if (v != null && typeof(v) == "object") {
            var m = v;
            v = m.nameedPath;
            x = m.name;
            d = m.uuid;
            n = m.showname;
            q = m.title;
        }
        if (LEAP.upload.u == null) {
            LEAP.upload.u = leapconfig.server + "LEAP/Download/";
        }
        if (g != null && w != null) {
            url = leapconfig.server + "imageview/" + g + "_" + w + "/LEAP/Download/";
        } else {
            url = leapconfig.server + "LEAP/Download/";
        }
        if (v != null) {
            url += encodeURIComponent(encodeURIComponent(escape(v))) + "/";
        }
        if (x != null) {
            if (d == null || d.Trim() == "") {
                url += encodeURIComponent(encodeURIComponent(escape(x)));
            } else {
                url += d + "_" + encodeURIComponent(encodeURIComponent(escape(x)));
            }
        }
        url = url.replaceall("%252F", "/");
        url = url.replaceall("%2540", "@");
        url = url.replaceall("%25253D", "=");
        var u = n ? n : q;
        if (u) {
            var j = url.lastIndexOf(".");
            if (j > -1) {
                if (x != u + url.substring(j)) {
                    var p = new StringBuffer();
                    for (var l = 0; l < u.length; l++) {
                        var r = u.charAt(l);
                        var h = escape(r);
                        if (r == " " || r == "(" || r == ")" || h.indexOf("%u") == 0) {
                            p.append(r);
                        } else {
                            p.append(h);
                        }
                    }
                    url = url.substring(0, j) + "/_v3_/" + p.toString() + url.substring(j);
                }
            }
        }
        if (window._beforeGetDownPath) {
            try {
                url = window._beforeGetDownPath(url);
            } catch (o) {}
        }
        return url;
    };
    LEAP.upload.getShowPath = function(d) {
        var g = null;
        if (d.viewName != null) {
            g = LEAP.upload.getPath(d.nameedPath, d.viewName, d.uuid);
        } else {
            if (d.name != null) {
                g = LEAP.upload.getPath(d.nameedPath, d.name, d.uuid);
            }
        }
        return g;
    };
    LEAP.upload.getViewPath = function(h, j, d) {
        var g = LEAP.upload.getPath(h.nameedPath, h.name, h.uuid, h.showName, h.title, j, d);
        return g;
    };
    LEAP.upload.onCompete = function(z) {
        if (z == null) {
            return;
        }
        var m = LEAP.getElement(LEAP.upload.l);
        if (m != null) {
            var o = m.getAttribute(commfields.ct);
            if (o != null) {
                if (o == "upload_control_photo") {
                    m[commfields.value] = z;
                    var q = LEAP.getElement("[ctf=upload_control_photo_view]", m);
                    q.src = "";
                    q.removeAttribute("src");
                    if (q != null) {
                        var g = LEAP.upload.getShowPath(z);
                        q.src = g;
                        LEAP.upload.setShowImg(z, q);
                        try {
                            m.focus();
                        } catch (l) {}
                        q = null;
                    }
                } else {
                    if (o == "upload_control_list") {
                        var y = LEAP.getElement(LEAP.upload.lr, m);
                        var p = LEAP.getElement("[ctf=upload_status]", y);
                        p.className = "upload_status_ok";
                        z.showName = y.getAttribute("cttag");
                        y[commfields.value] = z;
                        var j = LEAP.getElement("[ctf=upload_receipt]", y);
                        if (j != null) {
                            var v = j.innerText;
                            var x = LEAP.getCodeIDByValue("upload_receipt", v);
                            if (x != null) {
                                if (x == "0") {
                                    x = "1";
                                    j.innerText = LEAP.getCodeText("upload_receipt", x);
                                }
                                j.className = "upload_receipt1";
                                j.parentNode.innerHTML = j.outerHTML;
                                LEAP.removeElement(j);
                            }
                            j = null;
                        }
                        try {
                            m.focus();
                        } catch (l) {}
                        y = p = null;
                    } else {
                        if (o == "upload_control_tree") {
                            var h = z.showName;
                            var r = LEAP.getElement(LEAP.upload.lr, m);
                            var u = LEAP.tree.addItem(LEAP.getElement("[ct=tree]", m), r, h + '<A style="RIGHT: 30px;position: absolute;" href="javascript:void(0)" ctf="upload_btn_download" ctt="upload_control_tree">下载</A><A style="RIGHT: 0px;position: absolute;" href="javascript:void(0)" ctf="upload_btn_delete" ctt="upload_control_tree">删除</A>', z, null, "LEAP/Resource/images/itemstyle/upload/download.gif");
                            z.parent = r.getAttribute("_value");
                            LEAP.getElement(u)["up__" + commfields.value] = z;
                            try {
                                u.focus();
                            } catch (l) {}
                            r = u = null;
                        } else {
                            if (o == "upload_control_photolist") {
                                var h = z.showName;
                                var g = LEAP.upload.getShowPath(z);
                                var d = document.createElement("div");
                                m.appendChild(d);
                                d.innerHTML = LEAP.upload.z.replace("@showname", h).replace("@src", g);
                                LEAP.upload.setShowImg(z, LEAP.getElement("[ctf=upload_control_photo_view]", d));
                                var w = LEAP.getElement(">table:first", d);
                                m.appendChild(w);
                                w["up__" + commfields.value] = z;
                                try {
                                    m.focus();
                                } catch (l) {}
                                LEAP.removeElement(d);
                            }
                        }
                    }
                }
            }
            ElementEventManager.handleEvent(m, "addUploadItem", {
                element: m,
                value: z
            });
            m = null;
        }
        LEAP.upload.l = z = null;
    };
    LEAP.upload.changecelltext = function(h, d) {
        if (d != null) {
            var j = d.innerText;
            var g = LEAP.getCodeIDByValue(h, j);
            if (g != null) {
                if (g == "1") {
                    g = "0";
                } else {
                    if (g == "0") {
                        g = "1";
                    }
                }
                d.innerText = LEAP.getCodeText(h, g);
                d.className = h + g;
            }
            d = null;
        }
    };
    LEAP.upload.uiProcess = function(l) {
        var n = l.e.srcElement;
        var h = l.e.type;
        var d = n.getAttribute(commfields.ctf);
        try {
            if (d == "upload_file" && h == "click") {
                if (n.parentNode.getAttribute(commfields.ctf) != "upload_form") {
                    LEAP.upload._uploadBtnParentNode = n.parentNode;
                } else {
                    LEAP.upload._uploadBtnParentNode = null;
                }
            }
            var g = LEAP._match(n, "upload_control_list");
            if (g == null) {
                g = LEAP._match(n, "upload_control_photo");
            }
            if (g == null) {
                g = LEAP._match(n, "upload_control_tree");
            }
            if (g == null) {
                g = LEAP._match(n, "upload_control_photolist");
            }
            if (g != null) {
                if (g.getAttribute("readonly") == 1 && (d != "upload_control_photo_view" && d != "upload_btn_download")) {
                    return;
                }
            }
            if (d == "upload_receipt") {
                LEAP.upload.changecelltext("upload_receipt", n);
                m = null;
                return;
            }
            if (d == "upload_mustreceipt") {
                if (g.getAttribute("mustreceiptreadonly") == 1) {
                    return;
                }
                LEAP.upload.changecelltext("upload_mustreceipt", n);
                m = null;
            }
            if (d == "upload_btn_upload") {
                var I = n.getAttribute("ctt");
                if (I != null) {
                    if (g != null) {
                        var r = g.getAttribute("ctid");
                        if (r == null) {
                            r = UUID.cID();
                            g.setAttribute("ctid", r);
                        }
                        LEAP.upload.l = "[ctid=" + r + "]";
                        LEAP.upload.lr = null;
                        var G = null;
                        var K = null;
                        var j = null;
                        var z = null;
                        var C = g.getAttribute("maxsize");
                        if (C != null && C != "") {
                            C = C * 1;
                        }
                        var p = null;
                        if (I == "upload_control_tree") {
                            G = n.parentNode.getAttribute("ctid");
                            var y = LEAP._match(n, "upload_control_tree");
                            p = y;
                            y = null;
                        } else {
                            if (g.getAttribute("ct") == "upload_control_photolist") {
                                p = g;
                                G = g.getAttribute("ctid");
                            } else {
                                G = n.parentNode.parentNode.getAttribute("ctid");
                                p = n.parentNode.parentNode;
                            }
                        }
                        if (G == null) {
                            G = UUID.cID();
                            if (I == "upload_control_tree") {
                                n.parentNode.setAttribute("ctid", G);
                            } else {
                                if (g.getAttribute("ct") == "upload_control_photolist") {
                                    g.setAttribute("ctid", G);
                                } else {
                                    n.parentNode.parentNode.setAttribute("ctid", G);
                                }
                            }
                        }
                        LEAP.upload.lr = "[ctid=" + G + "]";
                        var x = false;
                        var M = null;
                        var q = false;
                        var H = null;
                        if (I == "upload_control_list") {
                            M = n.parentNode.parentNode.getAttribute("cttag");
                            var y = LEAP._match(n, "upload_control_list");
                            p = y;
                            x = true;
                            y = null;
                        }
                        if (I == "upload_control_tree") {
                            p = g;
                        }
                        if (K == null || K.Trim() == "") {
                            K = null;
                        }
                        var w = {
                            callback: LEAP.upload.onCompete,
                            title: p.getAttribute("uploadtitle"),
                            uploadpath: p.getAttribute("uploadpath"),
                            maxsize: p.getAttribute("maxfilesize"),
                            quality: p.getAttribute("quality"),
                            savesource: p.getAttribute("savesource"),
                            viewwidth: p.getAttribute("viewwidth"),
                            viewheight: p.getAttribute("viewheight"),
                            types: p.getAttribute("types"),
                            typesdesc: p.getAttribute("typesdesc"),
                            pathreg: p.getAttribute("pathreg"),
                            namereg: p.getAttribute("namereg"),
                            mastview: p.getAttribute("mastview"),
                            viewsize: p.getAttribute("viewsize"),
                            x: p.getAttribute("x"),
                            y: p.getAttribute("y"),
                            maskimgpath: p.getAttribute("maskimgpath"),
                            maskalpha: p.getAttribute("maskalpha")
                        };
                        if (w.maxsize == null) {
                            w.maxsize = p.getAttribute("maxsize");
                        }
                        LEAP.uploadform.show(w);
                        g = null;
                    }
                }
                return;
            }
            if (d == "upload_btn_delete") {
                var I = n.getAttribute("ctt");
                if (I != null) {
                    var g = LEAP._match(n, I);
                    if (g != null) {
                        if (I == "upload_control_tree") {
                            if (window.confirm("确认删除该文件?")) {
                                var F = n.parentNode.getAttribute("up__value");
                                LEAP.tree.removeItem(LEAP.getElement("[ct=tree]", g), n.parentNode, true);
                                ElementEventManager.handleEvent(g, "removeUploadItem", {
                                    caller: g,
                                    value: F
                                });
                            }
                        } else {
                            if (I == "upload_control_photolist") {
                                if (window.confirm("确认删除该文件?")) {
                                    var D = n.parentNode.parentNode.parentNode.parentNode.parentNode;
                                    var F = D.getAttribute("up__value");
                                    LEAP.removeElement(D);
                                    ElementEventManager.handleEvent(g, "removeUploadItem", {
                                        caller: g,
                                        value: F
                                    });
                                }
                            } else {
                                if (I == "upload_control_list") {
                                    var m = n.parentNode.parentNode;
                                    if (m == null) {
                                        return;
                                    }
                                    var F = m[commfields.value];
                                    if (!F) {
                                        LEAP.messagebox.alert("图片不存在", 2);
                                        return;
                                    }
                                    if (window.confirm("确认删除文件?")) {
                                        var J = LEAP.getElement("[ctf=upload_status]", m);
                                        if (J != null) {
                                            J.className = "upload_status";
                                        }
                                        m[commfields.value] = null;
                                        ElementEventManager.handleEvent(g, "removeUploadItem", {
                                            caller: g,
                                            value: F
                                        });
                                    }
                                    var B = LEAP.getElement("[ctf=upload_receipt]", m);
                                    if (B != null) {
                                        var v = B.innerText;
                                        var L = LEAP.getCodeIDByValue("upload_receipt", v);
                                        if (L != null) {
                                            if (L == "1") {
                                                L = "0";
                                                B.innerText = LEAP.getCodeText("upload_receipt", L);
                                            }
                                            B.className = "upload_receipt0";
                                            B.parentNode.innerHTML = B.outerHTML;
                                            LEAP.removeElement(B);
                                        }
                                        B = null;
                                    }
                                } else {
                                    if (window.confirm("确认删除图片?")) {
                                        var F = g.value;
                                        g.value = null;
                                        var o = LEAP.getElement("[ctf=" + I + "_view]", g);
                                        o.removeAttribute("src");
                                        o = null;
                                        ElementEventManager.handleEvent(g, "removeUploadItem", {
                                            caller: g,
                                            value: F
                                        });
                                        g = null;
                                    }
                                }
                            }
                        }
                    }
                }
                return;
            }
            if (d == "upload_control_photo_view" || d == "upload_btn_download") {
                var I = n.getAttribute("ctt");
                if (I != null) {
                    if (I == "upload_control_list") {
                        var F = n.parentNode.parentNode[commfields.value];
                        if (F != null) {
                            LEAP.upload.download(F);
                            g = null;
                            return;
                        }
                    } else {
                        if (I == "upload_control_tree") {
                            var F = n.parentNode["up__" + commfields.value];
                            if (F != null) {
                                var u = g.getAttribute("open");
                                if (A != null && A == "1") {
                                    u = true;
                                } else {
                                    u = false;
                                }
                                var A = g.getAttribute("nocache");
                                if (A == null || A == "") {
                                    A = 0;
                                }
                                if (A == 1) {
                                    LEAP.upload.download(F, true, u);
                                } else {
                                    LEAP.upload.download(F, null, u);
                                }
                                g = null;
                                return;
                            }
                        } else {
                            if (I == "upload_control_photolist") {
                                var F = n.parentNode.parentNode.parentNode.parentNode.parentNode["up__" + commfields.value];
                                if (F != null) {
                                    LEAP.upload.download(F);
                                    g = null;
                                    return;
                                }
                            } else {
                                var g = LEAP._match(n, I);
                                if (g != null) {
                                    var F = g[commfields.value];
                                    if (F != null) {
                                        LEAP.upload.download(F);
                                        g = null;
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                return;
            }
        } finally {
            n = null;
        }
    };
    LEAP.upload.setShowImg = function(l, h) {
        if (l.height != null && l.width != null && l.height != 0 && l.width != 0) {
            var m = h.parentNode.clientHeight;
            var g = h.parentNode.clientWidth;
            var j = l.width;
            var d = l.height;
            scale = j / d;
            if (j > g) {
                j = g;
                d = j / scale;
                if (d > m) {
                    d = m;
                    j = d * scale;
                }
            }
            if (d > m) {
                d = m;
                j = d * scale;
            }
            h.style.width = j + "px";
            h.style.height = d + "px";
        }
        if (h.style.width.toLowerCase() == "0px") {
            h.style.width = "100%";
        }
        if (h.style.height.toLowerCase() == "0px") {
            h.style.height = "100%";
        }
    };
    LEAP.upload.getValue = function(g) {
        if (g == null) {
            return;
        }
        if (typeof(g) == "string") {
            g = LEAP.getElement(g);
        }
        if (g == null) {
            return;
        }
        var h = g.getAttribute("ct");
        if (h == null) {
            return;
        }
        if (h == "upload_control_photo") {
            var z = g.value;
            g = null;
            if (z != null) {
                return JSON.stringify(z);
            }
        } else {
            if (h == "upload_control_tree") {
                var I = LEAP.getElements("A[onselectstart]", g);
                if (I && I.length > 0) {
                    var A = new Array();
                    var y = null;
                    for (var C = 0; C < I.length; C++) {
                        y = I[C].parentNode;
                        if (!A.contains(y)) {
                            A.add(y);
                        }
                    }
                    if (A.length > 0) {
                        var H = [];
                        for (var B = 0; B < A.length; B++) {
                            H.add(A[B]["_value"]);
                        }
                        return JSON.stringify(H);
                    }
                }
            } else {
                if (h == "upload_control_photolist") {
                    var q = LEAP.getElements(">table", g);
                    if (q != null) {
                        var H = [];
                        var A = q.length;
                        for (var C = 0; C < A; C++) {
                            H.add(q[C]["up__value"]);
                        }
                        q = null;
                        return JSON.stringify(H);
                    }
                } else {
                    if (h == "upload_control_list") {
                        var w = LEAP.getElements("[ctf=table_row]", g);
                        var F = false;
                        var m = LEAP.getElement("[md=mustreceipt]", g);
                        if (m != null) {
                            F = true;
                        } else {
                            var j = LEAP.getElement("[md=receipt]", g);
                            if (j != null) {
                                F = true;
                            }
                        }
                        g = null;
                        if (w != null) {
                            var A = w.length;
                            var H = null;
                            for (var C = 0; C < A; C++) {
                                var n = w[C];
                                var x = n[commfields.value];
                                if (!F) {
                                    if (x != null) {
                                        if (H == null) {
                                            H = [];
                                        }
                                        H.add(x);
                                    }
                                } else {
                                    if (H == null) {
                                        H = [];
                                    }
                                    if (x == null) {
                                        x = new Object();
                                    }
                                    var d = LEAP.getElement("[ctf=upload_receipt]", n);
                                    if (d != null) {
                                        var D = d.innerText;
                                        var r = LEAP.getCodeIDByValue("upload_receipt", D);
                                        x.receipt = r;
                                    }
                                    var u = LEAP.getElement("[ctf=upload_mustreceipt]", n);
                                    if (u != null) {
                                        var o = u.innerText;
                                        var G = LEAP.getCodeIDByValue("upload_mustreceipt", o);
                                        x.mustreceipt = G;
                                    }
                                    x.showName = n.getAttribute("cttag");
                                    H.add(x);
                                }
                                n = null;
                            }
                            if (H != null) {
                                H = JSON.stringify(H);
                            }
                            w = null;
                            return H;
                        }
                    }
                }
            }
        }
        return null;
    };
    LEAP.upload.setValue = function(element, value) {
        if (element == null) {
            return;
        }
        if (typeof(element) == "string") {
            element = LEAP.getElement(element);
        }
        if (element == null) {
            return;
        }
        var ct = element.getAttribute("ct");
        if (ct == null) {
            return;
        }
        if (ct == "upload_control_photo") {
            try {
                element.value = value;
                if (typeof(value) == "string" && value.Trim() != "") {
                    try {
                        element.value = eval("(" + value + ")");
                    } catch (err) {
                        element.value = null;
                    }
                }
                value = element.value;
                var showImg = LEAP.getElement("[ctf=upload_control_photo_view]", element);
                element = null;
                showImg.removeAttribute("src");
                if (value.name != null) {
                    if (showImg != null) {
                        showImg.src = LEAP.upload.getShowPath(value);
                    }
                }
                LEAP.upload.setShowImg(value, showImg);
                showImg = null;
            } catch (err) {}
        } else {
            if (ct == "upload_control_photolist") {
                element.innerHTML = "<div style='position: absolute; right: 0px; top: 0px;' ctf='upload_btn_upload' class='upload_btn upload_btn_upload' ctt='upload_control_photolist' title='上传'></div>";
                if (value != null) {
                    var _value = value;
                    if (typeof(value) == "string" && value.Trim() != "") {
                        try {
                            _value = eval("(" + value + ")");
                        } catch (err) {
                            _value = null;
                        }
                    }
                    if (_value != null) {
                        var l = _value.length;
                        for (var i = 0; i < l; i++) {
                            var result = _value[i];
                            var n = result.showName;
                            var url = LEAP.upload.getShowPath(result);
                            var div = document.createElement("div");
                            element.appendChild(div);
                            div.innerHTML = LEAP.upload.z.replace("@showname", n).replace("@src", url);
                            LEAP.upload.setShowImg(result, LEAP.getElement("[ctf=upload_control_photo_view]", div));
                            var table = LEAP.getElement(">table:first", div);
                            element.appendChild(table);
                            table["up__" + commfields.value] = result;
                            LEAP.removeElement(div);
                            div = table = null;
                        }
                    }
                }
            } else {
                if (ct == "upload_control_list") {
                    var isextend = false;
                    var _a = LEAP.getElement("[md=mustreceipt]", element);
                    if (_a != null) {
                        isextend = true;
                    } else {
                        var _b = LEAP.getElement("[md=receipt]", element);
                        if (_b != null) {
                            isextend = true;
                        }
                    }
                    var _value = value;
                    if (typeof(value) == "string" && value.Trim() != "") {
                        try {
                            _value = eval("(" + value + ")");
                        } catch (err) {
                            _value = null;
                        }
                    }
                    var rows = LEAP.getElements("[ctf=table_row]", element);
                    if (rows != null) {
                        if (_value != null) {
                            var l = _value.length;
                            var ret = null;
                            for (var i = 0; i < l; i++) {
                                var v = _value[i];
                                var n = v.showName;
                                var row = LEAP.getElement("[cttag=" + n + "]", element);
                                if (row != null) {
                                    var e = LEAP.getElement("[ctf=upload_status]", row);
                                    if (v.nameedPath != null) {
                                        e.className = "upload_status_ok";
                                        row[commfields.value] = v;
                                    } else {
                                        e.className = "upload_status";
                                        row[commfields.value] = null;
                                    }
                                    if (isextend) {
                                        LEAP.upload._setRow(row, v);
                                    }
                                    rows.remove(row);
                                }
                                row = e = null;
                            }
                        }
                        if (rows != null) {
                            for (var i = 0; i < rows.length; i++) {
                                var row = rows[i];
                                var e = LEAP.getElement("[ctf=upload_status]", rows[i]);
                                e.className = "upload_status";
                                row[commfields.value] = null;
                                if (isextend) {
                                    LEAP.upload._setRow(row, v);
                                }
                                row = e = null;
                            }
                            rows = null;
                        }
                        element = null;
                        if (ret != null) {
                            ret = JSON.stringify(ret);
                        }
                        rows = null;
                        return ret;
                    }
                } else {
                    if (ct == "upload_control_tree") {
                        var tree = LEAP.getElement("[ct=tree]", element);
                        if (tree != null) {
                            var als = LEAP.getElements("A[onselectstart]", element);
                            var l = null;
                            var p = null;
                            if (als && als.length > 0) {
                                l = new Array();
                                for (var i = 0; i < als.length; i++) {
                                    p = als[i].parentNode;
                                    if (!l.contains(p)) {
                                        l.add(p);
                                    }
                                }
                                if (l.length > 0) {
                                    for (var k = 0; k < l.length; k++) {
                                        LEAP.tree.removeItem(tree, l[k], true);
                                    }
                                }
                            }
                            l = p = null;
                        }
                        if (value != null) {
                            var _value = value;
                            if (typeof(value) == "string" && value.Trim() != "") {
                                try {
                                    _value = eval("(" + value + ")");
                                } catch (err) {
                                    _value = null;
                                }
                            }
                            if (_value != null) {
                                var showDel = true;
                                _str = '<A style="RIGHT: 30px;position: absolute;" href="javascript:void(0)" ctf="upload_btn_download" ctt="upload_control_tree">下载</A>';
                                if (element.getAttribute("showDelButton") == "0") {
                                    showDel = false;
                                }
                                if (showDel) {
                                    _str = _str + '<A style="RIGHT: 0px;position: absolute;" href="javascript:void(0)" ctf="upload_btn_delete" ctt="upload_control_tree">删除</A>';
                                }
                                var l = _value.length;
                                for (var i = 0; i < l; i++) {
                                    var result = _value[i];
                                    var parent = LEAP.tree.getItemByValue(tree, result.parent);
                                    var li = LEAP.tree.addItem(tree, parent, result.showName + _str, result, null, "LEAP/Resource/images/itemstyle/upload/download.gif");
                                    LEAP.getElement(li)["up__" + commfields.value] = result;
                                    parent = li = null;
                                }
                            }
                            value = _value = null;
                        }
                        tree = null;
                    }
                }
            }
        }
        element = null;
    };
    LEAP.upload._setRow = function(l, g) {
        var h = LEAP.getElement("[ctf=upload_receipt]", l);
        if (h != null) {
            var d = "0";
            if (g != null && g.receipt != null) {
                d = g.receipt + "";
            }
            h.className = "upload_receipt" + d;
            h.innerText = LEAP.getCodeText("upload_receipt", d);
            h.parentNode.innerHTML = h.outerHTML;
            LEAP.removeElement(h);
            h = null;
        }
        var j = LEAP.getElement("[ctf=upload_mustreceipt]", l);
        if (j != null) {
            var d = "0";
            if (g != null && g.mustreceipt != null) {
                d = g.mustreceipt + "";
            }
            j.className = "upload_mustreceipt" + d;
            j.innerText = LEAP.getCodeText("upload_mustreceipt", d);
            j.parentNode.innerHTML = j.outerHTML;
            LEAP.removeElement(j);
            j = null;
        }
    };
    LEAP.uploadbtn = new Object();
    LEAP.uploadbtn.d = "uploadbtn";
    LEAP.uploadbtn.e = "uploadbtn_file";
    LEAP.uploadbtn.f = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="@width" height="@height" id="@id" align="middle"><param name="movie" value="@serverLEAP/Resource/flash/upload.swf@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="play" value="true" /><param name="loop" value="true" /><param name="wmode" value="transparent" /><param name="scale" value="showall" /><param name="menu" value="true" /><param name="devicefont" value="false" /><param name="salign" value="" /><param name="allowScriptAccess" value="sameDomain" /><param name="FlashVars" value="@param"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@serverLEAP/Resource/flash/upload.swf@gv" width="@width" height="@height"><param name="movie" value="@serverLEAP/Resource/flash/upload.swf@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="play" value="true" /><param name="loop" value="true" /><param name="wmode" value="transparent" /><param name="scale" value="showall" /><param name="menu" value="true" /><param name="devicefont" value="false" /><param name="salign" value="" /><param name="allowScriptAccess" value="sameDomain" /><param name="FlashVars" value="@param"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="' + leapconfig.server + 'LEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>';
    LEAP.uploadbtn._init = function() {
        UIEventManager.removeEvent(window, "load", LEAP.uploadbtn._init);
    };
    LEAP.uploadbtn.init = function() {
        if (document != null && document.body != null) {
            LEAP.uploadbtn._init();
        } else {
            UIEventManager.addEvent(window, "load", LEAP.uploadbtn._init);
        }
        ElementEventManager.addManagedEventType(LEAP.uploadbtn.d, "uploadBtnComplete");
    };
    LEAP.uploadbtn.w = function(h, g, j) {
        try {
            var d = h.getAttribute(j);
            if (g && String.isEmpty(d)) {
                d = g.getAttribute(j);
            }
            if (String.isEmpty(d)) {
                d = null;
            }
            return d;
        } finally {
            h = g = null;
        }
    };
    LEAP.uploadbtn.inited = function(g) {
        var d = LEAP.getElement("[ctid=" + g + "]");
        if (d) {
            d.setAttribute("flashinited", "1");
        }
        d = null;
    };
    LEAP.uploadbtn.setReadonly = function(h, d) {
        var g = null;
        try {
            h = LEAP._check(h, LEAP.uploadbtn.d);
            if (h == null) {
                return;
            }
            var j = h.getAttribute("flashinited");
            if (j != null && j == "1") {
                if (d == null || d != true) {
                    d = false;
                }
                g = h.children[0];
                if (g) {
                    var m = g.getElementsByTagName("object");
                    if (m && m.length) {
                        g = m[0];
                    }
                    m = null;
                }
                if (g != null && g.setReadOnly) {
                    g.setReadOnly(d);
                    return;
                }
            }
            var l = null;
            if (h) {
                l = h.getAttribute("ctid");
                if (!l) {
                    l = UUID.cID();
                    h.setAttribute("ctid", l);
                }
            }
            LEAP.asyn(LEAP.uploadbtn.setReadonly, null, 50, h.tagName + "[ctid=" + l + "]", d);
        } finally {
            g = h = null;
        }
    };
    LEAP.uploadbtn.Cancle = function(g, d) {
        return LEAP.upload.Cancle(g, d);
    };
    LEAP.upload.Cancle = function(h, g) {
        var d = null;
        try {
            h = LEAP._check(h, LEAP.uploadbtn.d);
            if (h == null) {
                return;
            }
            var j = h.getAttribute("flashinited");
            if (j != null && j == "1") {
                if (g == null || g != true) {
                    g = false;
                }
                d = h.children[0];
                if (d) {
                    var m = d.getElementsByTagName("object");
                    if (m && m.length) {
                        d = m[0];
                    }
                    m = null;
                }
                if (d != null && d.Cancle) {
                    d.Cancle(g);
                    return;
                }
            }
            var l = null;
            if (h) {
                l = h.getAttribute("ctid");
                if (!l) {
                    l = UUID.cID();
                    h.setAttribute("ctid", l);
                }
            }
            LEAP.asyn(LEAP.uploadbtn.Cancle, null, 50, h.tagName + "[ctid=" + l + "]", g);
        } finally {
            d = h = null;
        }
    };
    LEAP.uploadbtn.pa = function(h, g) {
        var d = new Object();
        d.readonly = LEAP.uploadbtn.w(h, g, "readonly");
        d.viewsize = LEAP.uploadbtn.w(h, g, "viewsize");
        if (LEAP.upload != null && LEAP.upload.viewsize != null && d.viewsize == null || d.viewsize == "") {
            d.viewsize = LEAP.upload.viewsize;
        }
        d.minsize = LEAP.uploadbtn.w(h, g, "minsize");
        d.maxsize = LEAP.uploadbtn.w(h, g, "maxsize");
        d.callfn = LEAP.uploadbtn.w(h, g, "callfn");
        d.server = LEAP.uploadbtn.w(h, g, "server");
        if (!d.server) {
            d.server = leapconfig.server;
        }
        d.sessionid = LEAP.uploadbtn.w(h, g, "sessionid");
        if (!d.sessionid) {
            d.sessionid = leapclient.getsid();
        }
        d.ctid = LEAP.ctid(h);
        d.types = LEAP.uploadbtn.w(h, g, "types");
        d.typesdesc = LEAP.uploadbtn.w(h, g, "typesdesc");
        d.savesource = LEAP.uploadbtn.w(h, g, "savesource");
        d.viewwidth = LEAP.uploadbtn.w(h, g, "viewwidth");
        d.viewheight = LEAP.uploadbtn.w(h, g, "viewheight");
        d.quality = LEAP.uploadbtn.w(h, g, "quality");
        d.uploadpath = LEAP.uploadbtn.w(h, g, "uploadpath");
        d.debug = LEAP.uploadbtn.w(h, g, "debug");
        d.userpar = LEAP.uploadbtn.w(h, g, "userpar");
        d.showtext = LEAP.uploadbtn.w(h, g, "showtext");
        d.callmode = LEAP.uploadbtn.w(h, g, "callmode");
        d.modulefn = LEAP.uploadbtn.w(h, g, "modulefn");
        d.mulit = LEAP.uploadbtn.w(h, g, "mulit");
        d.processfn = LEAP.uploadbtn.w(h, g, "processfn");
        d.selecetfn = LEAP.uploadbtn.w(h, g, "selecetfn");
        d.pathfn = LEAP.uploadbtn.w(h, g, "pathfn");
        d.pathreg = LEAP.uploadbtn.w(h, g, "pathreg");
        d.namereg = LEAP.uploadbtn.w(h, g, "namereg");
        d.allowexe = LEAP.uploadbtn.w(h, g, "allowexe");
        d.img = LEAP.uploadbtn.w(h, g, "img");
        d.LID = window.LEAP_LID;
        d.LSYS_AREA = window._leap_systemarea;
        d.LSYS_NAME = window._leap_systemname;
        d.LSYS_CODE = window._leap_systemcode;
        if (!String.isEmpty(d.img)) {
            d.img = leapconfig.server + d.img;
        }
        d.imgwidth = LEAP.uploadbtn.w(h, g, "imgwidth");
        d.imgheight = LEAP.uploadbtn.w(h, g, "imgheight");
        h = g = null;
        return d;
    };
    LEAP.uploadbtn.i = function(y, n) {
        if (!n) {
            if (!event) {
                return;
            }
            n = event.srcElement;
        }
        if (!n) {
            return;
        }
        if (y != null) {
            var q = function() {
                LEAP.uploadbtn.i(null, n);
                n = null;
            };
            setTimeout(q, y);
            return;
        }
        var h = n.parentElement;
        var w = null;
        if (h != null) {
            w = h.getAttribute("ctid");
            if (!w) {
                w = UUID.cID();
                h.setAttribute("ctid", w);
            }
        } else {
            return;
        }
        var r = h.getAttribute("tct");
        var d = null;
        if (r) {
            d = LEAP._match(h, r, "ct", 9);
        }
        if (!d) {
            d = h;
        }
        var m = h.getAttribute(commfields.ct);
        if (m && m == LEAP.uploadbtn.d) {
            t = LEAP.uploadbtn.pa(h, d);
            t.isUploadBTN = "1";
            var g = [];
            var B = 0;
            for (var C in t) {
                var u = t[C];
                if (u && typeof u != "function") {
                    g.add(C + "=" + encodeURIComponent(u));
                }
            }
            var z = g.join("&");
            h.removeChild(n);
            n = null;
            var x = leapclient.getVersion();
            if (x == null) {
                x = "";
            } else {
                x = "?gv=" + leapclient.getVersion();
            }
            var A = 60;
            if (t.showtext && t.showtext == "上传") {
                A = 60;
                h.style.overflow = "hidden";
            }
            var j = "21px";
            var l = LEAP.uploadbtn.w(h, d, "imgwidth");
            var p = LEAP.uploadbtn.w(h, d, "imgheight");
            if (t.imgwidth) {
                A = l + "px";
                j = p + "px";
                h.style.overflow = "hidden";
                h.style.height = (Number(p) + 3) + "px";
                h.style.width = (Number(l) + 3) + "px";
            }
            var o = LEAP.uploadbtn.f.replaceall("@width", A + "px").replaceall("@height", j).replaceall("@server", leapconfig.server).replaceall("@param", z).replace("@id", t.ctid).replaceall("@gv", x);
            h.innerHTML = o;
        }
        if (n) {
            h.removeChild(n);
        }
        d = h = n = null;
    };
    LEAP.uploadbtn.Complete = function(j, h, v, u, w, o, d) {
        if (j) {
            j = JSON.parse(unescape(decodeURIComponent(base64decode(j))));
            if (j == "null") {
                j = null;
            }
            if (j.error != null) {
                h = j;
                j = null;
            }
        }
        if (v) {
            if (LEAP.userInfo) {
                j.creator = LEAP.userInfo.userflag;
                j.userName = LEAP.userInfo.fullName;
            }
            j.time = new Date().getTime();
            var l = LEAP.getElement("[ctid=" + v + "]");
            if (l) {
                var p = l.getAttribute("showmsg");
                ElementEventManager.handleEvent(l, "uploadBtnComplete", {
                    caller: l,
                    object: j,
                    err: h,
                    result: j,
                    sucess: h == null
                });
                if (!String.isEmpty(w) && w == "module" && !String.isEmpty(o)) {
                    var m = l.getAttribute(commfields.instance);
                    if (!String.isEmpty(m)) {
                        var g = LEAP.getLoadedModule(m);
                        if (g != null) {
                            g[o](l, j, h, u, d, l);
                        }
                        g = null;
                    }
                } else {
                    var r = l.getAttribute("tct");
                    if (r && LEAP[r] && LEAP[r].onUploadComplete) {
                        var n = LEAP._match(l, r, "ct", 9);
                        if (n) {
                            try {
                                LEAP[r].onUploadComplete.call(LEAP[r], n, j, h, u, d, l);
                            } finally {
                                n = null;
                            }
                        }
                        if (String.isEmpty(p)) {
                            p = l.getAttribute("showmsg");
                        }
                    }
                }
                if (!String.isEmpty(p) || p != "0") {
                    p = true;
                }
                if (p) {
                    if (j != null) {
                        if (window._messagetip == "1") {
                            alert("上传成功");
                        } else {
                            LEAP.messagebox.alert("上传成功");
                        }
                    } else {
                        if (h == null || h.error == null) {
                            if (window._messagetip == "1") {
                                alert("上传失败");
                            } else {
                                LEAP.messagebox.alert("上传失败", 3);
                            }
                        } else {
                            if (h.error == 1) {
                                var q = new StringBuffer();
                                q.append("上传失败,超出最大大小限制");
                                if (h.maxLen != null) {
                                    q.append("[");
                                    q.append(h.maxLen);
                                    q.append("KB]");
                                }
                                if (window._messagetip == "1") {
                                    alert(q.toString());
                                } else {
                                    LEAP.messagebox.alert(q.toString(), 3);
                                }
                            } else {
                                if (h.error == 2 || h.error == 3) {
                                    alert("上传失败,不允许上传的文件类型");
                                } else {
                                    if (h.errormsg) {
                                        if (window._messagetip == "1") {
                                            alert("上传失败\n" + h.errormsg);
                                        } else {
                                            LEAP.messagebox.alert("上传失败\n" + h.errormsg, 3);
                                        }
                                    } else {
                                        if (window._messagetip == "1") {
                                            alert("上传失败");
                                        } else {
                                            LEAP.messagebox.alert("上传失败", 3);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                l = null;
            }
        }
    };
    LEAP.uploadbtn.setProgressStatus = function(h, o, u, d, q, p, r, n, g) {
        var l = LEAP.getElement("[ctid=" + q + "]");
        if (l) {
            var m = l.getAttribute(commfields.instance);
            if (!String.isEmpty(m)) {
                var j = LEAP.getLoadedModule(m);
                if (j != null && j[n]) {
                    j[n](l, h, o, u, d, p, r, g);
                }
                j = null;
            }
        }
    };
    LEAP.uploadbtn.setUploadAttr = function(h, d, l) {
        if (String.isEmpty(d)) {
            return;
        }
        var g = null;
        try {
            h = LEAP._check(h, LEAP.uploadbtn.d);
            if (h == null) {
                return;
            }
            var j = h.getAttribute("flashinited");
            if (j != null && j == "1") {
                g = h.children[0];
                if (g && !g.setUploadAttr) {
                    var n = g.getElementsByTagName("object");
                    if (n && n.length) {
                        g = n[0];
                    }
                    n = null;
                }
                if (g != null && g.setUploadAttr) {
                    g.setUploadAttr(d, l);
                    return;
                }
            }
            var m = null;
            if (h) {
                m = h.getAttribute("ctid");
                if (!m) {
                    m = UUID.cID();
                    h.setAttribute("ctid", m);
                }
            }
            LEAP.asyn(LEAP.uploadbtn.setUploadAttr, null, 50, h.tagName + "[ctid=" + m + "]", d, l);
        } finally {
            g = h = null;
        }
    };
    LEAP.uploadbtn.onSelectFile = function(d, o, u, q, p, r, n, g) {
        var j = LEAP.getElement("[ctid=" + q + "]");
        var h = null;
        try {
            if (j) {
                var l = j.getAttribute(commfields.instance);
                if (!String.isEmpty(l)) {
                    h = LEAP.getLoadedModule(l);
                    if (h != null && h[n]) {
                        var m = h[n](j, d, o, u, p, r, g);
                        if (m == false) {
                            return false;
                        }
                    }
                    h = null;
                }
            }
            return true;
        } finally {
            j = h = null;
        }
    };
    LEAP.uploadbtn.onGetUploadPath = function(d, n, u, p, o, r, q, g) {
        var j = LEAP.getElement("[ctid=" + p + "]");
        var h = null;
        try {
            if (j) {
                var l = j.getAttribute(commfields.instance);
                if (!String.isEmpty(l)) {
                    h = LEAP.getLoadedModule(l);
                    if (h != null && h[q]) {
                        var m = h[q](j, d, n, u, o, r, g);
                        return m;
                    }
                    h = null;
                }
            }
        } finally {
            j = h = null;
        }
    };
    LEAP.uploadbtn.init();
    LEAP.uploadform = new Object();
    LEAP.uploadform.d = "uploadform";
    LEAP.uploadform.s = null;
    LEAP.uploadform.f = null;
    LEAP.uploadform.c = null;
    LEAP.uploadform.fobj = '<object id="@id" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="@width" height="@height" align="middle"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="play" value="true" /><param name="loop" value="true" /><param name="wmode" value="window" /><param name="scale" value="showall" /><param name="menu" value="true" /><param name="devicefont" value="false" /><param name="salign" value="" /><param name="allowScriptAccess" value="sameDomain" /><param name="FlashVars" value="@vars"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@url@gv" width="@width" height="@height"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="play" value="true" /><param name="loop" value="true" /><param name="wmode" value="window" /><param name="scale" value="showall" /><param name="menu" value="true" /><param name="devicefont" value="false" /><param name="salign" value="" /><param name="allowScriptAccess" value="sameDomain" /><param name="FlashVars" value="@vars"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="@flashimg" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>'.replace("@flashimg", leapconfig.server + "LEAP/Resource/flash/get_flash_player.gif").replaceall("@id", "leapflashuploadform01").replaceall("@width", "603").replaceall("@height", "403").replaceall("@url", leapconfig.server + "LEAP/Resource/flash/uploadForm.swf").replaceall("@gv", leapclient.getVersionStr());
    LEAP.uploadform.show = function(d) {
        if (d.callback == null) {
            return;
        }
        LEAP.uploadform.f = null;
        LEAP.uploadform.c = null;
        if (LEAP.upload != null && LEAP.upload.viewsize != null && d.viewsize == null || d.viewsize == "") {
            d.viewsize = LEAP.upload.viewsize;
        }
        LEAP.uploadform.c = {
            arg: d.arg,
            callback: d.callback,
            domain: d.domain,
            autoclose: d.autoclose
        };
        delete(d.arg);
        delete(d.callback);
        delete(d.autoclose);
        delete(d.domain);
        var n = d.x;
        var m = d.y;
        delete(d.x);
        delete(d.y);
        d.server = leapconfig.server;
        LEAP.uploadform.f = d;
        d.LID = window.LEAP_LID;
        d.LSYS_AREA = window._leap_systemarea;
        d.LSYS_NAME = window._leap_systemname;
        d.LSYS_CODE = window._leap_systemcode;
        var g = [];
        var j = 0;
        for (var p in d) {
            var q = d[p];
            if (q && typeof q != "function") {
                g.add(p + "=" + encodeURIComponent(q));
            }
        }
        var l = g.join("&");
        if (LEAP.uploadform.s == null) {
            LEAP.uploadform.s = LEAP.form.create(null, "文件上传", 612, 436, null, null, null, null, null, null, true).form;
            LEAP.addEvent(LEAP.uploadform.s, "formHided", LEAP.uploadform.clear);
        }
        var o = LEAP.uploadform.fobj.replaceall("@vars", l);
        LEAP.form.setContent(LEAP.uploadform.s, o);
        LEAP.form.show(LEAP.uploadform.s);
        if (n || m) {
            var h = LEAP.getElement(LEAP.uploadform.s);
            if (n == null) {
                n = (document.body.clientWidth - h.clientWidth) / 2;
            }
            if (m == null) {
                m = (document.body.clientHeight - h.clientHeight) / 2;
            }
            if (typeof(n) == "string" && n.indexOf("%") > -1) {
                n = document.body.clientWidth * ("0." + n.replace("%", ""));
            }
            if (typeof(m) == "string" && m.indexOf("%") > -1) {
                m = document.body.clientHeight * ("0." + m.replace("%", ""));
            }
            if (n < 0) {
                n = 20;
            }
            if (m < 0) {
                m = 40;
            }
            LEAP.form.setLocation(LEAP.uploadform.s, n, m);
        }
        document.getElementById("leapflashuploadform01").focus();
    };
    LEAP.uploadform.clear = function() {
        LEAP.form.setContent(LEAP.uploadform.s, "");
        LEAP.uploadform.f = null;
        LEAP.uploadform.c = null;
    };
    LEAP.uploadform.callback = function(h, d) {
        if (!h) {
            return;
        }
        var m = null;
        var l = LEAP.uploadform.c.autocloase;
        var g = LEAP.uploadform.c.arg;
        var j = LEAP.uploadform.c.callback;
        try {
            if (h) {
                if (d != null) {
                    d = JSON.parse(unescape(decodeURIComponent(base64decode(d))));
                    m = LEAP.uploadform.c.domain;
                    if (m == null) {
                        m = window;
                    }
                    if (l == null || l) {
                        LEAP.uploadform.hide();
                    }
                    j.call(m, d, g);
                }
            }
        } catch (n) {
            if (isdebug) {
                throw n;
            }
        } finally {
            m = j = d = g = null;
        }
    };
    LEAP.uploadform.hide = function() {
        LEAP.uploadform.clear();
        LEAP.form.hide(LEAP.uploadform.s);
    };
    LEAP.GISM = {};
    LEAP.GISM.d = "GISM";
    LEAP.GISM.ff = '<DIV gisf="searchcon"  style="filter:Alpha(Opacity=45);position:absolute;right:0;top:27px;background-color:white;WIDTH: 300px;height:300px;display:none;overflow:hidden;"><DIV gisf="searchconContent" style="width:100%;height:100%;display:block;overflow:hidden;"></DIV></DIV><DIV style="width:100%;height:100%">     <object id="@id" ctf="GIS" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100%" height="100%" align="middle"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@url@gv" width="100%" height="100%"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="@serverLEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>   </DIV>'.replaceall("@server", leapconfig.server).replaceall("@url", leapconfig.server + "LEAP/Resource/flash/GIS/LGIS.swf").replaceall("@gv", leapclient.getVersionStr());
    LEAP.GISM.f = '<DIV style="width:100%;height:100%">     <object id="@id" ctf="GIS" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100%" height="100%" align="middle"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--[if !IE]>--><object type="application/x-shockwave-flash" data="@url@gv" width="100%" height="100%"><param name="movie" value="@url@gv" /><param name="quality" value="high" /><param name="bgcolor" value="#ffffff" /><param name="wmode" value="opaque" /><param name="allowScriptAccess" value="sameDomain" /><param name="allowFullScreen" value="true" /><param name="FlashVars" value="@vars"/><!--<![endif]--><a href="http://www.adobe.com/go/getflash"><img src="@serverLEAP/Resource/flash/get_flash_player.gif" alt="获得 Adobe Flash Player" /></a><!--[if !IE]>--></object><!--<![endif]--></object>   </DIV>'.replaceall("@server", leapconfig.server).replaceall("@url", leapconfig.server + "LEAP/Resource/flash/GIS/LGIS.swf").replaceall("@gv", leapclient.getVersionStr());
    LEAP.GISM.i = function(o, d) {
        if (!d) {
            if (!event) {
                return;
            }
            d = event.srcElement;
        }
        if (!d) {
            return;
        }
        if (o != null) {
            var w = function() {
                LEAP.GISM.i(null, d);
                d = null;
            };
            setTimeout(w, o);
            return;
        }
        var m = d.parentElement;
        var p = null;
        if (m != null) {
            m.style.position = "relative";
            p = m.getAttribute("ctid");
            if (!p) {
                p = UUID.cID();
                m.setAttribute("ctid", p);
            }
        } else {
            return;
        }
        var q = m.getAttribute(commfields.ct);
        var h = m.getAttribute("hidebar");
        var l = m.getAttribute("show3D");
        var g = m.getAttribute("show3Dalpha");
        if (q && q == LEAP.GISM.d) {
            var z = new Object();
            z.server = leapconfig.server;
            z.sessionid = leapclient.getsid();
            if (h != null && h) {
                z.hidebar = h;
            }
            if (l != null && l) {
                z.show3D = l;
            }
            if (g != null && g) {
                z.show3Dalpha = g;
            }
            if (LEAP.getUserInfo().applicationname != null) {
                z.applicationname = LEAP.getUserInfo().applicationname;
            }
            z.showtype = 1;
            z.isMobile = true;
            z.ctid = p;
            if (LEAP.getUserInfo()) {

                z.areaid = LEAP.getUserInfo().areaid;
                z.areaname = LEAP.getUserInfo().areaCNName;
                if (LEAP.getUserInfo().extendinfo) {
                    if (LEAP.getUserInfo().extendinfo.gis_showxz) {
                        z.showxz = LEAP.getUserInfo().extendinfo.gis_showxz;
                    }
                    if (LEAP.getUserInfo().extendinfo.gis_showdrawtool) {
                        z.showdrawtool = LEAP.getUserInfo().extendinfo.gis_showdrawtool;
                    }
                }
            }
            var n = [];
            var u = 0;
            for (var y in z) {
                var x = z[y];
                if (x && typeof x != "function") {
                    n.add(y + "=" + encodeURIComponent(x));
                }
            }
            var r = n.join("&");
            var j = LEAP.GISM.f.replaceall("@vars", r).replace("@id", p);
            m.innerHTML = j;
        }
        if (d) {
            LEAP.removeElement(d, false);
        }
        m = d = null;
    };
    LEAP.GISM._flashcallback = function(h, g, d) {
        LEAP.asyn(LEAP.GISM.__flashcallback, null, 10, h, g, d);
    };
    LEAP.GISM.__flashcallback = function(l, p, r) {
        var h = LEAP.getElement("[ctid=" + l + "]");
        if (h) {
            if (r) {
                try {
                    r = JSON.parse(unescape(r));
                } catch (m) {}
            }
            if (p == "GIS_initComplete") {
                h.setAttribute("flashinited", "1");
                var g = document.getElementById(l);
                if (g) {
                    var j = g.getElementsByTagName("object");
                    if (j && j.length) {
                        g = j[0];
                    }
                    j = null;
                }
                if (g != null) {
                    g.focus();
                }
                g = null;
            }
            ElementEventManager.handleEvent(h, p, r);
            var q = h.getAttribute("instance");
            try {
                if (q) {
                    var d = LEAP.getLoadedModule(q);
                    var n = null;
                    if (d) {
                        var o = d[p];
                        if (o) {
                            try {
                                n = o.call(d, r);
                            } catch (m) {
                                if (isdebug) {
                                    throw m;
                                }
                            } finally {
                                d = o = null;
                            }
                        }
                        d = null;
                    }
                }
            } finally {
                h = null;
            }
        }
    };
    LEAP.GISM._call = function(j, w) {
        j = LEAP._check(j, LEAP.GISM.d);
        if (j == null) {
            return null;
        }
        try {
            var g = j.getAttribute("flashinited");
            var h = null;
            if (g != null && g == "1") {
                var n = LEAP.ctid(j);
                h = document.getElementById(n);
                if (h) {
                    var m = h.getElementsByTagName("object");
                    if (m && m.length) {
                        h = m[0];
                    }
                    m = null;
                }
                if (h != null && h[w]) {
                    var u = null;
                    if (arguments.length > 2) {
                        u = [];
                        for (var l = 2; l < arguments.length; l++) {
                            var v = arguments[l];
                            if (v != null) {
                                var q = typeof(v);
                                if (q != "number" && q != "string") {
                                    u.add(JSON.stringify(v));
                                } else {
                                    u.add(v);
                                }
                            } else {
                                u.add(null);
                            }
                        }
                    }
                    var o = null;
                    try {
                        if (u != null) {
                            o = h[w].apply(h, u);
                        } else {
                            o = h[w].apply(h);
                        }
                    } catch (x) {}
                    if (o != null) {
                        var d = o;
                        try {
                            d = JSON.parse(unescape(o));
                        } catch (p) {}
                        return d;
                    }
                }
            }
        } finally {
            h = j = null;
        }
        return null;
    };
    LEAP.GISM.init = function() {
        ElementEventManager.addManagedEventType(LEAP.GISM.d, "GIS_initComplete");
        ElementEventManager.addManagedEventType(LEAP.GISM.d, "GIS_drawShapeComplete");
    };
    LEAP.GISM.init();

    function _LEAPUnload() {
        try {
            if (leapflash) {
                leapflash.fp = null;
                leapflash = null;
            }
            var r = PageObjectModel.___allObjects.keys;
            for (var q in r) {
                var m = PageObjectModel.___allObjects.getvalue(q);
                if (m && m.dispose) {
                    try {
                        m.dispose();
                        m = null;
                    } catch (u) {}
                }
            }
            var o = LEAP.getElement("[__iuem=1]");
            if (!o) {
                o = [];
            }
            o.push(window);
            o.push(document);
            o.push(document.body);
            if (o) {
                var d = o.length;
                for (var g = 0; g < d; g++) {
                    var p = o[g];
                    if (p.events) {
                        p.events = null;
                    }
                    for (var q in p) {
                        if (q.indexOf("on") == 0 && p[q] && typeof(p[q]) == "function") {
                            try {
                                try {
                                    p.removeEventListener(q.charAt(2).toLowerCase() + q.substr(3), p[q]);
                                } catch (h) {}
                                p[q] = null;
                            } catch (h) {}
                        }
                    }
                    p = null;
                }
                o.clear();
                o = null;
            }
            for (var q in UIEventManager) {
                UIEventManager[q] = null;
            }
            for (var q in DelegateUIEventManager) {
                DelegateUIEventManager[q] = null;
            }
            for (var q in LEAP) {
                var n = LEAP[q];
                if (n && typeof(n) == "object") {
                    for (var j in n) {
                        try {
                            n[j] = null;
                        } catch (h) {}
                    }
                }
                n = LEAP[q] = null;
            }
            LEAP = null;
            PageObjectModel.___allObjects = null;
            PageObjectModel = null;
        } catch (u) {}
    }
    if (window.attachEvent) {
        window.attachEvent("onunload", _LEAPUnload);
    } else {
        window.addEventListener("unload", _LEAPUnload);
    };

    return { 'leap': LEAP };

});